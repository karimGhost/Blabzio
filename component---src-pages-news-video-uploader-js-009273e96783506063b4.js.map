{"version":3,"file":"component---src-pages-news-video-uploader-js-009273e96783506063b4.js","mappings":"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","sources":["webpack://blabzio/./src/pages/news/AudioRecorder.js","webpack://blabzio/./src/pages/news/VideoRecorder.js","webpack://blabzio/./src/pages/news/VideoUploader.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nconst AudioRecorder = () => {\n    const [permission, setPermission] = useState(false);\n    const [stream, setStream] = useState(null);\n\n    const getMicrophonePermission = async () => {\n        if (\"MediaRecorder\" in window) {\n            try {\n                const streamData = await navigator.mediaDevices.getUserMedia({\n                    audio: true,\n                    video: false,\n                });\n                setPermission(true);\n                setStream(streamData);\n            } catch (err) {\n                alert(err.message);\n            }\n        } else {\n            alert(\"The MediaRecorder API is not supported in your browser.\");\n        }\n    };\n    return (\n        <div>\n            <h2>Audio Recorder</h2>\n            <main>\n                <div className=\"audio-controls\">\n                    {!permission ? (\n                        <button onClick={getMicrophonePermission} type=\"button\">\n                            Get Microphone\n                        </button>\n                    ): null}\n                    {permission ? (\n                        <button type=\"button\">\n                            Record\n                        </button>\n                    ): null}\n                </div>\n            </main>\n        </div>\n    );\n};\nexport default AudioRecorder;\n","import React, { useEffect, useState, useRef } from \"react\";\n\nconst VideoRecorder = () => {\n    const mimeType = \"video/webm\";\n    \nconst [permission, setPermission] = useState(false);\nconst mediaRecorder = useRef(null);\nconst liveVideoFeed = useRef(null);\nconst [recordingStatus, setRecordingStatus] = useState(\"inactive\");\nconst [stream, setStream] = useState(null);\nconst [videoChunks, setVideoChunks] = useState([]);\nconst [recordedVideo, setRecordedVideo] = useState(null);\n  \nconst [currentCamera, setCurrentCamera] = useState('front');\n\nconst switchCamera = async () => {\n    const newCamera = currentCamera === 'front' ? 'back' : 'front';\n    setCurrentCamera(newCamera);\n\n    try {\n        const newStream = await navigator.mediaDevices.getUserMedia({\n            video: {\n                facingMode: newCamera,\n            },\n        });\n        // Update the video track of the existing combinedStream\n        const newVideoTrack = newStream.getVideoTracks()[0];\n        const existingAudioTracks = stream.getAudioTracks();\n        const combinedStream = new MediaStream([newVideoTrack, ...existingAudioTracks]);\n        setStream(combinedStream);\n    } catch (err) {\n        console.error('Error switching camera:', err);\n    }\n};\n\n    \nconst getCameraPermission = async () => {\n        setRecordedVideo(null);\n        if (\"MediaRecorder\" in window) {\n            try {\n                const videoConstraints = {\n                    audio: false,\n                    video: true,\n                };\n                const audioConstraints = { audio: true };\n                // create audio and video streams separately\n                const audioStream = await navigator.mediaDevices.getUserMedia(\n                    audioConstraints\n                );\n                const videoStream = await navigator.mediaDevices.getUserMedia(\n                    videoConstraints\n                );\n                setPermission(true);\n                // combine both audio and video streams\n                const combinedStream = new MediaStream([\n                    ...videoStream.getVideoTracks(),\n                    ...audioStream.getAudioTracks(),\n                ]);\n                setStream(combinedStream);\n            } catch (err) {\n                alert(err.message);\n            }\n        } else {\n            alert(\"The MediaRecorder API is not supported in your browser.\");\n        }\n    };\n\n    useEffect(() => {\n        if (permission && liveVideoFeed.current && stream) {\n            liveVideoFeed.current.srcObject = stream;\n        }\n    }, [permission, stream]);\n\nconst startRecording = async () => {\n    setRecordingStatus(\"recording\");\n    const media = new MediaRecorder(stream, { mimeType });\n    mediaRecorder.current = media;\n    mediaRecorder.current.start();\n    let localVideoChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n        if (typeof event.data === \"undefined\") return;\n        if (event.data.size === 0) return;\n        localVideoChunks.push(event.data);\n    };\n    setVideoChunks(localVideoChunks);\n};\n\nconst stopRecording = () => {\n    setPermission(false);\n    setRecordingStatus(\"inactive\");\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n        const videoBlob = new Blob(videoChunks, { type: mimeType });\n        const videoUrl = URL.createObjectURL(videoBlob);\n        setRecordedVideo(videoUrl);\n        setVideoChunks([]);\n    };\n};\n    \n    return (\n        <div>\n    <h2>Audio Recorder</h2>\n    <main>\n        <div className=\"video-controls\">\n            {!permission ? (\n            <button onClick={getCameraPermission} type=\"button\">\n                Get video\n            </button>\n            ) : null}\n            \n        </div>\n\n                {permission && liveVideoFeed ? (\n    <div style={{position:'relative' }}  className=\"video-player\">\n        {  recordingStatus === 'recording' &&  <span style={{color:'red'}} > <ul><li style={{color:'red', position:'absolute',zIndex:'20'}} className='recordmode'>{recordingStatus}</li></ul></span>}\n\n    \n    \n    <video  className='live-player' ref={liveVideoFeed} autoPlay playsInline>\n    \n    \n    </video>\n    {permission && recordingStatus === \"inactive\" ? (\n            <button style={{zIndex:'20', position:'absolute', bottom:'0', color:'red' ,borderRadius:'50%',width:'1.5rem',height:'1.5rem', background:'transparent',border:'2px solid green'}} onClick={startRecording} type=\"button\">\n               <i style={{ width:'1.2rem', height:'1.2rem',padding:'4px',background:'green',borderRadius:'50%'}}> start </i>\n            </button>\n            ) : null}\n            {recordingStatus === \"recording\" ? (\n            <button style={{zIndex:'20', position:'absolute', bottom:'0', color:'red' ,borderRadius:'50%',width:'1.5rem',height:'1.5rem', background:'transparent',border:'2px solid red'}} onClick={stopRecording} type=\"button\">\n                <i style={{ width:'1.2rem', height:'1.2rem',padding:'4px',background:'green',borderRadius:'50%'}}>    Stop Recording </i>\n            </button>\n            ) : null}\n{ recordingStatus === \"inactive\"  && <button style={{position:'absolute',zIndex:'20', top:'0', right:'0'}} type='button' onClick={switchCamera}> switchcam </button> }\n    </div>\n) : null}\n                    \n                { !permission && recordedVideo ? (\n        <div className=\"video-player\">\n            <video className='recorded-player' src={recordedVideo} controls autoPlay></video>\n            <a download href={recordedVideo}>\n                Download Recording\n            </a>\n        </div>\n        ) : null}\n    </main>\n</div>\n\n    );\n};\nexport default VideoRecorder;\n","import React, { useState, useRef } from \"react\";\nimport VideoRecorder from \"./VideoRecorder\";\nimport AudioRecorder from \"./AudioRecorder\";\n\nconst VideoUploader = () => {\n    let [recordOption, setRecordOption] = useState(\"video\");\n    const toggleRecordOption = (type) => {\n        return () => {\n            setRecordOption(type);\n        };\n    };\n\n\n    \n    return (\n        <div className='vrecorderbod'>\n            <h1>React Media Recorder</h1>\n            <div className=\"button-flex\">\n                <button onClick={toggleRecordOption(\"video\")}>\n                  Record Video\n                </button>\n                <button onClick={toggleRecordOption(\"audio\")}>\n                  Record Audio\n                </button>\n            </div>\n            <div>\n                {recordOption === \"video\" ? <VideoRecorder /> : <AudioRecorder />}\n            </div>\n        </div>\n    );\n};\nexport default VideoUploader;\n"],"names":["AudioRecorder","permission","setPermission","useState","stream","setStream","React","className","onClick","async","window","streamData","navigator","mediaDevices","getUserMedia","audio","video","err","alert","message","type","VideoRecorder","mimeType","mediaRecorder","useRef","liveVideoFeed","recordingStatus","setRecordingStatus","videoChunks","setVideoChunks","recordedVideo","setRecordedVideo","currentCamera","setCurrentCamera","useEffect","current","srcObject","videoConstraints","audioConstraints","audioStream","videoStream","combinedStream","MediaStream","concat","_toConsumableArray","getVideoTracks","getAudioTracks","style","position","color","zIndex","ref","autoPlay","playsInline","bottom","borderRadius","width","height","background","border","media","MediaRecorder","start","localVideoChunks","ondataavailable","event","data","size","push","padding","stopRecording","stop","onstop","videoBlob","Blob","videoUrl","URL","createObjectURL","top","right","newCamera","newVideoTrack","facingMode","existingAudioTracks","console","error","src","controls","download","href","VideoUploader","recordOption","setRecordOption","toggleRecordOption"],"sourceRoot":""}