{"version":3,"file":"component---src-pages-news-video-recorder-js-3eff860aad6670ef5c54.js","mappings":"uIA2GA,UAzGsBA,KAClB,MAAMC,EAAW,cAEf,EAACC,EAAW,EAACC,IAAiBC,EAAAA,EAAAA,WAAS,GACvCC,GAAgBC,EAAAA,EAAAA,QAAO,MACvBC,GAAgBD,EAAAA,EAAAA,QAAO,OACvB,EAACE,EAAgB,EAACC,IAAsBL,EAAAA,EAAAA,UAAS,aACjD,EAACM,EAAO,EAACC,IAAaP,EAAAA,EAAAA,UAAS,OAC/B,EAACQ,EAAY,EAACC,IAAkBT,EAAAA,EAAAA,UAAS,KACzC,EAACU,EAAc,EAACC,IAAoBX,EAAAA,EAAAA,UAAS,MA8D/C,OACIY,EAAAA,cAAA,WACJA,EAAAA,cAAA,UAAI,kBACJA,EAAAA,cAAA,YACIA,EAAAA,cAAA,OAAKC,UAAU,kBACTf,EAIE,KAHJc,EAAAA,cAAA,UAAQE,QAjEQC,UAExB,GADAJ,EAAiB,MACb,kBAAmBK,OACnB,IACI,MAAMC,EAAmB,CACrBC,OAAO,EACPC,OAAO,GAELC,EAAmB,CAAEF,OAAO,GAE5BG,QAAoBC,UAAUC,aAAaC,aAC7CJ,GAEEK,QAAoBH,UAAUC,aAAaC,aAC7CP,GAEJlB,GAAc,GAEd,MAAM2B,EAAiB,IAAIC,YAAY,GAADC,QAAAC,EAAAA,EAAAA,GAC/BJ,EAAYK,mBAAgBD,EAAAA,EAAAA,GAC5BR,EAAYU,oBAEnBxB,EAAUmB,GAEVvB,EAAc6B,QAAQC,UAAYR,CACtC,CAAE,MAAOS,GACLC,MAAMD,EAAIE,QACd,MAEAD,MAAM,0DACV,EAmC8CE,KAAK,UAAS,kBAInDvC,GAAkC,aAApBM,EACfQ,EAAAA,cAAA,UAAQE,QArCGC,UACnBV,EAAmB,aACnB,MAAMiC,EAAQ,IAAIC,cAAcjC,EAAQ,CAAET,aAC1CI,EAAc+B,QAAUM,EACxBrC,EAAc+B,QAAQQ,QACtB,IAAIC,EAAmB,GACvBxC,EAAc+B,QAAQU,gBAAmBC,SACX,IAAfA,EAAMC,MACO,IAApBD,EAAMC,KAAKC,MACfJ,EAAiBK,KAAKH,EAAMC,KAAK,EAErCnC,EAAegC,EAAiB,EA0BSJ,KAAK,UAAS,mBAG3C,KACiB,cAApBjC,EACDQ,EAAAA,cAAA,UAAQE,QA5BEiC,KAClBhD,GAAc,GACdM,EAAmB,YACnBJ,EAAc+B,QAAQgB,OACtB/C,EAAc+B,QAAQiB,OAAS,KAC3B,MAAMC,EAAY,IAAIC,KAAK3C,EAAa,CAAE6B,KAAMxC,IAC1CuD,EAAWC,IAAIC,gBAAgBJ,GACrCvC,EAAiByC,GACjB3C,EAAe,GAAG,CACrB,EAmBuC4B,KAAK,UAAS,kBAG1C,MAEE7B,EACVI,EAAAA,cAAA,OAAKC,UAAU,gBACXD,EAAAA,cAAA,SAAO2C,IAAK/C,EAAagD,UAAQ,IACjC5C,EAAAA,cAAA,KAAG6C,UAAQ,EAACC,KAAMlD,GAAa,uBAI/B,MAEN,C","sources":["webpack://blabzio/./src/pages/news/VideoRecorder.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\n\nconst VideoRecorder = () => {\n    const mimeType = \"video/webm\";\n    \nconst [permission, setPermission] = useState(false);\nconst mediaRecorder = useRef(null);\nconst liveVideoFeed = useRef(null);\nconst [recordingStatus, setRecordingStatus] = useState(\"inactive\");\nconst [stream, setStream] = useState(null);\nconst [videoChunks, setVideoChunks] = useState([]);\nconst [recordedVideo, setRecordedVideo] = useState(null);\n  \n\nconst getCameraPermission = async () => {\n    setRecordedVideo(null);\n    if (\"MediaRecorder\" in window) {\n        try {\n            const videoConstraints = {\n                audio: false,\n                video: true,\n            };\n            const audioConstraints = { audio: true };\n            // create audio and video streams separately\n            const audioStream = await navigator.mediaDevices.getUserMedia(\n                audioConstraints\n            );\n            const videoStream = await navigator.mediaDevices.getUserMedia(\n                videoConstraints\n            );\n            setPermission(true);\n            //combine both audio and video streams\n            const combinedStream = new MediaStream([\n                ...videoStream.getVideoTracks(),\n                ...audioStream.getAudioTracks(),\n            ]);\n            setStream(combinedStream);\n            //set videostream to live feed player\n            liveVideoFeed.current.srcObject = videoStream;\n        } catch (err) {\n            alert(err.message);\n        }\n    } else {\n        alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n};\n\nconst startRecording = async () => {\n    setRecordingStatus(\"recording\");\n    const media = new MediaRecorder(stream, { mimeType });\n    mediaRecorder.current = media;\n    mediaRecorder.current.start();\n    let localVideoChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n        if (typeof event.data === \"undefined\") return;\n        if (event.data.size === 0) return;\n        localVideoChunks.push(event.data);\n    };\n    setVideoChunks(localVideoChunks);\n};\n\nconst stopRecording = () => {\n    setPermission(false);\n    setRecordingStatus(\"inactive\");\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n        const videoBlob = new Blob(videoChunks, { type: mimeType });\n        const videoUrl = URL.createObjectURL(videoBlob);\n        setRecordedVideo(videoUrl);\n        setVideoChunks([]);\n    };\n};\n    \n    return (\n        <div>\n    <h2>Audio Recorder</h2>\n    <main>\n        <div className=\"video-controls\">\n            {!permission ? (\n            <button onClick={getCameraPermission} type=\"button\">\n                Get Microphone\n            </button>\n            ) : null}\n            {permission && recordingStatus === \"inactive\" ? (\n            <button onClick={startRecording} type=\"button\">\n                Start Recording\n            </button>\n            ) : null}\n            {recordingStatus === \"recording\" ? (\n            <button onClick={stopRecording} type=\"button\">\n                Stop Recording\n            </button>\n            ) : null}\n        </div>\n                { videoChunks ? (\n        <div className=\"video-player\">\n            <video src={videoChunks} controls></video>\n            <a download href={videoChunks}>\n                Download Recording\n            </a>\n        </div>\n        ) : null}\n    </main>\n</div>\n\n    );\n};\nexport default VideoRecorder;\n"],"names":["VideoRecorder","mimeType","permission","setPermission","useState","mediaRecorder","useRef","liveVideoFeed","recordingStatus","setRecordingStatus","stream","setStream","videoChunks","setVideoChunks","recordedVideo","setRecordedVideo","React","className","onClick","async","window","videoConstraints","audio","video","audioConstraints","audioStream","navigator","mediaDevices","getUserMedia","videoStream","combinedStream","MediaStream","concat","_toConsumableArray","getVideoTracks","getAudioTracks","current","srcObject","err","alert","message","type","media","MediaRecorder","start","localVideoChunks","ondataavailable","event","data","size","push","stopRecording","stop","onstop","videoBlob","Blob","videoUrl","URL","createObjectURL","src","controls","download","href"],"sourceRoot":""}