{"version":3,"file":"component---src-pages-news-video-uploader-js-8d82b02ed70258f0fa69.js","mappings":"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","sources":["webpack://blabzio/./node_modules/@firebase/storage/dist/index.esm2017.js","webpack://blabzio/./node_modules/@firebase/storage-compat/dist/esm/index.esm2017.js","webpack://blabzio/./src/pages/news/VideoUploader.js","webpack://blabzio/./node_modules/nanoid/index.browser.js"],"sourcesContent":["import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, isNode, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\r\n/**\r\n * Domain name for firebase storage.\r\n */\r\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\r\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\r\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\r\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\r\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\r\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\r\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\r\n/**\r\n * 1 second\r\n */\r\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\r\nclass StorageError extends FirebaseError {\r\n    /**\r\n     * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n     *  added to the end of the message.\r\n     * @param message  - Error message.\r\n     * @param status_ - Corresponding HTTP Status Code\r\n     */\r\n    constructor(code, message, status_ = 0) {\r\n        super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\r\n        this.status_ = status_;\r\n        /**\r\n         * Stores custom error data unique to the `StorageError`.\r\n         */\r\n        this.customData = { serverResponse: null };\r\n        this._baseMessage = this.message;\r\n        // Without this, `instanceof StorageError`, in tests for example,\r\n        // returns false.\r\n        Object.setPrototypeOf(this, StorageError.prototype);\r\n    }\r\n    get status() {\r\n        return this.status_;\r\n    }\r\n    set status(status) {\r\n        this.status_ = status;\r\n    }\r\n    /**\r\n     * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n     */\r\n    _codeEquals(code) {\r\n        return prependCode(code) === this.code;\r\n    }\r\n    /**\r\n     * Optional response message that was added by the server.\r\n     */\r\n    get serverResponse() {\r\n        return this.customData.serverResponse;\r\n    }\r\n    set serverResponse(serverResponse) {\r\n        this.customData.serverResponse = serverResponse;\r\n        if (this.customData.serverResponse) {\r\n            this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\r\n        }\r\n        else {\r\n            this.message = this._baseMessage;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */\r\nvar StorageErrorCode;\r\n(function (StorageErrorCode) {\r\n    // Shared between all platforms\r\n    StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\r\n    StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\r\n    StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\r\n    StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\r\n    StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\r\n    StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\r\n    StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\r\n    StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\r\n    StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\r\n    StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\r\n    StorageErrorCode[\"CANCELED\"] = \"canceled\";\r\n    // JS specific\r\n    StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\r\n    StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\r\n    StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\r\n    StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\r\n    StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\r\n    StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\r\n    StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\r\n    StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\r\n    StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\r\n    StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\r\n    StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\r\n    StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\r\n    StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\r\n})(StorageErrorCode || (StorageErrorCode = {}));\r\nfunction prependCode(code) {\r\n    return 'storage/' + code;\r\n}\r\nfunction unknown() {\r\n    const message = 'An unknown error occurred, please check the error payload for ' +\r\n        'server response.';\r\n    return new StorageError(StorageErrorCode.UNKNOWN, message);\r\n}\r\nfunction objectNotFound(path) {\r\n    return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\r\n}\r\nfunction quotaExceeded(bucket) {\r\n    return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" +\r\n        bucket +\r\n        \"' exceeded, please view quota on \" +\r\n        'https://firebase.google.com/pricing/.');\r\n}\r\nfunction unauthenticated() {\r\n    const message = 'User is not authenticated, please authenticate using Firebase ' +\r\n        'Authentication and try again.';\r\n    return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\r\n}\r\nfunction unauthorizedApp() {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\r\n}\r\nfunction unauthorized(path) {\r\n    return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\r\n}\r\nfunction retryLimitExceeded() {\r\n    return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\r\n}\r\nfunction canceled() {\r\n    return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\r\n}\r\nfunction invalidUrl(url) {\r\n    return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\r\n}\r\nfunction invalidDefaultBucket(bucket) {\r\n    return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\r\n}\r\nfunction noDefaultBucket() {\r\n    return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' +\r\n        \"found. Did you set the '\" +\r\n        CONFIG_STORAGE_BUCKET_KEY +\r\n        \"' property when initializing the app?\");\r\n}\r\nfunction cannotSliceBlob() {\r\n    return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\r\n}\r\nfunction serverFileWrongSize() {\r\n    return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\r\n}\r\nfunction noDownloadURL() {\r\n    return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\r\n}\r\nfunction missingPolyFill(polyFill) {\r\n    return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction invalidArgument(message) {\r\n    return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\r\n}\r\nfunction appDeleted() {\r\n    return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\r\n}\r\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\r\nfunction invalidRootOperation(name) {\r\n    return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" +\r\n        name +\r\n        \"' cannot be performed on a root reference, create a non-root \" +\r\n        \"reference using child, such as .child('file.png').\");\r\n}\r\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\r\nfunction invalidFormat(format, message) {\r\n    return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\r\n}\r\n/**\r\n * @param message - A message describing the internal error.\r\n */\r\nfunction internalError(message) {\r\n    throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\r\nclass Location {\r\n    constructor(bucket, path) {\r\n        this.bucket = bucket;\r\n        this.path_ = path;\r\n    }\r\n    get path() {\r\n        return this.path_;\r\n    }\r\n    get isRoot() {\r\n        return this.path.length === 0;\r\n    }\r\n    fullServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\r\n    }\r\n    bucketOnlyServerUrl() {\r\n        const encode = encodeURIComponent;\r\n        return '/b/' + encode(this.bucket) + '/o';\r\n    }\r\n    static makeFromBucketSpec(bucketString, host) {\r\n        let bucketLocation;\r\n        try {\r\n            bucketLocation = Location.makeFromUrl(bucketString, host);\r\n        }\r\n        catch (e) {\r\n            // Not valid URL, use as-is. This lets you put bare bucket names in\r\n            // config.\r\n            return new Location(bucketString, '');\r\n        }\r\n        if (bucketLocation.path === '') {\r\n            return bucketLocation;\r\n        }\r\n        else {\r\n            throw invalidDefaultBucket(bucketString);\r\n        }\r\n    }\r\n    static makeFromUrl(url, host) {\r\n        let location = null;\r\n        const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\r\n        function gsModify(loc) {\r\n            if (loc.path.charAt(loc.path.length - 1) === '/') {\r\n                loc.path_ = loc.path_.slice(0, -1);\r\n            }\r\n        }\r\n        const gsPath = '(/(.*))?$';\r\n        const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\r\n        const gsIndices = { bucket: 1, path: 3 };\r\n        function httpModify(loc) {\r\n            loc.path_ = decodeURIComponent(loc.path);\r\n        }\r\n        const version = 'v[A-Za-z0-9_]+';\r\n        const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\r\n        const firebaseStoragePath = '(/([^?#]*).*)?$';\r\n        const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\r\n        const firebaseStorageIndices = { bucket: 1, path: 3 };\r\n        const cloudStorageHost = host === DEFAULT_HOST\r\n            ? '(?:storage.googleapis.com|storage.cloud.google.com)'\r\n            : host;\r\n        const cloudStoragePath = '([^?#]*)';\r\n        const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\r\n        const cloudStorageIndices = { bucket: 1, path: 2 };\r\n        const groups = [\r\n            { regex: gsRegex, indices: gsIndices, postModify: gsModify },\r\n            {\r\n                regex: firebaseStorageRegExp,\r\n                indices: firebaseStorageIndices,\r\n                postModify: httpModify\r\n            },\r\n            {\r\n                regex: cloudStorageRegExp,\r\n                indices: cloudStorageIndices,\r\n                postModify: httpModify\r\n            }\r\n        ];\r\n        for (let i = 0; i < groups.length; i++) {\r\n            const group = groups[i];\r\n            const captures = group.regex.exec(url);\r\n            if (captures) {\r\n                const bucketValue = captures[group.indices.bucket];\r\n                let pathValue = captures[group.indices.path];\r\n                if (!pathValue) {\r\n                    pathValue = '';\r\n                }\r\n                location = new Location(bucketValue, pathValue);\r\n                group.postModify(location);\r\n                break;\r\n            }\r\n        }\r\n        if (location == null) {\r\n            throw invalidUrl(url);\r\n        }\r\n        return location;\r\n    }\r\n}\n\n/**\r\n * A request whose promise always fails.\r\n */\r\nclass FailRequest {\r\n    constructor(error) {\r\n        this.promise_ = Promise.reject(error);\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(_appDelete = false) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\r\nfunction start(doRequest, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nbackoffCompleteCb, timeout) {\r\n    // TODO(andysoto): make this code cleaner (probably refactor into an actual\r\n    // type instead of a bunch of functions with state shared in the closure)\r\n    let waitSeconds = 1;\r\n    // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\r\n    // TODO: find a way to exclude Node type definition for storage because storage only works in browser\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let retryTimeoutId = null;\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let globalTimeoutId = null;\r\n    let hitTimeout = false;\r\n    let cancelState = 0;\r\n    function canceled() {\r\n        return cancelState === 2;\r\n    }\r\n    let triggeredCallback = false;\r\n    function triggerCallback(...args) {\r\n        if (!triggeredCallback) {\r\n            triggeredCallback = true;\r\n            backoffCompleteCb.apply(null, args);\r\n        }\r\n    }\r\n    function callWithDelay(millis) {\r\n        retryTimeoutId = setTimeout(() => {\r\n            retryTimeoutId = null;\r\n            doRequest(responseHandler, canceled());\r\n        }, millis);\r\n    }\r\n    function clearGlobalTimeout() {\r\n        if (globalTimeoutId) {\r\n            clearTimeout(globalTimeoutId);\r\n        }\r\n    }\r\n    function responseHandler(success, ...args) {\r\n        if (triggeredCallback) {\r\n            clearGlobalTimeout();\r\n            return;\r\n        }\r\n        if (success) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        const mustStop = canceled() || hitTimeout;\r\n        if (mustStop) {\r\n            clearGlobalTimeout();\r\n            triggerCallback.call(null, success, ...args);\r\n            return;\r\n        }\r\n        if (waitSeconds < 64) {\r\n            /* TODO(andysoto): don't back off so quickly if we know we're offline. */\r\n            waitSeconds *= 2;\r\n        }\r\n        let waitMillis;\r\n        if (cancelState === 1) {\r\n            cancelState = 2;\r\n            waitMillis = 0;\r\n        }\r\n        else {\r\n            waitMillis = (waitSeconds + Math.random()) * 1000;\r\n        }\r\n        callWithDelay(waitMillis);\r\n    }\r\n    let stopped = false;\r\n    function stop(wasTimeout) {\r\n        if (stopped) {\r\n            return;\r\n        }\r\n        stopped = true;\r\n        clearGlobalTimeout();\r\n        if (triggeredCallback) {\r\n            return;\r\n        }\r\n        if (retryTimeoutId !== null) {\r\n            if (!wasTimeout) {\r\n                cancelState = 2;\r\n            }\r\n            clearTimeout(retryTimeoutId);\r\n            callWithDelay(0);\r\n        }\r\n        else {\r\n            if (!wasTimeout) {\r\n                cancelState = 1;\r\n            }\r\n        }\r\n    }\r\n    callWithDelay(0);\r\n    globalTimeoutId = setTimeout(() => {\r\n        hitTimeout = true;\r\n        stop(true);\r\n    }, timeout);\r\n    return stop;\r\n}\r\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\r\nfunction stop(id) {\r\n    id(false);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isJustDef(p) {\r\n    return p !== void 0;\r\n}\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction isFunction(p) {\r\n    return typeof p === 'function';\r\n}\r\nfunction isNonArrayObject(p) {\r\n    return typeof p === 'object' && !Array.isArray(p);\r\n}\r\nfunction isString(p) {\r\n    return typeof p === 'string' || p instanceof String;\r\n}\r\nfunction isNativeBlob(p) {\r\n    return isNativeBlobDefined() && p instanceof Blob;\r\n}\r\nfunction isNativeBlobDefined() {\r\n    // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\r\n    // PR: https://github.com/node-fetch/node-fetch/pull/1664\r\n    return typeof Blob !== 'undefined' && !isNode();\r\n}\r\nfunction validateNumber(argument, minValue, maxValue, value) {\r\n    if (value < minValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\r\n    }\r\n    if (value > maxValue) {\r\n        throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction makeUrl(urlPart, host, protocol) {\r\n    let origin = host;\r\n    if (protocol == null) {\r\n        origin = `https://${host}`;\r\n    }\r\n    return `${protocol}://${origin}/v0${urlPart}`;\r\n}\r\nfunction makeQueryString(params) {\r\n    const encode = encodeURIComponent;\r\n    let queryPart = '?';\r\n    for (const key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n            const nextPart = encode(key) + '=' + encode(params[key]);\r\n            queryPart = queryPart + nextPart + '&';\r\n        }\r\n    }\r\n    // Chop off the extra '&' or '?' on the end\r\n    queryPart = queryPart.slice(0, -1);\r\n    return queryPart;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\r\n    ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\r\n})(ErrorCode || (ErrorCode = {}));\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\r\nfunction isRetryStatusCode(status, additionalRetryCodes) {\r\n    // The codes for which to retry came from this page:\r\n    // https://cloud.google.com/storage/docs/exponential-backoff\r\n    const isFiveHundredCode = status >= 500 && status < 600;\r\n    const extraRetryCodes = [\r\n        // Request Timeout: web server didn't receive full request in time.\r\n        408,\r\n        // Too Many Requests: you're getting rate-limited, basically.\r\n        429\r\n    ];\r\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\r\n    const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\r\n    return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\r\nclass NetworkRequest {\r\n    constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_, retry = true) {\r\n        this.url_ = url_;\r\n        this.method_ = method_;\r\n        this.headers_ = headers_;\r\n        this.body_ = body_;\r\n        this.successCodes_ = successCodes_;\r\n        this.additionalRetryCodes_ = additionalRetryCodes_;\r\n        this.callback_ = callback_;\r\n        this.errorCallback_ = errorCallback_;\r\n        this.timeout_ = timeout_;\r\n        this.progressCallback_ = progressCallback_;\r\n        this.connectionFactory_ = connectionFactory_;\r\n        this.retry = retry;\r\n        this.pendingConnection_ = null;\r\n        this.backoffId_ = null;\r\n        this.canceled_ = false;\r\n        this.appDelete_ = false;\r\n        this.promise_ = new Promise((resolve, reject) => {\r\n            this.resolve_ = resolve;\r\n            this.reject_ = reject;\r\n            this.start_();\r\n        });\r\n    }\r\n    /**\r\n     * Actually starts the retry loop.\r\n     */\r\n    start_() {\r\n        const doTheRequest = (backoffCallback, canceled) => {\r\n            if (canceled) {\r\n                backoffCallback(false, new RequestEndStatus(false, null, true));\r\n                return;\r\n            }\r\n            const connection = this.connectionFactory_();\r\n            this.pendingConnection_ = connection;\r\n            const progressListener = progressEvent => {\r\n                const loaded = progressEvent.loaded;\r\n                const total = progressEvent.lengthComputable ? progressEvent.total : -1;\r\n                if (this.progressCallback_ !== null) {\r\n                    this.progressCallback_(loaded, total);\r\n                }\r\n            };\r\n            if (this.progressCallback_ !== null) {\r\n                connection.addUploadProgressListener(progressListener);\r\n            }\r\n            // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            connection\r\n                .send(this.url_, this.method_, this.body_, this.headers_)\r\n                .then(() => {\r\n                if (this.progressCallback_ !== null) {\r\n                    connection.removeUploadProgressListener(progressListener);\r\n                }\r\n                this.pendingConnection_ = null;\r\n                const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\r\n                const status = connection.getStatus();\r\n                if (!hitServer ||\r\n                    (isRetryStatusCode(status, this.additionalRetryCodes_) &&\r\n                        this.retry)) {\r\n                    const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\r\n                    backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\r\n                    return;\r\n                }\r\n                const successCode = this.successCodes_.indexOf(status) !== -1;\r\n                backoffCallback(true, new RequestEndStatus(successCode, connection));\r\n            });\r\n        };\r\n        /**\r\n         * @param requestWentThrough - True if the request eventually went\r\n         *     through, false if it hit the retry limit or was canceled.\r\n         */\r\n        const backoffDone = (requestWentThrough, status) => {\r\n            const resolve = this.resolve_;\r\n            const reject = this.reject_;\r\n            const connection = status.connection;\r\n            if (status.wasSuccessCode) {\r\n                try {\r\n                    const result = this.callback_(connection, connection.getResponse());\r\n                    if (isJustDef(result)) {\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n            else {\r\n                if (connection !== null) {\r\n                    const err = unknown();\r\n                    err.serverResponse = connection.getErrorText();\r\n                    if (this.errorCallback_) {\r\n                        reject(this.errorCallback_(connection, err));\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                }\r\n                else {\r\n                    if (status.canceled) {\r\n                        const err = this.appDelete_ ? appDeleted() : canceled();\r\n                        reject(err);\r\n                    }\r\n                    else {\r\n                        const err = retryLimitExceeded();\r\n                        reject(err);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (this.canceled_) {\r\n            backoffDone(false, new RequestEndStatus(false, null, true));\r\n        }\r\n        else {\r\n            this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getPromise() {\r\n        return this.promise_;\r\n    }\r\n    /** @inheritDoc */\r\n    cancel(appDelete) {\r\n        this.canceled_ = true;\r\n        this.appDelete_ = appDelete || false;\r\n        if (this.backoffId_ !== null) {\r\n            stop(this.backoffId_);\r\n        }\r\n        if (this.pendingConnection_ !== null) {\r\n            this.pendingConnection_.abort();\r\n        }\r\n    }\r\n}\r\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\r\nclass RequestEndStatus {\r\n    constructor(wasSuccessCode, connection, canceled) {\r\n        this.wasSuccessCode = wasSuccessCode;\r\n        this.connection = connection;\r\n        this.canceled = !!canceled;\r\n    }\r\n}\r\nfunction addAuthHeader_(headers, authToken) {\r\n    if (authToken !== null && authToken.length > 0) {\r\n        headers['Authorization'] = 'Firebase ' + authToken;\r\n    }\r\n}\r\nfunction addVersionHeader_(headers, firebaseVersion) {\r\n    headers['X-Firebase-Storage-Version'] =\r\n        'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\r\n}\r\nfunction addGmpidHeader_(headers, appId) {\r\n    if (appId) {\r\n        headers['X-Firebase-GMPID'] = appId;\r\n    }\r\n}\r\nfunction addAppCheckHeader_(headers, appCheckToken) {\r\n    if (appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = appCheckToken;\r\n    }\r\n}\r\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion, retry = true) {\r\n    const queryPart = makeQueryString(requestInfo.urlParams);\r\n    const url = requestInfo.url + queryPart;\r\n    const headers = Object.assign({}, requestInfo.headers);\r\n    addGmpidHeader_(headers, appId);\r\n    addAuthHeader_(headers, authToken);\r\n    addVersionHeader_(headers, firebaseVersion);\r\n    addAppCheckHeader_(headers, appCheckToken);\r\n    return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getBlobBuilder() {\r\n    if (typeof BlobBuilder !== 'undefined') {\r\n        return BlobBuilder;\r\n    }\r\n    else if (typeof WebKitBlobBuilder !== 'undefined') {\r\n        return WebKitBlobBuilder;\r\n    }\r\n    else {\r\n        return undefined;\r\n    }\r\n}\r\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\r\nfunction getBlob$1(...args) {\r\n    const BlobBuilder = getBlobBuilder();\r\n    if (BlobBuilder !== undefined) {\r\n        const bb = new BlobBuilder();\r\n        for (let i = 0; i < args.length; i++) {\r\n            bb.append(args[i]);\r\n        }\r\n        return bb.getBlob();\r\n    }\r\n    else {\r\n        if (isNativeBlobDefined()) {\r\n            return new Blob(args);\r\n        }\r\n        else {\r\n            throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\r\n        }\r\n    }\r\n}\r\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\r\nfunction sliceBlob(blob, start, end) {\r\n    if (blob.webkitSlice) {\r\n        return blob.webkitSlice(start, end);\r\n    }\r\n    else if (blob.mozSlice) {\r\n        return blob.mozSlice(start, end);\r\n    }\r\n    else if (blob.slice) {\r\n        return blob.slice(start, end);\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Converts a Base64 encoded string to a binary string. */\r\nfunction decodeBase64(encoded) {\r\n    if (typeof atob === 'undefined') {\r\n        throw missingPolyFill('base-64');\r\n    }\r\n    return atob(encoded);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\r\nconst StringFormat = {\r\n    /**\r\n     * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n     * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n     * sequence.\r\n     * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n     * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n     */\r\n    RAW: 'raw',\r\n    /**\r\n     * Indicates the string should be interpreted as base64-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64: 'base64',\r\n    /**\r\n     * Indicates the string should be interpreted as base64url-encoded data.\r\n     * Padding characters (trailing '='s) are optional.\r\n     * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n     * ad 69 8e fb e1 3a b7 bf eb 97\r\n     */\r\n    BASE64URL: 'base64url',\r\n    /**\r\n     * Indicates the string is a data URL, such as one obtained from\r\n     * canvas.toDataURL().\r\n     * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n     * becomes the byte sequence\r\n     * 69 a6 9a\r\n     * (the content-type \"application/octet-stream\" is also applied, but can\r\n     * be overridden in the metadata object).\r\n     */\r\n    DATA_URL: 'data_url'\r\n};\r\nclass StringData {\r\n    constructor(data, contentType) {\r\n        this.data = data;\r\n        this.contentType = contentType || null;\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction dataFromString(format, stringData) {\r\n    switch (format) {\r\n        case StringFormat.RAW:\r\n            return new StringData(utf8Bytes_(stringData));\r\n        case StringFormat.BASE64:\r\n        case StringFormat.BASE64URL:\r\n            return new StringData(base64Bytes_(format, stringData));\r\n        case StringFormat.DATA_URL:\r\n            return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\r\n        // do nothing\r\n    }\r\n    // assert(false);\r\n    throw unknown();\r\n}\r\nfunction utf8Bytes_(value) {\r\n    const b = [];\r\n    for (let i = 0; i < value.length; i++) {\r\n        let c = value.charCodeAt(i);\r\n        if (c <= 127) {\r\n            b.push(c);\r\n        }\r\n        else {\r\n            if (c <= 2047) {\r\n                b.push(192 | (c >> 6), 128 | (c & 63));\r\n            }\r\n            else {\r\n                if ((c & 64512) === 55296) {\r\n                    // The start of a surrogate pair.\r\n                    const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\r\n                    if (!valid) {\r\n                        // The second surrogate wasn't there.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        const hi = c;\r\n                        const lo = value.charCodeAt(++i);\r\n                        c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\r\n                        b.push(240 | (c >> 18), 128 | ((c >> 12) & 63), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n                else {\r\n                    if ((c & 64512) === 56320) {\r\n                        // Invalid low surrogate.\r\n                        b.push(239, 191, 189);\r\n                    }\r\n                    else {\r\n                        b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Uint8Array(b);\r\n}\r\nfunction percentEncodedBytes_(value) {\r\n    let decoded;\r\n    try {\r\n        decoded = decodeURIComponent(value);\r\n    }\r\n    catch (e) {\r\n        throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\r\n    }\r\n    return utf8Bytes_(decoded);\r\n}\r\nfunction base64Bytes_(format, value) {\r\n    switch (format) {\r\n        case StringFormat.BASE64: {\r\n            const hasMinus = value.indexOf('-') !== -1;\r\n            const hasUnder = value.indexOf('_') !== -1;\r\n            if (hasMinus || hasUnder) {\r\n                const invalidChar = hasMinus ? '-' : '_';\r\n                throw invalidFormat(format, \"Invalid character '\" +\r\n                    invalidChar +\r\n                    \"' found: is it base64url encoded?\");\r\n            }\r\n            break;\r\n        }\r\n        case StringFormat.BASE64URL: {\r\n            const hasPlus = value.indexOf('+') !== -1;\r\n            const hasSlash = value.indexOf('/') !== -1;\r\n            if (hasPlus || hasSlash) {\r\n                const invalidChar = hasPlus ? '+' : '/';\r\n                throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\r\n            }\r\n            value = value.replace(/-/g, '+').replace(/_/g, '/');\r\n            break;\r\n        }\r\n        // do nothing\r\n    }\r\n    let bytes;\r\n    try {\r\n        bytes = decodeBase64(value);\r\n    }\r\n    catch (e) {\r\n        if (e.message.includes('polyfill')) {\r\n            throw e;\r\n        }\r\n        throw invalidFormat(format, 'Invalid character found');\r\n    }\r\n    const array = new Uint8Array(bytes.length);\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        array[i] = bytes.charCodeAt(i);\r\n    }\r\n    return array;\r\n}\r\nclass DataURLParts {\r\n    constructor(dataURL) {\r\n        this.base64 = false;\r\n        this.contentType = null;\r\n        const matches = dataURL.match(/^data:([^,]+)?,/);\r\n        if (matches === null) {\r\n            throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\r\n        }\r\n        const middle = matches[1] || null;\r\n        if (middle != null) {\r\n            this.base64 = endsWith(middle, ';base64');\r\n            this.contentType = this.base64\r\n                ? middle.substring(0, middle.length - ';base64'.length)\r\n                : middle;\r\n        }\r\n        this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\r\n    }\r\n}\r\nfunction dataURLBytes_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    if (parts.base64) {\r\n        return base64Bytes_(StringFormat.BASE64, parts.rest);\r\n    }\r\n    else {\r\n        return percentEncodedBytes_(parts.rest);\r\n    }\r\n}\r\nfunction dataURLContentType_(dataUrl) {\r\n    const parts = new DataURLParts(dataUrl);\r\n    return parts.contentType;\r\n}\r\nfunction endsWith(s, end) {\r\n    const longEnough = s.length >= end.length;\r\n    if (!longEnough) {\r\n        return false;\r\n    }\r\n    return s.substring(s.length - end.length) === end;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\r\nclass FbsBlob {\r\n    constructor(data, elideCopy) {\r\n        let size = 0;\r\n        let blobType = '';\r\n        if (isNativeBlob(data)) {\r\n            this.data_ = data;\r\n            size = data.size;\r\n            blobType = data.type;\r\n        }\r\n        else if (data instanceof ArrayBuffer) {\r\n            if (elideCopy) {\r\n                this.data_ = new Uint8Array(data);\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.byteLength);\r\n                this.data_.set(new Uint8Array(data));\r\n            }\r\n            size = this.data_.length;\r\n        }\r\n        else if (data instanceof Uint8Array) {\r\n            if (elideCopy) {\r\n                this.data_ = data;\r\n            }\r\n            else {\r\n                this.data_ = new Uint8Array(data.length);\r\n                this.data_.set(data);\r\n            }\r\n            size = data.length;\r\n        }\r\n        this.size_ = size;\r\n        this.type_ = blobType;\r\n    }\r\n    size() {\r\n        return this.size_;\r\n    }\r\n    type() {\r\n        return this.type_;\r\n    }\r\n    slice(startByte, endByte) {\r\n        if (isNativeBlob(this.data_)) {\r\n            const realBlob = this.data_;\r\n            const sliced = sliceBlob(realBlob, startByte, endByte);\r\n            if (sliced === null) {\r\n                return null;\r\n            }\r\n            return new FbsBlob(sliced);\r\n        }\r\n        else {\r\n            const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\r\n            return new FbsBlob(slice, true);\r\n        }\r\n    }\r\n    static getBlob(...args) {\r\n        if (isNativeBlobDefined()) {\r\n            const blobby = args.map((val) => {\r\n                if (val instanceof FbsBlob) {\r\n                    return val.data_;\r\n                }\r\n                else {\r\n                    return val;\r\n                }\r\n            });\r\n            return new FbsBlob(getBlob$1.apply(null, blobby));\r\n        }\r\n        else {\r\n            const uint8Arrays = args.map((val) => {\r\n                if (isString(val)) {\r\n                    return dataFromString(StringFormat.RAW, val).data;\r\n                }\r\n                else {\r\n                    // Blobs don't exist, so this has to be a Uint8Array.\r\n                    return val.data_;\r\n                }\r\n            });\r\n            let finalLength = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                finalLength += array.byteLength;\r\n            });\r\n            const merged = new Uint8Array(finalLength);\r\n            let index = 0;\r\n            uint8Arrays.forEach((array) => {\r\n                for (let i = 0; i < array.length; i++) {\r\n                    merged[index++] = array[i];\r\n                }\r\n            });\r\n            return new FbsBlob(merged, true);\r\n        }\r\n    }\r\n    uploadData() {\r\n        return this.data_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\r\nfunction jsonObjectOrNull(s) {\r\n    let obj;\r\n    try {\r\n        obj = JSON.parse(s);\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n    if (isNonArrayObject(obj)) {\r\n        return obj;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\r\n/**\r\n * @return Null if the path is already at the root.\r\n */\r\nfunction parent(path) {\r\n    if (path.length === 0) {\r\n        return null;\r\n    }\r\n    const index = path.lastIndexOf('/');\r\n    if (index === -1) {\r\n        return '';\r\n    }\r\n    const newPath = path.slice(0, index);\r\n    return newPath;\r\n}\r\nfunction child(path, childPath) {\r\n    const canonicalChildPath = childPath\r\n        .split('/')\r\n        .filter(component => component.length > 0)\r\n        .join('/');\r\n    if (path.length === 0) {\r\n        return canonicalChildPath;\r\n    }\r\n    else {\r\n        return path + '/' + canonicalChildPath;\r\n    }\r\n}\r\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\r\nfunction lastComponent(path) {\r\n    const index = path.lastIndexOf('/', path.length - 2);\r\n    if (index === -1) {\r\n        return path;\r\n    }\r\n    else {\r\n        return path.slice(index + 1);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction noXform_(metadata, value) {\r\n    return value;\r\n}\r\nclass Mapping {\r\n    constructor(server, local, writable, xform) {\r\n        this.server = server;\r\n        this.local = local || server;\r\n        this.writable = !!writable;\r\n        this.xform = xform || noXform_;\r\n    }\r\n}\r\nlet mappings_ = null;\r\nfunction xformPath(fullPath) {\r\n    if (!isString(fullPath) || fullPath.length < 2) {\r\n        return fullPath;\r\n    }\r\n    else {\r\n        return lastComponent(fullPath);\r\n    }\r\n}\r\nfunction getMappings() {\r\n    if (mappings_) {\r\n        return mappings_;\r\n    }\r\n    const mappings = [];\r\n    mappings.push(new Mapping('bucket'));\r\n    mappings.push(new Mapping('generation'));\r\n    mappings.push(new Mapping('metageneration'));\r\n    mappings.push(new Mapping('name', 'fullPath', true));\r\n    function mappingsXformPath(_metadata, fullPath) {\r\n        return xformPath(fullPath);\r\n    }\r\n    const nameMapping = new Mapping('name');\r\n    nameMapping.xform = mappingsXformPath;\r\n    mappings.push(nameMapping);\r\n    /**\r\n     * Coerces the second param to a number, if it is defined.\r\n     */\r\n    function xformSize(_metadata, size) {\r\n        if (size !== undefined) {\r\n            return Number(size);\r\n        }\r\n        else {\r\n            return size;\r\n        }\r\n    }\r\n    const sizeMapping = new Mapping('size');\r\n    sizeMapping.xform = xformSize;\r\n    mappings.push(sizeMapping);\r\n    mappings.push(new Mapping('timeCreated'));\r\n    mappings.push(new Mapping('updated'));\r\n    mappings.push(new Mapping('md5Hash', null, true));\r\n    mappings.push(new Mapping('cacheControl', null, true));\r\n    mappings.push(new Mapping('contentDisposition', null, true));\r\n    mappings.push(new Mapping('contentEncoding', null, true));\r\n    mappings.push(new Mapping('contentLanguage', null, true));\r\n    mappings.push(new Mapping('contentType', null, true));\r\n    mappings.push(new Mapping('metadata', 'customMetadata', true));\r\n    mappings_ = mappings;\r\n    return mappings_;\r\n}\r\nfunction addRef(metadata, service) {\r\n    function generateRef() {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const loc = new Location(bucket, path);\r\n        return service._makeStorageReference(loc);\r\n    }\r\n    Object.defineProperty(metadata, 'ref', { get: generateRef });\r\n}\r\nfunction fromResource(service, resource, mappings) {\r\n    const metadata = {};\r\n    metadata['type'] = 'file';\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\r\n    }\r\n    addRef(metadata, service);\r\n    return metadata;\r\n}\r\nfunction fromResourceString(service, resourceString, mappings) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromResource(service, resource, mappings);\r\n}\r\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    if (!isString(obj['downloadTokens'])) {\r\n        // This can happen if objects are uploaded through GCS and retrieved\r\n        // through list, so we don't want to throw an Error.\r\n        return null;\r\n    }\r\n    const tokens = obj['downloadTokens'];\r\n    if (tokens.length === 0) {\r\n        return null;\r\n    }\r\n    const encode = encodeURIComponent;\r\n    const tokensList = tokens.split(',');\r\n    const urls = tokensList.map((token) => {\r\n        const bucket = metadata['bucket'];\r\n        const path = metadata['fullPath'];\r\n        const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\r\n        const base = makeUrl(urlPart, host, protocol);\r\n        const queryString = makeQueryString({\r\n            alt: 'media',\r\n            token\r\n        });\r\n        return base + queryString;\r\n    });\r\n    return urls[0];\r\n}\r\nfunction toResourceString(metadata, mappings) {\r\n    const resource = {};\r\n    const len = mappings.length;\r\n    for (let i = 0; i < len; i++) {\r\n        const mapping = mappings[i];\r\n        if (mapping.writable) {\r\n            resource[mapping.server] = metadata[mapping.local];\r\n        }\r\n    }\r\n    return JSON.stringify(resource);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PREFIXES_KEY = 'prefixes';\r\nconst ITEMS_KEY = 'items';\r\nfunction fromBackendResponse(service, bucket, resource) {\r\n    const listResult = {\r\n        prefixes: [],\r\n        items: [],\r\n        nextPageToken: resource['nextPageToken']\r\n    };\r\n    if (resource[PREFIXES_KEY]) {\r\n        for (const path of resource[PREFIXES_KEY]) {\r\n            const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\r\n            const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\r\n            listResult.prefixes.push(reference);\r\n        }\r\n    }\r\n    if (resource[ITEMS_KEY]) {\r\n        for (const item of resource[ITEMS_KEY]) {\r\n            const reference = service._makeStorageReference(new Location(bucket, item['name']));\r\n            listResult.items.push(reference);\r\n        }\r\n    }\r\n    return listResult;\r\n}\r\nfunction fromResponseString(service, bucket, resourceString) {\r\n    const obj = jsonObjectOrNull(resourceString);\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    const resource = obj;\r\n    return fromBackendResponse(service, bucket, resource);\r\n}\n\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\r\nclass RequestInfo {\r\n    constructor(url, method, \r\n    /**\r\n     * Returns the value with which to resolve the request's promise. Only called\r\n     * if the request is successful. Throw from this function to reject the\r\n     * returned Request's promise with the thrown error.\r\n     * Note: The XhrIo passed to this function may be reused after this callback\r\n     * returns. Do not keep a reference to it in any way.\r\n     */\r\n    handler, timeout) {\r\n        this.url = url;\r\n        this.method = method;\r\n        this.handler = handler;\r\n        this.timeout = timeout;\r\n        this.urlParams = {};\r\n        this.headers = {};\r\n        this.body = null;\r\n        this.errorHandler = null;\r\n        /**\r\n         * Called with the current number of bytes uploaded and total size (-1 if not\r\n         * computable) of the request body (i.e. used to report upload progress).\r\n         */\r\n        this.progressCallback = null;\r\n        this.successCodes = [200];\r\n        this.additionalRetryCodes = [];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\r\nfunction handlerCheck(cndn) {\r\n    if (!cndn) {\r\n        throw unknown();\r\n    }\r\n}\r\nfunction metadataHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return metadata;\r\n    }\r\n    return handler;\r\n}\r\nfunction listHandler(service, bucket) {\r\n    function handler(xhr, text) {\r\n        const listResult = fromResponseString(service, bucket, text);\r\n        handlerCheck(listResult !== null);\r\n        return listResult;\r\n    }\r\n    return handler;\r\n}\r\nfunction downloadUrlHandler(service, mappings) {\r\n    function handler(xhr, text) {\r\n        const metadata = fromResourceString(service, text, mappings);\r\n        handlerCheck(metadata !== null);\r\n        return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\r\n    }\r\n    return handler;\r\n}\r\nfunction sharedErrorHandler(location) {\r\n    function errorHandler(xhr, err) {\r\n        let newErr;\r\n        if (xhr.getStatus() === 401) {\r\n            if (\r\n            // This exact message string is the only consistent part of the\r\n            // server's error response that identifies it as an App Check error.\r\n            xhr.getErrorText().includes('Firebase App Check token is invalid')) {\r\n                newErr = unauthorizedApp();\r\n            }\r\n            else {\r\n                newErr = unauthenticated();\r\n            }\r\n        }\r\n        else {\r\n            if (xhr.getStatus() === 402) {\r\n                newErr = quotaExceeded(location.bucket);\r\n            }\r\n            else {\r\n                if (xhr.getStatus() === 403) {\r\n                    newErr = unauthorized(location.path);\r\n                }\r\n                else {\r\n                    newErr = err;\r\n                }\r\n            }\r\n        }\r\n        newErr.status = xhr.getStatus();\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction objectErrorHandler(location) {\r\n    const shared = sharedErrorHandler(location);\r\n    function errorHandler(xhr, err) {\r\n        let newErr = shared(xhr, err);\r\n        if (xhr.getStatus() === 404) {\r\n            newErr = objectNotFound(location.path);\r\n        }\r\n        newErr.serverResponse = err.serverResponse;\r\n        return newErr;\r\n    }\r\n    return errorHandler;\r\n}\r\nfunction getMetadata$2(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\r\n    const urlParams = {};\r\n    if (location.isRoot) {\r\n        urlParams['prefix'] = '';\r\n    }\r\n    else {\r\n        urlParams['prefix'] = location.path + '/';\r\n    }\r\n    if (delimiter && delimiter.length > 0) {\r\n        urlParams['delimiter'] = delimiter;\r\n    }\r\n    if (pageToken) {\r\n        urlParams['pageToken'] = pageToken;\r\n    }\r\n    if (maxResults) {\r\n        urlParams['maxResults'] = maxResults;\r\n    }\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    if (maxDownloadSizeBytes !== undefined) {\r\n        requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\r\n        requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\r\n    }\r\n    return requestInfo;\r\n}\r\nfunction getDownloadUrl(service, location, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'GET';\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction updateMetadata$2(service, location, metadata, mappings) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'PATCH';\r\n    const body = toResourceString(metadata, mappings);\r\n    const headers = { 'Content-Type': 'application/json; charset=utf-8' };\r\n    const timeout = service.maxOperationRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction deleteObject$2(service, location) {\r\n    const urlPart = location.fullServerUrl();\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'DELETE';\r\n    const timeout = service.maxOperationRetryTime;\r\n    function handler(_xhr, _text) { }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.successCodes = [200, 204];\r\n    requestInfo.errorHandler = objectErrorHandler(location);\r\n    return requestInfo;\r\n}\r\nfunction determineContentType_(metadata, blob) {\r\n    return ((metadata && metadata['contentType']) ||\r\n        (blob && blob.type()) ||\r\n        'application/octet-stream');\r\n}\r\nfunction metadataForUpload_(location, blob, metadata) {\r\n    const metadataClone = Object.assign({}, metadata);\r\n    metadataClone['fullPath'] = location.path;\r\n    metadataClone['size'] = blob.size();\r\n    if (!metadataClone['contentType']) {\r\n        metadataClone['contentType'] = determineContentType_(null, blob);\r\n    }\r\n    return metadataClone;\r\n}\r\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\r\nfunction multipartUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'multipart'\r\n    };\r\n    function genBoundary() {\r\n        let str = '';\r\n        for (let i = 0; i < 2; i++) {\r\n            str = str + Math.random().toString().slice(2);\r\n        }\r\n        return str;\r\n    }\r\n    const boundary = genBoundary();\r\n    headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\r\n    const metadata_ = metadataForUpload_(location, blob, metadata);\r\n    const metadataString = toResourceString(metadata_, mappings);\r\n    const preBlobPart = '--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\r\n        metadataString +\r\n        '\\r\\n--' +\r\n        boundary +\r\n        '\\r\\n' +\r\n        'Content-Type: ' +\r\n        metadata_['contentType'] +\r\n        '\\r\\n\\r\\n';\r\n    const postBlobPart = '\\r\\n--' + boundary + '--';\r\n    const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    const urlParams = { name: metadata_['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\r\nclass ResumableUploadStatus {\r\n    constructor(current, total, finalized, metadata) {\r\n        this.current = current;\r\n        this.total = total;\r\n        this.finalized = !!finalized;\r\n        this.metadata = metadata || null;\r\n    }\r\n}\r\nfunction checkResumeHeader_(xhr, allowed) {\r\n    let status = null;\r\n    try {\r\n        status = xhr.getResponseHeader('X-Goog-Upload-Status');\r\n    }\r\n    catch (e) {\r\n        handlerCheck(false);\r\n    }\r\n    const allowedStatus = allowed || ['active'];\r\n    handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\r\n    return status;\r\n}\r\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\r\n    const urlPart = location.bucketOnlyServerUrl();\r\n    const metadataForUpload = metadataForUpload_(location, blob, metadata);\r\n    const urlParams = { name: metadataForUpload['fullPath'] };\r\n    const url = makeUrl(urlPart, service.host, service._protocol);\r\n    const method = 'POST';\r\n    const headers = {\r\n        'X-Goog-Upload-Protocol': 'resumable',\r\n        'X-Goog-Upload-Command': 'start',\r\n        'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\r\n        'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\r\n        'Content-Type': 'application/json; charset=utf-8'\r\n    };\r\n    const body = toResourceString(metadataForUpload, mappings);\r\n    const timeout = service.maxUploadRetryTime;\r\n    function handler(xhr) {\r\n        checkResumeHeader_(xhr);\r\n        let url;\r\n        try {\r\n            url = xhr.getResponseHeader('X-Goog-Upload-URL');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        handlerCheck(isString(url));\r\n        return url;\r\n    }\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.urlParams = urlParams;\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\r\nfunction getResumableUploadStatus(service, location, url, blob) {\r\n    const headers = { 'X-Goog-Upload-Command': 'query' };\r\n    function handler(xhr) {\r\n        const status = checkResumeHeader_(xhr, ['active', 'final']);\r\n        let sizeString = null;\r\n        try {\r\n            sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\r\n        }\r\n        catch (e) {\r\n            handlerCheck(false);\r\n        }\r\n        if (!sizeString) {\r\n            // null or empty string\r\n            handlerCheck(false);\r\n        }\r\n        const size = Number(sizeString);\r\n        handlerCheck(!isNaN(size));\r\n        return new ResumableUploadStatus(size, blob.size(), status === 'final');\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\r\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\r\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\r\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\r\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\r\n    // TODO(andysoto): standardize on internal asserts\r\n    // assert(!(opt_status && opt_status.finalized));\r\n    const status_ = new ResumableUploadStatus(0, 0);\r\n    if (status) {\r\n        status_.current = status.current;\r\n        status_.total = status.total;\r\n    }\r\n    else {\r\n        status_.current = 0;\r\n        status_.total = blob.size();\r\n    }\r\n    if (blob.size() !== status_.total) {\r\n        throw serverFileWrongSize();\r\n    }\r\n    const bytesLeft = status_.total - status_.current;\r\n    let bytesToUpload = bytesLeft;\r\n    if (chunkSize > 0) {\r\n        bytesToUpload = Math.min(bytesToUpload, chunkSize);\r\n    }\r\n    const startByte = status_.current;\r\n    const endByte = startByte + bytesToUpload;\r\n    let uploadCommand = '';\r\n    if (bytesToUpload === 0) {\r\n        uploadCommand = 'finalize';\r\n    }\r\n    else if (bytesLeft === bytesToUpload) {\r\n        uploadCommand = 'upload, finalize';\r\n    }\r\n    else {\r\n        uploadCommand = 'upload';\r\n    }\r\n    const headers = {\r\n        'X-Goog-Upload-Command': uploadCommand,\r\n        'X-Goog-Upload-Offset': `${status_.current}`\r\n    };\r\n    const body = blob.slice(startByte, endByte);\r\n    if (body === null) {\r\n        throw cannotSliceBlob();\r\n    }\r\n    function handler(xhr, text) {\r\n        // TODO(andysoto): Verify the MD5 of each uploaded range:\r\n        // the 'x-range-md5' header comes back with status code 308 responses.\r\n        // We'll only be able to bail out though, because you can't re-upload a\r\n        // range that you previously uploaded.\r\n        const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\r\n        const newCurrent = status_.current + bytesToUpload;\r\n        const size = blob.size();\r\n        let metadata;\r\n        if (uploadStatus === 'final') {\r\n            metadata = metadataHandler(service, mappings)(xhr, text);\r\n        }\r\n        else {\r\n            metadata = null;\r\n        }\r\n        return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\r\n    }\r\n    const method = 'POST';\r\n    const timeout = service.maxUploadRetryTime;\r\n    const requestInfo = new RequestInfo(url, method, handler, timeout);\r\n    requestInfo.headers = headers;\r\n    requestInfo.body = body.uploadData();\r\n    requestInfo.progressCallback = progressCallback || null;\r\n    requestInfo.errorHandler = sharedErrorHandler(location);\r\n    return requestInfo;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\r\nconst TaskEvent = {\r\n    /**\r\n     * For this event,\r\n     * <ul>\r\n     *   <li>The `next` function is triggered on progress updates and when the\r\n     *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n     *       argument.</li>\r\n     *   <li>The `error` function is triggered if the upload is canceled or fails\r\n     *       for another reason.</li>\r\n     *   <li>The `complete` function is triggered if the upload completes\r\n     *       successfully.</li>\r\n     * </ul>\r\n     */\r\n    STATE_CHANGED: 'state_changed'\r\n};\r\n// type keys = keyof TaskState\r\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\r\nconst TaskState = {\r\n    /** The task is currently transferring data. */\r\n    RUNNING: 'running',\r\n    /** The task was paused by the user. */\r\n    PAUSED: 'paused',\r\n    /** The task completed successfully. */\r\n    SUCCESS: 'success',\r\n    /** The task was canceled. */\r\n    CANCELED: 'canceled',\r\n    /** The task failed with an error. */\r\n    ERROR: 'error'\r\n};\r\nfunction taskStateFromInternalTaskState(state) {\r\n    switch (state) {\r\n        case \"running\" /* InternalTaskState.RUNNING */:\r\n        case \"pausing\" /* InternalTaskState.PAUSING */:\r\n        case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            return TaskState.RUNNING;\r\n        case \"paused\" /* InternalTaskState.PAUSED */:\r\n            return TaskState.PAUSED;\r\n        case \"success\" /* InternalTaskState.SUCCESS */:\r\n            return TaskState.SUCCESS;\r\n        case \"canceled\" /* InternalTaskState.CANCELED */:\r\n            return TaskState.CANCELED;\r\n        case \"error\" /* InternalTaskState.ERROR */:\r\n            return TaskState.ERROR;\r\n        default:\r\n            // TODO(andysoto): assert(false);\r\n            return TaskState.ERROR;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Observer {\r\n    constructor(nextOrObserver, error, complete) {\r\n        const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\r\n        if (asFunctions) {\r\n            this.next = nextOrObserver;\r\n            this.error = error !== null && error !== void 0 ? error : undefined;\r\n            this.complete = complete !== null && complete !== void 0 ? complete : undefined;\r\n        }\r\n        else {\r\n            const observer = nextOrObserver;\r\n            this.next = observer.next;\r\n            this.error = observer.error;\r\n            this.complete = observer.complete;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\nfunction async(f) {\r\n    return (...argsToForward) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.resolve().then(() => f(...argsToForward));\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** An override for the text-based Connection. Used in tests. */\r\nlet textFactoryOverride = null;\r\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\r\nclass XhrConnection {\r\n    constructor() {\r\n        this.sent_ = false;\r\n        this.xhr_ = new XMLHttpRequest();\r\n        this.initXhr();\r\n        this.errorCode_ = ErrorCode.NO_ERROR;\r\n        this.sendPromise_ = new Promise(resolve => {\r\n            this.xhr_.addEventListener('abort', () => {\r\n                this.errorCode_ = ErrorCode.ABORT;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('error', () => {\r\n                this.errorCode_ = ErrorCode.NETWORK_ERROR;\r\n                resolve();\r\n            });\r\n            this.xhr_.addEventListener('load', () => {\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    send(url, method, body, headers) {\r\n        if (this.sent_) {\r\n            throw internalError('cannot .send() more than once');\r\n        }\r\n        this.sent_ = true;\r\n        this.xhr_.open(method, url, true);\r\n        if (headers !== undefined) {\r\n            for (const key in headers) {\r\n                if (headers.hasOwnProperty(key)) {\r\n                    this.xhr_.setRequestHeader(key, headers[key].toString());\r\n                }\r\n            }\r\n        }\r\n        if (body !== undefined) {\r\n            this.xhr_.send(body);\r\n        }\r\n        else {\r\n            this.xhr_.send();\r\n        }\r\n        return this.sendPromise_;\r\n    }\r\n    getErrorCode() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorCode() before sending');\r\n        }\r\n        return this.errorCode_;\r\n    }\r\n    getStatus() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getStatus() before sending');\r\n        }\r\n        try {\r\n            return this.xhr_.status;\r\n        }\r\n        catch (e) {\r\n            return -1;\r\n        }\r\n    }\r\n    getResponse() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getResponse() before sending');\r\n        }\r\n        return this.xhr_.response;\r\n    }\r\n    getErrorText() {\r\n        if (!this.sent_) {\r\n            throw internalError('cannot .getErrorText() before sending');\r\n        }\r\n        return this.xhr_.statusText;\r\n    }\r\n    /** Aborts the request. */\r\n    abort() {\r\n        this.xhr_.abort();\r\n    }\r\n    getResponseHeader(header) {\r\n        return this.xhr_.getResponseHeader(header);\r\n    }\r\n    addUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.addEventListener('progress', listener);\r\n        }\r\n    }\r\n    removeUploadProgressListener(listener) {\r\n        if (this.xhr_.upload != null) {\r\n            this.xhr_.upload.removeEventListener('progress', listener);\r\n        }\r\n    }\r\n}\r\nclass XhrTextConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'text';\r\n    }\r\n}\r\nfunction newTextConnection() {\r\n    return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\r\n}\r\nclass XhrBytesConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'arraybuffer';\r\n    }\r\n}\r\nfunction newBytesConnection() {\r\n    return new XhrBytesConnection();\r\n}\r\nclass XhrBlobConnection extends XhrConnection {\r\n    initXhr() {\r\n        this.xhr_.responseType = 'blob';\r\n    }\r\n}\r\nfunction newBlobConnection() {\r\n    return new XhrBlobConnection();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\r\nclass UploadTask {\r\n    /**\r\n     * @param ref - The firebaseStorage.Reference object this task came\r\n     *     from, untyped to avoid cyclic dependencies.\r\n     * @param blob - The blob to upload.\r\n     */\r\n    constructor(ref, blob, metadata = null) {\r\n        /**\r\n         * Number of bytes transferred so far.\r\n         */\r\n        this._transferred = 0;\r\n        this._needToFetchStatus = false;\r\n        this._needToFetchMetadata = false;\r\n        this._observers = [];\r\n        this._error = undefined;\r\n        this._uploadUrl = undefined;\r\n        this._request = undefined;\r\n        this._chunkMultiplier = 1;\r\n        this._resolve = undefined;\r\n        this._reject = undefined;\r\n        this._ref = ref;\r\n        this._blob = blob;\r\n        this._metadata = metadata;\r\n        this._mappings = getMappings();\r\n        this._resumable = this._shouldDoResumable(this._blob);\r\n        this._state = \"running\" /* InternalTaskState.RUNNING */;\r\n        this._errorHandler = error => {\r\n            this._request = undefined;\r\n            this._chunkMultiplier = 1;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this._needToFetchStatus = true;\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                const backoffExpired = this.isExponentialBackoffExpired();\r\n                if (isRetryStatusCode(error.status, [])) {\r\n                    if (backoffExpired) {\r\n                        error = retryLimitExceeded();\r\n                    }\r\n                    else {\r\n                        this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\r\n                        this._needToFetchStatus = true;\r\n                        this.completeTransitions_();\r\n                        return;\r\n                    }\r\n                }\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this._metadataErrorHandler = error => {\r\n            this._request = undefined;\r\n            if (error._codeEquals(StorageErrorCode.CANCELED)) {\r\n                this.completeTransitions_();\r\n            }\r\n            else {\r\n                this._error = error;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n            }\r\n        };\r\n        this.sleepTime = 0;\r\n        this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\r\n        this._promise = new Promise((resolve, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n            this._start();\r\n        });\r\n        // Prevent uncaught rejections on the internal promise from bubbling out\r\n        // to the top level with a dummy handler.\r\n        this._promise.then(null, () => { });\r\n    }\r\n    isExponentialBackoffExpired() {\r\n        return this.sleepTime > this.maxSleepTime;\r\n    }\r\n    _makeProgressCallback() {\r\n        const sizeBefore = this._transferred;\r\n        return loaded => this._updateProgress(sizeBefore + loaded);\r\n    }\r\n    _shouldDoResumable(blob) {\r\n        return blob.size() > 256 * 1024;\r\n    }\r\n    _start() {\r\n        if (this._state !== \"running\" /* InternalTaskState.RUNNING */) {\r\n            // This can happen if someone pauses us in a resume callback, for example.\r\n            return;\r\n        }\r\n        if (this._request !== undefined) {\r\n            return;\r\n        }\r\n        if (this._resumable) {\r\n            if (this._uploadUrl === undefined) {\r\n                this._createResumable();\r\n            }\r\n            else {\r\n                if (this._needToFetchStatus) {\r\n                    this._fetchStatus();\r\n                }\r\n                else {\r\n                    if (this._needToFetchMetadata) {\r\n                        // Happens if we miss the metadata on upload completion.\r\n                        this._fetchMetadata();\r\n                    }\r\n                    else {\r\n                        this.pendingTimeout = setTimeout(() => {\r\n                            this.pendingTimeout = undefined;\r\n                            this._continueUpload();\r\n                        }, this.sleepTime);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._oneShotUpload();\r\n        }\r\n    }\r\n    _resolveToken(callback) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        Promise.all([\r\n            this._ref.storage._getAuthToken(),\r\n            this._ref.storage._getAppCheckToken()\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            switch (this._state) {\r\n                case \"running\" /* InternalTaskState.RUNNING */:\r\n                    callback(authToken, appCheckToken);\r\n                    break;\r\n                case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                    this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                    break;\r\n                case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                    this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    // TODO(andysoto): assert false\r\n    _createResumable() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = createRequest;\r\n            createRequest.getPromise().then((url) => {\r\n                this._request = undefined;\r\n                this._uploadUrl = url;\r\n                this._needToFetchStatus = false;\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _fetchStatus() {\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\r\n            const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = statusRequest;\r\n            statusRequest.getPromise().then(status => {\r\n                status = status;\r\n                this._request = undefined;\r\n                this._updateProgress(status.current);\r\n                this._needToFetchStatus = false;\r\n                if (status.finalized) {\r\n                    this._needToFetchMetadata = true;\r\n                }\r\n                this.completeTransitions_();\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _continueUpload() {\r\n        const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        const status = new ResumableUploadStatus(this._transferred, this._blob.size());\r\n        // TODO(andysoto): assert(this.uploadUrl_ !== null);\r\n        const url = this._uploadUrl;\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            let requestInfo;\r\n            try {\r\n                requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\r\n            }\r\n            catch (e) {\r\n                this._error = e;\r\n                this._transition(\"error\" /* InternalTaskState.ERROR */);\r\n                return;\r\n            }\r\n            const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken, \r\n            /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\r\n            );\r\n            this._request = uploadRequest;\r\n            uploadRequest.getPromise().then((newStatus) => {\r\n                this._increaseMultiplier();\r\n                this._request = undefined;\r\n                this._updateProgress(newStatus.current);\r\n                if (newStatus.finalized) {\r\n                    this._metadata = newStatus.metadata;\r\n                    this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n                }\r\n                else {\r\n                    this.completeTransitions_();\r\n                }\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _increaseMultiplier() {\r\n        const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\r\n        // Max chunk size is 32M.\r\n        if (currentSize * 2 < 32 * 1024 * 1024) {\r\n            this._chunkMultiplier *= 2;\r\n        }\r\n    }\r\n    _fetchMetadata() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\r\n            const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = metadataRequest;\r\n            metadataRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._metadataErrorHandler);\r\n        });\r\n    }\r\n    _oneShotUpload() {\r\n        this._resolveToken((authToken, appCheckToken) => {\r\n            const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\r\n            const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\r\n            this._request = multipartRequest;\r\n            multipartRequest.getPromise().then(metadata => {\r\n                this._request = undefined;\r\n                this._metadata = metadata;\r\n                this._updateProgress(this._blob.size());\r\n                this._transition(\"success\" /* InternalTaskState.SUCCESS */);\r\n            }, this._errorHandler);\r\n        });\r\n    }\r\n    _updateProgress(transferred) {\r\n        const old = this._transferred;\r\n        this._transferred = transferred;\r\n        // A progress update can make the \"transferred\" value smaller (e.g. a\r\n        // partial upload not completed by server, after which the \"transferred\"\r\n        // value may reset to the value at the beginning of the request).\r\n        if (this._transferred !== old) {\r\n            this._notifyObservers();\r\n        }\r\n    }\r\n    _transition(state) {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n        switch (state) {\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                if (this._request !== undefined) {\r\n                    this._request.cancel();\r\n                }\r\n                else if (this.pendingTimeout) {\r\n                    clearTimeout(this.pendingTimeout);\r\n                    this.pendingTimeout = undefined;\r\n                    this.completeTransitions_();\r\n                }\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.PAUSING);\r\n                const wasPaused = this._state === \"paused\" /* InternalTaskState.PAUSED */;\r\n                this._state = state;\r\n                if (wasPaused) {\r\n                    this._notifyObservers();\r\n                    this._start();\r\n                }\r\n                break;\r\n            case \"paused\" /* InternalTaskState.PAUSED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"canceled\" /* InternalTaskState.CANCELED */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.PAUSED ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._error = canceled();\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"error\" /* InternalTaskState.ERROR */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n            case \"success\" /* InternalTaskState.SUCCESS */:\r\n                // TODO(andysoto):\r\n                // assert(this.state_ === InternalTaskState.RUNNING ||\r\n                //        this.state_ === InternalTaskState.PAUSING ||\r\n                //        this.state_ === InternalTaskState.CANCELING);\r\n                this._state = state;\r\n                this._notifyObservers();\r\n                break;\r\n        }\r\n    }\r\n    completeTransitions_() {\r\n        switch (this._state) {\r\n            case \"pausing\" /* InternalTaskState.PAUSING */:\r\n                this._transition(\"paused\" /* InternalTaskState.PAUSED */);\r\n                break;\r\n            case \"canceling\" /* InternalTaskState.CANCELING */:\r\n                this._transition(\"canceled\" /* InternalTaskState.CANCELED */);\r\n                break;\r\n            case \"running\" /* InternalTaskState.RUNNING */:\r\n                this._start();\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * A snapshot of the current task state.\r\n     */\r\n    get snapshot() {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        return {\r\n            bytesTransferred: this._transferred,\r\n            totalBytes: this._blob.size(),\r\n            state: externalState,\r\n            metadata: this._metadata,\r\n            task: this,\r\n            ref: this._ref\r\n        };\r\n    }\r\n    /**\r\n     * Adds a callback for an event.\r\n     * @param type - The type of event to listen for.\r\n     * @param nextOrObserver -\r\n     *     The `next` function, which gets called for each item in\r\n     *     the event stream, or an observer object with some or all of these three\r\n     *     properties (`next`, `error`, `complete`).\r\n     * @param error - A function that gets called with a `StorageError`\r\n     *     if the event stream ends due to an error.\r\n     * @param completed - A function that gets called if the\r\n     *     event stream ends normally.\r\n     * @returns\r\n     *     If only the event argument is passed, returns a function you can use to\r\n     *     add callbacks (see the examples above). If more than just the event\r\n     *     argument is passed, returns a function you can call to unregister the\r\n     *     callbacks.\r\n     */\r\n    on(type, nextOrObserver, error, completed) {\r\n        // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\r\n        const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\r\n        this._addObserver(observer);\r\n        return () => {\r\n            this._removeObserver(observer);\r\n        };\r\n    }\r\n    /**\r\n     * This object behaves like a Promise, and resolves with its snapshot data\r\n     * when the upload completes.\r\n     * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n     * @param onRejected - The rejection callback.\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        // These casts are needed so that TypeScript can infer the types of the\r\n        // resulting Promise.\r\n        return this._promise.then(onFulfilled, onRejected);\r\n    }\r\n    /**\r\n     * Equivalent to calling `then(null, onRejected)`.\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(null, onRejected);\r\n    }\r\n    /**\r\n     * Adds the given observer.\r\n     */\r\n    _addObserver(observer) {\r\n        this._observers.push(observer);\r\n        this._notifyObserver(observer);\r\n    }\r\n    /**\r\n     * Removes the given observer.\r\n     */\r\n    _removeObserver(observer) {\r\n        const i = this._observers.indexOf(observer);\r\n        if (i !== -1) {\r\n            this._observers.splice(i, 1);\r\n        }\r\n    }\r\n    _notifyObservers() {\r\n        this._finishPromise();\r\n        const observers = this._observers.slice();\r\n        observers.forEach(observer => {\r\n            this._notifyObserver(observer);\r\n        });\r\n    }\r\n    _finishPromise() {\r\n        if (this._resolve !== undefined) {\r\n            let triggered = true;\r\n            switch (taskStateFromInternalTaskState(this._state)) {\r\n                case TaskState.SUCCESS:\r\n                    async(this._resolve.bind(null, this.snapshot))();\r\n                    break;\r\n                case TaskState.CANCELED:\r\n                case TaskState.ERROR:\r\n                    const toCall = this._reject;\r\n                    async(toCall.bind(null, this._error))();\r\n                    break;\r\n                default:\r\n                    triggered = false;\r\n                    break;\r\n            }\r\n            if (triggered) {\r\n                this._resolve = undefined;\r\n                this._reject = undefined;\r\n            }\r\n        }\r\n    }\r\n    _notifyObserver(observer) {\r\n        const externalState = taskStateFromInternalTaskState(this._state);\r\n        switch (externalState) {\r\n            case TaskState.RUNNING:\r\n            case TaskState.PAUSED:\r\n                if (observer.next) {\r\n                    async(observer.next.bind(observer, this.snapshot))();\r\n                }\r\n                break;\r\n            case TaskState.SUCCESS:\r\n                if (observer.complete) {\r\n                    async(observer.complete.bind(observer))();\r\n                }\r\n                break;\r\n            case TaskState.CANCELED:\r\n            case TaskState.ERROR:\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n                break;\r\n            default:\r\n                // TODO(andysoto): assert(false);\r\n                if (observer.error) {\r\n                    async(observer.error.bind(observer, this._error))();\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Resumes a paused task. Has no effect on a currently running or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    resume() {\r\n        const valid = this._state === \"paused\" /* InternalTaskState.PAUSED */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"running\" /* InternalTaskState.RUNNING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Pauses a currently running task. Has no effect on a paused or failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    pause() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */;\r\n        if (valid) {\r\n            this._transition(\"pausing\" /* InternalTaskState.PAUSING */);\r\n        }\r\n        return valid;\r\n    }\r\n    /**\r\n     * Cancels a currently running or paused task. Has no effect on a complete or\r\n     * failed task.\r\n     * @returns True if the operation took effect, false if ignored.\r\n     */\r\n    cancel() {\r\n        const valid = this._state === \"running\" /* InternalTaskState.RUNNING */ ||\r\n            this._state === \"pausing\" /* InternalTaskState.PAUSING */;\r\n        if (valid) {\r\n            this._transition(\"canceling\" /* InternalTaskState.CANCELING */);\r\n        }\r\n        return valid;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\r\nclass Reference {\r\n    constructor(_service, location) {\r\n        this._service = _service;\r\n        if (location instanceof Location) {\r\n            this._location = location;\r\n        }\r\n        else {\r\n            this._location = Location.makeFromUrl(location, _service.host);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the URL for the bucket and path this object references,\r\n     *     in the form gs://<bucket>/<object-path>\r\n     * @override\r\n     */\r\n    toString() {\r\n        return 'gs://' + this._location.bucket + '/' + this._location.path;\r\n    }\r\n    _newRef(service, location) {\r\n        return new Reference(service, location);\r\n    }\r\n    /**\r\n     * A reference to the root of this object's bucket.\r\n     */\r\n    get root() {\r\n        const location = new Location(this._location.bucket, '');\r\n        return this._newRef(this._service, location);\r\n    }\r\n    /**\r\n     * The name of the bucket containing this reference's object.\r\n     */\r\n    get bucket() {\r\n        return this._location.bucket;\r\n    }\r\n    /**\r\n     * The full path of this object.\r\n     */\r\n    get fullPath() {\r\n        return this._location.path;\r\n    }\r\n    /**\r\n     * The short name of this object, which is the last component of the full path.\r\n     * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n     */\r\n    get name() {\r\n        return lastComponent(this._location.path);\r\n    }\r\n    /**\r\n     * The `StorageService` instance this `StorageReference` is associated with.\r\n     */\r\n    get storage() {\r\n        return this._service;\r\n    }\r\n    /**\r\n     * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n     * this reference is the root.\r\n     */\r\n    get parent() {\r\n        const newPath = parent(this._location.path);\r\n        if (newPath === null) {\r\n            return null;\r\n        }\r\n        const location = new Location(this._location.bucket, newPath);\r\n        return new Reference(this._service, location);\r\n    }\r\n    /**\r\n     * Utility function to throw an error in methods that do not accept a root reference.\r\n     */\r\n    _throwIfRoot(name) {\r\n        if (this._location.path === '') {\r\n            throw invalidRootOperation(name);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\r\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBytes');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBytesConnection)\r\n        .then(bytes => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            bytes.slice(0, maxDownloadSizeBytes)\r\n        : bytes);\r\n}\r\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\r\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\r\n    ref._throwIfRoot('getBlob');\r\n    const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newBlobConnection)\r\n        .then(blob => maxDownloadSizeBytes !== undefined\r\n        ? // GCS may not honor the Range header for small files\r\n            blob.slice(0, maxDownloadSizeBytes)\r\n        : blob);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytes');\r\n    const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(finalMetadata => {\r\n        return {\r\n            metadata: finalMetadata,\r\n            ref\r\n        };\r\n    });\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable$1(ref, data, metadata) {\r\n    ref._throwIfRoot('uploadBytesResumable');\r\n    return new UploadTask(ref, new FbsBlob(data), metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString$1(ref, value, format = StringFormat.RAW, metadata) {\r\n    ref._throwIfRoot('uploadString');\r\n    const data = dataFromString(format, value);\r\n    const metadataClone = Object.assign({}, metadata);\r\n    if (metadataClone['contentType'] == null && data.contentType != null) {\r\n        metadataClone['contentType'] = data.contentType;\r\n    }\r\n    return uploadBytes$1(ref, data.data, metadataClone);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll$1(ref) {\r\n    const accumulator = {\r\n        prefixes: [],\r\n        items: []\r\n    };\r\n    return listAllHelper(ref, accumulator).then(() => accumulator);\r\n}\r\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\r\nasync function listAllHelper(ref, accumulator, pageToken) {\r\n    const opt = {\r\n        // maxResults is 1000 by default.\r\n        pageToken\r\n    };\r\n    const nextPage = await list$1(ref, opt);\r\n    accumulator.prefixes.push(...nextPage.prefixes);\r\n    accumulator.items.push(...nextPage.items);\r\n    if (nextPage.nextPageToken != null) {\r\n        await listAllHelper(ref, accumulator, nextPage.nextPageToken);\r\n    }\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list$1(ref, options) {\r\n    if (options != null) {\r\n        if (typeof options.maxResults === 'number') {\r\n            validateNumber('options.maxResults', \r\n            /* minValue= */ 1, \r\n            /* maxValue= */ 1000, options.maxResults);\r\n        }\r\n    }\r\n    const op = options || {};\r\n    const requestInfo = list$2(ref.storage, ref._location, \r\n    /*delimiter= */ '/', op.pageToken, op.maxResults);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\r\nfunction getMetadata$1(ref) {\r\n    ref._throwIfRoot('getMetadata');\r\n    const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\r\nfunction updateMetadata$1(ref, metadata) {\r\n    ref._throwIfRoot('updateMetadata');\r\n    const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL$1(ref) {\r\n    ref._throwIfRoot('getDownloadURL');\r\n    const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\r\n    return ref.storage\r\n        .makeRequestWithTokens(requestInfo, newTextConnection)\r\n        .then(url => {\r\n        if (url === null) {\r\n            throw noDownloadURL();\r\n        }\r\n        return url;\r\n    });\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject$1(ref) {\r\n    ref._throwIfRoot('deleteObject');\r\n    const requestInfo = deleteObject$2(ref.storage, ref._location);\r\n    return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\r\n}\r\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\r\nfunction _getChild$1(ref, childPath) {\r\n    const newPath = child(ref._location.path, childPath);\r\n    const location = new Location(ref._location.bucket, newPath);\r\n    return new Reference(ref.storage, location);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\r\nfunction refFromURL(service, url) {\r\n    return new Reference(service, url);\r\n}\r\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\r\nfunction refFromPath(ref, path) {\r\n    if (ref instanceof FirebaseStorageImpl) {\r\n        const service = ref;\r\n        if (service._bucket == null) {\r\n            throw noDefaultBucket();\r\n        }\r\n        const reference = new Reference(service, service._bucket);\r\n        if (path != null) {\r\n            return refFromPath(reference, path);\r\n        }\r\n        else {\r\n            return reference;\r\n        }\r\n    }\r\n    else {\r\n        // ref is a Reference\r\n        if (path !== undefined) {\r\n            return _getChild$1(ref, path);\r\n        }\r\n        else {\r\n            return ref;\r\n        }\r\n    }\r\n}\r\nfunction ref$1(serviceOrRef, pathOrUrl) {\r\n    if (pathOrUrl && isUrl(pathOrUrl)) {\r\n        if (serviceOrRef instanceof FirebaseStorageImpl) {\r\n            return refFromURL(serviceOrRef, pathOrUrl);\r\n        }\r\n        else {\r\n            throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\r\n        }\r\n    }\r\n    else {\r\n        return refFromPath(serviceOrRef, pathOrUrl);\r\n    }\r\n}\r\nfunction extractBucket(host, config) {\r\n    const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\r\n    if (bucketString == null) {\r\n        return null;\r\n    }\r\n    return Location.makeFromBucketSpec(bucketString, host);\r\n}\r\nfunction connectStorageEmulator$1(storage, host, port, options = {}) {\r\n    storage.host = `${host}:${port}`;\r\n    storage._protocol = 'http';\r\n    const { mockUserToken } = options;\r\n    if (mockUserToken) {\r\n        storage._overrideAuthToken =\r\n            typeof mockUserToken === 'string'\r\n                ? mockUserToken\r\n                : createMockUserToken(mockUserToken, storage.app.options.projectId);\r\n    }\r\n}\r\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\r\nclass FirebaseStorageImpl {\r\n    constructor(\r\n    /**\r\n     * FirebaseApp associated with this StorageService instance.\r\n     */\r\n    app, _authProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _appCheckProvider, \r\n    /**\r\n     * @internal\r\n     */\r\n    _url, _firebaseVersion) {\r\n        this.app = app;\r\n        this._authProvider = _authProvider;\r\n        this._appCheckProvider = _appCheckProvider;\r\n        this._url = _url;\r\n        this._firebaseVersion = _firebaseVersion;\r\n        this._bucket = null;\r\n        /**\r\n         * This string can be in the formats:\r\n         * - host\r\n         * - host:port\r\n         */\r\n        this._host = DEFAULT_HOST;\r\n        this._protocol = 'https';\r\n        this._appId = null;\r\n        this._deleted = false;\r\n        this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\r\n        this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\r\n        this._requests = new Set();\r\n        if (_url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(_url, this._host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(this._host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The host string for this service, in the form of `host` or\r\n     * `host:port`.\r\n     */\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(host) {\r\n        this._host = host;\r\n        if (this._url != null) {\r\n            this._bucket = Location.makeFromBucketSpec(this._url, host);\r\n        }\r\n        else {\r\n            this._bucket = extractBucket(host, this.app.options);\r\n        }\r\n    }\r\n    /**\r\n     * The maximum time to retry uploads in milliseconds.\r\n     */\r\n    get maxUploadRetryTime() {\r\n        return this._maxUploadRetryTime;\r\n    }\r\n    set maxUploadRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxUploadRetryTime = time;\r\n    }\r\n    /**\r\n     * The maximum time to retry operations other than uploads or downloads in\r\n     * milliseconds.\r\n     */\r\n    get maxOperationRetryTime() {\r\n        return this._maxOperationRetryTime;\r\n    }\r\n    set maxOperationRetryTime(time) {\r\n        validateNumber('time', \r\n        /* minValue=*/ 0, \r\n        /* maxValue= */ Number.POSITIVE_INFINITY, time);\r\n        this._maxOperationRetryTime = time;\r\n    }\r\n    async _getAuthToken() {\r\n        if (this._overrideAuthToken) {\r\n            return this._overrideAuthToken;\r\n        }\r\n        const auth = this._authProvider.getImmediate({ optional: true });\r\n        if (auth) {\r\n            const tokenData = await auth.getToken();\r\n            if (tokenData !== null) {\r\n                return tokenData.accessToken;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    async _getAppCheckToken() {\r\n        const appCheck = this._appCheckProvider.getImmediate({ optional: true });\r\n        if (appCheck) {\r\n            const result = await appCheck.getToken();\r\n            // TODO: What do we want to do if there is an error getting the token?\r\n            // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\r\n            // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\r\n            // the token (actual or dummy) to send requests.\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Stop running requests and prevent more from being created.\r\n     */\r\n    _delete() {\r\n        if (!this._deleted) {\r\n            this._deleted = true;\r\n            this._requests.forEach(request => request.cancel());\r\n            this._requests.clear();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    /**\r\n     * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n     * at the given Location.\r\n     */\r\n    _makeStorageReference(loc) {\r\n        return new Reference(this, loc);\r\n    }\r\n    /**\r\n     * @param requestInfo - HTTP RequestInfo object\r\n     * @param authToken - Firebase auth token\r\n     */\r\n    _makeRequest(requestInfo, requestFactory, authToken, appCheckToken, retry = true) {\r\n        if (!this._deleted) {\r\n            const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\r\n            this._requests.add(request);\r\n            // Request removes itself from set when complete.\r\n            request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\r\n            return request;\r\n        }\r\n        else {\r\n            return new FailRequest(appDeleted());\r\n        }\r\n    }\r\n    async makeRequestWithTokens(requestInfo, requestFactory) {\r\n        const [authToken, appCheckToken] = await Promise.all([\r\n            this._getAuthToken(),\r\n            this._getAppCheckToken()\r\n        ]);\r\n        return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\r\n    }\r\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.11.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\r\nfunction getBytes(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBytesInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadBytes(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytes$1(ref, data, metadata);\r\n}\r\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\r\nfunction uploadString(ref, value, format, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadString$1(ref, value, format, metadata);\r\n}\r\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\r\nfunction uploadBytesResumable(ref, data, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return uploadBytesResumable$1(ref, data, metadata);\r\n}\r\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\r\nfunction getMetadata(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getMetadata$1(ref);\r\n}\r\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\r\nfunction updateMetadata(ref, metadata) {\r\n    ref = getModularInstance(ref);\r\n    return updateMetadata$1(ref, metadata);\r\n}\r\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\r\nfunction list(ref, options) {\r\n    ref = getModularInstance(ref);\r\n    return list$1(ref, options);\r\n}\r\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\r\nfunction listAll(ref) {\r\n    ref = getModularInstance(ref);\r\n    return listAll$1(ref);\r\n}\r\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\r\nfunction getDownloadURL(ref) {\r\n    ref = getModularInstance(ref);\r\n    return getDownloadURL$1(ref);\r\n}\r\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\r\nfunction deleteObject(ref) {\r\n    ref = getModularInstance(ref);\r\n    return deleteObject$1(ref);\r\n}\r\nfunction ref(serviceOrRef, pathOrUrl) {\r\n    serviceOrRef = getModularInstance(serviceOrRef);\r\n    return ref$1(serviceOrRef, pathOrUrl);\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction _getChild(ref, childPath) {\r\n    return _getChild$1(ref, childPath);\r\n}\r\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\r\nfunction getStorage(app = getApp(), bucketUrl) {\r\n    app = getModularInstance(app);\r\n    const storageProvider = _getProvider(app, STORAGE_TYPE);\r\n    const storageInstance = storageProvider.getImmediate({\r\n        identifier: bucketUrl\r\n    });\r\n    const emulator = getDefaultEmulatorHostnameAndPort('storage');\r\n    if (emulator) {\r\n        connectStorageEmulator(storageInstance, ...emulator);\r\n    }\r\n    return storageInstance;\r\n}\r\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\r\nfunction connectStorageEmulator(storage, host, port, options = {}) {\r\n    connectStorageEmulator$1(storage, host, port, options);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\r\nfunction getBlob(ref, maxDownloadSizeBytes) {\r\n    ref = getModularInstance(ref);\r\n    return getBlobInternal(ref, maxDownloadSizeBytes);\r\n}\r\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\r\nfunction getStream(ref, maxDownloadSizeBytes) {\r\n    throw new Error('getStream() is only supported by NodeJS builds');\r\n}\n\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    const app = container.getProvider('app').getImmediate();\r\n    const authProvider = container.getProvider('auth-internal');\r\n    const appCheckProvider = container.getProvider('app-check-internal');\r\n    return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\r\n}\r\nfunction registerStorage() {\r\n    _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\r\n    registerVersion(name, version, '');\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\r\nregisterStorage();\n\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n//# sourceMappingURL=index.esm2017.js.map\n","import firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, _dataFromString, _UploadTask, _FbsBlob, StringFormat, listAll, list, getMetadata, updateMetadata, getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UploadTaskSnapshotCompat {\r\n    constructor(_delegate, task, ref) {\r\n        this._delegate = _delegate;\r\n        this.task = task;\r\n        this.ref = ref;\r\n    }\r\n    get bytesTransferred() {\r\n        return this._delegate.bytesTransferred;\r\n    }\r\n    get metadata() {\r\n        return this._delegate.metadata;\r\n    }\r\n    get state() {\r\n        return this._delegate.state;\r\n    }\r\n    get totalBytes() {\r\n        return this._delegate.totalBytes;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass UploadTaskCompat {\r\n    constructor(_delegate, _ref) {\r\n        this._delegate = _delegate;\r\n        this._ref = _ref;\r\n        this.cancel = this._delegate.cancel.bind(this._delegate);\r\n        this.catch = this._delegate.catch.bind(this._delegate);\r\n        this.pause = this._delegate.pause.bind(this._delegate);\r\n        this.resume = this._delegate.resume.bind(this._delegate);\r\n    }\r\n    get snapshot() {\r\n        return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\r\n    }\r\n    then(onFulfilled, onRejected) {\r\n        return this._delegate.then(snapshot => {\r\n            if (onFulfilled) {\r\n                return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));\r\n            }\r\n        }, onRejected);\r\n    }\r\n    on(type, nextOrObserver, error, completed) {\r\n        let wrappedNextOrObserver = undefined;\r\n        if (!!nextOrObserver) {\r\n            if (typeof nextOrObserver === 'function') {\r\n                wrappedNextOrObserver = (taskSnapshot) => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));\r\n            }\r\n            else {\r\n                wrappedNextOrObserver = {\r\n                    next: !!nextOrObserver.next\r\n                        ? (taskSnapshot) => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref))\r\n                        : undefined,\r\n                    complete: nextOrObserver.complete || undefined,\r\n                    error: nextOrObserver.error || undefined\r\n                };\r\n            }\r\n        }\r\n        return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\r\n    }\r\n}\n\nclass ListResultCompat {\r\n    constructor(_delegate, _service) {\r\n        this._delegate = _delegate;\r\n        this._service = _service;\r\n    }\r\n    get prefixes() {\r\n        return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));\r\n    }\r\n    get items() {\r\n        return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));\r\n    }\r\n    get nextPageToken() {\r\n        return this._delegate.nextPageToken || null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ReferenceCompat {\r\n    constructor(_delegate, storage) {\r\n        this._delegate = _delegate;\r\n        this.storage = storage;\r\n    }\r\n    get name() {\r\n        return this._delegate.name;\r\n    }\r\n    get bucket() {\r\n        return this._delegate.bucket;\r\n    }\r\n    get fullPath() {\r\n        return this._delegate.fullPath;\r\n    }\r\n    toString() {\r\n        return this._delegate.toString();\r\n    }\r\n    /**\r\n     * @returns A reference to the object obtained by\r\n     * appending childPath, removing any duplicate, beginning, or trailing\r\n     * slashes.\r\n     */\r\n    child(childPath) {\r\n        const reference = _getChild(this._delegate, childPath);\r\n        return new ReferenceCompat(reference, this.storage);\r\n    }\r\n    get root() {\r\n        return new ReferenceCompat(this._delegate.root, this.storage);\r\n    }\r\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\r\n    get parent() {\r\n        const reference = this._delegate.parent;\r\n        if (reference == null) {\r\n            return null;\r\n        }\r\n        return new ReferenceCompat(reference, this.storage);\r\n    }\r\n    /**\r\n     * Uploads a blob to this object's location.\r\n     * @param data - The blob to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\r\n    put(data, metadata) {\r\n        this._throwIfRoot('put');\r\n        return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\r\n    }\r\n    /**\r\n     * Uploads a string to this object's location.\r\n     * @param value - The string to upload.\r\n     * @param format - The format of the string to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\r\n    putString(value, format = StringFormat.RAW, metadata) {\r\n        this._throwIfRoot('putString');\r\n        const data = _dataFromString(format, value);\r\n        const metadataClone = Object.assign({}, metadata);\r\n        if (metadataClone['contentType'] == null && data.contentType != null) {\r\n            metadataClone['contentType'] = data.contentType;\r\n        }\r\n        return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\r\n    }\r\n    /**\r\n     * List all items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * This is a helper method for calling list() repeatedly until there are\r\n     * no more results. The default pagination size is 1000.\r\n     *\r\n     * Note: The results may not be consistent if objects are changed while this\r\n     * operation is running.\r\n     *\r\n     * Warning: listAll may potentially consume too many resources if there are\r\n     * too many results.\r\n     *\r\n     * @returns A Promise that resolves with all the items and prefixes under\r\n     *  the current storage reference. `prefixes` contains references to\r\n     *  sub-directories and `items` contains references to objects in this\r\n     *  folder. `nextPageToken` is never returned.\r\n     */\r\n    listAll() {\r\n        return listAll(this._delegate).then(r => new ListResultCompat(r, this.storage));\r\n    }\r\n    /**\r\n     * List items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * List API is only available for Firebase Rules Version 2.\r\n     *\r\n     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n     * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n     *\r\n     * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n     * support objects whose paths end with \"/\" or contain two consecutive\r\n     * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n     * list() may fail if there are too many unsupported objects in the bucket.\r\n     *\r\n     * @param options - See ListOptions for details.\r\n     * @returns A Promise that resolves with the items and prefixes.\r\n     * `prefixes` contains references to sub-folders and `items`\r\n     * contains references to objects in this folder. `nextPageToken`\r\n     * can be used to get the rest of the results.\r\n     */\r\n    list(options) {\r\n        return list(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));\r\n    }\r\n    /**\r\n     * A `Promise` that resolves with the metadata for this object. If this\r\n     * object doesn't exist or metadata cannot be retreived, the promise is\r\n     * rejected.\r\n     */\r\n    getMetadata() {\r\n        return getMetadata(this._delegate);\r\n    }\r\n    /**\r\n     * Updates the metadata for this object.\r\n     * @param metadata - The new metadata for the object.\r\n     * Only values that have been explicitly set will be changed. Explicitly\r\n     * setting a value to null will remove the metadata.\r\n     * @returns A `Promise` that resolves\r\n     * with the new metadata for this object.\r\n     * @see firebaseStorage.Reference.prototype.getMetadata\r\n     */\r\n    updateMetadata(metadata) {\r\n        return updateMetadata(this._delegate, metadata);\r\n    }\r\n    /**\r\n     * @returns A `Promise` that resolves with the download\r\n     * URL for this object.\r\n     */\r\n    getDownloadURL() {\r\n        return getDownloadURL(this._delegate);\r\n    }\r\n    /**\r\n     * Deletes the object at this location.\r\n     * @returns A `Promise` that resolves if the deletion succeeds.\r\n     */\r\n    delete() {\r\n        this._throwIfRoot('delete');\r\n        return deleteObject(this._delegate);\r\n    }\r\n    _throwIfRoot(name) {\r\n        if (this._delegate._location.path === '') {\r\n            throw _invalidRootOperation(name);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\r\nclass StorageServiceCompat {\r\n    constructor(app, _delegate) {\r\n        this.app = app;\r\n        this._delegate = _delegate;\r\n    }\r\n    get maxOperationRetryTime() {\r\n        return this._delegate.maxOperationRetryTime;\r\n    }\r\n    get maxUploadRetryTime() {\r\n        return this._delegate.maxUploadRetryTime;\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference for the given path in the default\r\n     * bucket.\r\n     */\r\n    ref(path) {\r\n        if (isUrl(path)) {\r\n            throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\r\n        }\r\n        return new ReferenceCompat(ref(this._delegate, path), this);\r\n    }\r\n    /**\r\n     * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n     * which must be a gs:// or http[s]:// URL.\r\n     */\r\n    refFromURL(url) {\r\n        if (!isUrl(url)) {\r\n            throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\r\n        }\r\n        try {\r\n            _Location.makeFromUrl(url, this._delegate.host);\r\n        }\r\n        catch (e) {\r\n            throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\r\n        }\r\n        return new ReferenceCompat(ref(this._delegate, url), this);\r\n    }\r\n    setMaxUploadRetryTime(time) {\r\n        this._delegate.maxUploadRetryTime = time;\r\n    }\r\n    setMaxOperationRetryTime(time) {\r\n        this._delegate.maxOperationRetryTime = time;\r\n    }\r\n    useEmulator(host, port, options = {}) {\r\n        connectStorageEmulator(this._delegate, host, port, options);\r\n    }\r\n}\r\nfunction isUrl(path) {\r\n    return /^[A-Za-z]+:\\/\\//.test(path);\r\n}\n\nconst name = \"@firebase/storage-compat\";\nconst version = \"0.3.2\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Storage.\r\n */\r\nconst STORAGE_TYPE = 'storage-compat';\r\nfunction factory(container, { instanceIdentifier: url }) {\r\n    // Dependencies\r\n    const app = container.getProvider('app-compat').getImmediate();\r\n    const storageExp = container\r\n        .getProvider('storage')\r\n        .getImmediate({ identifier: url });\r\n    const storageServiceCompat = new StorageServiceCompat(app, storageExp);\r\n    return storageServiceCompat;\r\n}\r\nfunction registerStorage(instance) {\r\n    const namespaceExports = {\r\n        // no-inline\r\n        TaskState: _TaskState,\r\n        TaskEvent: _TaskEvent,\r\n        StringFormat,\r\n        Storage: StorageServiceCompat,\r\n        Reference: ReferenceCompat\r\n    };\r\n    instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */)\r\n        .setServiceProps(namespaceExports)\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterStorage(firebase);\n\nexport { registerStorage };\n//# sourceMappingURL=index.esm2017.js.map\n","import React, { useState, useRef } from 'react';\nimport 'firebase/compat/app';\nimport 'firebase/compat/database';\nimport 'firebase/compat/storage';\nimport { nanoid } from 'nanoid';\nimport firebase from 'firebase/compat/app';\nconst firebaseConfig121212 = {\n  apiKey: \"AIzaSyChFGTB5YEugUKho-YqcWVZtKJG3PIrtt0\",\n\n  authDomain: \"thewall-10a4a.firebaseapp.com\",\n\n  databaseURL: \"https://thewall-10a4a-default-rtdb.firebaseio.com\",\n\n  projectId: \"thewall-10a4a\",\n\n  storageBucket: \"thewall-10a4a.appspot.com\",\n\n  messagingSenderId: \"221023885061\",\n\n  appId: \"1:221023885061:web:bc550d03edd2fbf60e496c\",\n\n  measurementId: \"G-7V80059NF7\"\n\n};\n\n\n\nfunction VideoUploader() {\n\n  firebase.initializeApp(firebaseConfig121212);\n  const database = firebase.database(); \n\n  const [videos, setVideos] = useState([]);\n  const [recording, setRecording] = useState(false);\n  const [mediaBlob, setMediaBlob] = useState(null);\n  const [commentInput, setCommentInput] = useState('');\n\n  const videoRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const chunksRef = useRef([]);\n\n  const handleStartRecording = () => {\n    setRecording(true);\n    navigator.mediaDevices.getUserMedia({ video: true }).then((stream) => {\n      videoRef.current.srcObject = stream;\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      chunksRef.current = [];\n      mediaRecorderRef.current.ondataavailable = handleDataAvailable;\n      mediaRecorderRef.current.onstop = handleRecordingStopped;\n      mediaRecorderRef.current.start();\n    });\n  };\n\n  const handleStopRecording = () => {\n    setRecording(false);\n    mediaRecorderRef.current.stop();\n  };\n\n  const handleDataAvailable = (event) => {\n    if (event.data.size > 0) {\n      chunksRef.current.push(event.data);\n    }\n  };\n\n  const handleRecordingStopped = () => {\n    const blob = new Blob(chunksRef.current, { type: 'video/webm' });\n    setMediaBlob(blob);\n    chunksRef.current = [];\n  };\n\n  const handleUploadVideo = () => {\n    if (!mediaBlob) {\n      return;\n    }\n\n    const videoId = nanoid();\n    const storageRef = firebase.storage().ref();\n    const videoRef = storageRef.child('videos/' + videoId + '.webm');\n\n    videoRef.put(mediaBlob).then(() => {\n      videoRef.getDownloadURL().then((downloadURL) => {\n        const videoData = {\n          id: videoId,\n          url: downloadURL,\n          likes: 0,\n          dislikes: 0,\n          comments: [],\n        };\n        database.ref('videos/' + videoId).set(videoData);\n        setVideos((prevVideos) => [...prevVideos, videoData]);\n      });\n    });\n  };\n\n  const handleLike = (videoId) => {\n    database\n      .ref('videos/' + videoId)\n      .transaction((video) => {\n        if (video) {\n          video.likes = (video.likes || 0) + 1;\n        }\n        return video;\n      });\n  };\n\n  const handleDislike = (videoId) => {\n    database\n      .ref('videos/' + videoId)\n      .transaction((video) => {\n        if (video) {\n          video.dislikes = (video.dislikes || 0) + 1;\n        }\n        return video;\n      });\n  };\n\n  const handleComment = (videoId) => {\n    if (commentInput.trim() === '') {\n      return;\n    }\n\n    const newComment = {\n      id: nanoid(),\n      text: commentInput.trim(),\n    };\n\n    database.ref('videos/' + videoId + '/comments').push(newComment);\n    setCommentInput('');\n  };\n\n  const handleDelete = (videoId) => {\n    const confirmDelete = window.confirm('Are you sure you want to delete this video?');\n    if (confirmDelete) {\n      database.ref('videos/' + videoId).remove();\n      setVideos((prevVideos) => prevVideos.filter((video) => video.id !== videoId));\n    }\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"mb-4\">Video Recorder</h1>\n      <div className=\"mb-2\">\n        {recording ? (\n          <button className=\"btn btn-danger mr-2\" onClick={handleStopRecording}>\n            Stop Recording\n          </button>\n        ) : (\n          <button className=\"btn btn-primary mr-2\" onClick={handleStartRecording}>\n            Start Recording\n          </button>\n        )}\n        {recording ? null : (\n          <button className=\"btn btn-success\" onClick={handleUploadVideo} disabled={!mediaBlob}>\n            Upload Video\n          </button>\n        )}\n      </div>\n      <div className=\"mb-4\">\n        {mediaBlob && (\n          <video\n            ref={videoRef}\n            src={URL.createObjectURL(mediaBlob)}\n            style={{ width: '100%', marginBottom: '10px' }}\n            autoPlay\n            controls\n          />\n        )}\n      </div>\n      <hr />\n      {videos.map((video) => (\n        <div key={video.id} className=\"card mb-3\">\n          <div className=\"card-body\">\n            <video\n              src={video.url}\n              controls\n              style={{ width: '100%', cursor: 'pointer' }}\n              onMouseEnter={(e) => e.target.play()}\n              onMouseLeave={(e) => e.target.pause()}\n            />\n            <div className=\"text-muted mt-2\">\n              Likes: {video.likes || 0} | Dislikes: {video.dislikes || 0}\n            </div>\n            <div className=\"my-3\">\n              <button className=\"btn btn-sm btn-primary mr-2\" onClick={() => handleLike(video.id)}>\n                Like\n              </button>\n              <button\n                className=\"btn btn-sm btn-danger\"\n                onClick={() => handleDislike(video.id)}\n              >\n                Dislike\n              </button>\n            </div>\n            <div>\n              <h5>Comments:</h5>\n              <ul className=\"list-unstyled\">\n                {Object.values(video.comments || []).map((comment) => (\n                  <li key={comment.id}>{comment.text}</li>\n                ))}\n              </ul>\n              <div className=\"input-group mb-3\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Add a comment...\"\n                  aria-label=\"Add a comment\"\n                  aria-describedby=\"button-addon2\"\n                  value={commentInput}\n                  onChange={(e) => setCommentInput(e.target.value)}\n                />\n                <div className=\"input-group-append\">\n                  <button\n                    className=\"btn btn-outline-secondary\"\n                    type=\"button\"\n                    id=\"button-addon2\"\n                    onClick={() => handleComment(video.id)}\n                  >\n                    Post\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div>\n              <button className=\"btn btn-danger btn-sm\" onClick={() => handleDelete(video.id)}>\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default VideoUploader;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","StorageError","constructor","code","message","status_","super","prependCode","this","customData","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","status","_codeEquals","StorageErrorCode","ErrorCode","unknown","UNKNOWN","retryLimitExceeded","RETRY_LIMIT_EXCEEDED","canceled","CANCELED","cannotSliceBlob","CANNOT_SLICE_BLOB","invalidArgument","INVALID_ARGUMENT","appDeleted","APP_DELETED","invalidRootOperation","name","INVALID_ROOT_OPERATION","invalidFormat","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","Location","bucket","path","path_","isRoot","length","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","static","bucketString","host","bucketLocation","makeFromUrl","e","INVALID_DEFAULT_BUCKET","url","location","bucketDomain","gsRegex","RegExp","httpModify","loc","decodeURIComponent","firebaseStorageHost","replace","groups","regex","indices","postModify","charAt","slice","i","group","captures","exec","bucketValue","pathValue","INVALID_URL","invalidUrl","FailRequest","error","promise_","Promise","reject","getPromise","cancel","_appDelete","isString","p","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","isRetryStatusCode","additionalRetryCodes","isFiveHundredCode","isExtraRetryCode","indexOf","isAdditionalRetryCode","NetworkRequest","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","wasCanceled","ABORT","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponse","err","getErrorText","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","call","waitMillis","Math","random","stopped","stop","wasTimeout","start","appDelete","abort","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob$1","undefined","bb","append","getBlob","UNSUPPORTED_ENVIRONMENT","decodeBase64","encoded","atob","polyFill","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataUrl","parts","DataURLParts","base64","rest","decoded","percentEncodedBytes_","dataURLBytes_","b","c","charCodeAt","push","Uint8Array","hasMinus","hasUnder","hasPlus","hasSlash","bytes","includes","array","dataURL","matches","match","middle","s","end","substring","endsWith","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","sliced","blob","webkitSlice","mozSlice","sliceBlob","buffer","blobby","map","val","uint8Arrays","finalLength","forEach","merged","index","uploadData","jsonObjectOrNull","obj","JSON","parse","Array","isArray","lastComponent","lastIndexOf","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","getMappings","mappings","nameMapping","_metadata","fullPath","xformPath","sizeMapping","Number","fromResource","service","resource","len","mapping","defineProperty","get","_makeStorageReference","addRef","fromResourceString","resourceString","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromResponseString","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromBackendResponse","RequestInfo","method","handler","urlParams","headers","body","errorHandler","progressCallback","successCodes","handlerCheck","cndn","metadataHandler","xhr","text","downloadUrlHandler","tokens","split","token","alt","downloadUrlFromResourceString","_protocol","sharedErrorHandler","newErr","UNAUTHORIZED_APP","UNAUTHENTICATED","QUOTA_EXCEEDED","UNAUTHORIZED","objectErrorHandler","shared","OBJECT_NOT_FOUND","getMetadata$2","maxOperationRetryTime","requestInfo","list$2","delimiter","pageToken","maxResults","listHandler","metadataForUpload_","metadataClone","assign","determineContentType_","multipartUpload","boundary","str","toString","genBoundary","metadata_","preBlobPart","postBlobPart","maxUploadRetryTime","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","getResponseHeader","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","SERVER_FILE_WRONG_SIZE","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","ERROR","taskStateFromInternalTaskState","state","Observer","nextOrObserver","complete","next","observer","f","argsToForward","textFactoryOverride","XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","backoffExpired","isExponentialBackoffExpired","sleepTime","max","_transition","_metadataErrorHandler","maxSleepTime","storage","_promise","_start","_makeProgressCallback","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","pendingTimeout","_continueUpload","_oneShotUpload","_resolveToken","callback","all","_getAuthToken","_getAppCheckToken","authToken","appCheckToken","metadataForUpload","createResumableUpload","_location","createRequest","_makeRequest","sizeString","isNaN","getResumableUploadStatus","statusRequest","uploadRequest","newStatus","_increaseMultiplier","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","snapshot","externalState","bytesTransferred","totalBytes","task","on","completed","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_notifyObserver","splice","_finishPromise","triggered","bind","resume","valid","pause","Reference","_service","_newRef","root","parent","newPath","_throwIfRoot","listAll$1","accumulator","listAllHelper","async","opt","nextPage","list$1","options","op","makeRequestWithTokens","updateMetadata$1","updateMetadata$2","getDownloadURL$1","getDownloadUrl","NO_DOWNLOAD_URL","deleteObject$1","_xhr","_text","deleteObject$2","_getChild$1","childPath","canonicalChildPath","filter","component","join","child","refFromPath","FirebaseStorageImpl","_bucket","NO_DEFAULT_BUCKET","ref$1","serviceOrRef","pathOrUrl","test","extractBucket","config","makeFromBucketSpec","app","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","_overrideAuthToken","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","_delete","request","clear","requestFactory","appId","firebaseVersion","addGmpidHeader_","addAuthHeader_","addVersionHeader_","addAppCheckHeader_","makeRequest","add","delete","version","STORAGE_TYPE","uploadBytesResumable","uploadBytesResumable$1","getMetadata","getMetadata$1","connectStorageEmulator","port","mockUserToken","projectId","connectStorageEmulator$1","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","_registerComponent","setMultipleInstances","registerVersion","UploadTaskSnapshotCompat","_delegate","UploadTaskCompat","wrappedNextOrObserver","taskSnapshot","ListResultCompat","ReferenceCompat","_getChild","put","putString","listAll","r","list","updateMetadata","getDownloadURL","deleteObject","StorageServiceCompat","refFromURL","setMaxUploadRetryTime","setMaxOperationRetryTime","useEmulator","storageExp","identifier","instance","namespaceExports","Storage","INTERNAL","registerComponent","setServiceProps","firebaseConfig121212","apiKey","authDomain","databaseURL","storageBucket","messagingSenderId","measurementId","firebase","initializeApp","database","videos","setVideos","useState","recording","setRecording","mediaBlob","setMediaBlob","commentInput","setCommentInput","videoRef","useRef","mediaRecorderRef","chunksRef","handleDataAvailable","event","handleRecordingStopped","React","className","onClick","handleStopRecording","handleStartRecording","navigator","mediaDevices","getUserMedia","video","stream","srcObject","MediaRecorder","ondataavailable","onstop","handleUploadVideo","videoId","nanoid","downloadURL","videoData","id","likes","dislikes","comments","prevVideos","concat","_toConsumableArray","disabled","src","URL","createObjectURL","style","width","marginBottom","autoPlay","controls","cursor","onMouseEnter","target","play","onMouseLeave","handleLike","transaction","handleDislike","values","comment","placeholder","onChange","trim","newComment","handleComment","handleDelete","window","confirm","remove","crypto","getRandomValues","reduce","byte","toUpperCase"],"sourceRoot":""}