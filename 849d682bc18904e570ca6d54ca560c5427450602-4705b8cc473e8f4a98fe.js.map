{"version":3,"file":"849d682bc18904e570ca6d54ca560c5427450602-4705b8cc473e8f4a98fe.js","mappings":"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","sources":["webpack://blabzio/./node_modules/@firebase/database-compat/dist/index.esm2017.js"],"sourcesContent":["import firebase from '@firebase/app-compat';\nimport { Provider, ComponentContainer, Component } from '@firebase/component';\nimport { _validatePathString, onChildMoved, onChildChanged, onChildRemoved, onChildAdded, onValue, off, get, query, limitToFirst, limitToLast, orderByChild, orderByKey, orderByPriority, orderByValue, startAt, startAfter, endAt, endBefore, equalTo, _ReferenceImpl, _QueryImpl, _QueryParams, child, set, _validateWritablePath, update, setWithPriority, remove, runTransaction, setPriority, push, OnDisconnect as OnDisconnect$1, forceWebSockets, forceLongPolling, connectDatabaseEmulator, refFromURL, ref, goOffline, goOnline, serverTimestamp, increment, _setSDKVersion, _repoManagerDatabaseFromApp, enableLogging } from '@firebase/database';\nimport { errorPrefix, validateArgCount, validateCallback, validateContextObject, Deferred } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n\nconst name = \"@firebase/database-compat\";\nconst version = \"0.3.4\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database-compat');\r\nconst warn = function (msg) {\r\n    const message = 'FIREBASE WARNING: ' + msg;\r\n    logClient.warn(message);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst validateBoolean = function (fnName, argumentName, bool, optional) {\r\n    if (optional && bool === undefined) {\r\n        return;\r\n    }\r\n    if (typeof bool !== 'boolean') {\r\n        throw new Error(errorPrefix(fnName, argumentName) + 'must be a boolean.');\r\n    }\r\n};\r\nconst validateEventType = function (fnName, eventType, optional) {\r\n    if (optional && eventType === undefined) {\r\n        return;\r\n    }\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(errorPrefix(fnName, 'eventType') +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass OnDisconnect {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n    }\r\n    cancel(onComplete) {\r\n        validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\r\n        const result = this._delegate.cancel();\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    remove(onComplete) {\r\n        validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\r\n        const result = this._delegate.remove();\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    set(value, onComplete) {\r\n        validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\r\n        const result = this._delegate.set(value);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    setWithPriority(value, priority, onComplete) {\r\n        validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateCallback('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);\r\n        const result = this._delegate.setWithPriority(value, priority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    update(objectToMerge, onComplete) {\r\n        validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        if (Array.isArray(objectToMerge)) {\r\n            const newObjectToMerge = {};\r\n            for (let i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\r\n        const result = this._delegate.update(objectToMerge);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass TransactionResult {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     */\r\n    constructor(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    toJSON() {\r\n        validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nclass DataSnapshot {\r\n    constructor(_database, _delegate) {\r\n        this._database = _database;\r\n        this._delegate = _delegate;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    val() {\r\n        validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this._delegate.val();\r\n    }\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    exportVal() {\r\n        validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this._delegate.exportVal();\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    toJSON() {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this._delegate.toJSON();\r\n    }\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @returns Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    exists() {\r\n        validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return this._delegate.exists();\r\n    }\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param path - Path to a child.\r\n     * @returns DataSnapshot for child node.\r\n     */\r\n    child(path) {\r\n        validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        path = String(path);\r\n        _validatePathString('DataSnapshot.child', 'path', path, false);\r\n        return new DataSnapshot(this._database, this._delegate.child(path));\r\n    }\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param path - Path to a child.\r\n     * @returns Whether the child exists.\r\n     */\r\n    hasChild(path) {\r\n        validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        _validatePathString('DataSnapshot.hasChild', 'path', path, false);\r\n        return this._delegate.hasChild(path);\r\n    }\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @returns The priority.\r\n     */\r\n    getPriority() {\r\n        validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        return this._delegate.priority;\r\n    }\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each child.\r\n     * @returns True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    forEach(action) {\r\n        validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        validateCallback('DataSnapshot.forEach', 'action', action, false);\r\n        return this._delegate.forEach(expDataSnapshot => action(new DataSnapshot(this._database, expDataSnapshot)));\r\n    }\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @returns True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    hasChildren() {\r\n        validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        return this._delegate.hasChildren();\r\n    }\r\n    get key() {\r\n        return this._delegate.key;\r\n    }\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @returns The number of children that this DataSnapshot contains.\r\n     */\r\n    numChildren() {\r\n        validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this._delegate.size;\r\n    }\r\n    /**\r\n     * @returns The Firebase reference for the location this snapshot's data came\r\n     * from.\r\n     */\r\n    getRef() {\r\n        validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return new Reference(this._database, this._delegate.ref);\r\n    }\r\n    get ref() {\r\n        return this.getRef();\r\n    }\r\n}\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nclass Query {\r\n    constructor(database, _delegate) {\r\n        this.database = database;\r\n        this._delegate = _delegate;\r\n    }\r\n    on(eventType, callback, cancelCallbackOrContext, context) {\r\n        var _a;\r\n        validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateCallback('Query.on', 'callback', callback, false);\r\n        const ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        const valueCallback = (expSnapshot, previousChildName) => {\r\n            callback.call(ret.context, new DataSnapshot(this.database, expSnapshot), previousChildName);\r\n        };\r\n        valueCallback.userCallback = callback;\r\n        valueCallback.context = ret.context;\r\n        const cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);\r\n        switch (eventType) {\r\n            case 'value':\r\n                onValue(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_added':\r\n                onChildAdded(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_removed':\r\n                onChildRemoved(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_changed':\r\n                onChildChanged(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            case 'child_moved':\r\n                onChildMoved(this._delegate, valueCallback, cancelCallback);\r\n                return callback;\r\n            default:\r\n                throw new Error(errorPrefix('Query.on', 'eventType') +\r\n                    'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                    '\"child_changed\", or \"child_moved\".');\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', eventType, true);\r\n        validateCallback('Query.off', 'callback', callback, true);\r\n        validateContextObject('Query.off', 'context', context, true);\r\n        if (callback) {\r\n            const valueCallback = () => { };\r\n            valueCallback.userCallback = callback;\r\n            valueCallback.context = context;\r\n            off(this._delegate, eventType, valueCallback);\r\n        }\r\n        else {\r\n            off(this._delegate, eventType);\r\n        }\r\n    }\r\n    /**\r\n     * Get the server-value for this query, or return a cached value if not connected.\r\n     */\r\n    get() {\r\n        return get(this._delegate).then(expSnapshot => {\r\n            return new DataSnapshot(this.database, expSnapshot);\r\n        });\r\n    }\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     */\r\n    once(eventType, callback, failureCallbackOrContext, context) {\r\n        validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateCallback('Query.once', 'callback', callback, true);\r\n        const ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\r\n        const deferred = new Deferred();\r\n        const valueCallback = (expSnapshot, previousChildName) => {\r\n            const result = new DataSnapshot(this.database, expSnapshot);\r\n            if (callback) {\r\n                callback.call(ret.context, result, previousChildName);\r\n            }\r\n            deferred.resolve(result);\r\n        };\r\n        valueCallback.userCallback = callback;\r\n        valueCallback.context = ret.context;\r\n        const cancelCallback = (error) => {\r\n            if (ret.cancel) {\r\n                ret.cancel.call(ret.context, error);\r\n            }\r\n            deferred.reject(error);\r\n        };\r\n        switch (eventType) {\r\n            case 'value':\r\n                onValue(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_added':\r\n                onChildAdded(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_removed':\r\n                onChildRemoved(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_changed':\r\n                onChildChanged(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            case 'child_moved':\r\n                onChildMoved(this._delegate, valueCallback, cancelCallback, {\r\n                    onlyOnce: true\r\n                });\r\n                break;\r\n            default:\r\n                throw new Error(errorPrefix('Query.once', 'eventType') +\r\n                    'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                    '\"child_changed\", or \"child_moved\".');\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     */\r\n    limitToFirst(limit) {\r\n        validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, limitToFirst(limit)));\r\n    }\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     */\r\n    limitToLast(limit) {\r\n        validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, limitToLast(limit)));\r\n    }\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     */\r\n    orderByChild(path) {\r\n        validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByChild(path)));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     */\r\n    orderByKey() {\r\n        validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByKey()));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     */\r\n    orderByPriority() {\r\n        validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByPriority()));\r\n    }\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     */\r\n    orderByValue() {\r\n        validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        return new Query(this.database, query(this._delegate, orderByValue()));\r\n    }\r\n    startAt(value = null, name) {\r\n        validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, startAt(value, name)));\r\n    }\r\n    startAfter(value = null, name) {\r\n        validateArgCount('Query.startAfter', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, startAfter(value, name)));\r\n    }\r\n    endAt(value = null, name) {\r\n        validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, endAt(value, name)));\r\n    }\r\n    endBefore(value = null, name) {\r\n        validateArgCount('Query.endBefore', 0, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, endBefore(value, name)));\r\n    }\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     */\r\n    equalTo(value, name) {\r\n        validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        return new Query(this.database, query(this._delegate, equalTo(value, name)));\r\n    }\r\n    /**\r\n     * @returns URL for this location.\r\n     */\r\n    toString() {\r\n        validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this._delegate.toString();\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    toJSON() {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this._delegate.toJSON();\r\n    }\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     */\r\n    isEqual(other) {\r\n        validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            const error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error);\r\n        }\r\n        return this._delegate.isEqual(other._delegate);\r\n    }\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param fnName - The function name (on or once)\r\n     *\r\n     */\r\n    static getCancelAndContextArgs_(fnName, cancelOrContext, context) {\r\n        const ret = { cancel: undefined, context: undefined };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            validateCallback(fnName, 'cancel', ret.cancel, true);\r\n            ret.context = context;\r\n            validateContextObject(fnName, 'context', ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(errorPrefix(fnName, 'cancelOrContext') +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    get ref() {\r\n        return new Reference(this.database, new _ReferenceImpl(this._delegate._repo, this._delegate._path));\r\n    }\r\n}\r\nclass Reference extends Query {\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     */\r\n    constructor(database, _delegate) {\r\n        super(database, new _QueryImpl(_delegate._repo, _delegate._path, new _QueryParams(), false));\r\n        this.database = database;\r\n        this._delegate = _delegate;\r\n    }\r\n    /** @returns {?string} */\r\n    getKey() {\r\n        validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        return this._delegate.key;\r\n    }\r\n    child(pathString) {\r\n        validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        return new Reference(this.database, child(this._delegate, pathString));\r\n    }\r\n    /** @returns {?Reference} */\r\n    getParent() {\r\n        validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        const parent = this._delegate.parent;\r\n        return parent ? new Reference(this.database, parent) : null;\r\n    }\r\n    /** @returns {!Reference} */\r\n    getRoot() {\r\n        validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        return new Reference(this.database, this._delegate.root);\r\n    }\r\n    set(newVal, onComplete) {\r\n        validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateCallback('Reference.set', 'onComplete', onComplete, true);\r\n        const result = set(this._delegate, newVal);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    update(values, onComplete) {\r\n        validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        if (Array.isArray(values)) {\r\n            const newObjectToMerge = {};\r\n            for (let i = 0; i < values.length; ++i) {\r\n                newObjectToMerge['' + i] = values[i];\r\n            }\r\n            values = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        _validateWritablePath('Reference.update', this._delegate._path);\r\n        validateCallback('Reference.update', 'onComplete', onComplete, true);\r\n        const result = update(this._delegate, values);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    setWithPriority(newVal, newPriority, onComplete) {\r\n        validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateCallback('Reference.setWithPriority', 'onComplete', onComplete, true);\r\n        const result = setWithPriority(this._delegate, newVal, newPriority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    remove(onComplete) {\r\n        validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateCallback('Reference.remove', 'onComplete', onComplete, true);\r\n        const result = remove(this._delegate);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    transaction(transactionUpdate, onComplete, applyLocally) {\r\n        validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateCallback('Reference.transaction', 'transactionUpdate', transactionUpdate, false);\r\n        validateCallback('Reference.transaction', 'onComplete', onComplete, true);\r\n        validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);\r\n        const result = runTransaction(this._delegate, transactionUpdate, {\r\n            applyLocally\r\n        }).then(transactionResult => new TransactionResult(transactionResult.committed, new DataSnapshot(this.database, transactionResult.snapshot)));\r\n        if (onComplete) {\r\n            result.then(transactionResult => onComplete(null, transactionResult.committed, transactionResult.snapshot), error => onComplete(error, false, null));\r\n        }\r\n        return result;\r\n    }\r\n    setPriority(priority, onComplete) {\r\n        validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\r\n        const result = setPriority(this._delegate, priority);\r\n        if (onComplete) {\r\n            result.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        return result;\r\n    }\r\n    push(value, onComplete) {\r\n        validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateCallback('Reference.push', 'onComplete', onComplete, true);\r\n        const expPromise = push(this._delegate, value);\r\n        const promise = expPromise.then(expRef => new Reference(this.database, expRef));\r\n        if (onComplete) {\r\n            promise.then(() => onComplete(null), error => onComplete(error));\r\n        }\r\n        const result = new Reference(this.database, expPromise);\r\n        result.then = promise.then.bind(promise);\r\n        result.catch = promise.catch.bind(promise, undefined);\r\n        return result;\r\n    }\r\n    onDisconnect() {\r\n        _validateWritablePath('Reference.onDisconnect', this._delegate._path);\r\n        return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));\r\n    }\r\n    get key() {\r\n        return this.getKey();\r\n    }\r\n    get parent() {\r\n        return this.getParent();\r\n    }\r\n    get root() {\r\n        return this.getRoot();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n */\r\nclass Database {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     */\r\n    constructor(_delegate, app) {\r\n        this._delegate = _delegate;\r\n        this.app = app;\r\n        this.INTERNAL = {\r\n            delete: () => this._delegate._delete(),\r\n            forceWebSockets,\r\n            forceLongPolling\r\n        };\r\n    }\r\n    /**\r\n     * Modify this instance to communicate with the Realtime Database emulator.\r\n     *\r\n     * <p>Note: This method must be called before performing any other operation.\r\n     *\r\n     * @param host - the emulator host (ex: localhost)\r\n     * @param port - the emulator port (ex: 8080)\r\n     * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n     */\r\n    useEmulator(host, port, options = {}) {\r\n        connectDatabaseEmulator(this._delegate, host, port, options);\r\n    }\r\n    ref(path) {\r\n        validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            const childRef = refFromURL(this._delegate, path.toString());\r\n            return new Reference(this, childRef);\r\n        }\r\n        else {\r\n            const childRef = ref(this._delegate, path);\r\n            return new Reference(this, childRef);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @returns Firebase reference.\r\n     */\r\n    refFromURL(url) {\r\n        const apiName = 'database.refFromURL';\r\n        validateArgCount(apiName, 1, 1, arguments.length);\r\n        const childRef = refFromURL(this._delegate, url);\r\n        return new Reference(this, childRef);\r\n    }\r\n    // Make individual repo go offline.\r\n    goOffline() {\r\n        validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        return goOffline(this._delegate);\r\n    }\r\n    goOnline() {\r\n        validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        return goOnline(this._delegate);\r\n    }\r\n}\r\nDatabase.ServerValue = {\r\n    TIMESTAMP: serverTimestamp(),\r\n    increment: (delta) => increment(delta)\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n *\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAuthImpl - custom auth implementation\r\n */\r\nfunction initStandalone({ app, url, version, customAuthImpl, namespace, nodeAdmin = false }) {\r\n    _setSDKVersion(version);\r\n    /**\r\n     * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n     * any actual function.\r\n     */\r\n    const authProvider = new Provider('auth-internal', new ComponentContainer('database-standalone'));\r\n    authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    return {\r\n        instance: new Database(_repoManagerDatabaseFromApp(app, authProvider, \r\n        /* appCheckProvider= */ undefined, url, nodeAdmin), app),\r\n        namespace\r\n    };\r\n}\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  initStandalone: initStandalone\n});\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    instance.INTERNAL.registerComponent(new Component('database-compat', (container, { instanceIdentifier: url }) => {\r\n        /* Dependencies */\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app-compat').getImmediate();\r\n        const databaseExp = container\r\n            .getProvider('database')\r\n            .getImmediate({ identifier: url });\r\n        return new Database(databaseExp, app);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */)\r\n        .setServiceProps(\r\n    // firebase.database namespace properties\r\n    {\r\n        Reference,\r\n        Query,\r\n        Database,\r\n        DataSnapshot,\r\n        enableLogging,\r\n        INTERNAL,\r\n        ServerValue\r\n    })\r\n        .setMultipleInstances(true));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterDatabase(firebase);\n\nexport { registerDatabase };\n//# sourceMappingURL=index.esm2017.js.map\n"],"names":["logClient","warn","msg","message","OnDisconnect","constructor","_delegate","this","cancel","onComplete","arguments","length","result","then","error","remove","set","value","setWithPriority","priority","update","objectToMerge","Array","isArray","newObjectToMerge","i","TransactionResult","committed","snapshot","toJSON","DataSnapshot","_database","val","exportVal","exists","child","path","String","hasChild","getPriority","forEach","action","expDataSnapshot","hasChildren","key","numChildren","size","getRef","Reference","ref","Query","database","on","eventType","callback","cancelCallbackOrContext","context","_a","ret","getCancelAndContextArgs_","valueCallback","expSnapshot","previousChildName","call","userCallback","cancelCallback","bind","Error","off","fnName","optional","undefined","validateEventType","get","once","failureCallbackOrContext","deferred","resolve","reject","onlyOnce","promise","limitToFirst","limit","limitToLast","orderByChild","orderByKey","orderByPriority","orderByValue","startAt","name","startAfter","endAt","endBefore","equalTo","toString","isEqual","other","static","cancelOrContext","_repo","_path","super","getKey","pathString","getParent","parent","getRoot","root","newVal","values","newPriority","transaction","transactionUpdate","applyLocally","argumentName","bool","validateBoolean","transactionResult","setPriority","push","expPromise","expRef","catch","onDisconnect","Database","app","INTERNAL","delete","_delete","forceWebSockets","forceLongPolling","useEmulator","host","port","options","childRef","refFromURL","url","goOffline","goOnline","ServerValue","TIMESTAMP","increment","delta","Object","freeze","__proto__","initStandalone","version","customAuthImpl","namespace","nodeAdmin","authProvider","setComponent","instance","registerComponent","container","instanceIdentifier","getProvider","getImmediate","databaseExp","identifier","setServiceProps","enableLogging","setMultipleInstances","registerVersion"],"sourceRoot":""}