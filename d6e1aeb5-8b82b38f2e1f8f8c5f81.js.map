{"version":3,"file":"d6e1aeb5-8b82b38f2e1f8f8c5f81.js","mappings":"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","sources":["webpack://blabzio/./node_modules/video.js/dist/video.es.js"],"sourcesContent":["/**\n * @license\n * Video.js 8.3.0 <http://videojs.com/>\n * Copyright Brightcove, Inc. <https://www.brightcove.com/>\n * Available under Apache License Version 2.0\n * <https://github.com/videojs/video.js/blob/main/LICENSE>\n *\n * Includes vtt.js <https://github.com/mozilla/vtt.js>\n * Available under Apache License Version 2.0\n * <https://github.com/mozilla/vtt.js/blob/main/LICENSE>\n */\n\nimport window$1 from 'global/window';\nimport document from 'global/document';\nimport keycode from 'keycode';\nimport safeParseTuple from 'safe-json-parse/tuple';\nimport XHR from '@videojs/xhr';\nimport vtt from 'videojs-vtt.js';\nimport _resolveUrl from '@videojs/vhs-utils/es/resolve-url.js';\nimport _extends from '@babel/runtime/helpers/extends';\nimport { Parser } from 'm3u8-parser';\nimport { DEFAULT_VIDEO_CODEC, DEFAULT_AUDIO_CODEC, parseCodecs, muxerSupportsCodec, browserSupportsCodec, translateLegacyCodec, codecsFromDefault, isAudioCodec, getMimeForCodec } from '@videojs/vhs-utils/es/codecs.js';\nimport { simpleTypeFromSourceType } from '@videojs/vhs-utils/es/media-types.js';\nimport { isArrayBufferView, concatTypedArrays, stringToBytes, toUint8 } from '@videojs/vhs-utils/es/byte-helpers';\nimport { generateSidxKey, parseUTCTiming, parse, addSidxSegmentsToPlaylist } from 'mpd-parser';\nimport parseSidx from 'mux.js/lib/tools/parse-sidx';\nimport { getId3Offset } from '@videojs/vhs-utils/es/id3-helpers';\nimport { detectContainerForBytes, isLikelyFmp4MediaSegment } from '@videojs/vhs-utils/es/containers';\nimport { ONE_SECOND_IN_TS } from 'mux.js/lib/utils/clock';\n\nvar version$6 = \"8.3.0\";\n\n/**\n * An Object that contains lifecycle hooks as keys which point to an array\n * of functions that are run when a lifecycle is triggered\n *\n * @private\n */\nconst hooks_ = {};\n\n/**\n * Get a list of hooks for a specific lifecycle\n *\n * @param  {string} type\n *         the lifecycle to get hooks from\n *\n * @param  {Function|Function[]} [fn]\n *         Optionally add a hook (or hooks) to the lifecycle that your are getting.\n *\n * @return {Array}\n *         an array of hooks, or an empty array if there are none.\n */\nconst hooks = function (type, fn) {\n  hooks_[type] = hooks_[type] || [];\n  if (fn) {\n    hooks_[type] = hooks_[type].concat(fn);\n  }\n  return hooks_[type];\n};\n\n/**\n * Add a function hook to a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle to hook the function to.\n *\n * @param {Function|Function[]}\n *        The function or array of functions to attach.\n */\nconst hook = function (type, fn) {\n  hooks(type, fn);\n};\n\n/**\n * Remove a hook from a specific videojs lifecycle.\n *\n * @param  {string} type\n *         the lifecycle that the function hooked to\n *\n * @param  {Function} fn\n *         The hooked function to remove\n *\n * @return {boolean}\n *         The function that was removed or undef\n */\nconst removeHook = function (type, fn) {\n  const index = hooks(type).indexOf(fn);\n  if (index <= -1) {\n    return false;\n  }\n  hooks_[type] = hooks_[type].slice();\n  hooks_[type].splice(index, 1);\n  return true;\n};\n\n/**\n * Add a function hook that will only run once to a specific videojs lifecycle.\n *\n * @param {string} type\n *        the lifecycle to hook the function to.\n *\n * @param {Function|Function[]}\n *        The function or array of functions to attach.\n */\nconst hookOnce = function (type, fn) {\n  hooks(type, [].concat(fn).map(original => {\n    const wrapper = (...args) => {\n      removeHook(type, wrapper);\n      return original(...args);\n    };\n    return wrapper;\n  }));\n};\n\n/**\n * @file fullscreen-api.js\n * @module fullscreen-api\n */\n\n/**\n * Store the browser-specific methods for the fullscreen API.\n *\n * @type {Object}\n * @see [Specification]{@link https://fullscreen.spec.whatwg.org}\n * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}\n */\nconst FullscreenApi = {\n  prefixed: true\n};\n\n// browser API methods\nconst apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror', 'fullscreen'],\n// WebKit\n['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror', '-webkit-full-screen'],\n// Mozilla\n['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror', '-moz-full-screen'],\n// Microsoft\n['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError', '-ms-fullscreen']];\nconst specApi = apiMap[0];\nlet browserApi;\n\n// determine the supported set of functions\nfor (let i = 0; i < apiMap.length; i++) {\n  // check for exitFullscreen function\n  if (apiMap[i][1] in document) {\n    browserApi = apiMap[i];\n    break;\n  }\n}\n\n// map the browser API names to the spec API names\nif (browserApi) {\n  for (let i = 0; i < browserApi.length; i++) {\n    FullscreenApi[specApi[i]] = browserApi[i];\n  }\n  FullscreenApi.prefixed = browserApi[0] !== specApi[0];\n}\n\n/**\n * @file create-logger.js\n * @module create-logger\n */\n\n// This is the private tracking variable for the logging history.\nlet history = [];\n\n/**\n * Log messages to the console and history based on the type of message\n *\n * @private\n * @param  {string} type\n *         The name of the console method to use.\n *\n * @param  {Array} args\n *         The arguments to be passed to the matching console method.\n */\nconst LogByTypeFactory = (name, log) => (type, level, args) => {\n  const lvl = log.levels[level];\n  const lvlRegExp = new RegExp(`^(${lvl})$`);\n  if (type !== 'log') {\n    // Add the type to the front of the message when it's not \"log\".\n    args.unshift(type.toUpperCase() + ':');\n  }\n\n  // Add console prefix after adding to history.\n  args.unshift(name + ':');\n\n  // Add a clone of the args at this point to history.\n  if (history) {\n    history.push([].concat(args));\n\n    // only store 1000 history entries\n    const splice = history.length - 1000;\n    history.splice(0, splice > 0 ? splice : 0);\n  }\n\n  // If there's no console then don't try to output messages, but they will\n  // still be stored in history.\n  if (!window$1.console) {\n    return;\n  }\n\n  // Was setting these once outside of this function, but containing them\n  // in the function makes it easier to test cases where console doesn't exist\n  // when the module is executed.\n  let fn = window$1.console[type];\n  if (!fn && type === 'debug') {\n    // Certain browsers don't have support for console.debug. For those, we\n    // should default to the closest comparable log.\n    fn = window$1.console.info || window$1.console.log;\n  }\n\n  // Bail out if there's no console or if this type is not allowed by the\n  // current logging level.\n  if (!fn || !lvl || !lvlRegExp.test(type)) {\n    return;\n  }\n  fn[Array.isArray(args) ? 'apply' : 'call'](window$1.console, args);\n};\nfunction createLogger$1(name) {\n  // This is the private tracking variable for logging level.\n  let level = 'info';\n\n  // the curried logByType bound to the specific log and history\n  let logByType;\n\n  /**\n   * Logs plain debug messages. Similar to `console.log`.\n   *\n   * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)\n   * of our JSDoc template, we cannot properly document this as both a function\n   * and a namespace, so its function signature is documented here.\n   *\n   * #### Arguments\n   * ##### *args\n   * *[]\n   *\n   * Any combination of values that could be passed to `console.log()`.\n   *\n   * #### Return Value\n   *\n   * `undefined`\n   *\n   * @namespace\n   * @param    {...*} args\n   *           One or more messages or objects that should be logged.\n   */\n  const log = function (...args) {\n    logByType('log', level, args);\n  };\n\n  // This is the logByType helper that the logging methods below use\n  logByType = LogByTypeFactory(name, log);\n\n  /**\n   * Create a new sublogger which chains the old name to the new name.\n   *\n   * For example, doing `videojs.log.createLogger('player')` and then using that logger will log the following:\n   * ```js\n   *  mylogger('foo');\n   *  // > VIDEOJS: player: foo\n   * ```\n   *\n   * @param {string} name\n   *        The name to add call the new logger\n   * @return {Object}\n   */\n  log.createLogger = subname => createLogger$1(name + ': ' + subname);\n\n  /**\n   * Enumeration of available logging levels, where the keys are the level names\n   * and the values are `|`-separated strings containing logging methods allowed\n   * in that logging level. These strings are used to create a regular expression\n   * matching the function name being called.\n   *\n   * Levels provided by Video.js are:\n   *\n   * - `off`: Matches no calls. Any value that can be cast to `false` will have\n   *   this effect. The most restrictive.\n   * - `all`: Matches only Video.js-provided functions (`debug`, `log`,\n   *   `log.warn`, and `log.error`).\n   * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.\n   * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.\n   * - `warn`: Matches `log.warn` and `log.error` calls.\n   * - `error`: Matches only `log.error` calls.\n   *\n   * @type {Object}\n   */\n  log.levels = {\n    all: 'debug|log|warn|error',\n    off: '',\n    debug: 'debug|log|warn|error',\n    info: 'log|warn|error',\n    warn: 'warn|error',\n    error: 'error',\n    DEFAULT: level\n  };\n\n  /**\n   * Get or set the current logging level.\n   *\n   * If a string matching a key from {@link module:log.levels} is provided, acts\n   * as a setter.\n   *\n   * @param  {string} [lvl]\n   *         Pass a valid level to set a new logging level.\n   *\n   * @return {string}\n   *         The current logging level.\n   */\n  log.level = lvl => {\n    if (typeof lvl === 'string') {\n      if (!log.levels.hasOwnProperty(lvl)) {\n        throw new Error(`\"${lvl}\" in not a valid log level`);\n      }\n      level = lvl;\n    }\n    return level;\n  };\n\n  /**\n   * Returns an array containing everything that has been logged to the history.\n   *\n   * This array is a shallow clone of the internal history record. However, its\n   * contents are _not_ cloned; so, mutating objects inside this array will\n   * mutate them in history.\n   *\n   * @return {Array}\n   */\n  log.history = () => history ? [].concat(history) : [];\n\n  /**\n   * Allows you to filter the history by the given logger name\n   *\n   * @param {string} fname\n   *        The name to filter by\n   *\n   * @return {Array}\n   *         The filtered list to return\n   */\n  log.history.filter = fname => {\n    return (history || []).filter(historyItem => {\n      // if the first item in each historyItem includes `fname`, then it's a match\n      return new RegExp(`.*${fname}.*`).test(historyItem[0]);\n    });\n  };\n\n  /**\n   * Clears the internal history tracking, but does not prevent further history\n   * tracking.\n   */\n  log.history.clear = () => {\n    if (history) {\n      history.length = 0;\n    }\n  };\n\n  /**\n   * Disable history tracking if it is currently enabled.\n   */\n  log.history.disable = () => {\n    if (history !== null) {\n      history.length = 0;\n      history = null;\n    }\n  };\n\n  /**\n   * Enable history tracking if it is currently disabled.\n   */\n  log.history.enable = () => {\n    if (history === null) {\n      history = [];\n    }\n  };\n\n  /**\n   * Logs error messages. Similar to `console.error`.\n   *\n   * @param {...*} args\n   *        One or more messages or objects that should be logged as an error\n   */\n  log.error = (...args) => logByType('error', level, args);\n\n  /**\n   * Logs warning messages. Similar to `console.warn`.\n   *\n   * @param {...*} args\n   *        One or more messages or objects that should be logged as a warning.\n   */\n  log.warn = (...args) => logByType('warn', level, args);\n\n  /**\n   * Logs debug messages. Similar to `console.debug`, but may also act as a comparable\n   * log if `console.debug` is not available\n   *\n   * @param {...*} args\n   *        One or more messages or objects that should be logged as debug.\n   */\n  log.debug = (...args) => logByType('debug', level, args);\n  return log;\n}\n\n/**\n * @file log.js\n * @module log\n */\nconst log$1 = createLogger$1('VIDEOJS');\nconst createLogger = log$1.createLogger;\n\n/**\n * @file obj.js\n * @module obj\n */\n\n/**\n * @callback obj:EachCallback\n *\n * @param {*} value\n *        The current key for the object that is being iterated over.\n *\n * @param {string} key\n *        The current key-value for object that is being iterated over\n */\n\n/**\n * @callback obj:ReduceCallback\n *\n * @param {*} accum\n *        The value that is accumulating over the reduce loop.\n *\n * @param {*} value\n *        The current key for the object that is being iterated over.\n *\n * @param {string} key\n *        The current key-value for object that is being iterated over\n *\n * @return {*}\n *         The new accumulated value.\n */\nconst toString = Object.prototype.toString;\n\n/**\n * Get the keys of an Object\n *\n * @param {Object}\n *        The Object to get the keys from\n *\n * @return {string[]}\n *         An array of the keys from the object. Returns an empty array if the\n *         object passed in was invalid or had no keys.\n *\n * @private\n */\nconst keys = function (object) {\n  return isObject(object) ? Object.keys(object) : [];\n};\n\n/**\n * Array-like iteration for objects.\n *\n * @param {Object} object\n *        The object to iterate over\n *\n * @param {obj:EachCallback} fn\n *        The callback function which is called for each key in the object.\n */\nfunction each(object, fn) {\n  keys(object).forEach(key => fn(object[key], key));\n}\n\n/**\n * Array-like reduce for objects.\n *\n * @param {Object} object\n *        The Object that you want to reduce.\n *\n * @param {Function} fn\n *         A callback function which is called for each key in the object. It\n *         receives the accumulated value and the per-iteration value and key\n *         as arguments.\n *\n * @param {*} [initial = 0]\n *        Starting value\n *\n * @return {*}\n *         The final accumulated value.\n */\nfunction reduce(object, fn, initial = 0) {\n  return keys(object).reduce((accum, key) => fn(accum, object[key], key), initial);\n}\n\n/**\n * Returns whether a value is an object of any kind - including DOM nodes,\n * arrays, regular expressions, etc. Not functions, though.\n *\n * This avoids the gotcha where using `typeof` on a `null` value\n * results in `'object'`.\n *\n * @param  {Object} value\n * @return {boolean}\n */\nfunction isObject(value) {\n  return !!value && typeof value === 'object';\n}\n\n/**\n * Returns whether an object appears to be a \"plain\" object - that is, a\n * direct instance of `Object`.\n *\n * @param  {Object} value\n * @return {boolean}\n */\nfunction isPlain(value) {\n  return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;\n}\n\n/**\n * Merge two objects recursively.\n *\n * Performs a deep merge like\n * {@link https://lodash.com/docs/4.17.10#merge|lodash.merge}, but only merges\n * plain objects (not arrays, elements, or anything else).\n *\n * Non-plain object values will be copied directly from the right-most\n * argument.\n *\n * @param   {Object[]} sources\n *          One or more objects to merge into a new object.\n *\n * @return {Object}\n *          A new object that is the merged result of all sources.\n */\nfunction merge$1(...sources) {\n  const result = {};\n  sources.forEach(source => {\n    if (!source) {\n      return;\n    }\n    each(source, (value, key) => {\n      if (!isPlain(value)) {\n        result[key] = value;\n        return;\n      }\n      if (!isPlain(result[key])) {\n        result[key] = {};\n      }\n      result[key] = merge$1(result[key], value);\n    });\n  });\n  return result;\n}\n\n/**\n * Object.defineProperty but \"lazy\", which means that the value is only set after\n * it is retrieved the first time, rather than being set right away.\n *\n * @param {Object} obj the object to set the property on\n * @param {string} key the key for the property to set\n * @param {Function} getValue the function used to get the value when it is needed.\n * @param {boolean} setter whether a setter should be allowed or not\n */\nfunction defineLazyProperty(obj, key, getValue, setter = true) {\n  const set = value => Object.defineProperty(obj, key, {\n    value,\n    enumerable: true,\n    writable: true\n  });\n  const options = {\n    configurable: true,\n    enumerable: true,\n    get() {\n      const value = getValue();\n      set(value);\n      return value;\n    }\n  };\n  if (setter) {\n    options.set = set;\n  }\n  return Object.defineProperty(obj, key, options);\n}\n\nvar Obj = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  each: each,\n  reduce: reduce,\n  isObject: isObject,\n  isPlain: isPlain,\n  merge: merge$1,\n  defineLazyProperty: defineLazyProperty\n});\n\n/**\n * @file browser.js\n * @module browser\n */\n\n/**\n * Whether or not this device is an iPod.\n *\n * @static\n * @type {Boolean}\n */\nlet IS_IPOD = false;\n\n/**\n * The detected iOS version - or `null`.\n *\n * @static\n * @type {string|null}\n */\nlet IOS_VERSION = null;\n\n/**\n * Whether or not this is an Android device.\n *\n * @static\n * @type {Boolean}\n */\nlet IS_ANDROID = false;\n\n/**\n * The detected Android version - or `null` if not Android or indeterminable.\n *\n * @static\n * @type {number|string|null}\n */\nlet ANDROID_VERSION;\n\n/**\n * Whether or not this is Mozilla Firefox.\n *\n * @static\n * @type {Boolean}\n */\nlet IS_FIREFOX = false;\n\n/**\n * Whether or not this is Microsoft Edge.\n *\n * @static\n * @type {Boolean}\n */\nlet IS_EDGE = false;\n\n/**\n * Whether or not this is any Chromium Browser\n *\n * @static\n * @type {Boolean}\n */\nlet IS_CHROMIUM = false;\n\n/**\n * Whether or not this is any Chromium browser that is not Edge.\n *\n * This will also be `true` for Chrome on iOS, which will have different support\n * as it is actually Safari under the hood.\n *\n * Deprecated, as the behaviour to not match Edge was to prevent Legacy Edge's UA matching.\n * IS_CHROMIUM should be used instead.\n * \"Chromium but not Edge\" could be explicitly tested with IS_CHROMIUM && !IS_EDGE\n *\n * @static\n * @deprecated\n * @type {Boolean}\n */\nlet IS_CHROME = false;\n\n/**\n * The detected Chromium version - or `null`.\n *\n * @static\n * @type {number|null}\n */\nlet CHROMIUM_VERSION = null;\n\n/**\n * The detected Google Chrome version - or `null`.\n * This has always been the _Chromium_ version, i.e. would return on Chromium Edge.\n * Deprecated, use CHROMIUM_VERSION instead.\n *\n * @static\n * @deprecated\n * @type {number|null}\n */\nlet CHROME_VERSION = null;\n\n/**\n * The detected Internet Explorer version - or `null`.\n *\n * @static\n * @deprecated\n * @type {number|null}\n */\nlet IE_VERSION = null;\n\n/**\n * Whether or not this is desktop Safari.\n *\n * @static\n * @type {Boolean}\n */\nlet IS_SAFARI = false;\n\n/**\n * Whether or not this is a Windows machine.\n *\n * @static\n * @type {Boolean}\n */\nlet IS_WINDOWS = false;\n\n/**\n * Whether or not this device is an iPad.\n *\n * @static\n * @type {Boolean}\n */\nlet IS_IPAD = false;\n\n/**\n * Whether or not this device is an iPhone.\n *\n * @static\n * @type {Boolean}\n */\n// The Facebook app's UIWebView identifies as both an iPhone and iPad, so\n// to identify iPhones, we need to exclude iPads.\n// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/\nlet IS_IPHONE = false;\n\n/**\n * Whether or not this device is touch-enabled.\n *\n * @static\n * @const\n * @type {Boolean}\n */\nconst TOUCH_ENABLED = Boolean(isReal() && ('ontouchstart' in window$1 || window$1.navigator.maxTouchPoints || window$1.DocumentTouch && window$1.document instanceof window$1.DocumentTouch));\nconst UAD = window$1.navigator && window$1.navigator.userAgentData;\nif (UAD) {\n  // If userAgentData is present, use it instead of userAgent to avoid warnings\n  // Currently only implemented on Chromium\n  // userAgentData does not expose Android version, so ANDROID_VERSION remains `null`\n\n  IS_ANDROID = UAD.platform === 'Android';\n  IS_EDGE = Boolean(UAD.brands.find(b => b.brand === 'Microsoft Edge'));\n  IS_CHROMIUM = Boolean(UAD.brands.find(b => b.brand === 'Chromium'));\n  IS_CHROME = !IS_EDGE && IS_CHROMIUM;\n  CHROMIUM_VERSION = CHROME_VERSION = (UAD.brands.find(b => b.brand === 'Chromium') || {}).version || null;\n  IS_WINDOWS = UAD.platform === 'Windows';\n}\n\n// If the browser is not Chromium, either userAgentData is not present which could be an old Chromium browser,\n//  or it's a browser that has added userAgentData since that we don't have tests for yet. In either case,\n// the checks need to be made agiainst the regular userAgent string.\nif (!IS_CHROMIUM) {\n  const USER_AGENT = window$1.navigator && window$1.navigator.userAgent || '';\n  IS_IPOD = /iPod/i.test(USER_AGENT);\n  IOS_VERSION = function () {\n    const match = USER_AGENT.match(/OS (\\d+)_/i);\n    if (match && match[1]) {\n      return match[1];\n    }\n    return null;\n  }();\n  IS_ANDROID = /Android/i.test(USER_AGENT);\n  ANDROID_VERSION = function () {\n    // This matches Android Major.Minor.Patch versions\n    // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned\n    const match = USER_AGENT.match(/Android (\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))*/i);\n    if (!match) {\n      return null;\n    }\n    const major = match[1] && parseFloat(match[1]);\n    const minor = match[2] && parseFloat(match[2]);\n    if (major && minor) {\n      return parseFloat(match[1] + '.' + match[2]);\n    } else if (major) {\n      return major;\n    }\n    return null;\n  }();\n  IS_FIREFOX = /Firefox/i.test(USER_AGENT);\n  IS_EDGE = /Edg/i.test(USER_AGENT);\n  IS_CHROMIUM = /Chrome/i.test(USER_AGENT) || /CriOS/i.test(USER_AGENT);\n  IS_CHROME = !IS_EDGE && IS_CHROMIUM;\n  CHROMIUM_VERSION = CHROME_VERSION = function () {\n    const match = USER_AGENT.match(/(Chrome|CriOS)\\/(\\d+)/);\n    if (match && match[2]) {\n      return parseFloat(match[2]);\n    }\n    return null;\n  }();\n  IE_VERSION = function () {\n    const result = /MSIE\\s(\\d+)\\.\\d/.exec(USER_AGENT);\n    let version = result && parseFloat(result[1]);\n    if (!version && /Trident\\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {\n      // IE 11 has a different user agent string than other IE versions\n      version = 11.0;\n    }\n    return version;\n  }();\n  IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;\n  IS_WINDOWS = /Windows/i.test(USER_AGENT);\n  IS_IPAD = /iPad/i.test(USER_AGENT) || IS_SAFARI && TOUCH_ENABLED && !/iPhone/i.test(USER_AGENT);\n  IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;\n}\n\n/**\n * Whether or not this is an iOS device.\n *\n * @static\n * @const\n * @type {Boolean}\n */\nconst IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;\n\n/**\n * Whether or not this is any flavor of Safari - including iOS.\n *\n * @static\n * @const\n * @type {Boolean}\n */\nconst IS_ANY_SAFARI = (IS_SAFARI || IS_IOS) && !IS_CHROME;\n\nvar browser = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  get IS_IPOD () { return IS_IPOD; },\n  get IOS_VERSION () { return IOS_VERSION; },\n  get IS_ANDROID () { return IS_ANDROID; },\n  get ANDROID_VERSION () { return ANDROID_VERSION; },\n  get IS_FIREFOX () { return IS_FIREFOX; },\n  get IS_EDGE () { return IS_EDGE; },\n  get IS_CHROMIUM () { return IS_CHROMIUM; },\n  get IS_CHROME () { return IS_CHROME; },\n  get CHROMIUM_VERSION () { return CHROMIUM_VERSION; },\n  get CHROME_VERSION () { return CHROME_VERSION; },\n  get IE_VERSION () { return IE_VERSION; },\n  get IS_SAFARI () { return IS_SAFARI; },\n  get IS_WINDOWS () { return IS_WINDOWS; },\n  get IS_IPAD () { return IS_IPAD; },\n  get IS_IPHONE () { return IS_IPHONE; },\n  TOUCH_ENABLED: TOUCH_ENABLED,\n  IS_IOS: IS_IOS,\n  IS_ANY_SAFARI: IS_ANY_SAFARI\n});\n\n/**\n * @file dom.js\n * @module dom\n */\n\n/**\n * Detect if a value is a string with any non-whitespace characters.\n *\n * @private\n * @param  {string} str\n *         The string to check\n *\n * @return {boolean}\n *         Will be `true` if the string is non-blank, `false` otherwise.\n *\n */\nfunction isNonBlankString(str) {\n  // we use str.trim as it will trim any whitespace characters\n  // from the front or back of non-whitespace characters. aka\n  // Any string that contains non-whitespace characters will\n  // still contain them after `trim` but whitespace only strings\n  // will have a length of 0, failing this check.\n  return typeof str === 'string' && Boolean(str.trim());\n}\n\n/**\n * Throws an error if the passed string has whitespace. This is used by\n * class methods to be relatively consistent with the classList API.\n *\n * @private\n * @param  {string} str\n *         The string to check for whitespace.\n *\n * @throws {Error}\n *         Throws an error if there is whitespace in the string.\n */\nfunction throwIfWhitespace(str) {\n  // str.indexOf instead of regex because str.indexOf is faster performance wise.\n  if (str.indexOf(' ') >= 0) {\n    throw new Error('class has illegal whitespace characters');\n  }\n}\n\n/**\n * Whether the current DOM interface appears to be real (i.e. not simulated).\n *\n * @return {boolean}\n *         Will be `true` if the DOM appears to be real, `false` otherwise.\n */\nfunction isReal() {\n  // Both document and window will never be undefined thanks to `global`.\n  return document === window$1.document;\n}\n\n/**\n * Determines, via duck typing, whether or not a value is a DOM element.\n *\n * @param  {*} value\n *         The value to check.\n *\n * @return {boolean}\n *         Will be `true` if the value is a DOM element, `false` otherwise.\n */\nfunction isEl(value) {\n  return isObject(value) && value.nodeType === 1;\n}\n\n/**\n * Determines if the current DOM is embedded in an iframe.\n *\n * @return {boolean}\n *         Will be `true` if the DOM is embedded in an iframe, `false`\n *         otherwise.\n */\nfunction isInFrame() {\n  // We need a try/catch here because Safari will throw errors when attempting\n  // to get either `parent` or `self`\n  try {\n    return window$1.parent !== window$1.self;\n  } catch (x) {\n    return true;\n  }\n}\n\n/**\n * Creates functions to query the DOM using a given method.\n *\n * @private\n * @param   {string} method\n *          The method to create the query with.\n *\n * @return  {Function}\n *          The query method\n */\nfunction createQuerier(method) {\n  return function (selector, context) {\n    if (!isNonBlankString(selector)) {\n      return document[method](null);\n    }\n    if (isNonBlankString(context)) {\n      context = document.querySelector(context);\n    }\n    const ctx = isEl(context) ? context : document;\n    return ctx[method] && ctx[method](selector);\n  };\n}\n\n/**\n * Creates an element and applies properties, attributes, and inserts content.\n *\n * @param  {string} [tagName='div']\n *         Name of tag to be created.\n *\n * @param  {Object} [properties={}]\n *         Element properties to be applied.\n *\n * @param  {Object} [attributes={}]\n *         Element attributes to be applied.\n *\n * @param {ContentDescriptor} [content]\n *        A content descriptor object.\n *\n * @return {Element}\n *         The element that was created.\n */\nfunction createEl(tagName = 'div', properties = {}, attributes = {}, content) {\n  const el = document.createElement(tagName);\n  Object.getOwnPropertyNames(properties).forEach(function (propName) {\n    const val = properties[propName];\n\n    // Handle textContent since it's not supported everywhere and we have a\n    // method for it.\n    if (propName === 'textContent') {\n      textContent(el, val);\n    } else if (el[propName] !== val || propName === 'tabIndex') {\n      el[propName] = val;\n    }\n  });\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n    el.setAttribute(attrName, attributes[attrName]);\n  });\n  if (content) {\n    appendContent(el, content);\n  }\n  return el;\n}\n\n/**\n * Injects text into an element, replacing any existing contents entirely.\n *\n * @param  {Element} el\n *         The element to add text content into\n *\n * @param  {string} text\n *         The text content to add.\n *\n * @return {Element}\n *         The element with added text content.\n */\nfunction textContent(el, text) {\n  if (typeof el.textContent === 'undefined') {\n    el.innerText = text;\n  } else {\n    el.textContent = text;\n  }\n  return el;\n}\n\n/**\n * Insert an element as the first child node of another\n *\n * @param {Element} child\n *        Element to insert\n *\n * @param {Element} parent\n *        Element to insert child into\n */\nfunction prependTo(child, parent) {\n  if (parent.firstChild) {\n    parent.insertBefore(child, parent.firstChild);\n  } else {\n    parent.appendChild(child);\n  }\n}\n\n/**\n * Check if an element has a class name.\n *\n * @param  {Element} element\n *         Element to check\n *\n * @param  {string} classToCheck\n *         Class name to check for\n *\n * @return {boolean}\n *         Will be `true` if the element has a class, `false` otherwise.\n *\n * @throws {Error}\n *         Throws an error if `classToCheck` has white space.\n */\nfunction hasClass(element, classToCheck) {\n  throwIfWhitespace(classToCheck);\n  return element.classList.contains(classToCheck);\n}\n\n/**\n * Add a class name to an element.\n *\n * @param  {Element} element\n *         Element to add class name to.\n *\n * @param  {...string} classesToAdd\n *         One or more class name to add.\n *\n * @return {Element}\n *         The DOM element with the added class name.\n */\nfunction addClass(element, ...classesToAdd) {\n  element.classList.add(...classesToAdd.reduce((prev, current) => prev.concat(current.split(/\\s+/)), []));\n  return element;\n}\n\n/**\n * Remove a class name from an element.\n *\n * @param  {Element} element\n *         Element to remove a class name from.\n *\n * @param  {...string} classesToRemove\n *         One or more class name to remove.\n *\n * @return {Element}\n *         The DOM element with class name removed.\n */\nfunction removeClass(element, ...classesToRemove) {\n  // Protect in case the player gets disposed\n  if (!element) {\n    log$1.warn(\"removeClass was called with an element that doesn't exist\");\n    return null;\n  }\n  element.classList.remove(...classesToRemove.reduce((prev, current) => prev.concat(current.split(/\\s+/)), []));\n  return element;\n}\n\n/**\n * The callback definition for toggleClass.\n *\n * @callback module:dom~PredicateCallback\n * @param    {Element} element\n *           The DOM element of the Component.\n *\n * @param    {string} classToToggle\n *           The `className` that wants to be toggled\n *\n * @return   {boolean|undefined}\n *           If `true` is returned, the `classToToggle` will be added to the\n *           `element`. If `false`, the `classToToggle` will be removed from\n *           the `element`. If `undefined`, the callback will be ignored.\n */\n\n/**\n * Adds or removes a class name to/from an element depending on an optional\n * condition or the presence/absence of the class name.\n *\n * @param  {Element} element\n *         The element to toggle a class name on.\n *\n * @param  {string} classToToggle\n *         The class that should be toggled.\n *\n * @param  {boolean|module:dom~PredicateCallback} [predicate]\n *         See the return value for {@link module:dom~PredicateCallback}\n *\n * @return {Element}\n *         The element with a class that has been toggled.\n */\nfunction toggleClass(element, classToToggle, predicate) {\n  if (typeof predicate === 'function') {\n    predicate = predicate(element, classToToggle);\n  }\n  if (typeof predicate !== 'boolean') {\n    predicate = undefined;\n  }\n  classToToggle.split(/\\s+/).forEach(className => element.classList.toggle(className, predicate));\n  return element;\n}\n\n/**\n * Apply attributes to an HTML element.\n *\n * @param {Element} el\n *        Element to add attributes to.\n *\n * @param {Object} [attributes]\n *        Attributes to be applied.\n */\nfunction setAttributes(el, attributes) {\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\n    const attrValue = attributes[attrName];\n    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {\n      el.removeAttribute(attrName);\n    } else {\n      el.setAttribute(attrName, attrValue === true ? '' : attrValue);\n    }\n  });\n}\n\n/**\n * Get an element's attribute values, as defined on the HTML tag.\n *\n * Attributes are not the same as properties. They're defined on the tag\n * or with setAttribute.\n *\n * @param  {Element} tag\n *         Element from which to get tag attributes.\n *\n * @return {Object}\n *         All attributes of the element. Boolean attributes will be `true` or\n *         `false`, others will be strings.\n */\nfunction getAttributes(tag) {\n  const obj = {};\n\n  // known boolean attributes\n  // we can check for matching boolean properties, but not all browsers\n  // and not all tags know about these attributes, so, we still want to check them manually\n  const knownBooleans = ',' + 'autoplay,controls,playsinline,loop,muted,default,defaultMuted' + ',';\n  if (tag && tag.attributes && tag.attributes.length > 0) {\n    const attrs = tag.attributes;\n    for (let i = attrs.length - 1; i >= 0; i--) {\n      const attrName = attrs[i].name;\n      let attrVal = attrs[i].value;\n\n      // check for known booleans\n      // the matching element property will return a value for typeof\n      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {\n        // the value of an included boolean attribute is typically an empty\n        // string ('') which would equal false if we just check for a false value.\n        // we also don't want support bad code like autoplay='false'\n        attrVal = attrVal !== null ? true : false;\n      }\n      obj[attrName] = attrVal;\n    }\n  }\n  return obj;\n}\n\n/**\n * Get the value of an element's attribute.\n *\n * @param {Element} el\n *        A DOM element.\n *\n * @param {string} attribute\n *        Attribute to get the value of.\n *\n * @return {string}\n *         The value of the attribute.\n */\nfunction getAttribute(el, attribute) {\n  return el.getAttribute(attribute);\n}\n\n/**\n * Set the value of an element's attribute.\n *\n * @param {Element} el\n *        A DOM element.\n *\n * @param {string} attribute\n *        Attribute to set.\n *\n * @param {string} value\n *        Value to set the attribute to.\n */\nfunction setAttribute(el, attribute, value) {\n  el.setAttribute(attribute, value);\n}\n\n/**\n * Remove an element's attribute.\n *\n * @param {Element} el\n *        A DOM element.\n *\n * @param {string} attribute\n *        Attribute to remove.\n */\nfunction removeAttribute(el, attribute) {\n  el.removeAttribute(attribute);\n}\n\n/**\n * Attempt to block the ability to select text.\n */\nfunction blockTextSelection() {\n  document.body.focus();\n  document.onselectstart = function () {\n    return false;\n  };\n}\n\n/**\n * Turn off text selection blocking.\n */\nfunction unblockTextSelection() {\n  document.onselectstart = function () {\n    return true;\n  };\n}\n\n/**\n * Identical to the native `getBoundingClientRect` function, but ensures that\n * the method is supported at all (it is in all browsers we claim to support)\n * and that the element is in the DOM before continuing.\n *\n * This wrapper function also shims properties which are not provided by some\n * older browsers (namely, IE8).\n *\n * Additionally, some browsers do not support adding properties to a\n * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard\n * properties (except `x` and `y` which are not widely supported). This helps\n * avoid implementations where keys are non-enumerable.\n *\n * @param  {Element} el\n *         Element whose `ClientRect` we want to calculate.\n *\n * @return {Object|undefined}\n *         Always returns a plain object - or `undefined` if it cannot.\n */\nfunction getBoundingClientRect(el) {\n  if (el && el.getBoundingClientRect && el.parentNode) {\n    const rect = el.getBoundingClientRect();\n    const result = {};\n    ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(k => {\n      if (rect[k] !== undefined) {\n        result[k] = rect[k];\n      }\n    });\n    if (!result.height) {\n      result.height = parseFloat(computedStyle(el, 'height'));\n    }\n    if (!result.width) {\n      result.width = parseFloat(computedStyle(el, 'width'));\n    }\n    return result;\n  }\n}\n\n/**\n * Represents the position of a DOM element on the page.\n *\n * @typedef  {Object} module:dom~Position\n *\n * @property {number} left\n *           Pixels to the left.\n *\n * @property {number} top\n *           Pixels from the top.\n */\n\n/**\n * Get the position of an element in the DOM.\n *\n * Uses `getBoundingClientRect` technique from John Resig.\n *\n * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/\n *\n * @param  {Element} el\n *         Element from which to get offset.\n *\n * @return {module:dom~Position}\n *         The position of the element that was passed in.\n */\nfunction findPosition(el) {\n  if (!el || el && !el.offsetParent) {\n    return {\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  const width = el.offsetWidth;\n  const height = el.offsetHeight;\n  let left = 0;\n  let top = 0;\n  while (el.offsetParent && el !== document[FullscreenApi.fullscreenElement]) {\n    left += el.offsetLeft;\n    top += el.offsetTop;\n    el = el.offsetParent;\n  }\n  return {\n    left,\n    top,\n    width,\n    height\n  };\n}\n\n/**\n * Represents x and y coordinates for a DOM element or mouse pointer.\n *\n * @typedef  {Object} module:dom~Coordinates\n *\n * @property {number} x\n *           x coordinate in pixels\n *\n * @property {number} y\n *           y coordinate in pixels\n */\n\n/**\n * Get the pointer position within an element.\n *\n * The base on the coordinates are the bottom left of the element.\n *\n * @param  {Element} el\n *         Element on which to get the pointer position on.\n *\n * @param  {Event} event\n *         Event object.\n *\n * @return {module:dom~Coordinates}\n *         A coordinates object corresponding to the mouse position.\n *\n */\nfunction getPointerPosition(el, event) {\n  const translated = {\n    x: 0,\n    y: 0\n  };\n  if (IS_IOS) {\n    let item = el;\n    while (item && item.nodeName.toLowerCase() !== 'html') {\n      const transform = computedStyle(item, 'transform');\n      if (/^matrix/.test(transform)) {\n        const values = transform.slice(7, -1).split(/,\\s/).map(Number);\n        translated.x += values[4];\n        translated.y += values[5];\n      } else if (/^matrix3d/.test(transform)) {\n        const values = transform.slice(9, -1).split(/,\\s/).map(Number);\n        translated.x += values[12];\n        translated.y += values[13];\n      }\n      item = item.parentNode;\n    }\n  }\n  const position = {};\n  const boxTarget = findPosition(event.target);\n  const box = findPosition(el);\n  const boxW = box.width;\n  const boxH = box.height;\n  let offsetY = event.offsetY - (box.top - boxTarget.top);\n  let offsetX = event.offsetX - (box.left - boxTarget.left);\n  if (event.changedTouches) {\n    offsetX = event.changedTouches[0].pageX - box.left;\n    offsetY = event.changedTouches[0].pageY + box.top;\n    if (IS_IOS) {\n      offsetX -= translated.x;\n      offsetY -= translated.y;\n    }\n  }\n  position.y = 1 - Math.max(0, Math.min(1, offsetY / boxH));\n  position.x = Math.max(0, Math.min(1, offsetX / boxW));\n  return position;\n}\n\n/**\n * Determines, via duck typing, whether or not a value is a text node.\n *\n * @param  {*} value\n *         Check if this value is a text node.\n *\n * @return {boolean}\n *         Will be `true` if the value is a text node, `false` otherwise.\n */\nfunction isTextNode(value) {\n  return isObject(value) && value.nodeType === 3;\n}\n\n/**\n * Empties the contents of an element.\n *\n * @param  {Element} el\n *         The element to empty children from\n *\n * @return {Element}\n *         The element with no children\n */\nfunction emptyEl(el) {\n  while (el.firstChild) {\n    el.removeChild(el.firstChild);\n  }\n  return el;\n}\n\n/**\n * This is a mixed value that describes content to be injected into the DOM\n * via some method. It can be of the following types:\n *\n * Type       | Description\n * -----------|-------------\n * `string`   | The value will be normalized into a text node.\n * `Element`  | The value will be accepted as-is.\n * `Text`     | A TextNode. The value will be accepted as-is.\n * `Array`    | A one-dimensional array of strings, elements, text nodes, or functions. These functions should return a string, element, or text node (any other return value, like an array, will be ignored).\n * `Function` | A function, which is expected to return a string, element, text node, or array - any of the other possible values described above. This means that a content descriptor could be a function that returns an array of functions, but those second-level functions must return strings, elements, or text nodes.\n *\n * @typedef {string|Element|Text|Array|Function} ContentDescriptor\n */\n\n/**\n * Normalizes content for eventual insertion into the DOM.\n *\n * This allows a wide range of content definition methods, but helps protect\n * from falling into the trap of simply writing to `innerHTML`, which could\n * be an XSS concern.\n *\n * The content for an element can be passed in multiple types and\n * combinations, whose behavior is as follows:\n *\n * @param {ContentDescriptor} content\n *        A content descriptor value.\n *\n * @return {Array}\n *         All of the content that was passed in, normalized to an array of\n *         elements or text nodes.\n */\nfunction normalizeContent(content) {\n  // First, invoke content if it is a function. If it produces an array,\n  // that needs to happen before normalization.\n  if (typeof content === 'function') {\n    content = content();\n  }\n\n  // Next up, normalize to an array, so one or many items can be normalized,\n  // filtered, and returned.\n  return (Array.isArray(content) ? content : [content]).map(value => {\n    // First, invoke value if it is a function to produce a new value,\n    // which will be subsequently normalized to a Node of some kind.\n    if (typeof value === 'function') {\n      value = value();\n    }\n    if (isEl(value) || isTextNode(value)) {\n      return value;\n    }\n    if (typeof value === 'string' && /\\S/.test(value)) {\n      return document.createTextNode(value);\n    }\n  }).filter(value => value);\n}\n\n/**\n * Normalizes and appends content to an element.\n *\n * @param  {Element} el\n *         Element to append normalized content to.\n *\n * @param {ContentDescriptor} content\n *        A content descriptor value.\n *\n * @return {Element}\n *         The element with appended normalized content.\n */\nfunction appendContent(el, content) {\n  normalizeContent(content).forEach(node => el.appendChild(node));\n  return el;\n}\n\n/**\n * Normalizes and inserts content into an element; this is identical to\n * `appendContent()`, except it empties the element first.\n *\n * @param {Element} el\n *        Element to insert normalized content into.\n *\n * @param {ContentDescriptor} content\n *        A content descriptor value.\n *\n * @return {Element}\n *         The element with inserted normalized content.\n */\nfunction insertContent(el, content) {\n  return appendContent(emptyEl(el), content);\n}\n\n/**\n * Check if an event was a single left click.\n *\n * @param  {Event} event\n *         Event object.\n *\n * @return {boolean}\n *         Will be `true` if a single left click, `false` otherwise.\n */\nfunction isSingleLeftClick(event) {\n  // Note: if you create something draggable, be sure to\n  // call it on both `mousedown` and `mousemove` event,\n  // otherwise `mousedown` should be enough for a button\n\n  if (event.button === undefined && event.buttons === undefined) {\n    // Why do we need `buttons` ?\n    // Because, middle mouse sometimes have this:\n    // e.button === 0 and e.buttons === 4\n    // Furthermore, we want to prevent combination click, something like\n    // HOLD middlemouse then left click, that would be\n    // e.button === 0, e.buttons === 5\n    // just `button` is not gonna work\n\n    // Alright, then what this block does ?\n    // this is for chrome `simulate mobile devices`\n    // I want to support this as well\n\n    return true;\n  }\n  if (event.button === 0 && event.buttons === undefined) {\n    // Touch screen, sometimes on some specific device, `buttons`\n    // doesn't have anything (safari on ios, blackberry...)\n\n    return true;\n  }\n\n  // `mouseup` event on a single left click has\n  // `button` and `buttons` equal to 0\n  if (event.type === 'mouseup' && event.button === 0 && event.buttons === 0) {\n    return true;\n  }\n  if (event.button !== 0 || event.buttons !== 1) {\n    // This is the reason we have those if else block above\n    // if any special case we can catch and let it slide\n    // we do it above, when get to here, this definitely\n    // is-not-left-click\n\n    return false;\n  }\n  return true;\n}\n\n/**\n * Finds a single DOM element matching `selector` within the optional\n * `context` of another DOM element (defaulting to `document`).\n *\n * @param  {string} selector\n *         A valid CSS selector, which will be passed to `querySelector`.\n *\n * @param  {Element|String} [context=document]\n *         A DOM element within which to query. Can also be a selector\n *         string in which case the first matching element will be used\n *         as context. If missing (or no element matches selector), falls\n *         back to `document`.\n *\n * @return {Element|null}\n *         The element that was found or null.\n */\nconst $ = createQuerier('querySelector');\n\n/**\n * Finds a all DOM elements matching `selector` within the optional\n * `context` of another DOM element (defaulting to `document`).\n *\n * @param  {string} selector\n *         A valid CSS selector, which will be passed to `querySelectorAll`.\n *\n * @param  {Element|String} [context=document]\n *         A DOM element within which to query. Can also be a selector\n *         string in which case the first matching element will be used\n *         as context. If missing (or no element matches selector), falls\n *         back to `document`.\n *\n * @return {NodeList}\n *         A element list of elements that were found. Will be empty if none\n *         were found.\n *\n */\nconst $$ = createQuerier('querySelectorAll');\n\n/**\n * A safe getComputedStyle.\n *\n * This is needed because in Firefox, if the player is loaded in an iframe with\n * `display:none`, then `getComputedStyle` returns `null`, so, we do a\n * null-check to make sure that the player doesn't break in these cases.\n *\n * @param    {Element} el\n *           The element you want the computed style of\n *\n * @param    {string} prop\n *           The property name you want\n *\n * @see      https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n */\nfunction computedStyle(el, prop) {\n  if (!el || !prop) {\n    return '';\n  }\n  if (typeof window$1.getComputedStyle === 'function') {\n    let computedStyleValue;\n    try {\n      computedStyleValue = window$1.getComputedStyle(el);\n    } catch (e) {\n      return '';\n    }\n    return computedStyleValue ? computedStyleValue.getPropertyValue(prop) || computedStyleValue[prop] : '';\n  }\n  return '';\n}\n\nvar Dom = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  isReal: isReal,\n  isEl: isEl,\n  isInFrame: isInFrame,\n  createEl: createEl,\n  textContent: textContent,\n  prependTo: prependTo,\n  hasClass: hasClass,\n  addClass: addClass,\n  removeClass: removeClass,\n  toggleClass: toggleClass,\n  setAttributes: setAttributes,\n  getAttributes: getAttributes,\n  getAttribute: getAttribute,\n  setAttribute: setAttribute,\n  removeAttribute: removeAttribute,\n  blockTextSelection: blockTextSelection,\n  unblockTextSelection: unblockTextSelection,\n  getBoundingClientRect: getBoundingClientRect,\n  findPosition: findPosition,\n  getPointerPosition: getPointerPosition,\n  isTextNode: isTextNode,\n  emptyEl: emptyEl,\n  normalizeContent: normalizeContent,\n  appendContent: appendContent,\n  insertContent: insertContent,\n  isSingleLeftClick: isSingleLeftClick,\n  $: $,\n  $$: $$,\n  computedStyle: computedStyle\n});\n\n/**\n * @file setup.js - Functions for setting up a player without\n * user interaction based on the data-setup `attribute` of the video tag.\n *\n * @module setup\n */\nlet _windowLoaded = false;\nlet videojs$1;\n\n/**\n * Set up any tags that have a data-setup `attribute` when the player is started.\n */\nconst autoSetup = function () {\n  if (videojs$1.options.autoSetup === false) {\n    return;\n  }\n  const vids = Array.prototype.slice.call(document.getElementsByTagName('video'));\n  const audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));\n  const divs = Array.prototype.slice.call(document.getElementsByTagName('video-js'));\n  const mediaEls = vids.concat(audios, divs);\n\n  // Check if any media elements exist\n  if (mediaEls && mediaEls.length > 0) {\n    for (let i = 0, e = mediaEls.length; i < e; i++) {\n      const mediaEl = mediaEls[i];\n\n      // Check if element exists, has getAttribute func.\n      if (mediaEl && mediaEl.getAttribute) {\n        // Make sure this player hasn't already been set up.\n        if (mediaEl.player === undefined) {\n          const options = mediaEl.getAttribute('data-setup');\n\n          // Check if data-setup attr exists.\n          // We only auto-setup if they've added the data-setup attr.\n          if (options !== null) {\n            // Create new video.js instance.\n            videojs$1(mediaEl);\n          }\n        }\n\n        // If getAttribute isn't defined, we need to wait for the DOM.\n      } else {\n        autoSetupTimeout(1);\n        break;\n      }\n    }\n\n    // No videos were found, so keep looping unless page is finished loading.\n  } else if (!_windowLoaded) {\n    autoSetupTimeout(1);\n  }\n};\n\n/**\n * Wait until the page is loaded before running autoSetup. This will be called in\n * autoSetup if `hasLoaded` returns false.\n *\n * @param {number} wait\n *        How long to wait in ms\n *\n * @param {module:videojs} [vjs]\n *        The videojs library function\n */\nfunction autoSetupTimeout(wait, vjs) {\n  // Protect against breakage in non-browser environments\n  if (!isReal()) {\n    return;\n  }\n  if (vjs) {\n    videojs$1 = vjs;\n  }\n  window$1.setTimeout(autoSetup, wait);\n}\n\n/**\n * Used to set the internal tracking of window loaded state to true.\n *\n * @private\n */\nfunction setWindowLoaded() {\n  _windowLoaded = true;\n  window$1.removeEventListener('load', setWindowLoaded);\n}\nif (isReal()) {\n  if (document.readyState === 'complete') {\n    setWindowLoaded();\n  } else {\n    /**\n     * Listen for the load event on window, and set _windowLoaded to true.\n     *\n     * We use a standard event listener here to avoid incrementing the GUID\n     * before any players are created.\n     *\n     * @listens load\n     */\n    window$1.addEventListener('load', setWindowLoaded);\n  }\n}\n\n/**\n * @file stylesheet.js\n * @module stylesheet\n */\n\n/**\n * Create a DOM style element given a className for it.\n *\n * @param {string} className\n *        The className to add to the created style element.\n *\n * @return {Element}\n *         The element that was created.\n */\nconst createStyleElement = function (className) {\n  const style = document.createElement('style');\n  style.className = className;\n  return style;\n};\n\n/**\n * Add text to a DOM element.\n *\n * @param {Element} el\n *        The Element to add text content to.\n *\n * @param {string} content\n *        The text to add to the element.\n */\nconst setTextContent = function (el, content) {\n  if (el.styleSheet) {\n    el.styleSheet.cssText = content;\n  } else {\n    el.textContent = content;\n  }\n};\n\n/**\n * @file dom-data.js\n * @module dom-data\n */\n\n/**\n * Element Data Store.\n *\n * Allows for binding data to an element without putting it directly on the\n * element. Ex. Event listeners are stored here.\n * (also from jsninja.com, slightly modified and updated for closure compiler)\n *\n * @type {Object}\n * @private\n */\nvar DomData = new WeakMap();\n\n/**\n * @file guid.js\n * @module guid\n */\n\n// Default value for GUIDs. This allows us to reset the GUID counter in tests.\n//\n// The initial GUID is 3 because some users have come to rely on the first\n// default player ID ending up as `vjs_video_3`.\n//\n// See: https://github.com/videojs/video.js/pull/6216\nconst _initialGuid = 3;\n\n/**\n * Unique ID for an element or function\n *\n * @type {Number}\n */\nlet _guid = _initialGuid;\n\n/**\n * Get a unique auto-incrementing ID by number that has not been returned before.\n *\n * @return {number}\n *         A new unique ID.\n */\nfunction newGUID() {\n  return _guid++;\n}\n\n/**\n * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)\n * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)\n * This should work very similarly to jQuery's events, however it's based off the book version which isn't as\n * robust as jquery's, so there's probably some differences.\n *\n * @file events.js\n * @module events\n */\n\n/**\n * Clean up the listener cache and dispatchers\n *\n * @param {Element|Object} elem\n *        Element to clean up\n *\n * @param {string} type\n *        Type of event to clean up\n */\nfunction _cleanUpEvents(elem, type) {\n  if (!DomData.has(elem)) {\n    return;\n  }\n  const data = DomData.get(elem);\n\n  // Remove the events of a particular type if there are none left\n  if (data.handlers[type].length === 0) {\n    delete data.handlers[type];\n    // data.handlers[type] = null;\n    // Setting to null was causing an error with data.handlers\n\n    // Remove the meta-handler from the element\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, data.dispatcher, false);\n    } else if (elem.detachEvent) {\n      elem.detachEvent('on' + type, data.dispatcher);\n    }\n  }\n\n  // Remove the events object if there are no types left\n  if (Object.getOwnPropertyNames(data.handlers).length <= 0) {\n    delete data.handlers;\n    delete data.dispatcher;\n    delete data.disabled;\n  }\n\n  // Finally remove the element data if there is no data left\n  if (Object.getOwnPropertyNames(data).length === 0) {\n    DomData.delete(elem);\n  }\n}\n\n/**\n * Loops through an array of event types and calls the requested method for each type.\n *\n * @param {Function} fn\n *        The event method we want to use.\n *\n * @param {Element|Object} elem\n *        Element or object to bind listeners to\n *\n * @param {string} type\n *        Type of event to bind to.\n *\n * @param {Function} callback\n *        Event listener.\n */\nfunction _handleMultipleEvents(fn, elem, types, callback) {\n  types.forEach(function (type) {\n    // Call the event method for each one of the types\n    fn(elem, type, callback);\n  });\n}\n\n/**\n * Fix a native event to have standard property values\n *\n * @param {Object} event\n *        Event object to fix.\n *\n * @return {Object}\n *         Fixed event object.\n */\nfunction fixEvent(event) {\n  if (event.fixed_) {\n    return event;\n  }\n  function returnTrue() {\n    return true;\n  }\n  function returnFalse() {\n    return false;\n  }\n\n  // Test if fixing up is needed\n  // Used to check if !event.stopPropagation instead of isPropagationStopped\n  // But native events return true for stopPropagation, but don't have\n  // other expected methods like isPropagationStopped. Seems to be a problem\n  // with the Javascript Ninja code. So we're just overriding all events now.\n  if (!event || !event.isPropagationStopped || !event.isImmediatePropagationStopped) {\n    const old = event || window$1.event;\n    event = {};\n    // Clone the old object so that we can modify the values event = {};\n    // IE8 Doesn't like when you mess with native event properties\n    // Firefox returns false for event.hasOwnProperty('type') and other props\n    //  which makes copying more difficult.\n    // TODO: Probably best to create a whitelist of event props\n    for (const key in old) {\n      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y\n      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation\n      // and webkitMovementX/Y\n      // Lighthouse complains if Event.path is copied\n      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY' && key !== 'path') {\n        // Chrome 32+ warns if you try to copy deprecated returnValue, but\n        // we still want to if preventDefault isn't supported (IE8).\n        if (!(key === 'returnValue' && old.preventDefault)) {\n          event[key] = old[key];\n        }\n      }\n    }\n\n    // The event occurred on this element\n    if (!event.target) {\n      event.target = event.srcElement || document;\n    }\n\n    // Handle which other element the event is related to\n    if (!event.relatedTarget) {\n      event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;\n    }\n\n    // Stop the default browser action\n    event.preventDefault = function () {\n      if (old.preventDefault) {\n        old.preventDefault();\n      }\n      event.returnValue = false;\n      old.returnValue = false;\n      event.defaultPrevented = true;\n    };\n    event.defaultPrevented = false;\n\n    // Stop the event from bubbling\n    event.stopPropagation = function () {\n      if (old.stopPropagation) {\n        old.stopPropagation();\n      }\n      event.cancelBubble = true;\n      old.cancelBubble = true;\n      event.isPropagationStopped = returnTrue;\n    };\n    event.isPropagationStopped = returnFalse;\n\n    // Stop the event from bubbling and executing other handlers\n    event.stopImmediatePropagation = function () {\n      if (old.stopImmediatePropagation) {\n        old.stopImmediatePropagation();\n      }\n      event.isImmediatePropagationStopped = returnTrue;\n      event.stopPropagation();\n    };\n    event.isImmediatePropagationStopped = returnFalse;\n\n    // Handle mouse position\n    if (event.clientX !== null && event.clientX !== undefined) {\n      const doc = document.documentElement;\n      const body = document.body;\n      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);\n    }\n\n    // Handle key presses\n    event.which = event.charCode || event.keyCode;\n\n    // Fix button for mouse clicks:\n    // 0 == left; 1 == middle; 2 == right\n    if (event.button !== null && event.button !== undefined) {\n      // The following is disabled because it does not pass videojs-standard\n      // and... yikes.\n      /* eslint-disable */\n      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;\n      /* eslint-enable */\n    }\n  }\n\n  event.fixed_ = true;\n  // Returns fixed-up instance\n  return event;\n}\n\n/**\n * Whether passive event listeners are supported\n */\nlet _supportsPassive;\nconst supportsPassive = function () {\n  if (typeof _supportsPassive !== 'boolean') {\n    _supportsPassive = false;\n    try {\n      const opts = Object.defineProperty({}, 'passive', {\n        get() {\n          _supportsPassive = true;\n        }\n      });\n      window$1.addEventListener('test', null, opts);\n      window$1.removeEventListener('test', null, opts);\n    } catch (e) {\n      // disregard\n    }\n  }\n  return _supportsPassive;\n};\n\n/**\n * Touch events Chrome expects to be passive\n */\nconst passiveEvents = ['touchstart', 'touchmove'];\n\n/**\n * Add an event listener to element\n * It stores the handler function in a separate cache object\n * and adds a generic handler to the element's event,\n * along with a unique id (guid) to the element.\n *\n * @param {Element|Object} elem\n *        Element or object to bind listeners to\n *\n * @param {string|string[]} type\n *        Type of event to bind to.\n *\n * @param {Function} fn\n *        Event listener.\n */\nfunction on(elem, type, fn) {\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(on, elem, type, fn);\n  }\n  if (!DomData.has(elem)) {\n    DomData.set(elem, {});\n  }\n  const data = DomData.get(elem);\n\n  // We need a place to store all our handler data\n  if (!data.handlers) {\n    data.handlers = {};\n  }\n  if (!data.handlers[type]) {\n    data.handlers[type] = [];\n  }\n  if (!fn.guid) {\n    fn.guid = newGUID();\n  }\n  data.handlers[type].push(fn);\n  if (!data.dispatcher) {\n    data.disabled = false;\n    data.dispatcher = function (event, hash) {\n      if (data.disabled) {\n        return;\n      }\n      event = fixEvent(event);\n      const handlers = data.handlers[event.type];\n      if (handlers) {\n        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.\n        const handlersCopy = handlers.slice(0);\n        for (let m = 0, n = handlersCopy.length; m < n; m++) {\n          if (event.isImmediatePropagationStopped()) {\n            break;\n          } else {\n            try {\n              handlersCopy[m].call(elem, event, hash);\n            } catch (e) {\n              log$1.error(e);\n            }\n          }\n        }\n      }\n    };\n  }\n  if (data.handlers[type].length === 1) {\n    if (elem.addEventListener) {\n      let options = false;\n      if (supportsPassive() && passiveEvents.indexOf(type) > -1) {\n        options = {\n          passive: true\n        };\n      }\n      elem.addEventListener(type, data.dispatcher, options);\n    } else if (elem.attachEvent) {\n      elem.attachEvent('on' + type, data.dispatcher);\n    }\n  }\n}\n\n/**\n * Removes event listeners from an element\n *\n * @param {Element|Object} elem\n *        Object to remove listeners from.\n *\n * @param {string|string[]} [type]\n *        Type of listener to remove. Don't include to remove all events from element.\n *\n * @param {Function} [fn]\n *        Specific listener to remove. Don't include to remove listeners for an event\n *        type.\n */\nfunction off(elem, type, fn) {\n  // Don't want to add a cache object through getElData if not needed\n  if (!DomData.has(elem)) {\n    return;\n  }\n  const data = DomData.get(elem);\n\n  // If no events exist, nothing to unbind\n  if (!data.handlers) {\n    return;\n  }\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(off, elem, type, fn);\n  }\n\n  // Utility function\n  const removeType = function (el, t) {\n    data.handlers[t] = [];\n    _cleanUpEvents(el, t);\n  };\n\n  // Are we removing all bound events?\n  if (type === undefined) {\n    for (const t in data.handlers) {\n      if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t)) {\n        removeType(elem, t);\n      }\n    }\n    return;\n  }\n  const handlers = data.handlers[type];\n\n  // If no handlers exist, nothing to unbind\n  if (!handlers) {\n    return;\n  }\n\n  // If no listener was provided, remove all listeners for type\n  if (!fn) {\n    removeType(elem, type);\n    return;\n  }\n\n  // We're only removing a single handler\n  if (fn.guid) {\n    for (let n = 0; n < handlers.length; n++) {\n      if (handlers[n].guid === fn.guid) {\n        handlers.splice(n--, 1);\n      }\n    }\n  }\n  _cleanUpEvents(elem, type);\n}\n\n/**\n * Trigger an event for an element\n *\n * @param {Element|Object} elem\n *        Element to trigger an event on\n *\n * @param {EventTarget~Event|string} event\n *        A string (the type) or an event object with a type attribute\n *\n * @param {Object} [hash]\n *        data hash to pass along with the event\n *\n * @return {boolean|undefined}\n *         Returns the opposite of `defaultPrevented` if default was\n *         prevented. Otherwise, returns `undefined`\n */\nfunction trigger(elem, event, hash) {\n  // Fetches element data and a reference to the parent (for bubbling).\n  // Don't want to add a data object to cache for every parent,\n  // so checking hasElData first.\n  const elemData = DomData.has(elem) ? DomData.get(elem) : {};\n  const parent = elem.parentNode || elem.ownerDocument;\n  // type = event.type || event,\n  // handler;\n\n  // If an event name was passed as a string, creates an event out of it\n  if (typeof event === 'string') {\n    event = {\n      type: event,\n      target: elem\n    };\n  } else if (!event.target) {\n    event.target = elem;\n  }\n\n  // Normalizes the event properties.\n  event = fixEvent(event);\n\n  // If the passed element has a dispatcher, executes the established handlers.\n  if (elemData.dispatcher) {\n    elemData.dispatcher.call(elem, event, hash);\n  }\n\n  // Unless explicitly stopped or the event does not bubble (e.g. media events)\n  // recursively calls this function to bubble the event up the DOM.\n  if (parent && !event.isPropagationStopped() && event.bubbles === true) {\n    trigger.call(null, parent, event, hash);\n\n    // If at the top of the DOM, triggers the default action unless disabled.\n  } else if (!parent && !event.defaultPrevented && event.target && event.target[event.type]) {\n    if (!DomData.has(event.target)) {\n      DomData.set(event.target, {});\n    }\n    const targetData = DomData.get(event.target);\n\n    // Checks if the target has a default action for this event.\n    if (event.target[event.type]) {\n      // Temporarily disables event dispatching on the target as we have already executed the handler.\n      targetData.disabled = true;\n      // Executes the default action.\n      if (typeof event.target[event.type] === 'function') {\n        event.target[event.type]();\n      }\n      // Re-enables event dispatching.\n      targetData.disabled = false;\n    }\n  }\n\n  // Inform the triggerer if the default was prevented by returning false\n  return !event.defaultPrevented;\n}\n\n/**\n * Trigger a listener only once for an event.\n *\n * @param {Element|Object} elem\n *        Element or object to bind to.\n *\n * @param {string|string[]} type\n *        Name/type of event\n *\n * @param {Event~EventListener} fn\n *        Event listener function\n */\nfunction one(elem, type, fn) {\n  if (Array.isArray(type)) {\n    return _handleMultipleEvents(one, elem, type, fn);\n  }\n  const func = function () {\n    off(elem, type, func);\n    fn.apply(this, arguments);\n  };\n\n  // copy the guid to the new function so it can removed using the original function's ID\n  func.guid = fn.guid = fn.guid || newGUID();\n  on(elem, type, func);\n}\n\n/**\n * Trigger a listener only once and then turn if off for all\n * configured events\n *\n * @param {Element|Object} elem\n *        Element or object to bind to.\n *\n * @param {string|string[]} type\n *        Name/type of event\n *\n * @param {Event~EventListener} fn\n *        Event listener function\n */\nfunction any(elem, type, fn) {\n  const func = function () {\n    off(elem, type, func);\n    fn.apply(this, arguments);\n  };\n\n  // copy the guid to the new function so it can removed using the original function's ID\n  func.guid = fn.guid = fn.guid || newGUID();\n\n  // multiple ons, but one off for everything\n  on(elem, type, func);\n}\n\nvar Events = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  fixEvent: fixEvent,\n  on: on,\n  off: off,\n  trigger: trigger,\n  one: one,\n  any: any\n});\n\n/**\n * @file fn.js\n * @module fn\n */\nconst UPDATE_REFRESH_INTERVAL = 30;\n\n/**\n * A private, internal-only function for changing the context of a function.\n *\n * It also stores a unique id on the function so it can be easily removed from\n * events.\n *\n * @private\n * @function\n * @param    {*} context\n *           The object to bind as scope.\n *\n * @param    {Function} fn\n *           The function to be bound to a scope.\n *\n * @param    {number} [uid]\n *           An optional unique ID for the function to be set\n *\n * @return   {Function}\n *           The new function that will be bound into the context given\n */\nconst bind_ = function (context, fn, uid) {\n  // Make sure the function has a unique ID\n  if (!fn.guid) {\n    fn.guid = newGUID();\n  }\n\n  // Create the new function that changes the context\n  const bound = fn.bind(context);\n\n  // Allow for the ability to individualize this function\n  // Needed in the case where multiple objects might share the same prototype\n  // IF both items add an event listener with the same function, then you try to remove just one\n  // it will remove both because they both have the same guid.\n  // when using this, you need to use the bind method when you remove the listener as well.\n  // currently used in text tracks\n  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;\n  return bound;\n};\n\n/**\n * Wraps the given function, `fn`, with a new function that only invokes `fn`\n * at most once per every `wait` milliseconds.\n *\n * @function\n * @param    {Function} fn\n *           The function to be throttled.\n *\n * @param    {number}   wait\n *           The number of milliseconds by which to throttle.\n *\n * @return   {Function}\n */\nconst throttle = function (fn, wait) {\n  let last = window$1.performance.now();\n  const throttled = function (...args) {\n    const now = window$1.performance.now();\n    if (now - last >= wait) {\n      fn(...args);\n      last = now;\n    }\n  };\n  return throttled;\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked.\n *\n * Inspired by lodash and underscore implementations.\n *\n * @function\n * @param    {Function} func\n *           The function to wrap with debounce behavior.\n *\n * @param    {number} wait\n *           The number of milliseconds to wait after the last invocation.\n *\n * @param    {boolean} [immediate]\n *           Whether or not to invoke the function immediately upon creation.\n *\n * @param    {Object} [context=window]\n *           The \"context\" in which the debounced function should debounce. For\n *           example, if this function should be tied to a Video.js player,\n *           the player can be passed here. Alternatively, defaults to the\n *           global `window` object.\n *\n * @return   {Function}\n *           A debounced function.\n */\nconst debounce = function (func, wait, immediate, context = window$1) {\n  let timeout;\n  const cancel = () => {\n    context.clearTimeout(timeout);\n    timeout = null;\n  };\n\n  /* eslint-disable consistent-this */\n  const debounced = function () {\n    const self = this;\n    const args = arguments;\n    let later = function () {\n      timeout = null;\n      later = null;\n      if (!immediate) {\n        func.apply(self, args);\n      }\n    };\n    if (!timeout && immediate) {\n      func.apply(self, args);\n    }\n    context.clearTimeout(timeout);\n    timeout = context.setTimeout(later, wait);\n  };\n  /* eslint-enable consistent-this */\n\n  debounced.cancel = cancel;\n  return debounced;\n};\n\nvar Fn = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  UPDATE_REFRESH_INTERVAL: UPDATE_REFRESH_INTERVAL,\n  bind_: bind_,\n  throttle: throttle,\n  debounce: debounce\n});\n\n/**\n * @file src/js/event-target.js\n */\nlet EVENT_MAP;\n\n/**\n * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It\n * adds shorthand functions that wrap around lengthy functions. For example:\n * the `on` function is a wrapper around `addEventListener`.\n *\n * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}\n * @class EventTarget\n */\nclass EventTarget$2 {\n  /**\n   * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a\n   * function that will get called when an event with a certain name gets triggered.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to call with `EventTarget`s\n   */\n  on(type, fn) {\n    // Remove the addEventListener alias before calling Events.on\n    // so we don't get into an infinite type loop\n    const ael = this.addEventListener;\n    this.addEventListener = () => {};\n    on(this, type, fn);\n    this.addEventListener = ael;\n  }\n  /**\n   * Removes an `event listener` for a specific event from an instance of `EventTarget`.\n   * This makes it so that the `event listener` will no longer get called when the\n   * named event happens.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to remove.\n   */\n  off(type, fn) {\n    off(this, type, fn);\n  }\n  /**\n   * This function will add an `event listener` that gets triggered only once. After the\n   * first trigger it will get removed. This is like adding an `event listener`\n   * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to be called once for each event name.\n   */\n  one(type, fn) {\n    // Remove the addEventListener aliasing Events.on\n    // so we don't get into an infinite type loop\n    const ael = this.addEventListener;\n    this.addEventListener = () => {};\n    one(this, type, fn);\n    this.addEventListener = ael;\n  }\n  /**\n   * This function will add an `event listener` that gets triggered only once and is\n   * removed from all events. This is like adding an array of `event listener`s\n   * with {@link EventTarget#on} that calls {@link EventTarget#off} on all events the\n   * first time it is triggered.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to be called once for each event name.\n   */\n  any(type, fn) {\n    // Remove the addEventListener aliasing Events.on\n    // so we don't get into an infinite type loop\n    const ael = this.addEventListener;\n    this.addEventListener = () => {};\n    any(this, type, fn);\n    this.addEventListener = ael;\n  }\n  /**\n   * This function causes an event to happen. This will then cause any `event listeners`\n   * that are waiting for that event, to get called. If there are no `event listeners`\n   * for an event then nothing will happen.\n   *\n   * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.\n   * Trigger will also call the `on` + `uppercaseEventName` function.\n   *\n   * Example:\n   * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call\n   * `onClick` if it exists.\n   *\n   * @param {string|EventTarget~Event|Object} event\n   *        The name of the event, an `Event`, or an object with a key of type set to\n   *        an event name.\n   */\n  trigger(event) {\n    const type = event.type || event;\n\n    // deprecation\n    // In a future version we should default target to `this`\n    // similar to how we default the target to `elem` in\n    // `Events.trigger`. Right now the default `target` will be\n    // `document` due to the `Event.fixEvent` call.\n    if (typeof event === 'string') {\n      event = {\n        type\n      };\n    }\n    event = fixEvent(event);\n    if (this.allowedEvents_[type] && this['on' + type]) {\n      this['on' + type](event);\n    }\n    trigger(this, event);\n  }\n  queueTrigger(event) {\n    // only set up EVENT_MAP if it'll be used\n    if (!EVENT_MAP) {\n      EVENT_MAP = new Map();\n    }\n    const type = event.type || event;\n    let map = EVENT_MAP.get(this);\n    if (!map) {\n      map = new Map();\n      EVENT_MAP.set(this, map);\n    }\n    const oldTimeout = map.get(type);\n    map.delete(type);\n    window$1.clearTimeout(oldTimeout);\n    const timeout = window$1.setTimeout(() => {\n      map.delete(type);\n      // if we cleared out all timeouts for the current target, delete its map\n      if (map.size === 0) {\n        map = null;\n        EVENT_MAP.delete(this);\n      }\n      this.trigger(event);\n    }, 0);\n    map.set(type, timeout);\n  }\n}\n\n/**\n * A Custom DOM event.\n *\n * @typedef {CustomEvent} Event\n * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}\n */\n\n/**\n * All event listeners should follow the following format.\n *\n * @callback EventTarget~EventListener\n * @this {EventTarget}\n *\n * @param {Event} event\n *        the event that triggered this function\n *\n * @param {Object} [hash]\n *        hash of data sent during the event\n */\n\n/**\n * An object containing event names as keys and booleans as values.\n *\n * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}\n *         will have extra functionality. See that function for more information.\n *\n * @property EventTarget.prototype.allowedEvents_\n * @private\n */\nEventTarget$2.prototype.allowedEvents_ = {};\n\n/**\n * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#on}\n */\nEventTarget$2.prototype.addEventListener = EventTarget$2.prototype.on;\n\n/**\n * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#off}\n */\nEventTarget$2.prototype.removeEventListener = EventTarget$2.prototype.off;\n\n/**\n * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic\n * the standard DOM API.\n *\n * @function\n * @see {@link EventTarget#trigger}\n */\nEventTarget$2.prototype.dispatchEvent = EventTarget$2.prototype.trigger;\n\n/**\n * @file mixins/evented.js\n * @module evented\n */\nconst objName = obj => {\n  if (typeof obj.name === 'function') {\n    return obj.name();\n  }\n  if (typeof obj.name === 'string') {\n    return obj.name;\n  }\n  if (obj.name_) {\n    return obj.name_;\n  }\n  if (obj.constructor && obj.constructor.name) {\n    return obj.constructor.name;\n  }\n  return typeof obj;\n};\n\n/**\n * Returns whether or not an object has had the evented mixin applied.\n *\n * @param  {Object} object\n *         An object to test.\n *\n * @return {boolean}\n *         Whether or not the object appears to be evented.\n */\nconst isEvented = object => object instanceof EventTarget$2 || !!object.eventBusEl_ && ['on', 'one', 'off', 'trigger'].every(k => typeof object[k] === 'function');\n\n/**\n * Adds a callback to run after the evented mixin applied.\n *\n * @param  {Object} object\n *         An object to Add\n * @param  {Function} callback\n *         The callback to run.\n */\nconst addEventedCallback = (target, callback) => {\n  if (isEvented(target)) {\n    callback();\n  } else {\n    if (!target.eventedCallbacks) {\n      target.eventedCallbacks = [];\n    }\n    target.eventedCallbacks.push(callback);\n  }\n};\n\n/**\n * Whether a value is a valid event type - non-empty string or array.\n *\n * @private\n * @param  {string|Array} type\n *         The type value to test.\n *\n * @return {boolean}\n *         Whether or not the type is a valid event type.\n */\nconst isValidEventType = type =>\n// The regex here verifies that the `type` contains at least one non-\n// whitespace character.\ntypeof type === 'string' && /\\S/.test(type) || Array.isArray(type) && !!type.length;\n\n/**\n * Validates a value to determine if it is a valid event target. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the target does not appear to be a valid event target.\n *\n * @param  {Object} target\n *         The object to test.\n *\n * @param  {Object} obj\n *         The evented object we are validating for\n *\n * @param  {string} fnName\n *         The name of the evented mixin function that called this.\n */\nconst validateTarget = (target, obj, fnName) => {\n  if (!target || !target.nodeName && !isEvented(target)) {\n    throw new Error(`Invalid target for ${objName(obj)}#${fnName}; must be a DOM node or evented object.`);\n  }\n};\n\n/**\n * Validates a value to determine if it is a valid event target. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the type does not appear to be a valid event type.\n *\n * @param  {string|Array} type\n *         The type to test.\n *\n * @param  {Object} obj\n*         The evented object we are validating for\n *\n * @param  {string} fnName\n *         The name of the evented mixin function that called this.\n */\nconst validateEventType = (type, obj, fnName) => {\n  if (!isValidEventType(type)) {\n    throw new Error(`Invalid event type for ${objName(obj)}#${fnName}; must be a non-empty string or array.`);\n  }\n};\n\n/**\n * Validates a value to determine if it is a valid listener. Throws if not.\n *\n * @private\n * @throws {Error}\n *         If the listener is not a function.\n *\n * @param  {Function} listener\n *         The listener to test.\n *\n * @param  {Object} obj\n *         The evented object we are validating for\n *\n * @param  {string} fnName\n *         The name of the evented mixin function that called this.\n */\nconst validateListener = (listener, obj, fnName) => {\n  if (typeof listener !== 'function') {\n    throw new Error(`Invalid listener for ${objName(obj)}#${fnName}; must be a function.`);\n  }\n};\n\n/**\n * Takes an array of arguments given to `on()` or `one()`, validates them, and\n * normalizes them into an object.\n *\n * @private\n * @param  {Object} self\n *         The evented object on which `on()` or `one()` was called. This\n *         object will be bound as the `this` value for the listener.\n *\n * @param  {Array} args\n *         An array of arguments passed to `on()` or `one()`.\n *\n * @param  {string} fnName\n *         The name of the evented mixin function that called this.\n *\n * @return {Object}\n *         An object containing useful values for `on()` or `one()` calls.\n */\nconst normalizeListenArgs = (self, args, fnName) => {\n  // If the number of arguments is less than 3, the target is always the\n  // evented object itself.\n  const isTargetingSelf = args.length < 3 || args[0] === self || args[0] === self.eventBusEl_;\n  let target;\n  let type;\n  let listener;\n  if (isTargetingSelf) {\n    target = self.eventBusEl_;\n\n    // Deal with cases where we got 3 arguments, but we are still listening to\n    // the evented object itself.\n    if (args.length >= 3) {\n      args.shift();\n    }\n    [type, listener] = args;\n  } else {\n    [target, type, listener] = args;\n  }\n  validateTarget(target, self, fnName);\n  validateEventType(type, self, fnName);\n  validateListener(listener, self, fnName);\n  listener = bind_(self, listener);\n  return {\n    isTargetingSelf,\n    target,\n    type,\n    listener\n  };\n};\n\n/**\n * Adds the listener to the event type(s) on the target, normalizing for\n * the type of target.\n *\n * @private\n * @param  {Element|Object} target\n *         A DOM node or evented object.\n *\n * @param  {string} method\n *         The event binding method to use (\"on\" or \"one\").\n *\n * @param  {string|Array} type\n *         One or more event type(s).\n *\n * @param  {Function} listener\n *         A listener function.\n */\nconst listen = (target, method, type, listener) => {\n  validateTarget(target, target, method);\n  if (target.nodeName) {\n    Events[method](target, type, listener);\n  } else {\n    target[method](type, listener);\n  }\n};\n\n/**\n * Contains methods that provide event capabilities to an object which is passed\n * to {@link module:evented|evented}.\n *\n * @mixin EventedMixin\n */\nconst EventedMixin = {\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  on(...args) {\n    const {\n      isTargetingSelf,\n      target,\n      type,\n      listener\n    } = normalizeListenArgs(this, args, 'on');\n    listen(target, 'on', type, listener);\n\n    // If this object is listening to another evented object.\n    if (!isTargetingSelf) {\n      // If this object is disposed, remove the listener.\n      const removeListenerOnDispose = () => this.off(target, type, listener);\n\n      // Use the same function ID as the listener so we can remove it later it\n      // using the ID of the original listener.\n      removeListenerOnDispose.guid = listener.guid;\n\n      // Add a listener to the target's dispose event as well. This ensures\n      // that if the target is disposed BEFORE this object, we remove the\n      // removal listener that was just added. Otherwise, we create a memory leak.\n      const removeRemoverOnTargetDispose = () => this.off('dispose', removeListenerOnDispose);\n\n      // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n      removeRemoverOnTargetDispose.guid = listener.guid;\n      listen(this, 'on', 'dispose', removeListenerOnDispose);\n      listen(target, 'on', 'dispose', removeRemoverOnTargetDispose);\n    }\n  },\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object. The listener will be called once per event and then removed.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  one(...args) {\n    const {\n      isTargetingSelf,\n      target,\n      type,\n      listener\n    } = normalizeListenArgs(this, args, 'one');\n\n    // Targeting this evented object.\n    if (isTargetingSelf) {\n      listen(target, 'one', type, listener);\n\n      // Targeting another evented object.\n    } else {\n      // TODO: This wrapper is incorrect! It should only\n      //       remove the wrapper for the event type that called it.\n      //       Instead all listeners are removed on the first trigger!\n      //       see https://github.com/videojs/video.js/issues/5962\n      const wrapper = (...largs) => {\n        this.off(target, type, wrapper);\n        listener.apply(null, largs);\n      };\n\n      // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n      wrapper.guid = listener.guid;\n      listen(target, 'one', type, wrapper);\n    }\n  },\n  /**\n   * Add a listener to an event (or events) on this object or another evented\n   * object. The listener will only be called once for the first event that is triggered\n   * then removed.\n   *\n   * @param  {string|Array|Element|Object} targetOrType\n   *         If this is a string or array, it represents the event type(s)\n   *         that will trigger the listener.\n   *\n   *         Another evented object can be passed here instead, which will\n   *         cause the listener to listen for events on _that_ object.\n   *\n   *         In either case, the listener's `this` value will be bound to\n   *         this object.\n   *\n   * @param  {string|Array|Function} typeOrListener\n   *         If the first argument was a string or array, this should be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function.\n   */\n  any(...args) {\n    const {\n      isTargetingSelf,\n      target,\n      type,\n      listener\n    } = normalizeListenArgs(this, args, 'any');\n\n    // Targeting this evented object.\n    if (isTargetingSelf) {\n      listen(target, 'any', type, listener);\n\n      // Targeting another evented object.\n    } else {\n      const wrapper = (...largs) => {\n        this.off(target, type, wrapper);\n        listener.apply(null, largs);\n      };\n\n      // Use the same function ID as the listener so we can remove it later\n      // it using the ID of the original listener.\n      wrapper.guid = listener.guid;\n      listen(target, 'any', type, wrapper);\n    }\n  },\n  /**\n   * Removes listener(s) from event(s) on an evented object.\n   *\n   * @param  {string|Array|Element|Object} [targetOrType]\n   *         If this is a string or array, it represents the event type(s).\n   *\n   *         Another evented object can be passed here instead, in which case\n   *         ALL 3 arguments are _required_.\n   *\n   * @param  {string|Array|Function} [typeOrListener]\n   *         If the first argument was a string or array, this may be the\n   *         listener function. Otherwise, this is a string or array of event\n   *         type(s).\n   *\n   * @param  {Function} [listener]\n   *         If the first argument was another evented object, this will be\n   *         the listener function; otherwise, _all_ listeners bound to the\n   *         event type(s) will be removed.\n   */\n  off(targetOrType, typeOrListener, listener) {\n    // Targeting this evented object.\n    if (!targetOrType || isValidEventType(targetOrType)) {\n      off(this.eventBusEl_, targetOrType, typeOrListener);\n\n      // Targeting another evented object.\n    } else {\n      const target = targetOrType;\n      const type = typeOrListener;\n\n      // Fail fast and in a meaningful way!\n      validateTarget(target, this, 'off');\n      validateEventType(type, this, 'off');\n      validateListener(listener, this, 'off');\n\n      // Ensure there's at least a guid, even if the function hasn't been used\n      listener = bind_(this, listener);\n\n      // Remove the dispose listener on this evented object, which was given\n      // the same guid as the event listener in on().\n      this.off('dispose', listener);\n      if (target.nodeName) {\n        off(target, type, listener);\n        off(target, 'dispose', listener);\n      } else if (isEvented(target)) {\n        target.off(type, listener);\n        target.off('dispose', listener);\n      }\n    }\n  },\n  /**\n   * Fire an event on this evented object, causing its listeners to be called.\n   *\n   * @param   {string|Object} event\n   *          An event type or an object with a type property.\n   *\n   * @param   {Object} [hash]\n   *          An additional object to pass along to listeners.\n   *\n   * @return {boolean}\n   *          Whether or not the default behavior was prevented.\n   */\n  trigger(event, hash) {\n    validateTarget(this.eventBusEl_, this, 'trigger');\n    const type = event && typeof event !== 'string' ? event.type : event;\n    if (!isValidEventType(type)) {\n      throw new Error(`Invalid event type for ${objName(this)}#trigger; ` + 'must be a non-empty string or object with a type key that has a non-empty value.');\n    }\n    return trigger(this.eventBusEl_, event, hash);\n  }\n};\n\n/**\n * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.\n *\n * @param  {Object} target\n *         The object to which to add event methods.\n *\n * @param  {Object} [options={}]\n *         Options for customizing the mixin behavior.\n *\n * @param  {string} [options.eventBusKey]\n *         By default, adds a `eventBusEl_` DOM element to the target object,\n *         which is used as an event bus. If the target object already has a\n *         DOM element that should be used, pass its key here.\n *\n * @return {Object}\n *         The target object.\n */\nfunction evented(target, options = {}) {\n  const {\n    eventBusKey\n  } = options;\n\n  // Set or create the eventBusEl_.\n  if (eventBusKey) {\n    if (!target[eventBusKey].nodeName) {\n      throw new Error(`The eventBusKey \"${eventBusKey}\" does not refer to an element.`);\n    }\n    target.eventBusEl_ = target[eventBusKey];\n  } else {\n    target.eventBusEl_ = createEl('span', {\n      className: 'vjs-event-bus'\n    });\n  }\n  Object.assign(target, EventedMixin);\n  if (target.eventedCallbacks) {\n    target.eventedCallbacks.forEach(callback => {\n      callback();\n    });\n  }\n\n  // When any evented object is disposed, it removes all its listeners.\n  target.on('dispose', () => {\n    target.off();\n    [target, target.el_, target.eventBusEl_].forEach(function (val) {\n      if (val && DomData.has(val)) {\n        DomData.delete(val);\n      }\n    });\n    window$1.setTimeout(() => {\n      target.eventBusEl_ = null;\n    }, 0);\n  });\n  return target;\n}\n\n/**\n * @file mixins/stateful.js\n * @module stateful\n */\n\n/**\n * Contains methods that provide statefulness to an object which is passed\n * to {@link module:stateful}.\n *\n * @mixin StatefulMixin\n */\nconst StatefulMixin = {\n  /**\n   * A hash containing arbitrary keys and values representing the state of\n   * the object.\n   *\n   * @type {Object}\n   */\n  state: {},\n  /**\n   * Set the state of an object by mutating its\n   * {@link module:stateful~StatefulMixin.state|state} object in place.\n   *\n   * @fires   module:stateful~StatefulMixin#statechanged\n   * @param   {Object|Function} stateUpdates\n   *          A new set of properties to shallow-merge into the plugin state.\n   *          Can be a plain object or a function returning a plain object.\n   *\n   * @return {Object|undefined}\n   *          An object containing changes that occurred. If no changes\n   *          occurred, returns `undefined`.\n   */\n  setState(stateUpdates) {\n    // Support providing the `stateUpdates` state as a function.\n    if (typeof stateUpdates === 'function') {\n      stateUpdates = stateUpdates();\n    }\n    let changes;\n    each(stateUpdates, (value, key) => {\n      // Record the change if the value is different from what's in the\n      // current state.\n      if (this.state[key] !== value) {\n        changes = changes || {};\n        changes[key] = {\n          from: this.state[key],\n          to: value\n        };\n      }\n      this.state[key] = value;\n    });\n\n    // Only trigger \"statechange\" if there were changes AND we have a trigger\n    // function. This allows us to not require that the target object be an\n    // evented object.\n    if (changes && isEvented(this)) {\n      /**\n       * An event triggered on an object that is both\n       * {@link module:stateful|stateful} and {@link module:evented|evented}\n       * indicating that its state has changed.\n       *\n       * @event    module:stateful~StatefulMixin#statechanged\n       * @type     {Object}\n       * @property {Object} changes\n       *           A hash containing the properties that were changed and\n       *           the values they were changed `from` and `to`.\n       */\n      this.trigger({\n        changes,\n        type: 'statechanged'\n      });\n    }\n    return changes;\n  }\n};\n\n/**\n * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target\n * object.\n *\n * If the target object is {@link module:evented|evented} and has a\n * `handleStateChanged` method, that method will be automatically bound to the\n * `statechanged` event on itself.\n *\n * @param   {Object} target\n *          The object to be made stateful.\n *\n * @param   {Object} [defaultState]\n *          A default set of properties to populate the newly-stateful object's\n *          `state` property.\n *\n * @return {Object}\n *          Returns the `target`.\n */\nfunction stateful(target, defaultState) {\n  Object.assign(target, StatefulMixin);\n\n  // This happens after the mixing-in because we need to replace the `state`\n  // added in that step.\n  target.state = Object.assign({}, target.state, defaultState);\n\n  // Auto-bind the `handleStateChanged` method of the target object if it exists.\n  if (typeof target.handleStateChanged === 'function' && isEvented(target)) {\n    target.on('statechanged', target.handleStateChanged);\n  }\n  return target;\n}\n\n/**\n * @file str.js\n * @module to-lower-case\n */\n\n/**\n * Lowercase the first letter of a string.\n *\n * @param {string} string\n *        String to be lowercased\n *\n * @return {string}\n *         The string with a lowercased first letter\n */\nconst toLowerCase = function (string) {\n  if (typeof string !== 'string') {\n    return string;\n  }\n  return string.replace(/./, w => w.toLowerCase());\n};\n\n/**\n * Uppercase the first letter of a string.\n *\n * @param {string} string\n *        String to be uppercased\n *\n * @return {string}\n *         The string with an uppercased first letter\n */\nconst toTitleCase$1 = function (string) {\n  if (typeof string !== 'string') {\n    return string;\n  }\n  return string.replace(/./, w => w.toUpperCase());\n};\n\n/**\n * Compares the TitleCase versions of the two strings for equality.\n *\n * @param {string} str1\n *        The first string to compare\n *\n * @param {string} str2\n *        The second string to compare\n *\n * @return {boolean}\n *         Whether the TitleCase versions of the strings are equal\n */\nconst titleCaseEquals = function (str1, str2) {\n  return toTitleCase$1(str1) === toTitleCase$1(str2);\n};\n\nvar Str = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  toLowerCase: toLowerCase,\n  toTitleCase: toTitleCase$1,\n  titleCaseEquals: titleCaseEquals\n});\n\n/**\n * Player Component - Base class for all UI objects\n *\n * @file component.js\n */\n\n/**\n * Base class for all UI Components.\n * Components are UI objects which represent both a javascript object and an element\n * in the DOM. They can be children of other components, and can have\n * children themselves.\n *\n * Components can also use methods from {@link EventTarget}\n */\nclass Component$1 {\n  /**\n   * A callback that is called when a component is ready. Does not have any\n   * parameters and any callback value will be ignored.\n   *\n   * @callback ReadyCallback\n   * @this Component\n   */\n\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of component options.\n   *\n   * @param {Object[]} [options.children]\n   *        An array of children objects to initialize this component with. Children objects have\n   *        a name property that will be used if more than one component of the same type needs to be\n   *        added.\n   *\n   * @param  {string} [options.className]\n   *         A class or space separated list of classes to add the component\n   *\n   * @param {ReadyCallback} [ready]\n   *        Function that gets called when the `Component` is ready.\n   */\n  constructor(player, options, ready) {\n    // The component might be the player itself and we can't pass `this` to super\n    if (!player && this.play) {\n      this.player_ = player = this; // eslint-disable-line\n    } else {\n      this.player_ = player;\n    }\n    this.isDisposed_ = false;\n\n    // Hold the reference to the parent component via `addChild` method\n    this.parentComponent_ = null;\n\n    // Make a copy of prototype.options_ to protect against overriding defaults\n    this.options_ = merge$1({}, this.options_);\n\n    // Updated options with supplied options\n    options = this.options_ = merge$1(this.options_, options);\n\n    // Get ID from options or options element if one is supplied\n    this.id_ = options.id || options.el && options.el.id;\n\n    // If there was no ID from the options, generate one\n    if (!this.id_) {\n      // Don't require the player ID function in the case of mock players\n      const id = player && player.id && player.id() || 'no_player';\n      this.id_ = `${id}_component_${newGUID()}`;\n    }\n    this.name_ = options.name || null;\n\n    // Create element if one wasn't provided in options\n    if (options.el) {\n      this.el_ = options.el;\n    } else if (options.createEl !== false) {\n      this.el_ = this.createEl();\n    }\n    if (options.className && this.el_) {\n      options.className.split(' ').forEach(c => this.addClass(c));\n    }\n\n    // Remove the placeholder event methods. If the component is evented, the\n    // real methods are added next\n    ['on', 'off', 'one', 'any', 'trigger'].forEach(fn => {\n      this[fn] = undefined;\n    });\n\n    // if evented is anything except false, we want to mixin in evented\n    if (options.evented !== false) {\n      // Make this an evented object and use `el_`, if available, as its event bus\n      evented(this, {\n        eventBusKey: this.el_ ? 'el_' : null\n      });\n      this.handleLanguagechange = this.handleLanguagechange.bind(this);\n      this.on(this.player_, 'languagechange', this.handleLanguagechange);\n    }\n    stateful(this, this.constructor.defaultState);\n    this.children_ = [];\n    this.childIndex_ = {};\n    this.childNameIndex_ = {};\n    this.setTimeoutIds_ = new Set();\n    this.setIntervalIds_ = new Set();\n    this.rafIds_ = new Set();\n    this.namedRafs_ = new Map();\n    this.clearingTimersOnDispose_ = false;\n\n    // Add any child components in options\n    if (options.initChildren !== false) {\n      this.initChildren();\n    }\n\n    // Don't want to trigger ready here or it will go before init is actually\n    // finished for all children that run this constructor\n    this.ready(ready);\n    if (options.reportTouchActivity !== false) {\n      this.enableTouchActivity();\n    }\n  }\n\n  // `on`, `off`, `one`, `any` and `trigger` are here so tsc includes them in definitions.\n  // They are replaced or removed in the constructor\n\n  /**\n   * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a\n   * function that will get called when an event with a certain name gets triggered.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to call with `EventTarget`s\n   */\n  on(type, fn) {}\n\n  /**\n   * Removes an `event listener` for a specific event from an instance of `EventTarget`.\n   * This makes it so that the `event listener` will no longer get called when the\n   * named event happens.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to remove.\n   */\n  off(type, fn) {}\n\n  /**\n   * This function will add an `event listener` that gets triggered only once. After the\n   * first trigger it will get removed. This is like adding an `event listener`\n   * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to be called once for each event name.\n   */\n  one(type, fn) {}\n\n  /**\n   * This function will add an `event listener` that gets triggered only once and is\n   * removed from all events. This is like adding an array of `event listener`s\n   * with {@link EventTarget#on} that calls {@link EventTarget#off} on all events the\n   * first time it is triggered.\n   *\n   * @param {string|string[]} type\n   *        An event name or an array of event names.\n   *\n   * @param {Function} fn\n   *        The function to be called once for each event name.\n   */\n  any(type, fn) {}\n\n  /**\n   * This function causes an event to happen. This will then cause any `event listeners`\n   * that are waiting for that event, to get called. If there are no `event listeners`\n   * for an event then nothing will happen.\n   *\n   * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.\n   * Trigger will also call the `on` + `uppercaseEventName` function.\n   *\n   * Example:\n   * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call\n   * `onClick` if it exists.\n   *\n   * @param {string|Event|Object} event\n   *        The name of the event, an `Event`, or an object with a key of type set to\n   *        an event name.\n   */\n  trigger(event) {}\n\n  /**\n   * Dispose of the `Component` and all child components.\n   *\n   * @fires Component#dispose\n   *\n   * @param {Object} options\n   * @param {Element} options.originalEl element with which to replace player element\n   */\n  dispose(options = {}) {\n    // Bail out if the component has already been disposed.\n    if (this.isDisposed_) {\n      return;\n    }\n    if (this.readyQueue_) {\n      this.readyQueue_.length = 0;\n    }\n\n    /**\n     * Triggered when a `Component` is disposed.\n     *\n     * @event Component#dispose\n     * @type {Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the dispose event does not\n     *           bubble up\n     */\n    this.trigger({\n      type: 'dispose',\n      bubbles: false\n    });\n    this.isDisposed_ = true;\n\n    // Dispose all children.\n    if (this.children_) {\n      for (let i = this.children_.length - 1; i >= 0; i--) {\n        if (this.children_[i].dispose) {\n          this.children_[i].dispose();\n        }\n      }\n    }\n\n    // Delete child references\n    this.children_ = null;\n    this.childIndex_ = null;\n    this.childNameIndex_ = null;\n    this.parentComponent_ = null;\n    if (this.el_) {\n      // Remove element from DOM\n      if (this.el_.parentNode) {\n        if (options.restoreEl) {\n          this.el_.parentNode.replaceChild(options.restoreEl, this.el_);\n        } else {\n          this.el_.parentNode.removeChild(this.el_);\n        }\n      }\n      this.el_ = null;\n    }\n\n    // remove reference to the player after disposing of the element\n    this.player_ = null;\n  }\n\n  /**\n   * Determine whether or not this component has been disposed.\n   *\n   * @return {boolean}\n   *         If the component has been disposed, will be `true`. Otherwise, `false`.\n   */\n  isDisposed() {\n    return Boolean(this.isDisposed_);\n  }\n\n  /**\n   * Return the {@link Player} that the `Component` has attached to.\n   *\n   * @return { import('./player').default }\n   *         The player that this `Component` has attached to.\n   */\n  player() {\n    return this.player_;\n  }\n\n  /**\n   * Deep merge of options objects with new options.\n   * > Note: When both `obj` and `options` contain properties whose values are objects.\n   *         The two properties get merged using {@link module:obj.merge}\n   *\n   * @param {Object} obj\n   *        The object that contains new options.\n   *\n   * @return {Object}\n   *         A new object of `this.options_` and `obj` merged together.\n   */\n  options(obj) {\n    if (!obj) {\n      return this.options_;\n    }\n    this.options_ = merge$1(this.options_, obj);\n    return this.options_;\n  }\n\n  /**\n   * Get the `Component`s DOM element\n   *\n   * @return {Element}\n   *         The DOM element for this `Component`.\n   */\n  el() {\n    return this.el_;\n  }\n\n  /**\n   * Create the `Component`s DOM element.\n   *\n   * @param {string} [tagName]\n   *        Element's DOM node type. e.g. 'div'\n   *\n   * @param {Object} [properties]\n   *        An object of properties that should be set.\n   *\n   * @param {Object} [attributes]\n   *        An object of attributes that should be set.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl(tagName, properties, attributes) {\n    return createEl(tagName, properties, attributes);\n  }\n\n  /**\n   * Localize a string given the string in english.\n   *\n   * If tokens are provided, it'll try and run a simple token replacement on the provided string.\n   * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.\n   *\n   * If a `defaultValue` is provided, it'll use that over `string`,\n   * if a value isn't found in provided language files.\n   * This is useful if you want to have a descriptive key for token replacement\n   * but have a succinct localized string and not require `en.json` to be included.\n   *\n   * Currently, it is used for the progress bar timing.\n   * ```js\n   * {\n   *   \"progress bar timing: currentTime={1} duration={2}\": \"{1} of {2}\"\n   * }\n   * ```\n   * It is then used like so:\n   * ```js\n   * this.localize('progress bar timing: currentTime={1} duration{2}',\n   *               [this.player_.currentTime(), this.player_.duration()],\n   *               '{1} of {2}');\n   * ```\n   *\n   * Which outputs something like: `01:23 of 24:56`.\n   *\n   *\n   * @param {string} string\n   *        The string to localize and the key to lookup in the language files.\n   * @param {string[]} [tokens]\n   *        If the current item has token replacements, provide the tokens here.\n   * @param {string} [defaultValue]\n   *        Defaults to `string`. Can be a default value to use for token replacement\n   *        if the lookup key is needed to be separate.\n   *\n   * @return {string}\n   *         The localized string or if no localization exists the english string.\n   */\n  localize(string, tokens, defaultValue = string) {\n    const code = this.player_.language && this.player_.language();\n    const languages = this.player_.languages && this.player_.languages();\n    const language = languages && languages[code];\n    const primaryCode = code && code.split('-')[0];\n    const primaryLang = languages && languages[primaryCode];\n    let localizedString = defaultValue;\n    if (language && language[string]) {\n      localizedString = language[string];\n    } else if (primaryLang && primaryLang[string]) {\n      localizedString = primaryLang[string];\n    }\n    if (tokens) {\n      localizedString = localizedString.replace(/\\{(\\d+)\\}/g, function (match, index) {\n        const value = tokens[index - 1];\n        let ret = value;\n        if (typeof value === 'undefined') {\n          ret = match;\n        }\n        return ret;\n      });\n    }\n    return localizedString;\n  }\n\n  /**\n   * Handles language change for the player in components. Should be overridden by sub-components.\n   *\n   * @abstract\n   */\n  handleLanguagechange() {}\n\n  /**\n   * Return the `Component`s DOM element. This is where children get inserted.\n   * This will usually be the the same as the element returned in {@link Component#el}.\n   *\n   * @return {Element}\n   *         The content element for this `Component`.\n   */\n  contentEl() {\n    return this.contentEl_ || this.el_;\n  }\n\n  /**\n   * Get this `Component`s ID\n   *\n   * @return {string}\n   *         The id of this `Component`\n   */\n  id() {\n    return this.id_;\n  }\n\n  /**\n   * Get the `Component`s name. The name gets used to reference the `Component`\n   * and is set during registration.\n   *\n   * @return {string}\n   *         The name of this `Component`.\n   */\n  name() {\n    return this.name_;\n  }\n\n  /**\n   * Get an array of all child components\n   *\n   * @return {Array}\n   *         The children\n   */\n  children() {\n    return this.children_;\n  }\n\n  /**\n   * Returns the child `Component` with the given `id`.\n   *\n   * @param {string} id\n   *        The id of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `id` or undefined.\n   */\n  getChildById(id) {\n    return this.childIndex_[id];\n  }\n\n  /**\n   * Returns the child `Component` with the given `name`.\n   *\n   * @param {string} name\n   *        The name of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The child `Component` with the given `name` or undefined.\n   */\n  getChild(name) {\n    if (!name) {\n      return;\n    }\n    return this.childNameIndex_[name];\n  }\n\n  /**\n   * Returns the descendant `Component` following the givent\n   * descendant `names`. For instance ['foo', 'bar', 'baz'] would\n   * try to get 'foo' on the current component, 'bar' on the 'foo'\n   * component and 'baz' on the 'bar' component and return undefined\n   * if any of those don't exist.\n   *\n   * @param {...string[]|...string} names\n   *        The name of the child `Component` to get.\n   *\n   * @return {Component|undefined}\n   *         The descendant `Component` following the given descendant\n   *         `names` or undefined.\n   */\n  getDescendant(...names) {\n    // flatten array argument into the main array\n    names = names.reduce((acc, n) => acc.concat(n), []);\n    let currentChild = this;\n    for (let i = 0; i < names.length; i++) {\n      currentChild = currentChild.getChild(names[i]);\n      if (!currentChild || !currentChild.getChild) {\n        return;\n      }\n    }\n    return currentChild;\n  }\n\n  /**\n   * Add a child `Component` inside the current `Component`.\n   *\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @param {number} [index=this.children_.length]\n   *        The index to attempt to add a child into.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   */\n  addChild(child, options = {}, index = this.children_.length) {\n    let component;\n    let componentName;\n\n    // If child is a string, create component with options\n    if (typeof child === 'string') {\n      componentName = toTitleCase$1(child);\n      const componentClassName = options.componentClass || componentName;\n\n      // Set name through options\n      options.name = componentName;\n\n      // Create a new object & element for this controls set\n      // If there's no .player_, this is a player\n      const ComponentClass = Component$1.getComponent(componentClassName);\n      if (!ComponentClass) {\n        throw new Error(`Component ${componentClassName} does not exist`);\n      }\n\n      // data stored directly on the videojs object may be\n      // misidentified as a component to retain\n      // backwards-compatibility with 4.x. check to make sure the\n      // component class can be instantiated.\n      if (typeof ComponentClass !== 'function') {\n        return null;\n      }\n      component = new ComponentClass(this.player_ || this, options);\n\n      // child is a component instance\n    } else {\n      component = child;\n    }\n    if (component.parentComponent_) {\n      component.parentComponent_.removeChild(component);\n    }\n    this.children_.splice(index, 0, component);\n    component.parentComponent_ = this;\n    if (typeof component.id === 'function') {\n      this.childIndex_[component.id()] = component;\n    }\n\n    // If a name wasn't used to create the component, check if we can use the\n    // name function of the component\n    componentName = componentName || component.name && toTitleCase$1(component.name());\n    if (componentName) {\n      this.childNameIndex_[componentName] = component;\n      this.childNameIndex_[toLowerCase(componentName)] = component;\n    }\n\n    // Add the UI object's element to the container div (box)\n    // Having an element is not required\n    if (typeof component.el === 'function' && component.el()) {\n      // If inserting before a component, insert before that component's element\n      let refNode = null;\n      if (this.children_[index + 1]) {\n        // Most children are components, but the video tech is an HTML element\n        if (this.children_[index + 1].el_) {\n          refNode = this.children_[index + 1].el_;\n        } else if (isEl(this.children_[index + 1])) {\n          refNode = this.children_[index + 1];\n        }\n      }\n      this.contentEl().insertBefore(component.el(), refNode);\n    }\n\n    // Return so it can stored on parent object if desired.\n    return component;\n  }\n\n  /**\n   * Remove a child `Component` from this `Component`s list of children. Also removes\n   * the child `Component`s element from this `Component`s element.\n   *\n   * @param {Component} component\n   *        The child `Component` to remove.\n   */\n  removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n    if (!component || !this.children_) {\n      return;\n    }\n    let childFound = false;\n    for (let i = this.children_.length - 1; i >= 0; i--) {\n      if (this.children_[i] === component) {\n        childFound = true;\n        this.children_.splice(i, 1);\n        break;\n      }\n    }\n    if (!childFound) {\n      return;\n    }\n    component.parentComponent_ = null;\n    this.childIndex_[component.id()] = null;\n    this.childNameIndex_[toTitleCase$1(component.name())] = null;\n    this.childNameIndex_[toLowerCase(component.name())] = null;\n    const compEl = component.el();\n    if (compEl && compEl.parentNode === this.contentEl()) {\n      this.contentEl().removeChild(component.el());\n    }\n  }\n\n  /**\n   * Add and initialize default child `Component`s based upon options.\n   */\n  initChildren() {\n    const children = this.options_.children;\n    if (children) {\n      // `this` is `parent`\n      const parentOptions = this.options_;\n      const handleAdd = child => {\n        const name = child.name;\n        let opts = child.opts;\n\n        // Allow options for children to be set at the parent options\n        // e.g. videojs(id, { controlBar: false });\n        // instead of videojs(id, { children: { controlBar: false });\n        if (parentOptions[name] !== undefined) {\n          opts = parentOptions[name];\n        }\n\n        // Allow for disabling default components\n        // e.g. options['children']['posterImage'] = false\n        if (opts === false) {\n          return;\n        }\n\n        // Allow options to be passed as a simple boolean if no configuration\n        // is necessary.\n        if (opts === true) {\n          opts = {};\n        }\n\n        // We also want to pass the original player options\n        // to each component as well so they don't need to\n        // reach back into the player for options later.\n        opts.playerOptions = this.options_.playerOptions;\n\n        // Create and add the child component.\n        // Add a direct reference to the child by name on the parent instance.\n        // If two of the same component are used, different names should be supplied\n        // for each\n        const newChild = this.addChild(name, opts);\n        if (newChild) {\n          this[name] = newChild;\n        }\n      };\n\n      // Allow for an array of children details to passed in the options\n      let workingChildren;\n      const Tech = Component$1.getComponent('Tech');\n      if (Array.isArray(children)) {\n        workingChildren = children;\n      } else {\n        workingChildren = Object.keys(children);\n      }\n      workingChildren\n      // children that are in this.options_ but also in workingChildren  would\n      // give us extra children we do not want. So, we want to filter them out.\n      .concat(Object.keys(this.options_).filter(function (child) {\n        return !workingChildren.some(function (wchild) {\n          if (typeof wchild === 'string') {\n            return child === wchild;\n          }\n          return child === wchild.name;\n        });\n      })).map(child => {\n        let name;\n        let opts;\n        if (typeof child === 'string') {\n          name = child;\n          opts = children[name] || this.options_[name] || {};\n        } else {\n          name = child.name;\n          opts = child;\n        }\n        return {\n          name,\n          opts\n        };\n      }).filter(child => {\n        // we have to make sure that child.name isn't in the techOrder since\n        // techs are registered as Components but can't aren't compatible\n        // See https://github.com/videojs/video.js/issues/2772\n        const c = Component$1.getComponent(child.opts.componentClass || toTitleCase$1(child.name));\n        return c && !Tech.isTech(c);\n      }).forEach(handleAdd);\n    }\n  }\n\n  /**\n   * Builds the default DOM class name. Should be overridden by sub-components.\n   *\n   * @return {string}\n   *         The DOM class name for this object.\n   *\n   * @abstract\n   */\n  buildCSSClass() {\n    // Child classes can include a function that does:\n    // return 'CLASS NAME' + this._super();\n    return '';\n  }\n\n  /**\n   * Bind a listener to the component's ready state.\n   * Different from event listeners in that if the ready event has already happened\n   * it will trigger the function immediately.\n   *\n   * @param {ReadyCallback} fn\n   *        Function that gets called when the `Component` is ready.\n   *\n   * @return {Component}\n   *         Returns itself; method can be chained.\n   */\n  ready(fn, sync = false) {\n    if (!fn) {\n      return;\n    }\n    if (!this.isReady_) {\n      this.readyQueue_ = this.readyQueue_ || [];\n      this.readyQueue_.push(fn);\n      return;\n    }\n    if (sync) {\n      fn.call(this);\n    } else {\n      // Call the function asynchronously by default for consistency\n      this.setTimeout(fn, 1);\n    }\n  }\n\n  /**\n   * Trigger all the ready listeners for this `Component`.\n   *\n   * @fires Component#ready\n   */\n  triggerReady() {\n    this.isReady_ = true;\n\n    // Ensure ready is triggered asynchronously\n    this.setTimeout(function () {\n      const readyQueue = this.readyQueue_;\n\n      // Reset Ready Queue\n      this.readyQueue_ = [];\n      if (readyQueue && readyQueue.length > 0) {\n        readyQueue.forEach(function (fn) {\n          fn.call(this);\n        }, this);\n      }\n\n      // Allow for using event listeners also\n      /**\n       * Triggered when a `Component` is ready.\n       *\n       * @event Component#ready\n       * @type {Event}\n       */\n      this.trigger('ready');\n    }, 1);\n  }\n\n  /**\n   * Find a single DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelector`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {Element|null}\n   *         the dom element that was found, or null\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n  $(selector, context) {\n    return $(selector, context || this.contentEl());\n  }\n\n  /**\n   * Finds all DOM element matching a `selector`. This can be within the `Component`s\n   * `contentEl()` or another custom context.\n   *\n   * @param {string} selector\n   *        A valid CSS selector, which will be passed to `querySelectorAll`.\n   *\n   * @param {Element|string} [context=this.contentEl()]\n   *        A DOM element within which to query. Can also be a selector string in\n   *        which case the first matching element will get used as context. If\n   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns\n   *        nothing it falls back to `document`.\n   *\n   * @return {NodeList}\n   *         a list of dom elements that were found\n   *\n   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)\n   */\n  $$(selector, context) {\n    return $$(selector, context || this.contentEl());\n  }\n\n  /**\n   * Check if a component's element has a CSS class name.\n   *\n   * @param {string} classToCheck\n   *        CSS class name to check.\n   *\n   * @return {boolean}\n   *         - True if the `Component` has the class.\n   *         - False if the `Component` does not have the class`\n   */\n  hasClass(classToCheck) {\n    return hasClass(this.el_, classToCheck);\n  }\n\n  /**\n   * Add a CSS class name to the `Component`s element.\n   *\n   * @param {...string} classesToAdd\n   *        One or more CSS class name to add.\n   */\n  addClass(...classesToAdd) {\n    addClass(this.el_, ...classesToAdd);\n  }\n\n  /**\n   * Remove a CSS class name from the `Component`s element.\n   *\n   * @param {...string} classesToRemove\n   *        One or more CSS class name to remove.\n   */\n  removeClass(...classesToRemove) {\n    removeClass(this.el_, ...classesToRemove);\n  }\n\n  /**\n   * Add or remove a CSS class name from the component's element.\n   * - `classToToggle` gets added when {@link Component#hasClass} would return false.\n   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.\n   *\n   * @param  {string} classToToggle\n   *         The class to add or remove based on (@link Component#hasClass}\n   *\n   * @param  {boolean|Dom~predicate} [predicate]\n   *         An {@link Dom~predicate} function or a boolean\n   */\n  toggleClass(classToToggle, predicate) {\n    toggleClass(this.el_, classToToggle, predicate);\n  }\n\n  /**\n   * Show the `Component`s element if it is hidden by removing the\n   * 'vjs-hidden' class name from it.\n   */\n  show() {\n    this.removeClass('vjs-hidden');\n  }\n\n  /**\n   * Hide the `Component`s element if it is currently showing by adding the\n   * 'vjs-hidden` class name to it.\n   */\n  hide() {\n    this.addClass('vjs-hidden');\n  }\n\n  /**\n   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'\n   * class name to it. Used during fadeIn/fadeOut.\n   *\n   * @private\n   */\n  lockShowing() {\n    this.addClass('vjs-lock-showing');\n  }\n\n  /**\n   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'\n   * class name from it. Used during fadeIn/fadeOut.\n   *\n   * @private\n   */\n  unlockShowing() {\n    this.removeClass('vjs-lock-showing');\n  }\n\n  /**\n   * Get the value of an attribute on the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to get the value from.\n   *\n   * @return {string|null}\n   *         - The value of the attribute that was asked for.\n   *         - Can be an empty string on some browsers if the attribute does not exist\n   *           or has no value\n   *         - Most browsers will return null if the attribute does not exist or has\n   *           no value.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}\n   */\n  getAttribute(attribute) {\n    return getAttribute(this.el_, attribute);\n  }\n\n  /**\n   * Set the value of an attribute on the `Component`'s element\n   *\n   * @param {string} attribute\n   *        Name of the attribute to set.\n   *\n   * @param {string} value\n   *        Value to set the attribute to.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}\n   */\n  setAttribute(attribute, value) {\n    setAttribute(this.el_, attribute, value);\n  }\n\n  /**\n   * Remove an attribute from the `Component`s element.\n   *\n   * @param {string} attribute\n   *        Name of the attribute to remove.\n   *\n   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}\n   */\n  removeAttribute(attribute) {\n    removeAttribute(this.el_, attribute);\n  }\n\n  /**\n   * Get or set the width of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The width that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the componentresize event trigger\n   *\n   * @return {number|string}\n   *         The width when getting, zero if there is no width. Can be a string\n   *           postpixed with '%' or 'px'.\n   */\n  width(num, skipListeners) {\n    return this.dimension('width', num, skipListeners);\n  }\n\n  /**\n   * Get or set the height of the component based upon the CSS styles.\n   * See {@link Component#dimension} for more detailed information.\n   *\n   * @param {number|string} [num]\n   *        The height that you want to set postfixed with '%', 'px' or nothing.\n   *\n   * @param {boolean} [skipListeners]\n   *        Skip the componentresize event trigger\n   *\n   * @return {number|string}\n   *         The width when getting, zero if there is no width. Can be a string\n   *         postpixed with '%' or 'px'.\n   */\n  height(num, skipListeners) {\n    return this.dimension('height', num, skipListeners);\n  }\n\n  /**\n   * Set both the width and height of the `Component` element at the same time.\n   *\n   * @param  {number|string} width\n   *         Width to set the `Component`s element to.\n   *\n   * @param  {number|string} height\n   *         Height to set the `Component`s element to.\n   */\n  dimensions(width, height) {\n    // Skip componentresize listeners on width for optimization\n    this.width(width, true);\n    this.height(height);\n  }\n\n  /**\n   * Get or set width or height of the `Component` element. This is the shared code\n   * for the {@link Component#width} and {@link Component#height}.\n   *\n   * Things to know:\n   * - If the width or height in an number this will return the number postfixed with 'px'.\n   * - If the width/height is a percent this will return the percent postfixed with '%'\n   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function\n   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.\n   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}\n   *   for more information\n   * - If you want the computed style of the component, use {@link Component#currentWidth}\n   *   and {@link {Component#currentHeight}\n   *\n   * @fires Component#componentresize\n   *\n   * @param {string} widthOrHeight\n   8        'width' or 'height'\n   *\n   * @param  {number|string} [num]\n   8         New dimension\n   *\n   * @param  {boolean} [skipListeners]\n   *         Skip componentresize event trigger\n   *\n   * @return {number}\n   *         The dimension when getting or 0 if unset\n   */\n  dimension(widthOrHeight, num, skipListeners) {\n    if (num !== undefined) {\n      // Set to zero if null or literally NaN (NaN !== NaN)\n      if (num === null || num !== num) {\n        num = 0;\n      }\n\n      // Check if using css width/height (% or px) and adjust\n      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {\n        this.el_.style[widthOrHeight] = num;\n      } else if (num === 'auto') {\n        this.el_.style[widthOrHeight] = '';\n      } else {\n        this.el_.style[widthOrHeight] = num + 'px';\n      }\n\n      // skipListeners allows us to avoid triggering the resize event when setting both width and height\n      if (!skipListeners) {\n        /**\n         * Triggered when a component is resized.\n         *\n         * @event Component#componentresize\n         * @type {Event}\n         */\n        this.trigger('componentresize');\n      }\n      return;\n    }\n\n    // Not setting a value, so getting it\n    // Make sure element exists\n    if (!this.el_) {\n      return 0;\n    }\n\n    // Get dimension value from style\n    const val = this.el_.style[widthOrHeight];\n    const pxIndex = val.indexOf('px');\n    if (pxIndex !== -1) {\n      // Return the pixel value with no 'px'\n      return parseInt(val.slice(0, pxIndex), 10);\n    }\n\n    // No px so using % or no style was set, so falling back to offsetWidth/height\n    // If component has display:none, offset will return 0\n    // TODO: handle display:none and no dimension style using px\n    return parseInt(this.el_['offset' + toTitleCase$1(widthOrHeight)], 10);\n  }\n\n  /**\n   * Get the computed width or the height of the component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @param {string} widthOrHeight\n   *        A string containing 'width' or 'height'. Whichever one you want to get.\n   *\n   * @return {number}\n   *         The dimension that gets asked for or 0 if nothing was set\n   *         for that dimension.\n   */\n  currentDimension(widthOrHeight) {\n    let computedWidthOrHeight = 0;\n    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {\n      throw new Error('currentDimension only accepts width or height value');\n    }\n    computedWidthOrHeight = computedStyle(this.el_, widthOrHeight);\n\n    // remove 'px' from variable and parse as integer\n    computedWidthOrHeight = parseFloat(computedWidthOrHeight);\n\n    // if the computed value is still 0, it's possible that the browser is lying\n    // and we want to check the offset values.\n    // This code also runs wherever getComputedStyle doesn't exist.\n    if (computedWidthOrHeight === 0 || isNaN(computedWidthOrHeight)) {\n      const rule = `offset${toTitleCase$1(widthOrHeight)}`;\n      computedWidthOrHeight = this.el_[rule];\n    }\n    return computedWidthOrHeight;\n  }\n\n  /**\n   * An object that contains width and height values of the `Component`s\n   * computed style. Uses `window.getComputedStyle`.\n   *\n   * @typedef {Object} Component~DimensionObject\n   *\n   * @property {number} width\n   *           The width of the `Component`s computed style.\n   *\n   * @property {number} height\n   *           The height of the `Component`s computed style.\n   */\n\n  /**\n   * Get an object that contains computed width and height values of the\n   * component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @return {Component~DimensionObject}\n   *         The computed dimensions of the component's element.\n   */\n  currentDimensions() {\n    return {\n      width: this.currentDimension('width'),\n      height: this.currentDimension('height')\n    };\n  }\n\n  /**\n   * Get the computed width of the component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @return {number}\n   *         The computed width of the component's element.\n   */\n  currentWidth() {\n    return this.currentDimension('width');\n  }\n\n  /**\n   * Get the computed height of the component's element.\n   *\n   * Uses `window.getComputedStyle`.\n   *\n   * @return {number}\n   *         The computed height of the component's element.\n   */\n  currentHeight() {\n    return this.currentDimension('height');\n  }\n\n  /**\n   * Set the focus to this component\n   */\n  focus() {\n    this.el_.focus();\n  }\n\n  /**\n   * Remove the focus from this component\n   */\n  blur() {\n    this.el_.blur();\n  }\n\n  /**\n   * When this Component receives a `keydown` event which it does not process,\n   *  it passes the event to the Player for handling.\n   *\n   * @param {KeyboardEvent} event\n   *        The `keydown` event that caused this function to be called.\n   */\n  handleKeyDown(event) {\n    if (this.player_) {\n      // We only stop propagation here because we want unhandled events to fall\n      // back to the browser. Exclude Tab for focus trapping.\n      if (!keycode.isEventKey(event, 'Tab')) {\n        event.stopPropagation();\n      }\n      this.player_.handleKeyDown(event);\n    }\n  }\n\n  /**\n   * Many components used to have a `handleKeyPress` method, which was poorly\n   * named because it listened to a `keydown` event. This method name now\n   * delegates to `handleKeyDown`. This means anyone calling `handleKeyPress`\n   * will not see their method calls stop working.\n   *\n   * @param {Event} event\n   *        The event that caused this function to be called.\n   */\n  handleKeyPress(event) {\n    this.handleKeyDown(event);\n  }\n\n  /**\n   * Emit a 'tap' events when touch event support gets detected. This gets used to\n   * support toggling the controls through a tap on the video. They get enabled\n   * because every sub-component would have extra overhead otherwise.\n   *\n   * @private\n   * @fires Component#tap\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchleave\n   * @listens Component#touchcancel\n   * @listens Component#touchend\n    */\n  emitTapEvents() {\n    // Track the start time so we can determine how long the touch lasted\n    let touchStart = 0;\n    let firstTouch = null;\n\n    // Maximum movement allowed during a touch event to still be considered a tap\n    // Other popular libs use anywhere from 2 (hammer.js) to 15,\n    // so 10 seems like a nice, round number.\n    const tapMovementThreshold = 10;\n\n    // The maximum length a touch can be while still being considered a tap\n    const touchTimeThreshold = 200;\n    let couldBeTap;\n    this.on('touchstart', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length === 1) {\n        // Copy pageX/pageY from the object\n        firstTouch = {\n          pageX: event.touches[0].pageX,\n          pageY: event.touches[0].pageY\n        };\n        // Record start time so we can detect a tap vs. \"touch and hold\"\n        touchStart = window$1.performance.now();\n        // Reset couldBeTap tracking\n        couldBeTap = true;\n      }\n    });\n    this.on('touchmove', function (event) {\n      // If more than one finger, don't consider treating this as a click\n      if (event.touches.length > 1) {\n        couldBeTap = false;\n      } else if (firstTouch) {\n        // Some devices will throw touchmoves for all but the slightest of taps.\n        // So, if we moved only a small distance, this could still be a tap\n        const xdiff = event.touches[0].pageX - firstTouch.pageX;\n        const ydiff = event.touches[0].pageY - firstTouch.pageY;\n        const touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n        if (touchDistance > tapMovementThreshold) {\n          couldBeTap = false;\n        }\n      }\n    });\n    const noTap = function () {\n      couldBeTap = false;\n    };\n\n    // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s\n    this.on('touchleave', noTap);\n    this.on('touchcancel', noTap);\n\n    // When the touch ends, measure how long it took and trigger the appropriate\n    // event\n    this.on('touchend', function (event) {\n      firstTouch = null;\n      // Proceed only if the touchmove/leave/cancel event didn't happen\n      if (couldBeTap === true) {\n        // Measure how long the touch lasted\n        const touchTime = window$1.performance.now() - touchStart;\n\n        // Make sure the touch was less than the threshold to be considered a tap\n        if (touchTime < touchTimeThreshold) {\n          // Don't let browser turn this into a click\n          event.preventDefault();\n          /**\n           * Triggered when a `Component` is tapped.\n           *\n           * @event Component#tap\n           * @type {MouseEvent}\n           */\n          this.trigger('tap');\n          // It may be good to copy the touchend event object and change the\n          // type to tap, if the other event properties aren't exact after\n          // Events.fixEvent runs (e.g. event.target)\n        }\n      }\n    });\n  }\n\n  /**\n   * This function reports user activity whenever touch events happen. This can get\n   * turned off by any sub-components that wants touch events to act another way.\n   *\n   * Report user touch activity when touch events occur. User activity gets used to\n   * determine when controls should show/hide. It is simple when it comes to mouse\n   * events, because any mouse event should show the controls. So we capture mouse\n   * events that bubble up to the player and report activity when that happens.\n   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player\n   * controls. So touch events can't help us at the player level either.\n   *\n   * User activity gets checked asynchronously. So what could happen is a tap event\n   * on the video turns the controls off. Then the `touchend` event bubbles up to\n   * the player. Which, if it reported user activity, would turn the controls right\n   * back on. We also don't want to completely block touch events from bubbling up.\n   * Furthermore a `touchmove` event and anything other than a tap, should not turn\n   * controls back on.\n   *\n   * @listens Component#touchstart\n   * @listens Component#touchmove\n   * @listens Component#touchend\n   * @listens Component#touchcancel\n   */\n  enableTouchActivity() {\n    // Don't continue if the root player doesn't support reporting user activity\n    if (!this.player() || !this.player().reportUserActivity) {\n      return;\n    }\n\n    // listener for reporting that the user is active\n    const report = bind_(this.player(), this.player().reportUserActivity);\n    let touchHolding;\n    this.on('touchstart', function () {\n      report();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(touchHolding);\n      // report at the same interval as activityCheck\n      touchHolding = this.setInterval(report, 250);\n    });\n    const touchEnd = function (event) {\n      report();\n      // stop the interval that maintains activity if the touch is holding\n      this.clearInterval(touchHolding);\n    };\n    this.on('touchmove', report);\n    this.on('touchend', touchEnd);\n    this.on('touchcancel', touchEnd);\n  }\n\n  /**\n   * A callback that has no parameters and is bound into `Component`s context.\n   *\n   * @callback Component~GenericCallback\n   * @this Component\n   */\n\n  /**\n   * Creates a function that runs after an `x` millisecond timeout. This function is a\n   * wrapper around `window.setTimeout`. There are a few reasons to use this one\n   * instead though:\n   * 1. It gets cleared via  {@link Component#clearTimeout} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will gets turned into a {@link Component~GenericCallback}\n   *\n   * > Note: You can't use `window.clearTimeout` on the id returned by this function. This\n   *         will cause its dispose listener not to get cleaned up! Please use\n   *         {@link Component#clearTimeout} or {@link Component#dispose} instead.\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function that will be run after `timeout`.\n   *\n   * @param {number} timeout\n   *        Timeout in milliseconds to delay before executing the specified function.\n   *\n   * @return {number}\n   *         Returns a timeout ID that gets used to identify the timeout. It can also\n   *         get used in {@link Component#clearTimeout} to clear the timeout that\n   *         was set.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}\n   */\n  setTimeout(fn, timeout) {\n    // declare as variables so they are properly available in timeout function\n    // eslint-disable-next-line\n    var timeoutId;\n    fn = bind_(this, fn);\n    this.clearTimersOnDispose_();\n    timeoutId = window$1.setTimeout(() => {\n      if (this.setTimeoutIds_.has(timeoutId)) {\n        this.setTimeoutIds_.delete(timeoutId);\n      }\n      fn();\n    }, timeout);\n    this.setTimeoutIds_.add(timeoutId);\n    return timeoutId;\n  }\n\n  /**\n   * Clears a timeout that gets created via `window.setTimeout` or\n   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}\n   * use this function instead of `window.clearTimout`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} timeoutId\n   *        The id of the timeout to clear. The return value of\n   *        {@link Component#setTimeout} or `window.setTimeout`.\n   *\n   * @return {number}\n   *         Returns the timeout id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}\n   */\n  clearTimeout(timeoutId) {\n    if (this.setTimeoutIds_.has(timeoutId)) {\n      this.setTimeoutIds_.delete(timeoutId);\n      window$1.clearTimeout(timeoutId);\n    }\n    return timeoutId;\n  }\n\n  /**\n   * Creates a function that gets run every `x` milliseconds. This function is a wrapper\n   * around `window.setInterval`. There are a few reasons to use this one instead though.\n   * 1. It gets cleared via  {@link Component#clearInterval} when\n   *    {@link Component#dispose} gets called.\n   * 2. The function callback will be a {@link Component~GenericCallback}\n   *\n   * @param {Component~GenericCallback} fn\n   *        The function to run every `x` seconds.\n   *\n   * @param {number} interval\n   *        Execute the specified function every `x` milliseconds.\n   *\n   * @return {number}\n   *         Returns an id that can be used to identify the interval. It can also be be used in\n   *         {@link Component#clearInterval} to clear the interval.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}\n   */\n  setInterval(fn, interval) {\n    fn = bind_(this, fn);\n    this.clearTimersOnDispose_();\n    const intervalId = window$1.setInterval(fn, interval);\n    this.setIntervalIds_.add(intervalId);\n    return intervalId;\n  }\n\n  /**\n   * Clears an interval that gets created via `window.setInterval` or\n   * {@link Component#setInterval}. If you set an interval via {@link Component#setInterval}\n   * use this function instead of `window.clearInterval`. If you don't your dispose\n   * listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} intervalId\n   *        The id of the interval to clear. The return value of\n   *        {@link Component#setInterval} or `window.setInterval`.\n   *\n   * @return {number}\n   *         Returns the interval id that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}\n   */\n  clearInterval(intervalId) {\n    if (this.setIntervalIds_.has(intervalId)) {\n      this.setIntervalIds_.delete(intervalId);\n      window$1.clearInterval(intervalId);\n    }\n    return intervalId;\n  }\n\n  /**\n   * Queues up a callback to be passed to requestAnimationFrame (rAF), but\n   * with a few extra bonuses:\n   *\n   * - Supports browsers that do not support rAF by falling back to\n   *   {@link Component#setTimeout}.\n   *\n   * - The callback is turned into a {@link Component~GenericCallback} (i.e.\n   *   bound to the component).\n   *\n   * - Automatic cancellation of the rAF callback is handled if the component\n   *   is disposed before it is called.\n   *\n   * @param  {Component~GenericCallback} fn\n   *         A function that will be bound to this component and executed just\n   *         before the browser's next repaint.\n   *\n   * @return {number}\n   *         Returns an rAF ID that gets used to identify the timeout. It can\n   *         also be used in {@link Component#cancelAnimationFrame} to cancel\n   *         the animation frame callback.\n   *\n   * @listens Component#dispose\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}\n   */\n  requestAnimationFrame(fn) {\n    this.clearTimersOnDispose_();\n\n    // declare as variables so they are properly available in rAF function\n    // eslint-disable-next-line\n    var id;\n    fn = bind_(this, fn);\n    id = window$1.requestAnimationFrame(() => {\n      if (this.rafIds_.has(id)) {\n        this.rafIds_.delete(id);\n      }\n      fn();\n    });\n    this.rafIds_.add(id);\n    return id;\n  }\n\n  /**\n   * Request an animation frame, but only one named animation\n   * frame will be queued. Another will never be added until\n   * the previous one finishes.\n   *\n   * @param {string} name\n   *        The name to give this requestAnimationFrame\n   *\n   * @param  {Component~GenericCallback} fn\n   *         A function that will be bound to this component and executed just\n   *         before the browser's next repaint.\n   */\n  requestNamedAnimationFrame(name, fn) {\n    if (this.namedRafs_.has(name)) {\n      return;\n    }\n    this.clearTimersOnDispose_();\n    fn = bind_(this, fn);\n    const id = this.requestAnimationFrame(() => {\n      fn();\n      if (this.namedRafs_.has(name)) {\n        this.namedRafs_.delete(name);\n      }\n    });\n    this.namedRafs_.set(name, id);\n    return name;\n  }\n\n  /**\n   * Cancels a current named animation frame if it exists.\n   *\n   * @param {string} name\n   *        The name of the requestAnimationFrame to cancel.\n   */\n  cancelNamedAnimationFrame(name) {\n    if (!this.namedRafs_.has(name)) {\n      return;\n    }\n    this.cancelAnimationFrame(this.namedRafs_.get(name));\n    this.namedRafs_.delete(name);\n  }\n\n  /**\n   * Cancels a queued callback passed to {@link Component#requestAnimationFrame}\n   * (rAF).\n   *\n   * If you queue an rAF callback via {@link Component#requestAnimationFrame},\n   * use this function instead of `window.cancelAnimationFrame`. If you don't,\n   * your dispose listener will not get cleaned up until {@link Component#dispose}!\n   *\n   * @param {number} id\n   *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.\n   *\n   * @return {number}\n   *         Returns the rAF ID that was cleared.\n   *\n   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}\n   */\n  cancelAnimationFrame(id) {\n    if (this.rafIds_.has(id)) {\n      this.rafIds_.delete(id);\n      window$1.cancelAnimationFrame(id);\n    }\n    return id;\n  }\n\n  /**\n   * A function to setup `requestAnimationFrame`, `setTimeout`,\n   * and `setInterval`, clearing on dispose.\n   *\n   * > Previously each timer added and removed dispose listeners on it's own.\n   * For better performance it was decided to batch them all, and use `Set`s\n   * to track outstanding timer ids.\n   *\n   * @private\n   */\n  clearTimersOnDispose_() {\n    if (this.clearingTimersOnDispose_) {\n      return;\n    }\n    this.clearingTimersOnDispose_ = true;\n    this.one('dispose', () => {\n      [['namedRafs_', 'cancelNamedAnimationFrame'], ['rafIds_', 'cancelAnimationFrame'], ['setTimeoutIds_', 'clearTimeout'], ['setIntervalIds_', 'clearInterval']].forEach(([idName, cancelName]) => {\n        // for a `Set` key will actually be the value again\n        // so forEach((val, val) =>` but for maps we want to use\n        // the key.\n        this[idName].forEach((val, key) => this[cancelName](key));\n      });\n      this.clearingTimersOnDispose_ = false;\n    });\n  }\n\n  /**\n   * Register a `Component` with `videojs` given the name and the component.\n   *\n   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s\n   *         should be registered using {@link Tech.registerTech} or\n   *         {@link videojs:videojs.registerTech}.\n   *\n   * > NOTE: This function can also be seen on videojs as\n   *         {@link videojs:videojs.registerComponent}.\n   *\n   * @param {string} name\n   *        The name of the `Component` to register.\n   *\n   * @param {Component} ComponentToRegister\n   *        The `Component` class to register.\n   *\n   * @return {Component}\n   *         The `Component` that was registered.\n   */\n  static registerComponent(name, ComponentToRegister) {\n    if (typeof name !== 'string' || !name) {\n      throw new Error(`Illegal component name, \"${name}\"; must be a non-empty string.`);\n    }\n    const Tech = Component$1.getComponent('Tech');\n\n    // We need to make sure this check is only done if Tech has been registered.\n    const isTech = Tech && Tech.isTech(ComponentToRegister);\n    const isComp = Component$1 === ComponentToRegister || Component$1.prototype.isPrototypeOf(ComponentToRegister.prototype);\n    if (isTech || !isComp) {\n      let reason;\n      if (isTech) {\n        reason = 'techs must be registered using Tech.registerTech()';\n      } else {\n        reason = 'must be a Component subclass';\n      }\n      throw new Error(`Illegal component, \"${name}\"; ${reason}.`);\n    }\n    name = toTitleCase$1(name);\n    if (!Component$1.components_) {\n      Component$1.components_ = {};\n    }\n    const Player = Component$1.getComponent('Player');\n    if (name === 'Player' && Player && Player.players) {\n      const players = Player.players;\n      const playerNames = Object.keys(players);\n\n      // If we have players that were disposed, then their name will still be\n      // in Players.players. So, we must loop through and verify that the value\n      // for each item is not null. This allows registration of the Player component\n      // after all players have been disposed or before any were created.\n      if (players && playerNames.length > 0 && playerNames.map(pname => players[pname]).every(Boolean)) {\n        throw new Error('Can not register Player component after player has been created.');\n      }\n    }\n    Component$1.components_[name] = ComponentToRegister;\n    Component$1.components_[toLowerCase(name)] = ComponentToRegister;\n    return ComponentToRegister;\n  }\n\n  /**\n   * Get a `Component` based on the name it was registered with.\n   *\n   * @param {string} name\n   *        The Name of the component to get.\n   *\n   * @return {Component}\n   *         The `Component` that got registered under the given name.\n   */\n  static getComponent(name) {\n    if (!name || !Component$1.components_) {\n      return;\n    }\n    return Component$1.components_[name];\n  }\n}\nComponent$1.registerComponent('Component', Component$1);\n\n/**\n * @file time.js\n * @module time\n */\n\n/**\n * Returns the time for the specified index at the start or end\n * of a TimeRange object.\n *\n * @typedef    {Function} TimeRangeIndex\n *\n * @param      {number} [index=0]\n *             The range number to return the time for.\n *\n * @return     {number}\n *             The time offset at the specified index.\n *\n * @deprecated The index argument must be provided.\n *             In the future, leaving it out will throw an error.\n */\n\n/**\n * An object that contains ranges of time, which mimics {@link TimeRanges}.\n *\n * @typedef  {Object} TimeRange\n *\n * @property {number} length\n *           The number of time ranges represented by this object.\n *\n * @property {module:time~TimeRangeIndex} start\n *           Returns the time offset at which a specified time range begins.\n *\n * @property {module:time~TimeRangeIndex} end\n *           Returns the time offset at which a specified time range ends.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges\n */\n\n/**\n * Check if any of the time ranges are over the maximum index.\n *\n * @private\n * @param   {string} fnName\n *          The function name to use for logging\n *\n * @param   {number} index\n *          The index to check\n *\n * @param   {number} maxIndex\n *          The maximum possible index\n *\n * @throws  {Error} if the timeRanges provided are over the maxIndex\n */\nfunction rangeCheck(fnName, index, maxIndex) {\n  if (typeof index !== 'number' || index < 0 || index > maxIndex) {\n    throw new Error(`Failed to execute '${fnName}' on 'TimeRanges': The index provided (${index}) is non-numeric or out of bounds (0-${maxIndex}).`);\n  }\n}\n\n/**\n * Get the time for the specified index at the start or end\n * of a TimeRange object.\n *\n * @private\n * @param      {string} fnName\n *             The function name to use for logging\n *\n * @param      {string} valueIndex\n *             The property that should be used to get the time. should be\n *             'start' or 'end'\n *\n * @param      {Array} ranges\n *             An array of time ranges\n *\n * @param      {Array} [rangeIndex=0]\n *             The index to start the search at\n *\n * @return     {number}\n *             The time that offset at the specified index.\n *\n * @deprecated rangeIndex must be set to a value, in the future this will throw an error.\n * @throws     {Error} if rangeIndex is more than the length of ranges\n */\nfunction getRange(fnName, valueIndex, ranges, rangeIndex) {\n  rangeCheck(fnName, rangeIndex, ranges.length - 1);\n  return ranges[rangeIndex][valueIndex];\n}\n\n/**\n * Create a time range object given ranges of time.\n *\n * @private\n * @param   {Array} [ranges]\n *          An array of time ranges.\n *\n * @return  {TimeRange}\n */\nfunction createTimeRangesObj(ranges) {\n  let timeRangesObj;\n  if (ranges === undefined || ranges.length === 0) {\n    timeRangesObj = {\n      length: 0,\n      start() {\n        throw new Error('This TimeRanges object is empty');\n      },\n      end() {\n        throw new Error('This TimeRanges object is empty');\n      }\n    };\n  } else {\n    timeRangesObj = {\n      length: ranges.length,\n      start: getRange.bind(null, 'start', 0, ranges),\n      end: getRange.bind(null, 'end', 1, ranges)\n    };\n  }\n  if (window$1.Symbol && window$1.Symbol.iterator) {\n    timeRangesObj[window$1.Symbol.iterator] = () => (ranges || []).values();\n  }\n  return timeRangesObj;\n}\n\n/**\n * Create a `TimeRange` object which mimics an\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges|HTML5 TimeRanges instance}.\n *\n * @param {number|Array[]} start\n *        The start of a single range (a number) or an array of ranges (an\n *        array of arrays of two numbers each).\n *\n * @param {number} end\n *        The end of a single range. Cannot be used with the array form of\n *        the `start` argument.\n *\n * @return {TimeRange}\n */\nfunction createTimeRanges$1(start, end) {\n  if (Array.isArray(start)) {\n    return createTimeRangesObj(start);\n  } else if (start === undefined || end === undefined) {\n    return createTimeRangesObj();\n  }\n  return createTimeRangesObj([[start, end]]);\n}\n\n/**\n * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in\n * seconds) will force a number of leading zeros to cover the length of the\n * guide.\n *\n * @private\n * @param  {number} seconds\n *         Number of seconds to be turned into a string\n *\n * @param  {number} guide\n *         Number (in seconds) to model the string after\n *\n * @return {string}\n *         Time formatted as H:MM:SS or M:SS\n */\nconst defaultImplementation = function (seconds, guide) {\n  seconds = seconds < 0 ? 0 : seconds;\n  let s = Math.floor(seconds % 60);\n  let m = Math.floor(seconds / 60 % 60);\n  let h = Math.floor(seconds / 3600);\n  const gm = Math.floor(guide / 60 % 60);\n  const gh = Math.floor(guide / 3600);\n\n  // handle invalid times\n  if (isNaN(seconds) || seconds === Infinity) {\n    // '-' is false for all relational operators (e.g. <, >=) so this setting\n    // will add the minimum number of fields specified by the guide\n    h = m = s = '-';\n  }\n\n  // Check if we need to show hours\n  h = h > 0 || gh > 0 ? h + ':' : '';\n\n  // If hours are showing, we may need to add a leading zero.\n  // Always show at least one digit of minutes.\n  m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';\n\n  // Check if leading zero is need for seconds\n  s = s < 10 ? '0' + s : s;\n  return h + m + s;\n};\n\n// Internal pointer to the current implementation.\nlet implementation = defaultImplementation;\n\n/**\n * Replaces the default formatTime implementation with a custom implementation.\n *\n * @param {Function} customImplementation\n *        A function which will be used in place of the default formatTime\n *        implementation. Will receive the current time in seconds and the\n *        guide (in seconds) as arguments.\n */\nfunction setFormatTime(customImplementation) {\n  implementation = customImplementation;\n}\n\n/**\n * Resets formatTime to the default implementation.\n */\nfunction resetFormatTime() {\n  implementation = defaultImplementation;\n}\n\n/**\n * Delegates to either the default time formatting function or a custom\n * function supplied via `setFormatTime`.\n *\n * Formats seconds as a time string (H:MM:SS or M:SS). Supplying a\n * guide (in seconds) will force a number of leading zeros to cover the\n * length of the guide.\n *\n * @example  formatTime(125, 600) === \"02:05\"\n * @param    {number} seconds\n *           Number of seconds to be turned into a string\n *\n * @param    {number} guide\n *           Number (in seconds) to model the string after\n *\n * @return   {string}\n *           Time formatted as H:MM:SS or M:SS\n */\nfunction formatTime(seconds, guide = seconds) {\n  return implementation(seconds, guide);\n}\n\nvar Time = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createTimeRanges: createTimeRanges$1,\n  createTimeRange: createTimeRanges$1,\n  setFormatTime: setFormatTime,\n  resetFormatTime: resetFormatTime,\n  formatTime: formatTime\n});\n\n/**\n * @file buffer.js\n * @module buffer\n */\n\n/**\n * Compute the percentage of the media that has been buffered.\n *\n * @param { import('./time').TimeRange } buffered\n *        The current `TimeRanges` object representing buffered time ranges\n *\n * @param {number} duration\n *        Total duration of the media\n *\n * @return {number}\n *         Percent buffered of the total duration in decimal form.\n */\nfunction bufferedPercent(buffered, duration) {\n  let bufferedDuration = 0;\n  let start;\n  let end;\n  if (!duration) {\n    return 0;\n  }\n  if (!buffered || !buffered.length) {\n    buffered = createTimeRanges$1(0, 0);\n  }\n  for (let i = 0; i < buffered.length; i++) {\n    start = buffered.start(i);\n    end = buffered.end(i);\n\n    // buffered end can be bigger than duration by a very small fraction\n    if (end > duration) {\n      end = duration;\n    }\n    bufferedDuration += end - start;\n  }\n  return bufferedDuration / duration;\n}\n\n/**\n * @file media-error.js\n */\n\n/**\n * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.\n *\n * @param {number|string|Object|MediaError} value\n *        This can be of multiple types:\n *        - number: should be a standard error code\n *        - string: an error message (the code will be 0)\n *        - Object: arbitrary properties\n *        - `MediaError` (native): used to populate a video.js `MediaError` object\n *        - `MediaError` (video.js): will return itself if it's already a\n *          video.js `MediaError` object.\n *\n * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}\n * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}\n *\n * @class MediaError\n */\nfunction MediaError(value) {\n  // Allow redundant calls to this constructor to avoid having `instanceof`\n  // checks peppered around the code.\n  if (value instanceof MediaError) {\n    return value;\n  }\n  if (typeof value === 'number') {\n    this.code = value;\n  } else if (typeof value === 'string') {\n    // default code is zero, so this is a custom error\n    this.message = value;\n  } else if (isObject(value)) {\n    // We assign the `code` property manually because native `MediaError` objects\n    // do not expose it as an own/enumerable property of the object.\n    if (typeof value.code === 'number') {\n      this.code = value.code;\n    }\n    Object.assign(this, value);\n  }\n  if (!this.message) {\n    this.message = MediaError.defaultMessages[this.code] || '';\n  }\n}\n\n/**\n * The error code that refers two one of the defined `MediaError` types\n *\n * @type {Number}\n */\nMediaError.prototype.code = 0;\n\n/**\n * An optional message that to show with the error. Message is not part of the HTML5\n * video spec but allows for more informative custom errors.\n *\n * @type {String}\n */\nMediaError.prototype.message = '';\n\n/**\n * An optional status code that can be set by plugins to allow even more detail about\n * the error. For example a plugin might provide a specific HTTP status code and an\n * error message for that code. Then when the plugin gets that error this class will\n * know how to display an error message for it. This allows a custom message to show\n * up on the `Player` error overlay.\n *\n * @type {Array}\n */\nMediaError.prototype.status = null;\n\n/**\n * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the\n * specification listed under {@link MediaError} for more information.\n *\n * @enum {array}\n * @readonly\n * @property {string} 0 - MEDIA_ERR_CUSTOM\n * @property {string} 1 - MEDIA_ERR_ABORTED\n * @property {string} 2 - MEDIA_ERR_NETWORK\n * @property {string} 3 - MEDIA_ERR_DECODE\n * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED\n * @property {string} 5 - MEDIA_ERR_ENCRYPTED\n */\nMediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];\n\n/**\n * The default `MediaError` messages based on the {@link MediaError.errorTypes}.\n *\n * @type {Array}\n * @constant\n */\nMediaError.defaultMessages = {\n  1: 'You aborted the media playback',\n  2: 'A network error caused the media download to fail part-way.',\n  3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',\n  4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',\n  5: 'The media is encrypted and we do not have the keys to decrypt it.'\n};\n\n// Add types as properties on MediaError\n// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;\nfor (let errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {\n  MediaError[MediaError.errorTypes[errNum]] = errNum;\n  // values should be accessible on both the class and instance\n  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;\n}\n\n/**\n * Returns whether an object is `Promise`-like (i.e. has a `then` method).\n *\n * @param  {Object}  value\n *         An object that may or may not be `Promise`-like.\n *\n * @return {boolean}\n *         Whether or not the object is `Promise`-like.\n */\nfunction isPromise(value) {\n  return value !== undefined && value !== null && typeof value.then === 'function';\n}\n\n/**\n * Silence a Promise-like object.\n *\n * This is useful for avoiding non-harmful, but potentially confusing \"uncaught\n * play promise\" rejection error messages.\n *\n * @param  {Object} value\n *         An object that may or may not be `Promise`-like.\n */\nfunction silencePromise(value) {\n  if (isPromise(value)) {\n    value.then(null, e => {});\n  }\n}\n\n/**\n * @file text-track-list-converter.js Utilities for capturing text track state and\n * re-creating tracks based on a capture.\n *\n * @module text-track-list-converter\n */\n\n/**\n * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that\n * represents the {@link TextTrack}'s state.\n *\n * @param {TextTrack} track\n *        The text track to query.\n *\n * @return {Object}\n *         A serializable javascript representation of the TextTrack.\n * @private\n */\nconst trackToJson_ = function (track) {\n  const ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce((acc, prop, i) => {\n    if (track[prop]) {\n      acc[prop] = track[prop];\n    }\n    return acc;\n  }, {\n    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {\n      return {\n        startTime: cue.startTime,\n        endTime: cue.endTime,\n        text: cue.text,\n        id: cue.id\n      };\n    })\n  });\n  return ret;\n};\n\n/**\n * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the\n * state of all {@link TextTrack}s currently configured. The return array is compatible with\n * {@link text-track-list-converter:jsonToTextTracks}.\n *\n * @param { import('../tech/tech').default } tech\n *        The tech object to query\n *\n * @return {Array}\n *         A serializable javascript representation of the {@link Tech}s\n *         {@link TextTrackList}.\n */\nconst textTracksToJson = function (tech) {\n  const trackEls = tech.$$('track');\n  const trackObjs = Array.prototype.map.call(trackEls, t => t.track);\n  const tracks = Array.prototype.map.call(trackEls, function (trackEl) {\n    const json = trackToJson_(trackEl.track);\n    if (trackEl.src) {\n      json.src = trackEl.src;\n    }\n    return json;\n  });\n  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {\n    return trackObjs.indexOf(track) === -1;\n  }).map(trackToJson_));\n};\n\n/**\n * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript\n * object {@link TextTrack} representations.\n *\n * @param {Array} json\n *        An array of `TextTrack` representation objects, like those that would be\n *        produced by `textTracksToJson`.\n *\n * @param {Tech} tech\n *        The `Tech` to create the `TextTrack`s on.\n */\nconst jsonToTextTracks = function (json, tech) {\n  json.forEach(function (track) {\n    const addedTrack = tech.addRemoteTextTrack(track).track;\n    if (!track.src && track.cues) {\n      track.cues.forEach(cue => addedTrack.addCue(cue));\n    }\n  });\n  return tech.textTracks();\n};\nvar textTrackConverter = {\n  textTracksToJson,\n  jsonToTextTracks,\n  trackToJson_\n};\n\n/**\n * @file modal-dialog.js\n */\nconst MODAL_CLASS_NAME = 'vjs-modal-dialog';\n\n/**\n * The `ModalDialog` displays over the video and its controls, which blocks\n * interaction with the player until it is closed.\n *\n * Modal dialogs include a \"Close\" button and will close when that button\n * is activated - or when ESC is pressed anywhere.\n *\n * @extends Component\n */\nclass ModalDialog extends Component$1 {\n  /**\n   * Create an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param { import('./utils/dom').ContentDescriptor} [options.content=undefined]\n   *        Provide customized content for this modal.\n   *\n   * @param {string} [options.description]\n   *        A text description for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.fillAlways=false]\n   *        Normally, modals are automatically filled only the first time\n   *        they open. This tells the modal to refresh its content\n   *        every time it opens.\n   *\n   * @param {string} [options.label]\n   *        A text label for the modal, primarily for accessibility.\n   *\n   * @param {boolean} [options.pauseOnOpen=true]\n   *        If `true`, playback will will be paused if playing when\n   *        the modal opens, and resumed when it closes.\n   *\n   * @param {boolean} [options.temporary=true]\n   *        If `true`, the modal can only be opened once; it will be\n   *        disposed as soon as it's closed.\n   *\n   * @param {boolean} [options.uncloseable=false]\n   *        If `true`, the user will not be able to close the modal\n   *        through the UI in the normal ways. Programmatic closing is\n   *        still possible.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.handleKeyDown_ = e => this.handleKeyDown(e);\n    this.close_ = e => this.close(e);\n    this.opened_ = this.hasBeenOpened_ = this.hasBeenFilled_ = false;\n    this.closeable(!this.options_.uncloseable);\n    this.content(this.options_.content);\n\n    // Make sure the contentEl is defined AFTER any children are initialized\n    // because we only want the contents of the modal in the contentEl\n    // (not the UI elements like the close button).\n    this.contentEl_ = createEl('div', {\n      className: `${MODAL_CLASS_NAME}-content`\n    }, {\n      role: 'document'\n    });\n    this.descEl_ = createEl('p', {\n      className: `${MODAL_CLASS_NAME}-description vjs-control-text`,\n      id: this.el().getAttribute('aria-describedby')\n    });\n    textContent(this.descEl_, this.description());\n    this.el_.appendChild(this.descEl_);\n    this.el_.appendChild(this.contentEl_);\n  }\n\n  /**\n   * Create the `ModalDialog`'s DOM element\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: this.buildCSSClass(),\n      tabIndex: -1\n    }, {\n      'aria-describedby': `${this.id()}_description`,\n      'aria-hidden': 'true',\n      'aria-label': this.label(),\n      'role': 'dialog'\n    });\n  }\n  dispose() {\n    this.contentEl_ = null;\n    this.descEl_ = null;\n    this.previouslyActiveEl_ = null;\n    super.dispose();\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `${MODAL_CLASS_NAME} vjs-hidden ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Returns the label string for this modal. Primarily used for accessibility.\n   *\n   * @return {string}\n   *         the localized or raw label of this modal.\n   */\n  label() {\n    return this.localize(this.options_.label || 'Modal Window');\n  }\n\n  /**\n   * Returns the description string for this modal. Primarily used for\n   * accessibility.\n   *\n   * @return {string}\n   *         The localized or raw description of this modal.\n   */\n  description() {\n    let desc = this.options_.description || this.localize('This is a modal window.');\n\n    // Append a universal closeability message if the modal is closeable.\n    if (this.closeable()) {\n      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');\n    }\n    return desc;\n  }\n\n  /**\n   * Opens the modal.\n   *\n   * @fires ModalDialog#beforemodalopen\n   * @fires ModalDialog#modalopen\n   */\n  open() {\n    if (!this.opened_) {\n      const player = this.player();\n\n      /**\n        * Fired just before a `ModalDialog` is opened.\n        *\n        * @event ModalDialog#beforemodalopen\n        * @type {Event}\n        */\n      this.trigger('beforemodalopen');\n      this.opened_ = true;\n\n      // Fill content if the modal has never opened before and\n      // never been filled.\n      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {\n        this.fill();\n      }\n\n      // If the player was playing, pause it and take note of its previously\n      // playing state.\n      this.wasPlaying_ = !player.paused();\n      if (this.options_.pauseOnOpen && this.wasPlaying_) {\n        player.pause();\n      }\n      this.on('keydown', this.handleKeyDown_);\n\n      // Hide controls and note if they were enabled.\n      this.hadControls_ = player.controls();\n      player.controls(false);\n      this.show();\n      this.conditionalFocus_();\n      this.el().setAttribute('aria-hidden', 'false');\n\n      /**\n        * Fired just after a `ModalDialog` is opened.\n        *\n        * @event ModalDialog#modalopen\n        * @type {Event}\n        */\n      this.trigger('modalopen');\n      this.hasBeenOpened_ = true;\n    }\n  }\n\n  /**\n   * If the `ModalDialog` is currently open or closed.\n   *\n   * @param  {boolean} [value]\n   *         If given, it will open (`true`) or close (`false`) the modal.\n   *\n   * @return {boolean}\n   *         the current open state of the modaldialog\n   */\n  opened(value) {\n    if (typeof value === 'boolean') {\n      this[value ? 'open' : 'close']();\n    }\n    return this.opened_;\n  }\n\n  /**\n   * Closes the modal, does nothing if the `ModalDialog` is\n   * not open.\n   *\n   * @fires ModalDialog#beforemodalclose\n   * @fires ModalDialog#modalclose\n   */\n  close() {\n    if (!this.opened_) {\n      return;\n    }\n    const player = this.player();\n\n    /**\n      * Fired just before a `ModalDialog` is closed.\n      *\n      * @event ModalDialog#beforemodalclose\n      * @type {Event}\n      */\n    this.trigger('beforemodalclose');\n    this.opened_ = false;\n    if (this.wasPlaying_ && this.options_.pauseOnOpen) {\n      player.play();\n    }\n    this.off('keydown', this.handleKeyDown_);\n    if (this.hadControls_) {\n      player.controls(true);\n    }\n    this.hide();\n    this.el().setAttribute('aria-hidden', 'true');\n\n    /**\n      * Fired just after a `ModalDialog` is closed.\n      *\n      * @event ModalDialog#modalclose\n      * @type {Event}\n      */\n    this.trigger('modalclose');\n    this.conditionalBlur_();\n    if (this.options_.temporary) {\n      this.dispose();\n    }\n  }\n\n  /**\n   * Check to see if the `ModalDialog` is closeable via the UI.\n   *\n   * @param  {boolean} [value]\n   *         If given as a boolean, it will set the `closeable` option.\n   *\n   * @return {boolean}\n   *         Returns the final value of the closable option.\n   */\n  closeable(value) {\n    if (typeof value === 'boolean') {\n      const closeable = this.closeable_ = !!value;\n      let close = this.getChild('closeButton');\n\n      // If this is being made closeable and has no close button, add one.\n      if (closeable && !close) {\n        // The close button should be a child of the modal - not its\n        // content element, so temporarily change the content element.\n        const temp = this.contentEl_;\n        this.contentEl_ = this.el_;\n        close = this.addChild('closeButton', {\n          controlText: 'Close Modal Dialog'\n        });\n        this.contentEl_ = temp;\n        this.on(close, 'close', this.close_);\n      }\n\n      // If this is being made uncloseable and has a close button, remove it.\n      if (!closeable && close) {\n        this.off(close, 'close', this.close_);\n        this.removeChild(close);\n        close.dispose();\n      }\n    }\n    return this.closeable_;\n  }\n\n  /**\n   * Fill the modal's content element with the modal's \"content\" option.\n   * The content element will be emptied before this change takes place.\n   */\n  fill() {\n    this.fillWith(this.content());\n  }\n\n  /**\n   * Fill the modal's content element with arbitrary content.\n   * The content element will be emptied before this change takes place.\n   *\n   * @fires ModalDialog#beforemodalfill\n   * @fires ModalDialog#modalfill\n   *\n   * @param { import('./utils/dom').ContentDescriptor} [content]\n   *        The same rules apply to this as apply to the `content` option.\n   */\n  fillWith(content) {\n    const contentEl = this.contentEl();\n    const parentEl = contentEl.parentNode;\n    const nextSiblingEl = contentEl.nextSibling;\n\n    /**\n      * Fired just before a `ModalDialog` is filled with content.\n      *\n      * @event ModalDialog#beforemodalfill\n      * @type {Event}\n      */\n    this.trigger('beforemodalfill');\n    this.hasBeenFilled_ = true;\n\n    // Detach the content element from the DOM before performing\n    // manipulation to avoid modifying the live DOM multiple times.\n    parentEl.removeChild(contentEl);\n    this.empty();\n    insertContent(contentEl, content);\n    /**\n     * Fired just after a `ModalDialog` is filled with content.\n     *\n     * @event ModalDialog#modalfill\n     * @type {Event}\n     */\n    this.trigger('modalfill');\n\n    // Re-inject the re-filled content element.\n    if (nextSiblingEl) {\n      parentEl.insertBefore(contentEl, nextSiblingEl);\n    } else {\n      parentEl.appendChild(contentEl);\n    }\n\n    // make sure that the close button is last in the dialog DOM\n    const closeButton = this.getChild('closeButton');\n    if (closeButton) {\n      parentEl.appendChild(closeButton.el_);\n    }\n  }\n\n  /**\n   * Empties the content element. This happens anytime the modal is filled.\n   *\n   * @fires ModalDialog#beforemodalempty\n   * @fires ModalDialog#modalempty\n   */\n  empty() {\n    /**\n    * Fired just before a `ModalDialog` is emptied.\n    *\n    * @event ModalDialog#beforemodalempty\n    * @type {Event}\n    */\n    this.trigger('beforemodalempty');\n    emptyEl(this.contentEl());\n\n    /**\n    * Fired just after a `ModalDialog` is emptied.\n    *\n    * @event ModalDialog#modalempty\n    * @type {Event}\n    */\n    this.trigger('modalempty');\n  }\n\n  /**\n   * Gets or sets the modal content, which gets normalized before being\n   * rendered into the DOM.\n   *\n   * This does not update the DOM or fill the modal, but it is called during\n   * that process.\n   *\n   * @param  { import('./utils/dom').ContentDescriptor} [value]\n   *         If defined, sets the internal content value to be used on the\n   *         next call(s) to `fill`. This value is normalized before being\n   *         inserted. To \"clear\" the internal content value, pass `null`.\n   *\n   * @return { import('./utils/dom').ContentDescriptor}\n   *         The current content of the modal dialog\n   */\n  content(value) {\n    if (typeof value !== 'undefined') {\n      this.content_ = value;\n    }\n    return this.content_;\n  }\n\n  /**\n   * conditionally focus the modal dialog if focus was previously on the player.\n   *\n   * @private\n   */\n  conditionalFocus_() {\n    const activeEl = document.activeElement;\n    const playerEl = this.player_.el_;\n    this.previouslyActiveEl_ = null;\n    if (playerEl.contains(activeEl) || playerEl === activeEl) {\n      this.previouslyActiveEl_ = activeEl;\n      this.focus();\n    }\n  }\n\n  /**\n   * conditionally blur the element and refocus the last focused element\n   *\n   * @private\n   */\n  conditionalBlur_() {\n    if (this.previouslyActiveEl_) {\n      this.previouslyActiveEl_.focus();\n      this.previouslyActiveEl_ = null;\n    }\n  }\n\n  /**\n   * Keydown handler. Attached when modal is focused.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    // Do not allow keydowns to reach out of the modal dialog.\n    event.stopPropagation();\n    if (keycode.isEventKey(event, 'Escape') && this.closeable()) {\n      event.preventDefault();\n      this.close();\n      return;\n    }\n\n    // exit early if it isn't a tab key\n    if (!keycode.isEventKey(event, 'Tab')) {\n      return;\n    }\n    const focusableEls = this.focusableEls_();\n    const activeEl = this.el_.querySelector(':focus');\n    let focusIndex;\n    for (let i = 0; i < focusableEls.length; i++) {\n      if (activeEl === focusableEls[i]) {\n        focusIndex = i;\n        break;\n      }\n    }\n    if (document.activeElement === this.el_) {\n      focusIndex = 0;\n    }\n    if (event.shiftKey && focusIndex === 0) {\n      focusableEls[focusableEls.length - 1].focus();\n      event.preventDefault();\n    } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {\n      focusableEls[0].focus();\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * get all focusable elements\n   *\n   * @private\n   */\n  focusableEls_() {\n    const allChildren = this.el_.querySelectorAll('*');\n    return Array.prototype.filter.call(allChildren, child => {\n      return (child instanceof window$1.HTMLAnchorElement || child instanceof window$1.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window$1.HTMLInputElement || child instanceof window$1.HTMLSelectElement || child instanceof window$1.HTMLTextAreaElement || child instanceof window$1.HTMLButtonElement) && !child.hasAttribute('disabled') || child instanceof window$1.HTMLIFrameElement || child instanceof window$1.HTMLObjectElement || child instanceof window$1.HTMLEmbedElement || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');\n    });\n  }\n}\n\n/**\n * Default options for `ModalDialog` default options.\n *\n * @type {Object}\n * @private\n */\nModalDialog.prototype.options_ = {\n  pauseOnOpen: true,\n  temporary: true\n};\nComponent$1.registerComponent('ModalDialog', ModalDialog);\n\n/**\n * @file track-list.js\n */\n\n/**\n * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and\n * {@link VideoTrackList}\n *\n * @extends EventTarget\n */\nclass TrackList extends EventTarget$2 {\n  /**\n   * Create an instance of this class\n   *\n   * @param { import('./track').default[] } tracks\n   *        A list of tracks to initialize the list with.\n   *\n   * @abstract\n   */\n  constructor(tracks = []) {\n    super();\n    this.tracks_ = [];\n\n    /**\n     * @memberof TrackList\n     * @member {number} length\n     *         The current number of `Track`s in the this Trackist.\n     * @instance\n     */\n    Object.defineProperty(this, 'length', {\n      get() {\n        return this.tracks_.length;\n      }\n    });\n    for (let i = 0; i < tracks.length; i++) {\n      this.addTrack(tracks[i]);\n    }\n  }\n\n  /**\n   * Add a {@link Track} to the `TrackList`\n   *\n   * @param { import('./track').default } track\n   *        The audio, video, or text track to add to the list.\n   *\n   * @fires TrackList#addtrack\n   */\n  addTrack(track) {\n    const index = this.tracks_.length;\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get() {\n          return this.tracks_[index];\n        }\n      });\n    }\n\n    // Do not add duplicate tracks\n    if (this.tracks_.indexOf(track) === -1) {\n      this.tracks_.push(track);\n      /**\n       * Triggered when a track is added to a track list.\n       *\n       * @event TrackList#addtrack\n       * @type {Event}\n       * @property {Track} track\n       *           A reference to track that was added.\n       */\n      this.trigger({\n        track,\n        type: 'addtrack',\n        target: this\n      });\n    }\n\n    /**\n     * Triggered when a track label is changed.\n     *\n     * @event TrackList#addtrack\n     * @type {Event}\n     * @property {Track} track\n     *           A reference to track that was added.\n     */\n    track.labelchange_ = () => {\n      this.trigger({\n        track,\n        type: 'labelchange',\n        target: this\n      });\n    };\n    if (isEvented(track)) {\n      track.addEventListener('labelchange', track.labelchange_);\n    }\n  }\n\n  /**\n   * Remove a {@link Track} from the `TrackList`\n   *\n   * @param { import('./track').default } rtrack\n   *        The audio, video, or text track to remove from the list.\n   *\n   * @fires TrackList#removetrack\n   */\n  removeTrack(rtrack) {\n    let track;\n    for (let i = 0, l = this.length; i < l; i++) {\n      if (this[i] === rtrack) {\n        track = this[i];\n        if (track.off) {\n          track.off();\n        }\n        this.tracks_.splice(i, 1);\n        break;\n      }\n    }\n    if (!track) {\n      return;\n    }\n\n    /**\n     * Triggered when a track is removed from track list.\n     *\n     * @event TrackList#removetrack\n     * @type {Event}\n     * @property {Track} track\n     *           A reference to track that was removed.\n     */\n    this.trigger({\n      track,\n      type: 'removetrack',\n      target: this\n    });\n  }\n\n  /**\n   * Get a Track from the TrackList by a tracks id\n   *\n   * @param {string} id - the id of the track to get\n   * @method getTrackById\n   * @return { import('./track').default }\n   * @private\n   */\n  getTrackById(id) {\n    let result = null;\n    for (let i = 0, l = this.length; i < l; i++) {\n      const track = this[i];\n      if (track.id === id) {\n        result = track;\n        break;\n      }\n    }\n    return result;\n  }\n}\n\n/**\n * Triggered when a different track is selected/enabled.\n *\n * @event TrackList#change\n * @type {Event}\n */\n\n/**\n * Events that can be called with on + eventName. See {@link EventHandler}.\n *\n * @property {Object} TrackList#allowedEvents_\n * @private\n */\nTrackList.prototype.allowedEvents_ = {\n  change: 'change',\n  addtrack: 'addtrack',\n  removetrack: 'removetrack',\n  labelchange: 'labelchange'\n};\n\n// emulate attribute EventHandler support to allow for feature detection\nfor (const event in TrackList.prototype.allowedEvents_) {\n  TrackList.prototype['on' + event] = null;\n}\n\n/**\n * @file audio-track-list.js\n */\n\n/**\n * Anywhere we call this function we diverge from the spec\n * as we only support one enabled audiotrack at a time\n *\n * @param {AudioTrackList} list\n *        list to work on\n *\n * @param { import('./audio-track').default } track\n *        The track to skip\n *\n * @private\n */\nconst disableOthers$1 = function (list, track) {\n  for (let i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    }\n    // another audio track is enabled, disable it\n    list[i].enabled = false;\n  }\n};\n\n/**\n * The current list of {@link AudioTrack} for a media file.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}\n * @extends TrackList\n */\nclass AudioTrackList extends TrackList {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {AudioTrack[]} [tracks=[]]\n   *        A list of `AudioTrack` to instantiate the list with.\n   */\n  constructor(tracks = []) {\n    // make sure only 1 track is enabled\n    // sorted from last index to first index\n    for (let i = tracks.length - 1; i >= 0; i--) {\n      if (tracks[i].enabled) {\n        disableOthers$1(tracks, tracks[i]);\n        break;\n      }\n    }\n    super(tracks);\n    this.changing_ = false;\n  }\n\n  /**\n   * Add an {@link AudioTrack} to the `AudioTrackList`.\n   *\n   * @param { import('./audio-track').default } track\n   *        The AudioTrack to add to the list\n   *\n   * @fires TrackList#addtrack\n   */\n  addTrack(track) {\n    if (track.enabled) {\n      disableOthers$1(this, track);\n    }\n    super.addTrack(track);\n    // native tracks don't have this\n    if (!track.addEventListener) {\n      return;\n    }\n    track.enabledChange_ = () => {\n      // when we are disabling other tracks (since we don't support\n      // more than one track at a time) we will set changing_\n      // to true so that we don't trigger additional change events\n      if (this.changing_) {\n        return;\n      }\n      this.changing_ = true;\n      disableOthers$1(this, track);\n      this.changing_ = false;\n      this.trigger('change');\n    };\n\n    /**\n     * @listens AudioTrack#enabledchange\n     * @fires TrackList#change\n     */\n    track.addEventListener('enabledchange', track.enabledChange_);\n  }\n  removeTrack(rtrack) {\n    super.removeTrack(rtrack);\n    if (rtrack.removeEventListener && rtrack.enabledChange_) {\n      rtrack.removeEventListener('enabledchange', rtrack.enabledChange_);\n      rtrack.enabledChange_ = null;\n    }\n  }\n}\n\n/**\n * @file video-track-list.js\n */\n\n/**\n * Un-select all other {@link VideoTrack}s that are selected.\n *\n * @param {VideoTrackList} list\n *        list to work on\n *\n * @param { import('./video-track').default } track\n *        The track to skip\n *\n * @private\n */\nconst disableOthers = function (list, track) {\n  for (let i = 0; i < list.length; i++) {\n    if (!Object.keys(list[i]).length || track.id === list[i].id) {\n      continue;\n    }\n    // another video track is enabled, disable it\n    list[i].selected = false;\n  }\n};\n\n/**\n * The current list of {@link VideoTrack} for a video.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}\n * @extends TrackList\n */\nclass VideoTrackList extends TrackList {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {VideoTrack[]} [tracks=[]]\n   *        A list of `VideoTrack` to instantiate the list with.\n   */\n  constructor(tracks = []) {\n    // make sure only 1 track is enabled\n    // sorted from last index to first index\n    for (let i = tracks.length - 1; i >= 0; i--) {\n      if (tracks[i].selected) {\n        disableOthers(tracks, tracks[i]);\n        break;\n      }\n    }\n    super(tracks);\n    this.changing_ = false;\n\n    /**\n     * @member {number} VideoTrackList#selectedIndex\n     *         The current index of the selected {@link VideoTrack`}.\n     */\n    Object.defineProperty(this, 'selectedIndex', {\n      get() {\n        for (let i = 0; i < this.length; i++) {\n          if (this[i].selected) {\n            return i;\n          }\n        }\n        return -1;\n      },\n      set() {}\n    });\n  }\n\n  /**\n   * Add a {@link VideoTrack} to the `VideoTrackList`.\n   *\n   * @param { import('./video-track').default } track\n   *        The VideoTrack to add to the list\n   *\n   * @fires TrackList#addtrack\n   */\n  addTrack(track) {\n    if (track.selected) {\n      disableOthers(this, track);\n    }\n    super.addTrack(track);\n    // native tracks don't have this\n    if (!track.addEventListener) {\n      return;\n    }\n    track.selectedChange_ = () => {\n      if (this.changing_) {\n        return;\n      }\n      this.changing_ = true;\n      disableOthers(this, track);\n      this.changing_ = false;\n      this.trigger('change');\n    };\n\n    /**\n     * @listens VideoTrack#selectedchange\n     * @fires TrackList#change\n     */\n    track.addEventListener('selectedchange', track.selectedChange_);\n  }\n  removeTrack(rtrack) {\n    super.removeTrack(rtrack);\n    if (rtrack.removeEventListener && rtrack.selectedChange_) {\n      rtrack.removeEventListener('selectedchange', rtrack.selectedChange_);\n      rtrack.selectedChange_ = null;\n    }\n  }\n}\n\n/**\n * @file text-track-list.js\n */\n\n/**\n * The current list of {@link TextTrack} for a media file.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}\n * @extends TrackList\n */\nclass TextTrackList extends TrackList {\n  /**\n   * Add a {@link TextTrack} to the `TextTrackList`\n   *\n   * @param { import('./text-track').default } track\n   *        The text track to add to the list.\n   *\n   * @fires TrackList#addtrack\n   */\n  addTrack(track) {\n    super.addTrack(track);\n    if (!this.queueChange_) {\n      this.queueChange_ = () => this.queueTrigger('change');\n    }\n    if (!this.triggerSelectedlanguagechange) {\n      this.triggerSelectedlanguagechange_ = () => this.trigger('selectedlanguagechange');\n    }\n\n    /**\n     * @listens TextTrack#modechange\n     * @fires TrackList#change\n     */\n    track.addEventListener('modechange', this.queueChange_);\n    const nonLanguageTextTrackKind = ['metadata', 'chapters'];\n    if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {\n      track.addEventListener('modechange', this.triggerSelectedlanguagechange_);\n    }\n  }\n  removeTrack(rtrack) {\n    super.removeTrack(rtrack);\n\n    // manually remove the event handlers we added\n    if (rtrack.removeEventListener) {\n      if (this.queueChange_) {\n        rtrack.removeEventListener('modechange', this.queueChange_);\n      }\n      if (this.selectedlanguagechange_) {\n        rtrack.removeEventListener('modechange', this.triggerSelectedlanguagechange_);\n      }\n    }\n  }\n}\n\n/**\n * @file html-track-element-list.js\n */\n\n/**\n * The current list of {@link HtmlTrackElement}s.\n */\nclass HtmlTrackElementList {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {HtmlTrackElement[]} [tracks=[]]\n   *        A list of `HtmlTrackElement` to instantiate the list with.\n   */\n  constructor(trackElements = []) {\n    this.trackElements_ = [];\n\n    /**\n     * @memberof HtmlTrackElementList\n     * @member {number} length\n     *         The current number of `Track`s in the this Trackist.\n     * @instance\n     */\n    Object.defineProperty(this, 'length', {\n      get() {\n        return this.trackElements_.length;\n      }\n    });\n    for (let i = 0, length = trackElements.length; i < length; i++) {\n      this.addTrackElement_(trackElements[i]);\n    }\n  }\n\n  /**\n   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`\n   *\n   * @param {HtmlTrackElement} trackElement\n   *        The track element to add to the list.\n   *\n   * @private\n   */\n  addTrackElement_(trackElement) {\n    const index = this.trackElements_.length;\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get() {\n          return this.trackElements_[index];\n        }\n      });\n    }\n\n    // Do not add duplicate elements\n    if (this.trackElements_.indexOf(trackElement) === -1) {\n      this.trackElements_.push(trackElement);\n    }\n  }\n\n  /**\n   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an\n   * {@link TextTrack}.\n   *\n   * @param {TextTrack} track\n   *        The track associated with a track element.\n   *\n   * @return {HtmlTrackElement|undefined}\n   *         The track element that was found or undefined.\n   *\n   * @private\n   */\n  getTrackElementByTrack_(track) {\n    let trackElement_;\n    for (let i = 0, length = this.trackElements_.length; i < length; i++) {\n      if (track === this.trackElements_[i].track) {\n        trackElement_ = this.trackElements_[i];\n        break;\n      }\n    }\n    return trackElement_;\n  }\n\n  /**\n   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`\n   *\n   * @param {HtmlTrackElement} trackElement\n   *        The track element to remove from the list.\n   *\n   * @private\n   */\n  removeTrackElement_(trackElement) {\n    for (let i = 0, length = this.trackElements_.length; i < length; i++) {\n      if (trackElement === this.trackElements_[i]) {\n        if (this.trackElements_[i].track && typeof this.trackElements_[i].track.off === 'function') {\n          this.trackElements_[i].track.off();\n        }\n        if (typeof this.trackElements_[i].off === 'function') {\n          this.trackElements_[i].off();\n        }\n        this.trackElements_.splice(i, 1);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * @file text-track-cue-list.js\n */\n\n/**\n * @typedef {Object} TextTrackCueList~TextTrackCue\n *\n * @property {string} id\n *           The unique id for this text track cue\n *\n * @property {number} startTime\n *           The start time for this text track cue\n *\n * @property {number} endTime\n *           The end time for this text track cue\n *\n * @property {boolean} pauseOnExit\n *           Pause when the end time is reached if true.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}\n */\n\n/**\n * A List of TextTrackCues.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}\n */\nclass TextTrackCueList {\n  /**\n   * Create an instance of this class..\n   *\n   * @param {Array} cues\n   *        A list of cues to be initialized with\n   */\n  constructor(cues) {\n    TextTrackCueList.prototype.setCues_.call(this, cues);\n\n    /**\n     * @memberof TextTrackCueList\n     * @member {number} length\n     *         The current number of `TextTrackCue`s in the TextTrackCueList.\n     * @instance\n     */\n    Object.defineProperty(this, 'length', {\n      get() {\n        return this.length_;\n      }\n    });\n  }\n\n  /**\n   * A setter for cues in this list. Creates getters\n   * an an index for the cues.\n   *\n   * @param {Array} cues\n   *        An array of cues to set\n   *\n   * @private\n   */\n  setCues_(cues) {\n    const oldLength = this.length || 0;\n    let i = 0;\n    const l = cues.length;\n    this.cues_ = cues;\n    this.length_ = cues.length;\n    const defineProp = function (index) {\n      if (!('' + index in this)) {\n        Object.defineProperty(this, '' + index, {\n          get() {\n            return this.cues_[index];\n          }\n        });\n      }\n    };\n    if (oldLength < l) {\n      i = oldLength;\n      for (; i < l; i++) {\n        defineProp.call(this, i);\n      }\n    }\n  }\n\n  /**\n   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.\n   *\n   * @param {string} id\n   *        The id of the cue that should be searched for.\n   *\n   * @return {TextTrackCueList~TextTrackCue|null}\n   *         A single cue or null if none was found.\n   */\n  getCueById(id) {\n    let result = null;\n    for (let i = 0, l = this.length; i < l; i++) {\n      const cue = this[i];\n      if (cue.id === id) {\n        result = cue;\n        break;\n      }\n    }\n    return result;\n  }\n}\n\n/**\n * @file track-kinds.js\n */\n\n/**\n * All possible `VideoTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind\n * @typedef VideoTrack~Kind\n * @enum\n */\nconst VideoTrackKind = {\n  alternative: 'alternative',\n  captions: 'captions',\n  main: 'main',\n  sign: 'sign',\n  subtitles: 'subtitles',\n  commentary: 'commentary'\n};\n\n/**\n * All possible `AudioTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind\n * @typedef AudioTrack~Kind\n * @enum\n */\nconst AudioTrackKind = {\n  'alternative': 'alternative',\n  'descriptions': 'descriptions',\n  'main': 'main',\n  'main-desc': 'main-desc',\n  'translation': 'translation',\n  'commentary': 'commentary'\n};\n\n/**\n * All possible `TextTrackKind`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind\n * @typedef TextTrack~Kind\n * @enum\n */\nconst TextTrackKind = {\n  subtitles: 'subtitles',\n  captions: 'captions',\n  descriptions: 'descriptions',\n  chapters: 'chapters',\n  metadata: 'metadata'\n};\n\n/**\n * All possible `TextTrackMode`s\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode\n * @typedef TextTrack~Mode\n * @enum\n */\nconst TextTrackMode = {\n  disabled: 'disabled',\n  hidden: 'hidden',\n  showing: 'showing'\n};\n\n/**\n * @file track.js\n */\n\n/**\n * A Track class that contains all of the common functionality for {@link AudioTrack},\n * {@link VideoTrack}, and {@link TextTrack}.\n *\n * > Note: This class should not be used directly\n *\n * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}\n * @extends EventTarget\n * @abstract\n */\nclass Track extends EventTarget$2 {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {string} [options.kind='']\n   *        A valid kind for the track type you are creating.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @abstract\n   */\n  constructor(options = {}) {\n    super();\n    const trackProps = {\n      id: options.id || 'vjs_track_' + newGUID(),\n      kind: options.kind || '',\n      language: options.language || ''\n    };\n    let label = options.label || '';\n\n    /**\n     * @memberof Track\n     * @member {string} id\n     *         The id of this track. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} kind\n     *         The kind of track that this is. Cannot be changed after creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    /**\n     * @memberof Track\n     * @member {string} language\n     *         The two letter language code for this track. Cannot be changed after\n     *         creation.\n     * @instance\n     *\n     * @readonly\n     */\n\n    for (const key in trackProps) {\n      Object.defineProperty(this, key, {\n        get() {\n          return trackProps[key];\n        },\n        set() {}\n      });\n    }\n\n    /**\n     * @memberof Track\n     * @member {string} label\n     *         The label of this track. Cannot be changed after creation.\n     * @instance\n     *\n     * @fires Track#labelchange\n     */\n    Object.defineProperty(this, 'label', {\n      get() {\n        return label;\n      },\n      set(newLabel) {\n        if (newLabel !== label) {\n          label = newLabel;\n\n          /**\n           * An event that fires when label changes on this track.\n           *\n           * > Note: This is not part of the spec!\n           *\n           * @event Track#labelchange\n           * @type {Event}\n           */\n          this.trigger('labelchange');\n        }\n      }\n    });\n  }\n}\n\n/**\n * @file url.js\n * @module url\n */\n\n/**\n * @typedef {Object} url:URLObject\n *\n * @property {string} protocol\n *           The protocol of the url that was parsed.\n *\n * @property {string} hostname\n *           The hostname of the url that was parsed.\n *\n * @property {string} port\n *           The port of the url that was parsed.\n *\n * @property {string} pathname\n *           The pathname of the url that was parsed.\n *\n * @property {string} search\n *           The search query of the url that was parsed.\n *\n * @property {string} hash\n *           The hash of the url that was parsed.\n *\n * @property {string} host\n *           The host of the url that was parsed.\n */\n\n/**\n * Resolve and parse the elements of a URL.\n *\n * @function\n * @param    {String} url\n *           The url to parse\n *\n * @return   {url:URLObject}\n *           An object of url details\n */\nconst parseUrl = function (url) {\n  // This entire method can be replace with URL once we are able to drop IE11\n\n  const props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];\n\n  // add the url to an anchor and let the browser parse the URL\n  const a = document.createElement('a');\n  a.href = url;\n\n  // Copy the specific URL properties to a new object\n  // This is also needed for IE because the anchor loses its\n  // properties when it's removed from the dom\n  const details = {};\n  for (let i = 0; i < props.length; i++) {\n    details[props[i]] = a[props[i]];\n  }\n\n  // IE adds the port to the host property unlike everyone else. If\n  // a port identifier is added for standard ports, strip it.\n  if (details.protocol === 'http:') {\n    details.host = details.host.replace(/:80$/, '');\n  }\n  if (details.protocol === 'https:') {\n    details.host = details.host.replace(/:443$/, '');\n  }\n  if (!details.protocol) {\n    details.protocol = window$1.location.protocol;\n  }\n\n  /* istanbul ignore if */\n  if (!details.host) {\n    details.host = window$1.location.host;\n  }\n  return details;\n};\n\n/**\n * Get absolute version of relative URL.\n *\n * @function\n * @param    {string} url\n *           URL to make absolute\n *\n * @return   {string}\n *           Absolute URL\n *\n * @see      http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue\n */\nconst getAbsoluteURL = function (url) {\n  // Check if absolute URL\n  if (!url.match(/^https?:\\/\\//)) {\n    // Add the url to an anchor and let the browser parse it to convert to an absolute url\n    const a = document.createElement('a');\n    a.href = url;\n    url = a.href;\n  }\n  return url;\n};\n\n/**\n * Returns the extension of the passed file name. It will return an empty string\n * if passed an invalid path.\n *\n * @function\n * @param    {string} path\n *           The fileName path like '/path/to/file.mp4'\n *\n * @return  {string}\n *           The extension in lower case or an empty string if no\n *           extension could be found.\n */\nconst getFileExtension = function (path) {\n  if (typeof path === 'string') {\n    const splitPathRe = /^(\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?)(\\.([^\\.\\/\\?]+)))(?:[\\/]*|[\\?].*)$/;\n    const pathParts = splitPathRe.exec(path);\n    if (pathParts) {\n      return pathParts.pop().toLowerCase();\n    }\n  }\n  return '';\n};\n\n/**\n * Returns whether the url passed is a cross domain request or not.\n *\n * @function\n * @param    {string} url\n *           The url to check.\n *\n * @param    {Object} [winLoc]\n *           the domain to check the url against, defaults to window.location\n *\n * @param    {string} [winLoc.protocol]\n *           The window location protocol defaults to window.location.protocol\n *\n * @param    {string} [winLoc.host]\n *           The window location host defaults to window.location.host\n *\n * @return   {boolean}\n *           Whether it is a cross domain request or not.\n */\nconst isCrossOrigin = function (url, winLoc = window$1.location) {\n  const urlInfo = parseUrl(url);\n\n  // IE8 protocol relative urls will return ':' for protocol\n  const srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;\n\n  // Check if url is for another domain/origin\n  // IE8 doesn't know location.origin, so we won't rely on it here\n  const crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;\n  return crossOrigin;\n};\n\nvar Url = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  parseUrl: parseUrl,\n  getAbsoluteURL: getAbsoluteURL,\n  getFileExtension: getFileExtension,\n  isCrossOrigin: isCrossOrigin\n});\n\n/**\n * @file text-track.js\n */\n\n/**\n * Takes a webvtt file contents and parses it into cues\n *\n * @param {string} srcContent\n *        webVTT file contents\n *\n * @param {TextTrack} track\n *        TextTrack to add cues to. Cues come from the srcContent.\n *\n * @private\n */\nconst parseCues = function (srcContent, track) {\n  const parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, window$1.WebVTT.StringDecoder());\n  const errors = [];\n  parser.oncue = function (cue) {\n    track.addCue(cue);\n  };\n  parser.onparsingerror = function (error) {\n    errors.push(error);\n  };\n  parser.onflush = function () {\n    track.trigger({\n      type: 'loadeddata',\n      target: track\n    });\n  };\n  parser.parse(srcContent);\n  if (errors.length > 0) {\n    if (window$1.console && window$1.console.groupCollapsed) {\n      window$1.console.groupCollapsed(`Text Track parsing errors for ${track.src}`);\n    }\n    errors.forEach(error => log$1.error(error));\n    if (window$1.console && window$1.console.groupEnd) {\n      window$1.console.groupEnd();\n    }\n  }\n  parser.flush();\n};\n\n/**\n * Load a `TextTrack` from a specified url.\n *\n * @param {string} src\n *        Url to load track from.\n *\n * @param {TextTrack} track\n *        Track to add cues to. Comes from the content at the end of `url`.\n *\n * @private\n */\nconst loadTrack = function (src, track) {\n  const opts = {\n    uri: src\n  };\n  const crossOrigin = isCrossOrigin(src);\n  if (crossOrigin) {\n    opts.cors = crossOrigin;\n  }\n  const withCredentials = track.tech_.crossOrigin() === 'use-credentials';\n  if (withCredentials) {\n    opts.withCredentials = withCredentials;\n  }\n  XHR(opts, bind_(this, function (err, response, responseBody) {\n    if (err) {\n      return log$1.error(err, response);\n    }\n    track.loaded_ = true;\n\n    // Make sure that vttjs has loaded, otherwise, wait till it finished loading\n    // NOTE: this is only used for the alt/video.novtt.js build\n    if (typeof window$1.WebVTT !== 'function') {\n      if (track.tech_) {\n        // to prevent use before define eslint error, we define loadHandler\n        // as a let here\n        track.tech_.any(['vttjsloaded', 'vttjserror'], event => {\n          if (event.type === 'vttjserror') {\n            log$1.error(`vttjs failed to load, stopping trying to process ${track.src}`);\n            return;\n          }\n          return parseCues(responseBody, track);\n        });\n      }\n    } else {\n      parseCues(responseBody, track);\n    }\n  }));\n};\n\n/**\n * A representation of a single `TextTrack`.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}\n * @extends Track\n */\nclass TextTrack extends Track {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} options={}\n   *        Object of option names and values\n   *\n   * @param { import('../tech/tech').default } options.tech\n   *        A reference to the tech that owns this TextTrack.\n   *\n   * @param {TextTrack~Kind} [options.kind='subtitles']\n   *        A valid text track kind.\n   *\n   * @param {TextTrack~Mode} [options.mode='disabled']\n   *        A valid text track mode.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this TextTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {string} [options.srclang='']\n   *        A valid two character language code. An alternative, but deprioritized\n   *        version of `options.language`\n   *\n   * @param {string} [options.src]\n   *        A url to TextTrack cues.\n   *\n   * @param {boolean} [options.default]\n   *        If this track should default to on or off.\n   */\n  constructor(options = {}) {\n    if (!options.tech) {\n      throw new Error('A tech was not provided.');\n    }\n    const settings = merge$1(options, {\n      kind: TextTrackKind[options.kind] || 'subtitles',\n      language: options.language || options.srclang || ''\n    });\n    let mode = TextTrackMode[settings.mode] || 'disabled';\n    const default_ = settings.default;\n    if (settings.kind === 'metadata' || settings.kind === 'chapters') {\n      mode = 'hidden';\n    }\n    super(settings);\n    this.tech_ = settings.tech;\n    this.cues_ = [];\n    this.activeCues_ = [];\n    this.preload_ = this.tech_.preloadTextTracks !== false;\n    const cues = new TextTrackCueList(this.cues_);\n    const activeCues = new TextTrackCueList(this.activeCues_);\n    let changed = false;\n    this.timeupdateHandler = bind_(this, function (event = {}) {\n      if (this.tech_.isDisposed()) {\n        return;\n      }\n      if (!this.tech_.isReady_) {\n        if (event.type !== 'timeupdate') {\n          this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);\n        }\n        return;\n      }\n\n      // Accessing this.activeCues for the side-effects of updating itself\n      // due to its nature as a getter function. Do not remove or cues will\n      // stop updating!\n      // Use the setter to prevent deletion from uglify (pure_getters rule)\n      this.activeCues = this.activeCues;\n      if (changed) {\n        this.trigger('cuechange');\n        changed = false;\n      }\n      if (event.type !== 'timeupdate') {\n        this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);\n      }\n    });\n    const disposeHandler = () => {\n      this.stopTracking();\n    };\n    this.tech_.one('dispose', disposeHandler);\n    if (mode !== 'disabled') {\n      this.startTracking();\n    }\n    Object.defineProperties(this, {\n      /**\n       * @memberof TextTrack\n       * @member {boolean} default\n       *         If this track was set to be on or off by default. Cannot be changed after\n       *         creation.\n       * @instance\n       *\n       * @readonly\n       */\n      default: {\n        get() {\n          return default_;\n        },\n        set() {}\n      },\n      /**\n       * @memberof TextTrack\n       * @member {string} mode\n       *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will\n       *         not be set if setting to an invalid mode.\n       * @instance\n       *\n       * @fires TextTrack#modechange\n       */\n      mode: {\n        get() {\n          return mode;\n        },\n        set(newMode) {\n          if (!TextTrackMode[newMode]) {\n            return;\n          }\n          if (mode === newMode) {\n            return;\n          }\n          mode = newMode;\n          if (!this.preload_ && mode !== 'disabled' && this.cues.length === 0) {\n            // On-demand load.\n            loadTrack(this.src, this);\n          }\n          this.stopTracking();\n          if (mode !== 'disabled') {\n            this.startTracking();\n          }\n          /**\n           * An event that fires when mode changes on this track. This allows\n           * the TextTrackList that holds this track to act accordingly.\n           *\n           * > Note: This is not part of the spec!\n           *\n           * @event TextTrack#modechange\n           * @type {Event}\n           */\n          this.trigger('modechange');\n        }\n      },\n      /**\n       * @memberof TextTrack\n       * @member {TextTrackCueList} cues\n       *         The text track cue list for this TextTrack.\n       * @instance\n       */\n      cues: {\n        get() {\n          if (!this.loaded_) {\n            return null;\n          }\n          return cues;\n        },\n        set() {}\n      },\n      /**\n       * @memberof TextTrack\n       * @member {TextTrackCueList} activeCues\n       *         The list text track cues that are currently active for this TextTrack.\n       * @instance\n       */\n      activeCues: {\n        get() {\n          if (!this.loaded_) {\n            return null;\n          }\n\n          // nothing to do\n          if (this.cues.length === 0) {\n            return activeCues;\n          }\n          const ct = this.tech_.currentTime();\n          const active = [];\n          for (let i = 0, l = this.cues.length; i < l; i++) {\n            const cue = this.cues[i];\n            if (cue.startTime <= ct && cue.endTime >= ct) {\n              active.push(cue);\n            }\n          }\n          changed = false;\n          if (active.length !== this.activeCues_.length) {\n            changed = true;\n          } else {\n            for (let i = 0; i < active.length; i++) {\n              if (this.activeCues_.indexOf(active[i]) === -1) {\n                changed = true;\n              }\n            }\n          }\n          this.activeCues_ = active;\n          activeCues.setCues_(this.activeCues_);\n          return activeCues;\n        },\n        // /!\\ Keep this setter empty (see the timeupdate handler above)\n        set() {}\n      }\n    });\n    if (settings.src) {\n      this.src = settings.src;\n      if (!this.preload_) {\n        // Tracks will load on-demand.\n        // Act like we're loaded for other purposes.\n        this.loaded_ = true;\n      }\n      if (this.preload_ || settings.kind !== 'subtitles' && settings.kind !== 'captions') {\n        loadTrack(this.src, this);\n      }\n    } else {\n      this.loaded_ = true;\n    }\n  }\n  startTracking() {\n    // More precise cues based on requestVideoFrameCallback with a requestAnimationFram fallback\n    this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);\n    // Also listen to timeupdate in case rVFC/rAF stops (window in background, audio in video el)\n    this.tech_.on('timeupdate', this.timeupdateHandler);\n  }\n  stopTracking() {\n    if (this.rvf_) {\n      this.tech_.cancelVideoFrameCallback(this.rvf_);\n      this.rvf_ = undefined;\n    }\n    this.tech_.off('timeupdate', this.timeupdateHandler);\n  }\n\n  /**\n   * Add a cue to the internal list of cues.\n   *\n   * @param {TextTrack~Cue} cue\n   *        The cue to add to our internal list\n   */\n  addCue(originalCue) {\n    let cue = originalCue;\n    if (window$1.vttjs && !(originalCue instanceof window$1.vttjs.VTTCue)) {\n      cue = new window$1.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);\n      for (const prop in originalCue) {\n        if (!(prop in cue)) {\n          cue[prop] = originalCue[prop];\n        }\n      }\n\n      // make sure that `id` is copied over\n      cue.id = originalCue.id;\n      cue.originalCue_ = originalCue;\n    }\n    const tracks = this.tech_.textTracks();\n    for (let i = 0; i < tracks.length; i++) {\n      if (tracks[i] !== this) {\n        tracks[i].removeCue(cue);\n      }\n    }\n    this.cues_.push(cue);\n    this.cues.setCues_(this.cues_);\n  }\n\n  /**\n   * Remove a cue from our internal list\n   *\n   * @param {TextTrack~Cue} removeCue\n   *        The cue to remove from our internal list\n   */\n  removeCue(removeCue) {\n    let i = this.cues_.length;\n    while (i--) {\n      const cue = this.cues_[i];\n      if (cue === removeCue || cue.originalCue_ && cue.originalCue_ === removeCue) {\n        this.cues_.splice(i, 1);\n        this.cues.setCues_(this.cues_);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * cuechange - One or more cues in the track have become active or stopped being active.\n */\nTextTrack.prototype.allowedEvents_ = {\n  cuechange: 'cuechange'\n};\n\n/**\n * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}\n * only one `AudioTrack` in the list will be enabled at a time.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}\n * @extends Track\n */\nclass AudioTrack extends Track {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {AudioTrack~Kind} [options.kind='']\n   *        A valid audio track kind\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {boolean} [options.enabled]\n   *        If this track is the one that is currently playing. If this track is part of\n   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.\n   */\n  constructor(options = {}) {\n    const settings = merge$1(options, {\n      kind: AudioTrackKind[options.kind] || ''\n    });\n    super(settings);\n    let enabled = false;\n\n    /**\n     * @memberof AudioTrack\n     * @member {boolean} enabled\n     *         If this `AudioTrack` is enabled or not. When setting this will\n     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.\n     * @instance\n     *\n     * @fires VideoTrack#selectedchange\n     */\n    Object.defineProperty(this, 'enabled', {\n      get() {\n        return enabled;\n      },\n      set(newEnabled) {\n        // an invalid or unchanged value\n        if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {\n          return;\n        }\n        enabled = newEnabled;\n\n        /**\n         * An event that fires when enabled changes on this track. This allows\n         * the AudioTrackList that holds this track to act accordingly.\n         *\n         * > Note: This is not part of the spec! Native tracks will do\n         *         this internally without an event.\n         *\n         * @event AudioTrack#enabledchange\n         * @type {Event}\n         */\n        this.trigger('enabledchange');\n      }\n    });\n\n    // if the user sets this track to selected then\n    // set selected to that true value otherwise\n    // we keep it false\n    if (settings.enabled) {\n      this.enabled = settings.enabled;\n    }\n    this.loaded_ = true;\n  }\n}\n\n/**\n * A representation of a single `VideoTrack`.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}\n * @extends Track\n */\nclass VideoTrack extends Track {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} [options={}]\n   *        Object of option names and values\n   *\n   * @param {string} [options.kind='']\n   *        A valid {@link VideoTrack~Kind}\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this AudioTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {boolean} [options.selected]\n   *        If this track is the one that is currently playing.\n   */\n  constructor(options = {}) {\n    const settings = merge$1(options, {\n      kind: VideoTrackKind[options.kind] || ''\n    });\n    super(settings);\n    let selected = false;\n\n    /**\n     * @memberof VideoTrack\n     * @member {boolean} selected\n     *         If this `VideoTrack` is selected or not. When setting this will\n     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.\n     * @instance\n     *\n     * @fires VideoTrack#selectedchange\n     */\n    Object.defineProperty(this, 'selected', {\n      get() {\n        return selected;\n      },\n      set(newSelected) {\n        // an invalid or unchanged value\n        if (typeof newSelected !== 'boolean' || newSelected === selected) {\n          return;\n        }\n        selected = newSelected;\n\n        /**\n         * An event that fires when selected changes on this track. This allows\n         * the VideoTrackList that holds this track to act accordingly.\n         *\n         * > Note: This is not part of the spec! Native tracks will do\n         *         this internally without an event.\n         *\n         * @event VideoTrack#selectedchange\n         * @type {Event}\n         */\n        this.trigger('selectedchange');\n      }\n    });\n\n    // if the user sets this track to selected then\n    // set selected to that true value otherwise\n    // we keep it false\n    if (settings.selected) {\n      this.selected = settings.selected;\n    }\n  }\n}\n\n/**\n * @file html-track-element.js\n */\n\n/**\n * A single track represented in the DOM.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}\n * @extends EventTarget\n */\nclass HTMLTrackElement extends EventTarget$2 {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Object} options={}\n   *        Object of option names and values\n   *\n   * @param { import('../tech/tech').default } options.tech\n   *        A reference to the tech that owns this HTMLTrackElement.\n   *\n   * @param {TextTrack~Kind} [options.kind='subtitles']\n   *        A valid text track kind.\n   *\n   * @param {TextTrack~Mode} [options.mode='disabled']\n   *        A valid text track mode.\n   *\n   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]\n   *        A unique id for this TextTrack.\n   *\n   * @param {string} [options.label='']\n   *        The menu label for this track.\n   *\n   * @param {string} [options.language='']\n   *        A valid two character language code.\n   *\n   * @param {string} [options.srclang='']\n   *        A valid two character language code. An alternative, but deprioritized\n   *        version of `options.language`\n   *\n   * @param {string} [options.src]\n   *        A url to TextTrack cues.\n   *\n   * @param {boolean} [options.default]\n   *        If this track should default to on or off.\n   */\n  constructor(options = {}) {\n    super();\n    let readyState;\n    const track = new TextTrack(options);\n    this.kind = track.kind;\n    this.src = track.src;\n    this.srclang = track.language;\n    this.label = track.label;\n    this.default = track.default;\n    Object.defineProperties(this, {\n      /**\n       * @memberof HTMLTrackElement\n       * @member {HTMLTrackElement~ReadyState} readyState\n       *         The current ready state of the track element.\n       * @instance\n       */\n      readyState: {\n        get() {\n          return readyState;\n        }\n      },\n      /**\n       * @memberof HTMLTrackElement\n       * @member {TextTrack} track\n       *         The underlying TextTrack object.\n       * @instance\n       *\n       */\n      track: {\n        get() {\n          return track;\n        }\n      }\n    });\n    readyState = HTMLTrackElement.NONE;\n\n    /**\n     * @listens TextTrack#loadeddata\n     * @fires HTMLTrackElement#load\n     */\n    track.addEventListener('loadeddata', () => {\n      readyState = HTMLTrackElement.LOADED;\n      this.trigger({\n        type: 'load',\n        target: this\n      });\n    });\n  }\n}\nHTMLTrackElement.prototype.allowedEvents_ = {\n  load: 'load'\n};\n\n/**\n * The text track not loaded state.\n *\n * @type {number}\n * @static\n */\nHTMLTrackElement.NONE = 0;\n\n/**\n * The text track loading state.\n *\n * @type {number}\n * @static\n */\nHTMLTrackElement.LOADING = 1;\n\n/**\n * The text track loaded state.\n *\n * @type {number}\n * @static\n */\nHTMLTrackElement.LOADED = 2;\n\n/**\n * The text track failed to load state.\n *\n * @type {number}\n * @static\n */\nHTMLTrackElement.ERROR = 3;\n\n/*\n * This file contains all track properties that are used in\n * player.js, tech.js, html5.js and possibly other techs in the future.\n */\n\nconst NORMAL = {\n  audio: {\n    ListClass: AudioTrackList,\n    TrackClass: AudioTrack,\n    capitalName: 'Audio'\n  },\n  video: {\n    ListClass: VideoTrackList,\n    TrackClass: VideoTrack,\n    capitalName: 'Video'\n  },\n  text: {\n    ListClass: TextTrackList,\n    TrackClass: TextTrack,\n    capitalName: 'Text'\n  }\n};\nObject.keys(NORMAL).forEach(function (type) {\n  NORMAL[type].getterName = `${type}Tracks`;\n  NORMAL[type].privateName = `${type}Tracks_`;\n});\nconst REMOTE = {\n  remoteText: {\n    ListClass: TextTrackList,\n    TrackClass: TextTrack,\n    capitalName: 'RemoteText',\n    getterName: 'remoteTextTracks',\n    privateName: 'remoteTextTracks_'\n  },\n  remoteTextEl: {\n    ListClass: HtmlTrackElementList,\n    TrackClass: HTMLTrackElement,\n    capitalName: 'RemoteTextTrackEls',\n    getterName: 'remoteTextTrackEls',\n    privateName: 'remoteTextTrackEls_'\n  }\n};\nconst ALL = Object.assign({}, NORMAL, REMOTE);\nREMOTE.names = Object.keys(REMOTE);\nNORMAL.names = Object.keys(NORMAL);\nALL.names = [].concat(REMOTE.names).concat(NORMAL.names);\n\n/**\n * @file tech.js\n */\n\n/**\n * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string\n * that just contains the src url alone.\n * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`\n   * `var SourceString = 'http://example.com/some-video.mp4';`\n *\n * @typedef {Object|string} Tech~SourceObject\n *\n * @property {string} src\n *           The url to the source\n *\n * @property {string} type\n *           The mime type of the source\n */\n\n/**\n * A function used by {@link Tech} to create a new {@link TextTrack}.\n *\n * @private\n *\n * @param {Tech} self\n *        An instance of the Tech class.\n *\n * @param {string} kind\n *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n *\n * @param {string} [label]\n *        Label to identify the text track\n *\n * @param {string} [language]\n *        Two letter language abbreviation\n *\n * @param {Object} [options={}]\n *        An object with additional text track options\n *\n * @return {TextTrack}\n *          The text track that was created.\n */\nfunction createTrackHelper(self, kind, label, language, options = {}) {\n  const tracks = self.textTracks();\n  options.kind = kind;\n  if (label) {\n    options.label = label;\n  }\n  if (language) {\n    options.language = language;\n  }\n  options.tech = self;\n  const track = new ALL.text.TrackClass(options);\n  tracks.addTrack(track);\n  return track;\n}\n\n/**\n * This is the base class for media playback technology controllers, such as\n * {@link HTML5}\n *\n * @extends Component\n */\nclass Tech extends Component$1 {\n  /**\n  * Create an instance of this Tech.\n  *\n  * @param {Object} [options]\n  *        The key/value store of player options.\n  *\n  * @param {Function} [ready]\n  *        Callback function to call when the `HTML5` Tech is ready.\n  */\n  constructor(options = {}, ready = function () {}) {\n    // we don't want the tech to report user activity automatically.\n    // This is done manually in addControlsListeners\n    options.reportTouchActivity = false;\n    super(null, options, ready);\n    this.onDurationChange_ = e => this.onDurationChange(e);\n    this.trackProgress_ = e => this.trackProgress(e);\n    this.trackCurrentTime_ = e => this.trackCurrentTime(e);\n    this.stopTrackingCurrentTime_ = e => this.stopTrackingCurrentTime(e);\n    this.disposeSourceHandler_ = e => this.disposeSourceHandler(e);\n    this.queuedHanders_ = new Set();\n\n    // keep track of whether the current source has played at all to\n    // implement a very limited played()\n    this.hasStarted_ = false;\n    this.on('playing', function () {\n      this.hasStarted_ = true;\n    });\n    this.on('loadstart', function () {\n      this.hasStarted_ = false;\n    });\n    ALL.names.forEach(name => {\n      const props = ALL[name];\n      if (options && options[props.getterName]) {\n        this[props.privateName] = options[props.getterName];\n      }\n    });\n\n    // Manually track progress in cases where the browser/tech doesn't report it.\n    if (!this.featuresProgressEvents) {\n      this.manualProgressOn();\n    }\n\n    // Manually track timeupdates in cases where the browser/tech doesn't report it.\n    if (!this.featuresTimeupdateEvents) {\n      this.manualTimeUpdatesOn();\n    }\n    ['Text', 'Audio', 'Video'].forEach(track => {\n      if (options[`native${track}Tracks`] === false) {\n        this[`featuresNative${track}Tracks`] = false;\n      }\n    });\n    if (options.nativeCaptions === false || options.nativeTextTracks === false) {\n      this.featuresNativeTextTracks = false;\n    } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {\n      this.featuresNativeTextTracks = true;\n    }\n    if (!this.featuresNativeTextTracks) {\n      this.emulateTextTracks();\n    }\n    this.preloadTextTracks = options.preloadTextTracks !== false;\n    this.autoRemoteTextTracks_ = new ALL.text.ListClass();\n    this.initTrackListeners();\n\n    // Turn on component tap events only if not using native controls\n    if (!options.nativeControlsForTouch) {\n      this.emitTapEvents();\n    }\n    if (this.constructor) {\n      this.name_ = this.constructor.name || 'Unknown Tech';\n    }\n  }\n\n  /**\n   * A special function to trigger source set in a way that will allow player\n   * to re-trigger if the player or tech are not ready yet.\n   *\n   * @fires Tech#sourceset\n   * @param {string} src The source string at the time of the source changing.\n   */\n  triggerSourceset(src) {\n    if (!this.isReady_) {\n      // on initial ready we have to trigger source set\n      // 1ms after ready so that player can watch for it.\n      this.one('ready', () => this.setTimeout(() => this.triggerSourceset(src), 1));\n    }\n\n    /**\n     * Fired when the source is set on the tech causing the media element\n     * to reload.\n     *\n     * @see {@link Player#event:sourceset}\n     * @event Tech#sourceset\n     * @type {Event}\n     */\n    this.trigger({\n      src,\n      type: 'sourceset'\n    });\n  }\n\n  /* Fallbacks for unsupported event types\n  ================================================================================ */\n\n  /**\n   * Polyfill the `progress` event for browsers that don't support it natively.\n   *\n   * @see {@link Tech#trackProgress}\n   */\n  manualProgressOn() {\n    this.on('durationchange', this.onDurationChange_);\n    this.manualProgress = true;\n\n    // Trigger progress watching when a source begins loading\n    this.one('ready', this.trackProgress_);\n  }\n\n  /**\n   * Turn off the polyfill for `progress` events that was created in\n   * {@link Tech#manualProgressOn}\n   */\n  manualProgressOff() {\n    this.manualProgress = false;\n    this.stopTrackingProgress();\n    this.off('durationchange', this.onDurationChange_);\n  }\n\n  /**\n   * This is used to trigger a `progress` event when the buffered percent changes. It\n   * sets an interval function that will be called every 500 milliseconds to check if the\n   * buffer end percent has changed.\n   *\n   * > This function is called by {@link Tech#manualProgressOn}\n   *\n   * @param {Event} event\n   *        The `ready` event that caused this to run.\n   *\n   * @listens Tech#ready\n   * @fires Tech#progress\n   */\n  trackProgress(event) {\n    this.stopTrackingProgress();\n    this.progressInterval = this.setInterval(bind_(this, function () {\n      // Don't trigger unless buffered amount is greater than last time\n\n      const numBufferedPercent = this.bufferedPercent();\n      if (this.bufferedPercent_ !== numBufferedPercent) {\n        /**\n         * See {@link Player#progress}\n         *\n         * @event Tech#progress\n         * @type {Event}\n         */\n        this.trigger('progress');\n      }\n      this.bufferedPercent_ = numBufferedPercent;\n      if (numBufferedPercent === 1) {\n        this.stopTrackingProgress();\n      }\n    }), 500);\n  }\n\n  /**\n   * Update our internal duration on a `durationchange` event by calling\n   * {@link Tech#duration}.\n   *\n   * @param {Event} event\n   *        The `durationchange` event that caused this to run.\n   *\n   * @listens Tech#durationchange\n   */\n  onDurationChange(event) {\n    this.duration_ = this.duration();\n  }\n\n  /**\n   * Get and create a `TimeRange` object for buffering.\n   *\n   * @return { import('../utils/time').TimeRange }\n   *         The time range object that was created.\n   */\n  buffered() {\n    return createTimeRanges$1(0, 0);\n  }\n\n  /**\n   * Get the percentage of the current video that is currently buffered.\n   *\n   * @return {number}\n   *         A number from 0 to 1 that represents the decimal percentage of the\n   *         video that is buffered.\n   *\n   */\n  bufferedPercent() {\n    return bufferedPercent(this.buffered(), this.duration_);\n  }\n\n  /**\n   * Turn off the polyfill for `progress` events that was created in\n   * {@link Tech#manualProgressOn}\n   * Stop manually tracking progress events by clearing the interval that was set in\n   * {@link Tech#trackProgress}.\n   */\n  stopTrackingProgress() {\n    this.clearInterval(this.progressInterval);\n  }\n\n  /**\n   * Polyfill the `timeupdate` event for browsers that don't support it.\n   *\n   * @see {@link Tech#trackCurrentTime}\n   */\n  manualTimeUpdatesOn() {\n    this.manualTimeUpdates = true;\n    this.on('play', this.trackCurrentTime_);\n    this.on('pause', this.stopTrackingCurrentTime_);\n  }\n\n  /**\n   * Turn off the polyfill for `timeupdate` events that was created in\n   * {@link Tech#manualTimeUpdatesOn}\n   */\n  manualTimeUpdatesOff() {\n    this.manualTimeUpdates = false;\n    this.stopTrackingCurrentTime();\n    this.off('play', this.trackCurrentTime_);\n    this.off('pause', this.stopTrackingCurrentTime_);\n  }\n\n  /**\n   * Sets up an interval function to track current time and trigger `timeupdate` every\n   * 250 milliseconds.\n   *\n   * @listens Tech#play\n   * @triggers Tech#timeupdate\n   */\n  trackCurrentTime() {\n    if (this.currentTimeInterval) {\n      this.stopTrackingCurrentTime();\n    }\n    this.currentTimeInterval = this.setInterval(function () {\n      /**\n       * Triggered at an interval of 250ms to indicated that time is passing in the video.\n       *\n       * @event Tech#timeupdate\n       * @type {Event}\n       */\n      this.trigger({\n        type: 'timeupdate',\n        target: this,\n        manuallyTriggered: true\n      });\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n    }, 250);\n  }\n\n  /**\n   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the\n   * `timeupdate` event is no longer triggered.\n   *\n   * @listens {Tech#pause}\n   */\n  stopTrackingCurrentTime() {\n    this.clearInterval(this.currentTimeInterval);\n\n    // #1002 - if the video ends right before the next timeupdate would happen,\n    // the progress bar won't make it all the way to the end\n    this.trigger({\n      type: 'timeupdate',\n      target: this,\n      manuallyTriggered: true\n    });\n  }\n\n  /**\n   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},\n   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.\n   *\n   * @fires Component#dispose\n   */\n  dispose() {\n    // clear out all tracks because we can't reuse them between techs\n    this.clearTracks(NORMAL.names);\n\n    // Turn off any manual progress or timeupdate tracking\n    if (this.manualProgress) {\n      this.manualProgressOff();\n    }\n    if (this.manualTimeUpdates) {\n      this.manualTimeUpdatesOff();\n    }\n    super.dispose();\n  }\n\n  /**\n   * Clear out a single `TrackList` or an array of `TrackLists` given their names.\n   *\n   * > Note: Techs without source handlers should call this between sources for `video`\n   *         & `audio` tracks. You don't want to use them between tracks!\n   *\n   * @param {string[]|string} types\n   *        TrackList names to clear, valid names are `video`, `audio`, and\n   *        `text`.\n   */\n  clearTracks(types) {\n    types = [].concat(types);\n    // clear out all tracks because we can't reuse them between techs\n    types.forEach(type => {\n      const list = this[`${type}Tracks`]() || [];\n      let i = list.length;\n      while (i--) {\n        const track = list[i];\n        if (type === 'text') {\n          this.removeRemoteTextTrack(track);\n        }\n        list.removeTrack(track);\n      }\n    });\n  }\n\n  /**\n   * Remove any TextTracks added via addRemoteTextTrack that are\n   * flagged for automatic garbage collection\n   */\n  cleanupAutoTextTracks() {\n    const list = this.autoRemoteTextTracks_ || [];\n    let i = list.length;\n    while (i--) {\n      const track = list[i];\n      this.removeRemoteTextTrack(track);\n    }\n  }\n\n  /**\n   * Reset the tech, which will removes all sources and reset the internal readyState.\n   *\n   * @abstract\n   */\n  reset() {}\n\n  /**\n   * Get the value of `crossOrigin` from the tech.\n   *\n   * @abstract\n   *\n   * @see {Html5#crossOrigin}\n   */\n  crossOrigin() {}\n\n  /**\n   * Set the value of `crossOrigin` on the tech.\n   *\n   * @abstract\n   *\n   * @param {string} crossOrigin the crossOrigin value\n   * @see {Html5#setCrossOrigin}\n   */\n  setCrossOrigin() {}\n\n  /**\n   * Get or set an error on the Tech.\n   *\n   * @param {MediaError} [err]\n   *        Error to set on the Tech\n   *\n   * @return {MediaError|null}\n   *         The current error object on the tech, or null if there isn't one.\n   */\n  error(err) {\n    if (err !== undefined) {\n      this.error_ = new MediaError(err);\n      this.trigger('error');\n    }\n    return this.error_;\n  }\n\n  /**\n   * Returns the `TimeRange`s that have been played through for the current source.\n   *\n   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.\n   *         It only checks whether the source has played at all or not.\n   *\n   * @return {TimeRange}\n   *         - A single time range if this video has played\n   *         - An empty set of ranges if not.\n   */\n  played() {\n    if (this.hasStarted_) {\n      return createTimeRanges$1(0, 0);\n    }\n    return createTimeRanges$1();\n  }\n\n  /**\n   * Start playback\n   *\n   * @abstract\n   *\n   * @see {Html5#play}\n   */\n  play() {}\n\n  /**\n   * Set whether we are scrubbing or not\n   *\n   * @abstract\n   * @param {boolean} _isScrubbing\n   *                  - true for we are currently scrubbing\n   *                  - false for we are no longer scrubbing\n   *\n   * @see {Html5#setScrubbing}\n   */\n  setScrubbing(_isScrubbing) {}\n\n  /**\n   * Get whether we are scrubbing or not\n   *\n   * @abstract\n   *\n   * @see {Html5#scrubbing}\n   */\n  scrubbing() {}\n\n  /**\n   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was\n   * previously called.\n   *\n   * @param {number} _seconds\n   *        Set the current time of the media to this.\n   * @fires Tech#timeupdate\n   */\n  setCurrentTime(_seconds) {\n    // improve the accuracy of manual timeupdates\n    if (this.manualTimeUpdates) {\n      /**\n       * A manual `timeupdate` event.\n       *\n       * @event Tech#timeupdate\n       * @type {Event}\n       */\n      this.trigger({\n        type: 'timeupdate',\n        target: this,\n        manuallyTriggered: true\n      });\n    }\n  }\n\n  /**\n   * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and\n   * {@link TextTrackList} events.\n   *\n   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.\n   *\n   * @fires Tech#audiotrackchange\n   * @fires Tech#videotrackchange\n   * @fires Tech#texttrackchange\n   */\n  initTrackListeners() {\n    /**\n      * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}\n      *\n      * @event Tech#audiotrackchange\n      * @type {Event}\n      */\n\n    /**\n      * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}\n      *\n      * @event Tech#videotrackchange\n      * @type {Event}\n      */\n\n    /**\n      * Triggered when tracks are added or removed on the Tech {@link TextTrackList}\n      *\n      * @event Tech#texttrackchange\n      * @type {Event}\n      */\n    NORMAL.names.forEach(name => {\n      const props = NORMAL[name];\n      const trackListChanges = () => {\n        this.trigger(`${name}trackchange`);\n      };\n      const tracks = this[props.getterName]();\n      tracks.addEventListener('removetrack', trackListChanges);\n      tracks.addEventListener('addtrack', trackListChanges);\n      this.on('dispose', () => {\n        tracks.removeEventListener('removetrack', trackListChanges);\n        tracks.removeEventListener('addtrack', trackListChanges);\n      });\n    });\n  }\n\n  /**\n   * Emulate TextTracks using vtt.js if necessary\n   *\n   * @fires Tech#vttjsloaded\n   * @fires Tech#vttjserror\n   */\n  addWebVttScript_() {\n    if (window$1.WebVTT) {\n      return;\n    }\n\n    // Initially, Tech.el_ is a child of a dummy-div wait until the Component system\n    // signals that the Tech is ready at which point Tech.el_ is part of the DOM\n    // before inserting the WebVTT script\n    if (document.body.contains(this.el())) {\n      // load via require if available and vtt.js script location was not passed in\n      // as an option. novtt builds will turn the above require call into an empty object\n      // which will cause this if check to always fail.\n      if (!this.options_['vtt.js'] && isPlain(vtt) && Object.keys(vtt).length > 0) {\n        this.trigger('vttjsloaded');\n        return;\n      }\n\n      // load vtt.js via the script location option or the cdn of no location was\n      // passed in\n      const script = document.createElement('script');\n      script.src = this.options_['vtt.js'] || 'https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js';\n      script.onload = () => {\n        /**\n         * Fired when vtt.js is loaded.\n         *\n         * @event Tech#vttjsloaded\n         * @type {Event}\n         */\n        this.trigger('vttjsloaded');\n      };\n      script.onerror = () => {\n        /**\n         * Fired when vtt.js was not loaded due to an error\n         *\n         * @event Tech#vttjsloaded\n         * @type {Event}\n         */\n        this.trigger('vttjserror');\n      };\n      this.on('dispose', () => {\n        script.onload = null;\n        script.onerror = null;\n      });\n      // but have not loaded yet and we set it to true before the inject so that\n      // we don't overwrite the injected window.WebVTT if it loads right away\n      window$1.WebVTT = true;\n      this.el().parentNode.appendChild(script);\n    } else {\n      this.ready(this.addWebVttScript_);\n    }\n  }\n\n  /**\n   * Emulate texttracks\n   *\n   */\n  emulateTextTracks() {\n    const tracks = this.textTracks();\n    const remoteTracks = this.remoteTextTracks();\n    const handleAddTrack = e => tracks.addTrack(e.track);\n    const handleRemoveTrack = e => tracks.removeTrack(e.track);\n    remoteTracks.on('addtrack', handleAddTrack);\n    remoteTracks.on('removetrack', handleRemoveTrack);\n    this.addWebVttScript_();\n    const updateDisplay = () => this.trigger('texttrackchange');\n    const textTracksChanges = () => {\n      updateDisplay();\n      for (let i = 0; i < tracks.length; i++) {\n        const track = tracks[i];\n        track.removeEventListener('cuechange', updateDisplay);\n        if (track.mode === 'showing') {\n          track.addEventListener('cuechange', updateDisplay);\n        }\n      }\n    };\n    textTracksChanges();\n    tracks.addEventListener('change', textTracksChanges);\n    tracks.addEventListener('addtrack', textTracksChanges);\n    tracks.addEventListener('removetrack', textTracksChanges);\n    this.on('dispose', function () {\n      remoteTracks.off('addtrack', handleAddTrack);\n      remoteTracks.off('removetrack', handleRemoveTrack);\n      tracks.removeEventListener('change', textTracksChanges);\n      tracks.removeEventListener('addtrack', textTracksChanges);\n      tracks.removeEventListener('removetrack', textTracksChanges);\n      for (let i = 0; i < tracks.length; i++) {\n        const track = tracks[i];\n        track.removeEventListener('cuechange', updateDisplay);\n      }\n    });\n  }\n\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n  addTextTrack(kind, label, language) {\n    if (!kind) {\n      throw new Error('TextTrack kind is required but was not provided');\n    }\n    return createTrackHelper(this, kind, label, language);\n  }\n\n  /**\n   * Create an emulated TextTrack for use by addRemoteTextTrack\n   *\n   * This is intended to be overridden by classes that inherit from\n   * Tech in order to create native or custom TextTracks.\n   *\n   * @param {Object} options\n   *        The object should contain the options to initialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label].\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n  createRemoteTextTrack(options) {\n    const track = merge$1(options, {\n      tech: this\n    });\n    return new REMOTE.remoteTextEl.TrackClass(track);\n  }\n\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.\n   *\n   * @param {Object} options\n   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.\n   *\n   * @param {boolean} [manualCleanup=false]\n   *        - When false: the TextTrack will be automatically removed from the video\n   *          element whenever the source changes\n   *        - When True: The TextTrack will have to be cleaned up manually\n   *\n   * @return {HTMLTrackElement}\n   *         An Html Track Element.\n   *\n   */\n  addRemoteTextTrack(options = {}, manualCleanup) {\n    const htmlTrackElement = this.createRemoteTextTrack(options);\n    if (typeof manualCleanup !== 'boolean') {\n      manualCleanup = false;\n    }\n\n    // store HTMLTrackElement and TextTrack to remote list\n    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);\n    this.remoteTextTracks().addTrack(htmlTrackElement.track);\n    if (manualCleanup === false) {\n      // create the TextTrackList if it doesn't exist\n      this.ready(() => this.autoRemoteTextTracks_.addTrack(htmlTrackElement.track));\n    }\n    return htmlTrackElement;\n  }\n\n  /**\n   * Remove a remote text track from the remote `TextTrackList`.\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` to remove from the `TextTrackList`\n   */\n  removeRemoteTextTrack(track) {\n    const trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);\n\n    // remove HTMLTrackElement and TextTrack from remote list\n    this.remoteTextTrackEls().removeTrackElement_(trackElement);\n    this.remoteTextTracks().removeTrack(track);\n    this.autoRemoteTextTracks_.removeTrack(track);\n  }\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   *\n   * @abstract\n   */\n  getVideoPlaybackQuality() {\n    return {};\n  }\n\n  /**\n   * Attempt to create a floating video window always on top of other windows\n   * so that users may continue consuming media while they interact with other\n   * content sites, or applications on their device.\n   *\n   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}\n   *\n   * @return {Promise|undefined}\n   *         A promise with a Picture-in-Picture window if the browser supports\n   *         Promises (or one was passed in as an option). It returns undefined\n   *         otherwise.\n   *\n   * @abstract\n   */\n  requestPictureInPicture() {\n    return Promise.reject();\n  }\n\n  /**\n   * A method to check for the value of the 'disablePictureInPicture' <video> property.\n   * Defaults to true, as it should be considered disabled if the tech does not support pip\n   *\n   * @abstract\n   */\n  disablePictureInPicture() {\n    return true;\n  }\n\n  /**\n   * A method to set or unset the 'disablePictureInPicture' <video> property.\n   *\n   * @abstract\n   */\n  setDisablePictureInPicture() {}\n\n  /**\n   * A fallback implementation of requestVideoFrameCallback using requestAnimationFrame\n   *\n   * @param {function} cb\n   * @return {number} request id\n   */\n  requestVideoFrameCallback(cb) {\n    const id = newGUID();\n    if (!this.isReady_ || this.paused()) {\n      this.queuedHanders_.add(id);\n      this.one('playing', () => {\n        if (this.queuedHanders_.has(id)) {\n          this.queuedHanders_.delete(id);\n          cb();\n        }\n      });\n    } else {\n      this.requestNamedAnimationFrame(id, cb);\n    }\n    return id;\n  }\n\n  /**\n   * A fallback implementation of cancelVideoFrameCallback\n   *\n   * @param {number} id id of callback to be cancelled\n   */\n  cancelVideoFrameCallback(id) {\n    if (this.queuedHanders_.has(id)) {\n      this.queuedHanders_.delete(id);\n    } else {\n      this.cancelNamedAnimationFrame(id);\n    }\n  }\n\n  /**\n   * A method to set a poster from a `Tech`.\n   *\n   * @abstract\n   */\n  setPoster() {}\n\n  /**\n   * A method to check for the presence of the 'playsinline' <video> attribute.\n   *\n   * @abstract\n   */\n  playsinline() {}\n\n  /**\n   * A method to set or unset the 'playsinline' <video> attribute.\n   *\n   * @abstract\n   */\n  setPlaysinline() {}\n\n  /**\n   * Attempt to force override of native audio tracks.\n   *\n   * @param {boolean} override - If set to true native audio will be overridden,\n   * otherwise native audio will potentially be used.\n   *\n   * @abstract\n   */\n  overrideNativeAudioTracks(override) {}\n\n  /**\n   * Attempt to force override of native video tracks.\n   *\n   * @param {boolean} override - If set to true native video will be overridden,\n   * otherwise native video will potentially be used.\n   *\n   * @abstract\n   */\n  overrideNativeVideoTracks(override) {}\n\n  /**\n   * Check if the tech can support the given mime-type.\n   *\n   * The base tech does not support any type, but source handlers might\n   * overwrite this.\n   *\n   * @param  {string} _type\n   *         The mimetype to check for support\n   *\n   * @return {string}\n   *         'probably', 'maybe', or empty string\n   *\n   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}\n   *\n   * @abstract\n   */\n  canPlayType(_type) {\n    return '';\n  }\n\n  /**\n   * Check if the type is supported by this tech.\n   *\n   * The base tech does not support any type, but source handlers might\n   * overwrite this.\n   *\n   * @param {string} _type\n   *        The media type to check\n   * @return {string} Returns the native video element's response\n   */\n  static canPlayType(_type) {\n    return '';\n  }\n\n  /**\n   * Check if the tech can support the given source\n   *\n   * @param {Object} srcObj\n   *        The source object\n   * @param {Object} options\n   *        The options passed to the tech\n   * @return {string} 'probably', 'maybe', or '' (empty string)\n   */\n  static canPlaySource(srcObj, options) {\n    return Tech.canPlayType(srcObj.type);\n  }\n\n  /*\n   * Return whether the argument is a Tech or not.\n   * Can be passed either a Class like `Html5` or a instance like `player.tech_`\n   *\n   * @param {Object} component\n   *        The item to check\n   *\n   * @return {boolean}\n   *         Whether it is a tech or not\n   *         - True if it is a tech\n   *         - False if it is not\n   */\n  static isTech(component) {\n    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;\n  }\n\n  /**\n   * Registers a `Tech` into a shared list for videojs.\n   *\n   * @param {string} name\n   *        Name of the `Tech` to register.\n   *\n   * @param {Object} tech\n   *        The `Tech` class to register.\n   */\n  static registerTech(name, tech) {\n    if (!Tech.techs_) {\n      Tech.techs_ = {};\n    }\n    if (!Tech.isTech(tech)) {\n      throw new Error(`Tech ${name} must be a Tech`);\n    }\n    if (!Tech.canPlayType) {\n      throw new Error('Techs must have a static canPlayType method on them');\n    }\n    if (!Tech.canPlaySource) {\n      throw new Error('Techs must have a static canPlaySource method on them');\n    }\n    name = toTitleCase$1(name);\n    Tech.techs_[name] = tech;\n    Tech.techs_[toLowerCase(name)] = tech;\n    if (name !== 'Tech') {\n      // camel case the techName for use in techOrder\n      Tech.defaultTechOrder_.push(name);\n    }\n    return tech;\n  }\n\n  /**\n   * Get a `Tech` from the shared list by name.\n   *\n   * @param {string} name\n   *        `camelCase` or `TitleCase` name of the Tech to get\n   *\n   * @return {Tech|undefined}\n   *         The `Tech` or undefined if there was no tech with the name requested.\n   */\n  static getTech(name) {\n    if (!name) {\n      return;\n    }\n    if (Tech.techs_ && Tech.techs_[name]) {\n      return Tech.techs_[name];\n    }\n    name = toTitleCase$1(name);\n    if (window$1 && window$1.videojs && window$1.videojs[name]) {\n      log$1.warn(`The ${name} tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)`);\n      return window$1.videojs[name];\n    }\n  }\n}\n\n/**\n * Get the {@link VideoTrackList}\n *\n * @returns {VideoTrackList}\n * @method Tech.prototype.videoTracks\n */\n\n/**\n * Get the {@link AudioTrackList}\n *\n * @returns {AudioTrackList}\n * @method Tech.prototype.audioTracks\n */\n\n/**\n * Get the {@link TextTrackList}\n *\n * @returns {TextTrackList}\n * @method Tech.prototype.textTracks\n */\n\n/**\n * Get the remote element {@link TextTrackList}\n *\n * @returns {TextTrackList}\n * @method Tech.prototype.remoteTextTracks\n */\n\n/**\n * Get the remote element {@link HtmlTrackElementList}\n *\n * @returns {HtmlTrackElementList}\n * @method Tech.prototype.remoteTextTrackEls\n */\n\nALL.names.forEach(function (name) {\n  const props = ALL[name];\n  Tech.prototype[props.getterName] = function () {\n    this[props.privateName] = this[props.privateName] || new props.ListClass();\n    return this[props.privateName];\n  };\n});\n\n/**\n * List of associated text tracks\n *\n * @type {TextTrackList}\n * @private\n * @property Tech#textTracks_\n */\n\n/**\n * List of associated audio tracks.\n *\n * @type {AudioTrackList}\n * @private\n * @property Tech#audioTracks_\n */\n\n/**\n * List of associated video tracks.\n *\n * @type {VideoTrackList}\n * @private\n * @property Tech#videoTracks_\n */\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresVolumeControl = true;\n\n/**\n * Boolean indicating whether the `Tech` supports muting volume.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresMuteControl = true;\n\n/**\n * Boolean indicating whether the `Tech` supports fullscreen resize control.\n * Resizing plugins using request fullscreen reloads the plugin\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresFullscreenResize = false;\n\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the video\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresPlaybackRate = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `progress` event.\n * This will be used to determine if {@link Tech#manualProgressOn} should be called.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresProgressEvents = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `sourceset` event.\n *\n * A tech should set this to `true` and then use {@link Tech#triggerSourceset}\n * to trigger a {@link Tech#event:sourceset} at the earliest time after getting\n * a new source.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresSourceset = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the `timeupdate` event.\n * This will be used to determine if {@link Tech#manualTimeUpdates} should be called.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresTimeupdateEvents = false;\n\n/**\n * Boolean indicating whether the `Tech` supports the native `TextTrack`s.\n * This will help us integrate with native `TextTrack`s if the browser supports them.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresNativeTextTracks = false;\n\n/**\n * Boolean indicating whether the `Tech` supports `requestVideoFrameCallback`.\n *\n * @type {boolean}\n * @default\n */\nTech.prototype.featuresVideoFrameCallback = false;\n\n/**\n * A functional mixin for techs that want to use the Source Handler pattern.\n * Source handlers are scripts for handling specific formats.\n * The source handler pattern is used for adaptive formats (HLS, DASH) that\n * manually load video data and feed it into a Source Buffer (Media Source Extensions)\n * Example: `Tech.withSourceHandlers.call(MyTech);`\n *\n * @param {Tech} _Tech\n *        The tech to add source handler functions to.\n *\n * @mixes Tech~SourceHandlerAdditions\n */\nTech.withSourceHandlers = function (_Tech) {\n  /**\n   * Register a source handler\n   *\n   * @param {Function} handler\n   *        The source handler class\n   *\n   * @param {number} [index]\n   *        Register it at the following index\n   */\n  _Tech.registerSourceHandler = function (handler, index) {\n    let handlers = _Tech.sourceHandlers;\n    if (!handlers) {\n      handlers = _Tech.sourceHandlers = [];\n    }\n    if (index === undefined) {\n      // add to the end of the list\n      index = handlers.length;\n    }\n    handlers.splice(index, 0, handler);\n  };\n\n  /**\n   * Check if the tech can support the given type. Also checks the\n   * Techs sourceHandlers.\n   *\n   * @param {string} type\n   *         The mimetype to check.\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n  _Tech.canPlayType = function (type) {\n    const handlers = _Tech.sourceHandlers || [];\n    let can;\n    for (let i = 0; i < handlers.length; i++) {\n      can = handlers[i].canPlayType(type);\n      if (can) {\n        return can;\n      }\n    }\n    return '';\n  };\n\n  /**\n   * Returns the first source handler that supports the source.\n   *\n   * TODO: Answer question: should 'probably' be prioritized over 'maybe'\n   *\n   * @param {Tech~SourceObject} source\n   *        The source object\n   *\n   * @param {Object} options\n   *        The options passed to the tech\n   *\n   * @return {SourceHandler|null}\n   *          The first source handler that supports the source or null if\n   *          no SourceHandler supports the source\n   */\n  _Tech.selectSourceHandler = function (source, options) {\n    const handlers = _Tech.sourceHandlers || [];\n    let can;\n    for (let i = 0; i < handlers.length; i++) {\n      can = handlers[i].canHandleSource(source, options);\n      if (can) {\n        return handlers[i];\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Check if the tech can support the given source.\n   *\n   * @param {Tech~SourceObject} srcObj\n   *        The source object\n   *\n   * @param {Object} options\n   *        The options passed to the tech\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n  _Tech.canPlaySource = function (srcObj, options) {\n    const sh = _Tech.selectSourceHandler(srcObj, options);\n    if (sh) {\n      return sh.canHandleSource(srcObj, options);\n    }\n    return '';\n  };\n\n  /**\n   * When using a source handler, prefer its implementation of\n   * any function normally provided by the tech.\n   */\n  const deferrable = ['seekable', 'seeking', 'duration'];\n\n  /**\n   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable\n   * function if it exists, with a fallback to the Techs seekable function.\n   *\n   * @method _Tech.seekable\n   */\n\n  /**\n   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration\n   * function if it exists, otherwise it will fallback to the techs duration function.\n   *\n   * @method _Tech.duration\n   */\n\n  deferrable.forEach(function (fnName) {\n    const originalFn = this[fnName];\n    if (typeof originalFn !== 'function') {\n      return;\n    }\n    this[fnName] = function () {\n      if (this.sourceHandler_ && this.sourceHandler_[fnName]) {\n        return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);\n      }\n      return originalFn.apply(this, arguments);\n    };\n  }, _Tech.prototype);\n\n  /**\n   * Create a function for setting the source using a source object\n   * and source handlers.\n   * Should never be called unless a source handler was found.\n   *\n   * @param {Tech~SourceObject} source\n   *        A source object with src and type keys\n   */\n  _Tech.prototype.setSource = function (source) {\n    let sh = _Tech.selectSourceHandler(source, this.options_);\n    if (!sh) {\n      // Fall back to a native source handler when unsupported sources are\n      // deliberately set\n      if (_Tech.nativeSourceHandler) {\n        sh = _Tech.nativeSourceHandler;\n      } else {\n        log$1.error('No source handler found for the current source.');\n      }\n    }\n\n    // Dispose any existing source handler\n    this.disposeSourceHandler();\n    this.off('dispose', this.disposeSourceHandler_);\n    if (sh !== _Tech.nativeSourceHandler) {\n      this.currentSource_ = source;\n    }\n    this.sourceHandler_ = sh.handleSource(source, this, this.options_);\n    this.one('dispose', this.disposeSourceHandler_);\n  };\n\n  /**\n   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.\n   *\n   * @listens Tech#dispose\n   */\n  _Tech.prototype.disposeSourceHandler = function () {\n    // if we have a source and get another one\n    // then we are loading something new\n    // than clear all of our current tracks\n    if (this.currentSource_) {\n      this.clearTracks(['audio', 'video']);\n      this.currentSource_ = null;\n    }\n\n    // always clean up auto-text tracks\n    this.cleanupAutoTextTracks();\n    if (this.sourceHandler_) {\n      if (this.sourceHandler_.dispose) {\n        this.sourceHandler_.dispose();\n      }\n      this.sourceHandler_ = null;\n    }\n  };\n};\n\n// The base Tech class needs to be registered as a Component. It is the only\n// Tech that can be registered as a Component.\nComponent$1.registerComponent('Tech', Tech);\nTech.registerTech('Tech', Tech);\n\n/**\n * A list of techs that should be added to techOrder on Players\n *\n * @private\n */\nTech.defaultTechOrder_ = [];\n\n/**\n * @file middleware.js\n * @module middleware\n */\nconst middlewares = {};\nconst middlewareInstances = {};\nconst TERMINATOR = {};\n\n/**\n * A middleware object is a plain JavaScript object that has methods that\n * match the {@link Tech} methods found in the lists of allowed\n * {@link module:middleware.allowedGetters|getters},\n * {@link module:middleware.allowedSetters|setters}, and\n * {@link module:middleware.allowedMediators|mediators}.\n *\n * @typedef {Object} MiddlewareObject\n */\n\n/**\n * A middleware factory function that should return a\n * {@link module:middleware~MiddlewareObject|MiddlewareObject}.\n *\n * This factory will be called for each player when needed, with the player\n * passed in as an argument.\n *\n * @callback MiddlewareFactory\n * @param { import('../player').default } player\n *        A Video.js player.\n */\n\n/**\n * Define a middleware that the player should use by way of a factory function\n * that returns a middleware object.\n *\n * @param  {string} type\n *         The MIME type to match or `\"*\"` for all MIME types.\n *\n * @param  {MiddlewareFactory} middleware\n *         A middleware factory function that will be executed for\n *         matching types.\n */\nfunction use(type, middleware) {\n  middlewares[type] = middlewares[type] || [];\n  middlewares[type].push(middleware);\n}\n\n/**\n * Asynchronously sets a source using middleware by recursing through any\n * matching middlewares and calling `setSource` on each, passing along the\n * previous returned value each time.\n *\n * @param  { import('../player').default } player\n *         A {@link Player} instance.\n *\n * @param  {Tech~SourceObject} src\n *         A source object.\n *\n * @param  {Function}\n *         The next middleware to run.\n */\nfunction setSource(player, src, next) {\n  player.setTimeout(() => setSourceHelper(src, middlewares[src.type], next, player), 1);\n}\n\n/**\n * When the tech is set, passes the tech to each middleware's `setTech` method.\n *\n * @param {Object[]} middleware\n *        An array of middleware instances.\n *\n * @param { import('../tech/tech').default } tech\n *        A Video.js tech.\n */\nfunction setTech(middleware, tech) {\n  middleware.forEach(mw => mw.setTech && mw.setTech(tech));\n}\n\n/**\n * Calls a getter on the tech first, through each middleware\n * from right to left to the player.\n *\n * @param  {Object[]} middleware\n *         An array of middleware instances.\n *\n * @param  { import('../tech/tech').default } tech\n *         The current tech.\n *\n * @param  {string} method\n *         A method name.\n *\n * @return {*}\n *         The final value from the tech after middleware has intercepted it.\n */\nfunction get(middleware, tech, method) {\n  return middleware.reduceRight(middlewareIterator(method), tech[method]());\n}\n\n/**\n * Takes the argument given to the player and calls the setter method on each\n * middleware from left to right to the tech.\n *\n * @param  {Object[]} middleware\n *         An array of middleware instances.\n *\n * @param  { import('../tech/tech').default } tech\n *         The current tech.\n *\n * @param  {string} method\n *         A method name.\n *\n * @param  {*} arg\n *         The value to set on the tech.\n *\n * @return {*}\n *         The return value of the `method` of the `tech`.\n */\nfunction set(middleware, tech, method, arg) {\n  return tech[method](middleware.reduce(middlewareIterator(method), arg));\n}\n\n/**\n * Takes the argument given to the player and calls the `call` version of the\n * method on each middleware from left to right.\n *\n * Then, call the passed in method on the tech and return the result unchanged\n * back to the player, through middleware, this time from right to left.\n *\n * @param  {Object[]} middleware\n *         An array of middleware instances.\n *\n * @param  { import('../tech/tech').default } tech\n *         The current tech.\n *\n * @param  {string} method\n *         A method name.\n *\n * @param  {*} arg\n *         The value to set on the tech.\n *\n * @return {*}\n *         The return value of the `method` of the `tech`, regardless of the\n *         return values of middlewares.\n */\nfunction mediate(middleware, tech, method, arg = null) {\n  const callMethod = 'call' + toTitleCase$1(method);\n  const middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg);\n  const terminated = middlewareValue === TERMINATOR;\n  // deprecated. The `null` return value should instead return TERMINATOR to\n  // prevent confusion if a techs method actually returns null.\n  const returnValue = terminated ? null : tech[method](middlewareValue);\n  executeRight(middleware, method, returnValue, terminated);\n  return returnValue;\n}\n\n/**\n * Enumeration of allowed getters where the keys are method names.\n *\n * @type {Object}\n */\nconst allowedGetters = {\n  buffered: 1,\n  currentTime: 1,\n  duration: 1,\n  muted: 1,\n  played: 1,\n  paused: 1,\n  seekable: 1,\n  volume: 1,\n  ended: 1\n};\n\n/**\n * Enumeration of allowed setters where the keys are method names.\n *\n * @type {Object}\n */\nconst allowedSetters = {\n  setCurrentTime: 1,\n  setMuted: 1,\n  setVolume: 1\n};\n\n/**\n * Enumeration of allowed mediators where the keys are method names.\n *\n * @type {Object}\n */\nconst allowedMediators = {\n  play: 1,\n  pause: 1\n};\nfunction middlewareIterator(method) {\n  return (value, mw) => {\n    // if the previous middleware terminated, pass along the termination\n    if (value === TERMINATOR) {\n      return TERMINATOR;\n    }\n    if (mw[method]) {\n      return mw[method](value);\n    }\n    return value;\n  };\n}\nfunction executeRight(mws, method, value, terminated) {\n  for (let i = mws.length - 1; i >= 0; i--) {\n    const mw = mws[i];\n    if (mw[method]) {\n      mw[method](terminated, value);\n    }\n  }\n}\n\n/**\n * Clear the middleware cache for a player.\n *\n * @param  { import('../player').default } player\n *         A {@link Player} instance.\n */\nfunction clearCacheForPlayer(player) {\n  middlewareInstances[player.id()] = null;\n}\n\n/**\n * {\n *  [playerId]: [[mwFactory, mwInstance], ...]\n * }\n *\n * @private\n */\nfunction getOrCreateFactory(player, mwFactory) {\n  const mws = middlewareInstances[player.id()];\n  let mw = null;\n  if (mws === undefined || mws === null) {\n    mw = mwFactory(player);\n    middlewareInstances[player.id()] = [[mwFactory, mw]];\n    return mw;\n  }\n  for (let i = 0; i < mws.length; i++) {\n    const [mwf, mwi] = mws[i];\n    if (mwf !== mwFactory) {\n      continue;\n    }\n    mw = mwi;\n  }\n  if (mw === null) {\n    mw = mwFactory(player);\n    mws.push([mwFactory, mw]);\n  }\n  return mw;\n}\nfunction setSourceHelper(src = {}, middleware = [], next, player, acc = [], lastRun = false) {\n  const [mwFactory, ...mwrest] = middleware;\n\n  // if mwFactory is a string, then we're at a fork in the road\n  if (typeof mwFactory === 'string') {\n    setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun);\n\n    // if we have an mwFactory, call it with the player to get the mw,\n    // then call the mw's setSource method\n  } else if (mwFactory) {\n    const mw = getOrCreateFactory(player, mwFactory);\n\n    // if setSource isn't present, implicitly select this middleware\n    if (!mw.setSource) {\n      acc.push(mw);\n      return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n    }\n    mw.setSource(Object.assign({}, src), function (err, _src) {\n      // something happened, try the next middleware on the current level\n      // make sure to use the old src\n      if (err) {\n        return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n      }\n\n      // we've succeeded, now we need to go deeper\n      acc.push(mw);\n\n      // if it's the same type, continue down the current chain\n      // otherwise, we want to go down the new chain\n      setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);\n    });\n  } else if (mwrest.length) {\n    setSourceHelper(src, mwrest, next, player, acc, lastRun);\n  } else if (lastRun) {\n    next(src, acc);\n  } else {\n    setSourceHelper(src, middlewares['*'], next, player, acc, true);\n  }\n}\n\n/**\n * Mimetypes\n *\n * @see https://www.iana.org/assignments/media-types/media-types.xhtml\n * @typedef Mimetypes~Kind\n * @enum\n */\nconst MimetypesKind = {\n  opus: 'video/ogg',\n  ogv: 'video/ogg',\n  mp4: 'video/mp4',\n  mov: 'video/mp4',\n  m4v: 'video/mp4',\n  mkv: 'video/x-matroska',\n  m4a: 'audio/mp4',\n  mp3: 'audio/mpeg',\n  aac: 'audio/aac',\n  caf: 'audio/x-caf',\n  flac: 'audio/flac',\n  oga: 'audio/ogg',\n  wav: 'audio/wav',\n  m3u8: 'application/x-mpegURL',\n  mpd: 'application/dash+xml',\n  jpg: 'image/jpeg',\n  jpeg: 'image/jpeg',\n  gif: 'image/gif',\n  png: 'image/png',\n  svg: 'image/svg+xml',\n  webp: 'image/webp'\n};\n\n/**\n * Get the mimetype of a given src url if possible\n *\n * @param {string} src\n *        The url to the src\n *\n * @return {string}\n *         return the mimetype if it was known or empty string otherwise\n */\nconst getMimetype = function (src = '') {\n  const ext = getFileExtension(src);\n  const mimetype = MimetypesKind[ext.toLowerCase()];\n  return mimetype || '';\n};\n\n/**\n * Find the mime type of a given source string if possible. Uses the player\n * source cache.\n *\n * @param { import('../player').default } player\n *        The player object\n *\n * @param {string} src\n *        The source string\n *\n * @return {string}\n *         The type that was found\n */\nconst findMimetype = (player, src) => {\n  if (!src) {\n    return '';\n  }\n\n  // 1. check for the type in the `source` cache\n  if (player.cache_.source.src === src && player.cache_.source.type) {\n    return player.cache_.source.type;\n  }\n\n  // 2. see if we have this source in our `currentSources` cache\n  const matchingSources = player.cache_.sources.filter(s => s.src === src);\n  if (matchingSources.length) {\n    return matchingSources[0].type;\n  }\n\n  // 3. look for the src url in source elements and use the type there\n  const sources = player.$$('source');\n  for (let i = 0; i < sources.length; i++) {\n    const s = sources[i];\n    if (s.type && s.src && s.src === src) {\n      return s.type;\n    }\n  }\n\n  // 4. finally fallback to our list of mime types based on src url extension\n  return getMimetype(src);\n};\n\n/**\n * @module filter-source\n */\n\n/**\n * Filter out single bad source objects or multiple source objects in an\n * array. Also flattens nested source object arrays into a 1 dimensional\n * array of source objects.\n *\n * @param {Tech~SourceObject|Tech~SourceObject[]} src\n *        The src object to filter\n *\n * @return {Tech~SourceObject[]}\n *         An array of sourceobjects containing only valid sources\n *\n * @private\n */\nconst filterSource = function (src) {\n  // traverse array\n  if (Array.isArray(src)) {\n    let newsrc = [];\n    src.forEach(function (srcobj) {\n      srcobj = filterSource(srcobj);\n      if (Array.isArray(srcobj)) {\n        newsrc = newsrc.concat(srcobj);\n      } else if (isObject(srcobj)) {\n        newsrc.push(srcobj);\n      }\n    });\n    src = newsrc;\n  } else if (typeof src === 'string' && src.trim()) {\n    // convert string into object\n    src = [fixSource({\n      src\n    })];\n  } else if (isObject(src) && typeof src.src === 'string' && src.src && src.src.trim()) {\n    // src is already valid\n    src = [fixSource(src)];\n  } else {\n    // invalid source, turn it into an empty array\n    src = [];\n  }\n  return src;\n};\n\n/**\n * Checks src mimetype, adding it when possible\n *\n * @param {Tech~SourceObject} src\n *        The src object to check\n * @return {Tech~SourceObject}\n *        src Object with known type\n */\nfunction fixSource(src) {\n  if (!src.type) {\n    const mimetype = getMimetype(src.src);\n    if (mimetype) {\n      src.type = mimetype;\n    }\n  }\n  return src;\n}\n\n/**\n * @file loader.js\n */\n\n/**\n * The `MediaLoader` is the `Component` that decides which playback technology to load\n * when a player is initialized.\n *\n * @extends Component\n */\nclass MediaLoader extends Component$1 {\n  /**\n   * Create an instance of this class.\n   *\n   * @param { import('../player').default } player\n   *        The `Player` that this class should attach to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Function} [ready]\n   *        The function that is run when this component is ready.\n   */\n  constructor(player, options, ready) {\n    // MediaLoader has no element\n    const options_ = merge$1({\n      createEl: false\n    }, options);\n    super(player, options_, ready);\n\n    // If there are no sources when the player is initialized,\n    // load the first supported playback technology.\n\n    if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {\n      for (let i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {\n        const techName = toTitleCase$1(j[i]);\n        let tech = Tech.getTech(techName);\n\n        // Support old behavior of techs being registered as components.\n        // Remove once that deprecated behavior is removed.\n        if (!techName) {\n          tech = Component$1.getComponent(techName);\n        }\n\n        // Check if the browser supports this technology\n        if (tech && tech.isSupported()) {\n          player.loadTech_(techName);\n          break;\n        }\n      }\n    } else {\n      // Loop through playback technologies (e.g. HTML5) and check for support.\n      // Then load the best source.\n      // A few assumptions here:\n      //   All playback technologies respect preload false.\n      player.src(options.playerOptions.sources);\n    }\n  }\n}\nComponent$1.registerComponent('MediaLoader', MediaLoader);\n\n/**\n * @file clickable-component.js\n */\n\n/**\n * Component which is clickable or keyboard actionable, but is not a\n * native HTML button.\n *\n * @extends Component\n */\nclass ClickableComponent extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param  { import('./player').default } player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of component options.\n   *\n   * @param  {function} [options.clickHandler]\n   *         The function to call when the button is clicked / activated\n   *\n   * @param  {string} [options.controlText]\n   *         The text to set on the button\n   *\n   * @param  {string} [options.className]\n   *         A class or space separated list of classes to add the component\n   *\n   */\n  constructor(player, options) {\n    super(player, options);\n    if (this.options_.controlText) {\n      this.controlText(this.options_.controlText);\n    }\n    this.handleMouseOver_ = e => this.handleMouseOver(e);\n    this.handleMouseOut_ = e => this.handleMouseOut(e);\n    this.handleClick_ = e => this.handleClick(e);\n    this.handleKeyDown_ = e => this.handleKeyDown(e);\n    this.emitTapEvents();\n    this.enable();\n  }\n\n  /**\n   * Create the `ClickableComponent`s DOM element.\n   *\n   * @param {string} [tag=div]\n   *        The element's node type.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element.\n   *\n   * @param {Object} [attributes={}]\n   *        An object of attributes that should be set on the element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl(tag = 'div', props = {}, attributes = {}) {\n    props = Object.assign({\n      className: this.buildCSSClass(),\n      tabIndex: 0\n    }, props);\n    if (tag === 'button') {\n      log$1.error(`Creating a ClickableComponent with an HTML element of ${tag} is not supported; use a Button instead.`);\n    }\n\n    // Add ARIA attributes for clickable element which is not a native HTML button\n    attributes = Object.assign({\n      role: 'button'\n    }, attributes);\n    this.tabIndex_ = props.tabIndex;\n    const el = createEl(tag, props, attributes);\n    el.appendChild(createEl('span', {\n      className: 'vjs-icon-placeholder'\n    }, {\n      'aria-hidden': true\n    }));\n    this.createControlTextEl(el);\n    return el;\n  }\n  dispose() {\n    // remove controlTextEl_ on dispose\n    this.controlTextEl_ = null;\n    super.dispose();\n  }\n\n  /**\n   * Create a control text element on this `ClickableComponent`\n   *\n   * @param {Element} [el]\n   *        Parent element for the control text.\n   *\n   * @return {Element}\n   *         The control text element that gets created.\n   */\n  createControlTextEl(el) {\n    this.controlTextEl_ = createEl('span', {\n      className: 'vjs-control-text'\n    }, {\n      // let the screen reader user know that the text of the element may change\n      'aria-live': 'polite'\n    });\n    if (el) {\n      el.appendChild(this.controlTextEl_);\n    }\n    this.controlText(this.controlText_, el);\n    return this.controlTextEl_;\n  }\n\n  /**\n   * Get or set the localize text to use for the controls on the `ClickableComponent`.\n   *\n   * @param {string} [text]\n   *        Control text for element.\n   *\n   * @param {Element} [el=this.el()]\n   *        Element to set the title on.\n   *\n   * @return {string}\n   *         - The control text when getting\n   */\n  controlText(text, el = this.el()) {\n    if (text === undefined) {\n      return this.controlText_ || 'Need Text';\n    }\n    const localizedText = this.localize(text);\n\n    /** @protected */\n    this.controlText_ = text;\n    textContent(this.controlTextEl_, localizedText);\n    if (!this.nonIconControl && !this.player_.options_.noUITitleAttributes) {\n      // Set title attribute if only an icon is shown\n      el.setAttribute('title', localizedText);\n    }\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-control vjs-button ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Enable this `ClickableComponent`\n   */\n  enable() {\n    if (!this.enabled_) {\n      this.enabled_ = true;\n      this.removeClass('vjs-disabled');\n      this.el_.setAttribute('aria-disabled', 'false');\n      if (typeof this.tabIndex_ !== 'undefined') {\n        this.el_.setAttribute('tabIndex', this.tabIndex_);\n      }\n      this.on(['tap', 'click'], this.handleClick_);\n      this.on('keydown', this.handleKeyDown_);\n    }\n  }\n\n  /**\n   * Disable this `ClickableComponent`\n   */\n  disable() {\n    this.enabled_ = false;\n    this.addClass('vjs-disabled');\n    this.el_.setAttribute('aria-disabled', 'true');\n    if (typeof this.tabIndex_ !== 'undefined') {\n      this.el_.removeAttribute('tabIndex');\n    }\n    this.off('mouseover', this.handleMouseOver_);\n    this.off('mouseout', this.handleMouseOut_);\n    this.off(['tap', 'click'], this.handleClick_);\n    this.off('keydown', this.handleKeyDown_);\n  }\n\n  /**\n   * Handles language change in ClickableComponent for the player in components\n   *\n   *\n   */\n  handleLanguagechange() {\n    this.controlText(this.controlText_);\n  }\n\n  /**\n   * Event handler that is called when a `ClickableComponent` receives a\n   * `click` or `tap` event.\n   *\n   * @param {Event} event\n   *        The `tap` or `click` event that caused this function to be called.\n   *\n   * @listens tap\n   * @listens click\n   * @abstract\n   */\n  handleClick(event) {\n    if (this.options_.clickHandler) {\n      this.options_.clickHandler.call(this, arguments);\n    }\n  }\n\n  /**\n   * Event handler that is called when a `ClickableComponent` receives a\n   * `keydown` event.\n   *\n   * By default, if the key is Space or Enter, it will trigger a `click` event.\n   *\n   * @param {Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    // Support Space or Enter key operation to fire a click event. Also,\n    // prevent the event from propagating through the DOM and triggering\n    // Player hotkeys.\n    if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.trigger('click');\n    } else {\n      // Pass keypress handling up for unsupported keys\n      super.handleKeyDown(event);\n    }\n  }\n}\nComponent$1.registerComponent('ClickableComponent', ClickableComponent);\n\n/**\n * @file poster-image.js\n */\n\n/**\n * A `ClickableComponent` that handles showing the poster image for the player.\n *\n * @extends ClickableComponent\n */\nclass PosterImage extends ClickableComponent {\n  /**\n   * Create an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should attach to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.update();\n    this.update_ = e => this.update(e);\n    player.on('posterchange', this.update_);\n  }\n\n  /**\n   * Clean up and dispose of the `PosterImage`.\n   */\n  dispose() {\n    this.player().off('posterchange', this.update_);\n    super.dispose();\n  }\n\n  /**\n   * Create the `PosterImage`s DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl() {\n    // The el is an empty div to keep position in the DOM\n    // A picture and img el will be inserted when a source is set\n    return createEl('div', {\n      className: 'vjs-poster'\n    });\n  }\n\n  /**\n   * Get or set the `PosterImage`'s crossOrigin option.\n   *\n   * @param {string|null} [value]\n   *        The value to set the crossOrigin to. If an argument is\n   *        given, must be one of `'anonymous'` or `'use-credentials'`, or 'null'.\n   *\n   * @return {string|null}\n   *         - The current crossOrigin value of the `Player` when getting.\n   *         - undefined when setting\n   */\n  crossOrigin(value) {\n    // `null` can be set to unset a value\n    if (typeof value === 'undefined') {\n      if (this.$('img')) {\n        // If the poster's element exists, give its value\n        return this.$('img').crossOrigin;\n      } else if (this.player_.tech_ && this.player_.tech_.isReady_) {\n        // If not but the tech is ready, query the tech\n        return this.player_.crossOrigin();\n      }\n      // Otherwise check options as the  poster is usually set before the state of crossorigin\n      // can be retrieved by the getter\n      return this.player_.options_.crossOrigin || this.player_.options_.crossorigin || null;\n    }\n    if (value !== null && value !== 'anonymous' && value !== 'use-credentials') {\n      this.player_.log.warn(`crossOrigin must be null,  \"anonymous\" or \"use-credentials\", given \"${value}\"`);\n      return;\n    }\n    if (this.$('img')) {\n      this.$('img').crossOrigin = value;\n    }\n    return;\n  }\n\n  /**\n   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.\n   *\n   * @listens Player#posterchange\n   *\n   * @param {Event} [event]\n   *        The `Player#posterchange` event that triggered this function.\n   */\n  update(event) {\n    const url = this.player().poster();\n    this.setSrc(url);\n\n    // If there's no poster source we should display:none on this component\n    // so it's not still clickable or right-clickable\n    if (url) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Set the source of the `PosterImage` depending on the display method. (Re)creates\n   * the inner picture and img elementss when needed.\n   *\n   * @param {string} [url]\n   *        The URL to the source for the `PosterImage`. If not specified or falsy,\n   *        any source and ant inner picture/img are removed.\n   */\n  setSrc(url) {\n    if (!url) {\n      this.el_.textContent = '';\n      return;\n    }\n    if (!this.$('img')) {\n      this.el_.appendChild(createEl('picture', {\n        className: 'vjs-poster',\n        // Don't want poster to be tabbable.\n        tabIndex: -1\n      }, {}, createEl('img', {\n        loading: 'lazy',\n        crossOrigin: this.crossOrigin()\n      }, {\n        alt: ''\n      })));\n    }\n    this.$('img').src = url;\n  }\n\n  /**\n   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See\n   * {@link ClickableComponent#handleClick} for instances where this will be triggered.\n   *\n   * @listens tap\n   * @listens click\n   * @listens keydown\n   *\n   * @param {Event} event\n   +        The `click`, `tap` or `keydown` event that caused this function to be called.\n   */\n  handleClick(event) {\n    // We don't want a click to trigger playback when controls are disabled\n    if (!this.player_.controls()) {\n      return;\n    }\n    if (this.player_.tech(true)) {\n      this.player_.tech(true).focus();\n    }\n    if (this.player_.paused()) {\n      silencePromise(this.player_.play());\n    } else {\n      this.player_.pause();\n    }\n  }\n}\n\n/**\n * Get or set the `PosterImage`'s crossorigin option. For the HTML5 player, this\n * sets the `crossOrigin` property on the `<img>` tag to control the CORS\n * behavior.\n *\n * @param {string|null} [value]\n *        The value to set the `PosterImages`'s crossorigin to. If an argument is\n *        given, must be one of `anonymous` or `use-credentials`.\n *\n * @return {string|null|undefined}\n *         - The current crossorigin value of the `Player` when getting.\n *         - undefined when setting\n */\nPosterImage.prototype.crossorigin = PosterImage.prototype.crossOrigin;\nComponent$1.registerComponent('PosterImage', PosterImage);\n\n/**\n * @file text-track-display.js\n */\nconst darkGray = '#222';\nconst lightGray = '#ccc';\nconst fontMap = {\n  monospace: 'monospace',\n  sansSerif: 'sans-serif',\n  serif: 'serif',\n  monospaceSansSerif: '\"Andale Mono\", \"Lucida Console\", monospace',\n  monospaceSerif: '\"Courier New\", monospace',\n  proportionalSansSerif: 'sans-serif',\n  proportionalSerif: 'serif',\n  casual: '\"Comic Sans MS\", Impact, fantasy',\n  script: '\"Monotype Corsiva\", cursive',\n  smallcaps: '\"Andale Mono\", \"Lucida Console\", monospace, sans-serif'\n};\n\n/**\n * Construct an rgba color from a given hex color code.\n *\n * @param {number} color\n *        Hex number for color, like #f0e or #f604e2.\n *\n * @param {number} opacity\n *        Value for opacity, 0.0 - 1.0.\n *\n * @return {string}\n *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.\n */\nfunction constructColor(color, opacity) {\n  let hex;\n  if (color.length === 4) {\n    // color looks like \"#f0e\"\n    hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];\n  } else if (color.length === 7) {\n    // color looks like \"#f604e2\"\n    hex = color.slice(1);\n  } else {\n    throw new Error('Invalid color code provided, ' + color + '; must be formatted as e.g. #f0e or #f604e2.');\n  }\n  return 'rgba(' + parseInt(hex.slice(0, 2), 16) + ',' + parseInt(hex.slice(2, 4), 16) + ',' + parseInt(hex.slice(4, 6), 16) + ',' + opacity + ')';\n}\n\n/**\n * Try to update the style of a DOM element. Some style changes will throw an error,\n * particularly in IE8. Those should be noops.\n *\n * @param {Element} el\n *        The DOM element to be styled.\n *\n * @param {string} style\n *        The CSS property on the element that should be styled.\n *\n * @param {string} rule\n *        The style rule that should be applied to the property.\n *\n * @private\n */\nfunction tryUpdateStyle(el, style, rule) {\n  try {\n    el.style[style] = rule;\n  } catch (e) {\n    // Satisfies linter.\n    return;\n  }\n}\n\n/**\n * The component for displaying text track cues.\n *\n * @extends Component\n */\nclass TextTrackDisplay extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Function} [ready]\n   *        The function to call when `TextTrackDisplay` is ready.\n   */\n  constructor(player, options, ready) {\n    super(player, options, ready);\n    const updateDisplayHandler = e => this.updateDisplay(e);\n    player.on('loadstart', e => this.toggleDisplay(e));\n    player.on('texttrackchange', updateDisplayHandler);\n    player.on('loadedmetadata', e => this.preselectTrack(e));\n\n    // This used to be called during player init, but was causing an error\n    // if a track should show by default and the display hadn't loaded yet.\n    // Should probably be moved to an external track loader when we support\n    // tracks that don't need a display.\n    player.ready(bind_(this, function () {\n      if (player.tech_ && player.tech_.featuresNativeTextTracks) {\n        this.hide();\n        return;\n      }\n      player.on('fullscreenchange', updateDisplayHandler);\n      player.on('playerresize', updateDisplayHandler);\n      const screenOrientation = window$1.screen.orientation || window$1;\n      const changeOrientationEvent = window$1.screen.orientation ? 'change' : 'orientationchange';\n      screenOrientation.addEventListener(changeOrientationEvent, updateDisplayHandler);\n      player.on('dispose', () => screenOrientation.removeEventListener(changeOrientationEvent, updateDisplayHandler));\n      const tracks = this.options_.playerOptions.tracks || [];\n      for (let i = 0; i < tracks.length; i++) {\n        this.player_.addRemoteTextTrack(tracks[i], true);\n      }\n      this.preselectTrack();\n    }));\n  }\n\n  /**\n  * Preselect a track following this precedence:\n  * - matches the previously selected {@link TextTrack}'s language and kind\n  * - matches the previously selected {@link TextTrack}'s language only\n  * - is the first default captions track\n  * - is the first default descriptions track\n  *\n  * @listens Player#loadstart\n  */\n  preselectTrack() {\n    const modes = {\n      captions: 1,\n      subtitles: 1\n    };\n    const trackList = this.player_.textTracks();\n    const userPref = this.player_.cache_.selectedLanguage;\n    let firstDesc;\n    let firstCaptions;\n    let preferredTrack;\n    for (let i = 0; i < trackList.length; i++) {\n      const track = trackList[i];\n      if (userPref && userPref.enabled && userPref.language && userPref.language === track.language && track.kind in modes) {\n        // Always choose the track that matches both language and kind\n        if (track.kind === userPref.kind) {\n          preferredTrack = track;\n          // or choose the first track that matches language\n        } else if (!preferredTrack) {\n          preferredTrack = track;\n        }\n\n        // clear everything if offTextTrackMenuItem was clicked\n      } else if (userPref && !userPref.enabled) {\n        preferredTrack = null;\n        firstDesc = null;\n        firstCaptions = null;\n      } else if (track.default) {\n        if (track.kind === 'descriptions' && !firstDesc) {\n          firstDesc = track;\n        } else if (track.kind in modes && !firstCaptions) {\n          firstCaptions = track;\n        }\n      }\n    }\n\n    // The preferredTrack matches the user preference and takes\n    // precedence over all the other tracks.\n    // So, display the preferredTrack before the first default track\n    // and the subtitles/captions track before the descriptions track\n    if (preferredTrack) {\n      preferredTrack.mode = 'showing';\n    } else if (firstCaptions) {\n      firstCaptions.mode = 'showing';\n    } else if (firstDesc) {\n      firstDesc.mode = 'showing';\n    }\n  }\n\n  /**\n   * Turn display of {@link TextTrack}'s from the current state into the other state.\n   * There are only two states:\n   * - 'shown'\n   * - 'hidden'\n   *\n   * @listens Player#loadstart\n   */\n  toggleDisplay() {\n    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  /**\n   * Create the {@link Component}'s DOM element.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-text-track-display'\n    }, {\n      'translate': 'yes',\n      'aria-live': 'off',\n      'aria-atomic': 'true'\n    });\n  }\n\n  /**\n   * Clear all displayed {@link TextTrack}s.\n   */\n  clearDisplay() {\n    if (typeof window$1.WebVTT === 'function') {\n      window$1.WebVTT.processCues(window$1, [], this.el_);\n    }\n  }\n\n  /**\n   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or\n   * a {@link Player#fullscreenchange} is fired.\n   *\n   * @listens Player#texttrackchange\n   * @listens Player#fullscreenchange\n   */\n  updateDisplay() {\n    const tracks = this.player_.textTracks();\n    const allowMultipleShowingTracks = this.options_.allowMultipleShowingTracks;\n    this.clearDisplay();\n    if (allowMultipleShowingTracks) {\n      const showingTracks = [];\n      for (let i = 0; i < tracks.length; ++i) {\n        const track = tracks[i];\n        if (track.mode !== 'showing') {\n          continue;\n        }\n        showingTracks.push(track);\n      }\n      this.updateForTrack(showingTracks);\n      return;\n    }\n\n    //  Track display prioritization model: if multiple tracks are 'showing',\n    //  display the first 'subtitles' or 'captions' track which is 'showing',\n    //  otherwise display the first 'descriptions' track which is 'showing'\n\n    let descriptionsTrack = null;\n    let captionsSubtitlesTrack = null;\n    let i = tracks.length;\n    while (i--) {\n      const track = tracks[i];\n      if (track.mode === 'showing') {\n        if (track.kind === 'descriptions') {\n          descriptionsTrack = track;\n        } else {\n          captionsSubtitlesTrack = track;\n        }\n      }\n    }\n    if (captionsSubtitlesTrack) {\n      if (this.getAttribute('aria-live') !== 'off') {\n        this.setAttribute('aria-live', 'off');\n      }\n      this.updateForTrack(captionsSubtitlesTrack);\n    } else if (descriptionsTrack) {\n      if (this.getAttribute('aria-live') !== 'assertive') {\n        this.setAttribute('aria-live', 'assertive');\n      }\n      this.updateForTrack(descriptionsTrack);\n    }\n  }\n\n  /**\n   * Style {@Link TextTrack} activeCues according to {@Link TextTrackSettings}.\n   *\n   * @param {TextTrack} track\n   *        Text track object containing active cues to style.\n   */\n  updateDisplayState(track) {\n    const overrides = this.player_.textTrackSettings.getValues();\n    const cues = track.activeCues;\n    let i = cues.length;\n    while (i--) {\n      const cue = cues[i];\n      if (!cue) {\n        continue;\n      }\n      const cueDiv = cue.displayState;\n      if (overrides.color) {\n        cueDiv.firstChild.style.color = overrides.color;\n      }\n      if (overrides.textOpacity) {\n        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));\n      }\n      if (overrides.backgroundColor) {\n        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;\n      }\n      if (overrides.backgroundOpacity) {\n        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));\n      }\n      if (overrides.windowColor) {\n        if (overrides.windowOpacity) {\n          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));\n        } else {\n          cueDiv.style.backgroundColor = overrides.windowColor;\n        }\n      }\n      if (overrides.edgeStyle) {\n        if (overrides.edgeStyle === 'dropshadow') {\n          cueDiv.firstChild.style.textShadow = `2px 2px 3px ${darkGray}, 2px 2px 4px ${darkGray}, 2px 2px 5px ${darkGray}`;\n        } else if (overrides.edgeStyle === 'raised') {\n          cueDiv.firstChild.style.textShadow = `1px 1px ${darkGray}, 2px 2px ${darkGray}, 3px 3px ${darkGray}`;\n        } else if (overrides.edgeStyle === 'depressed') {\n          cueDiv.firstChild.style.textShadow = `1px 1px ${lightGray}, 0 1px ${lightGray}, -1px -1px ${darkGray}, 0 -1px ${darkGray}`;\n        } else if (overrides.edgeStyle === 'uniform') {\n          cueDiv.firstChild.style.textShadow = `0 0 4px ${darkGray}, 0 0 4px ${darkGray}, 0 0 4px ${darkGray}, 0 0 4px ${darkGray}`;\n        }\n      }\n      if (overrides.fontPercent && overrides.fontPercent !== 1) {\n        const fontSize = window$1.parseFloat(cueDiv.style.fontSize);\n        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';\n        cueDiv.style.height = 'auto';\n        cueDiv.style.top = 'auto';\n      }\n      if (overrides.fontFamily && overrides.fontFamily !== 'default') {\n        if (overrides.fontFamily === 'small-caps') {\n          cueDiv.firstChild.style.fontVariant = 'small-caps';\n        } else {\n          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];\n        }\n      }\n    }\n  }\n\n  /**\n   * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.\n   *\n   * @param {TextTrack|TextTrack[]} tracks\n   *        Text track object or text track array to be added to the list.\n   */\n  updateForTrack(tracks) {\n    if (!Array.isArray(tracks)) {\n      tracks = [tracks];\n    }\n    if (typeof window$1.WebVTT !== 'function' || tracks.every(track => {\n      return !track.activeCues;\n    })) {\n      return;\n    }\n    const cues = [];\n\n    // push all active track cues\n    for (let i = 0; i < tracks.length; ++i) {\n      const track = tracks[i];\n      for (let j = 0; j < track.activeCues.length; ++j) {\n        cues.push(track.activeCues[j]);\n      }\n    }\n\n    // removes all cues before it processes new ones\n    window$1.WebVTT.processCues(window$1, cues, this.el_);\n\n    // add unique class to each language text track & add settings styling if necessary\n    for (let i = 0; i < tracks.length; ++i) {\n      const track = tracks[i];\n      for (let j = 0; j < track.activeCues.length; ++j) {\n        const cueEl = track.activeCues[j].displayState;\n        addClass(cueEl, 'vjs-text-track-cue', 'vjs-text-track-cue-' + (track.language ? track.language : i));\n        if (track.language) {\n          setAttribute(cueEl, 'lang', track.language);\n        }\n      }\n      if (this.player_.textTrackSettings) {\n        this.updateDisplayState(track);\n      }\n    }\n  }\n}\nComponent$1.registerComponent('TextTrackDisplay', TextTrackDisplay);\n\n/**\n * @file loading-spinner.js\n */\n\n/**\n * A loading spinner for use during waiting/loading events.\n *\n * @extends Component\n */\nclass LoadingSpinner extends Component$1 {\n  /**\n   * Create the `LoadingSpinner`s DOM element.\n   *\n   * @return {Element}\n   *         The dom element that gets created.\n   */\n  createEl() {\n    const isAudio = this.player_.isAudio();\n    const playerType = this.localize(isAudio ? 'Audio Player' : 'Video Player');\n    const controlText = createEl('span', {\n      className: 'vjs-control-text',\n      textContent: this.localize('{1} is loading.', [playerType])\n    });\n    const el = super.createEl('div', {\n      className: 'vjs-loading-spinner',\n      dir: 'ltr'\n    });\n    el.appendChild(controlText);\n    return el;\n  }\n\n  /**\n   * Update control text on languagechange\n   */\n  handleLanguagechange() {\n    this.$('.vjs-control-text').textContent = this.localize('{1} is loading.', [this.player_.isAudio() ? 'Audio Player' : 'Video Player']);\n  }\n}\nComponent$1.registerComponent('LoadingSpinner', LoadingSpinner);\n\n/**\n * @file button.js\n */\n\n/**\n * Base class for all buttons.\n *\n * @extends ClickableComponent\n */\nclass Button extends ClickableComponent {\n  /**\n   * Create the `Button`s DOM element.\n   *\n   * @param {string} [tag=\"button\"]\n   *        The element's node type. This argument is IGNORED: no matter what\n   *        is passed, it will always create a `button` element.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element.\n   *\n   * @param {Object} [attributes={}]\n   *        An object of attributes that should be set on the element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl(tag, props = {}, attributes = {}) {\n    tag = 'button';\n    props = Object.assign({\n      className: this.buildCSSClass()\n    }, props);\n\n    // Add attributes for button element\n    attributes = Object.assign({\n      // Necessary since the default button type is \"submit\"\n      type: 'button'\n    }, attributes);\n    const el = createEl(tag, props, attributes);\n    el.appendChild(createEl('span', {\n      className: 'vjs-icon-placeholder'\n    }, {\n      'aria-hidden': true\n    }));\n    this.createControlTextEl(el);\n    return el;\n  }\n\n  /**\n   * Add a child `Component` inside of this `Button`.\n   *\n   * @param {string|Component} child\n   *        The name or instance of a child to add.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of options that will get passed to children of\n   *        the child.\n   *\n   * @return {Component}\n   *         The `Component` that gets added as a child. When using a string the\n   *         `Component` will get created by this process.\n   *\n   * @deprecated since version 5\n   */\n  addChild(child, options = {}) {\n    const className = this.constructor.name;\n    log$1.warn(`Adding an actionable (user controllable) child to a Button (${className}) is not supported; use a ClickableComponent instead.`);\n\n    // Avoid the error message generated by ClickableComponent's addChild method\n    return Component$1.prototype.addChild.call(this, child, options);\n  }\n\n  /**\n   * Enable the `Button` element so that it can be activated or clicked. Use this with\n   * {@link Button#disable}.\n   */\n  enable() {\n    super.enable();\n    this.el_.removeAttribute('disabled');\n  }\n\n  /**\n   * Disable the `Button` element so that it cannot be activated or clicked. Use this with\n   * {@link Button#enable}.\n   */\n  disable() {\n    super.disable();\n    this.el_.setAttribute('disabled', 'disabled');\n  }\n\n  /**\n   * This gets called when a `Button` has focus and `keydown` is triggered via a key\n   * press.\n   *\n   * @param {Event} event\n   *        The event that caused this function to get called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    // Ignore Space or Enter key operation, which is handled by the browser for\n    // a button - though not for its super class, ClickableComponent. Also,\n    // prevent the event from propagating through the DOM and triggering Player\n    // hotkeys. We do not preventDefault here because we _want_ the browser to\n    // handle it.\n    if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {\n      event.stopPropagation();\n      return;\n    }\n\n    // Pass keypress handling up for unsupported keys\n    super.handleKeyDown(event);\n  }\n}\nComponent$1.registerComponent('Button', Button);\n\n/**\n * @file big-play-button.js\n */\n\n/**\n * The initial play button that shows before the video has played. The hiding of the\n * `BigPlayButton` get done via CSS and `Player` states.\n *\n * @extends Button\n */\nclass BigPlayButton extends Button {\n  constructor(player, options) {\n    super(player, options);\n    this.mouseused_ = false;\n    this.on('mousedown', e => this.handleMouseDown(e));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.\n   */\n  buildCSSClass() {\n    return 'vjs-big-play-button';\n  }\n\n  /**\n   * This gets called when a `BigPlayButton` \"clicked\". See {@link ClickableComponent}\n   * for more detailed information on what a click can be.\n   *\n   * @param {KeyboardEvent} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    const playPromise = this.player_.play();\n\n    // exit early if clicked via the mouse\n    if (this.mouseused_ && event.clientX && event.clientY) {\n      silencePromise(playPromise);\n      if (this.player_.tech(true)) {\n        this.player_.tech(true).focus();\n      }\n      return;\n    }\n    const cb = this.player_.getChild('controlBar');\n    const playToggle = cb && cb.getChild('playToggle');\n    if (!playToggle) {\n      this.player_.tech(true).focus();\n      return;\n    }\n    const playFocus = () => playToggle.focus();\n    if (isPromise(playPromise)) {\n      playPromise.then(playFocus, () => {});\n    } else {\n      this.setTimeout(playFocus, 1);\n    }\n  }\n  handleKeyDown(event) {\n    this.mouseused_ = false;\n    super.handleKeyDown(event);\n  }\n  handleMouseDown(event) {\n    this.mouseused_ = true;\n  }\n}\n\n/**\n * The text that should display over the `BigPlayButton`s controls. Added to for localization.\n *\n * @type {string}\n * @protected\n */\nBigPlayButton.prototype.controlText_ = 'Play Video';\nComponent$1.registerComponent('BigPlayButton', BigPlayButton);\n\n/**\n * @file close-button.js\n */\n\n/**\n * The `CloseButton` is a `{@link Button}` that fires a `close` event when\n * it gets clicked.\n *\n * @extends Button\n */\nclass CloseButton extends Button {\n  /**\n  * Creates an instance of the this class.\n  *\n  * @param  { import('./player').default } player\n  *         The `Player` that this class should be attached to.\n  *\n  * @param  {Object} [options]\n  *         The key/value store of player options.\n  */\n  constructor(player, options) {\n    super(player, options);\n    this.controlText(options && options.controlText || this.localize('Close'));\n  }\n\n  /**\n  * Builds the default DOM `className`.\n  *\n  * @return {string}\n  *         The DOM `className` for this object.\n  */\n  buildCSSClass() {\n    return `vjs-close-button ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * This gets called when a `CloseButton` gets clicked. See\n   * {@link ClickableComponent#handleClick} for more information on when\n   * this will be triggered\n   *\n   * @param {Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   * @fires CloseButton#close\n   */\n  handleClick(event) {\n    /**\n     * Triggered when the a `CloseButton` is clicked.\n     *\n     * @event CloseButton#close\n     * @type {Event}\n     *\n     * @property {boolean} [bubbles=false]\n     *           set to false so that the close event does not\n     *           bubble up to parents if there is no listener\n     */\n    this.trigger({\n      type: 'close',\n      bubbles: false\n    });\n  }\n  /**\n   * Event handler that is called when a `CloseButton` receives a\n   * `keydown` event.\n   *\n   * By default, if the key is Esc, it will trigger a `click` event.\n   *\n   * @param {Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    // Esc button will trigger `click` event\n    if (keycode.isEventKey(event, 'Esc')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.trigger('click');\n    } else {\n      // Pass keypress handling up for unsupported keys\n      super.handleKeyDown(event);\n    }\n  }\n}\nComponent$1.registerComponent('CloseButton', CloseButton);\n\n/**\n * @file play-toggle.js\n */\n\n/**\n * Button to toggle between play and pause.\n *\n * @extends Button\n */\nclass PlayToggle extends Button {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  constructor(player, options = {}) {\n    super(player, options);\n\n    // show or hide replay icon\n    options.replay = options.replay === undefined || options.replay;\n    this.on(player, 'play', e => this.handlePlay(e));\n    this.on(player, 'pause', e => this.handlePause(e));\n    if (options.replay) {\n      this.on(player, 'ended', e => this.handleEnded(e));\n    }\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-play-control ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * This gets called when an `PlayToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    if (this.player_.paused()) {\n      silencePromise(this.player_.play());\n    } else {\n      this.player_.pause();\n    }\n  }\n\n  /**\n   * This gets called once after the video has ended and the user seeks so that\n   * we can change the replay button back to a play button.\n   *\n   * @param {Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#seeked\n   */\n  handleSeeked(event) {\n    this.removeClass('vjs-ended');\n    if (this.player_.paused()) {\n      this.handlePause(event);\n    } else {\n      this.handlePlay(event);\n    }\n  }\n\n  /**\n   * Add the vjs-playing class to the element so it can change appearance.\n   *\n   * @param {Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#play\n   */\n  handlePlay(event) {\n    this.removeClass('vjs-ended', 'vjs-paused');\n    this.addClass('vjs-playing');\n    // change the button text to \"Pause\"\n    this.controlText('Pause');\n  }\n\n  /**\n   * Add the vjs-paused class to the element so it can change appearance.\n   *\n   * @param {Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#pause\n   */\n  handlePause(event) {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    // change the button text to \"Play\"\n    this.controlText('Play');\n  }\n\n  /**\n   * Add the vjs-ended class to the element so it can change appearance\n   *\n   * @param {Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#ended\n   */\n  handleEnded(event) {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-ended');\n    // change the button text to \"Replay\"\n    this.controlText('Replay');\n\n    // on the next seek remove the replay button\n    this.one(this.player_, 'seeked', e => this.handleSeeked(e));\n  }\n}\n\n/**\n * The text that should display over the `PlayToggle`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nPlayToggle.prototype.controlText_ = 'Play';\nComponent$1.registerComponent('PlayToggle', PlayToggle);\n\n/**\n * @file time-display.js\n */\n\n/**\n * Displays time information about the video\n *\n * @extends Component\n */\nclass TimeDisplay extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.on(player, ['timeupdate', 'ended'], e => this.updateContent(e));\n    this.updateTextNode_();\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const className = this.buildCSSClass();\n    const el = super.createEl('div', {\n      className: `${className} vjs-time-control vjs-control`\n    });\n    const span = createEl('span', {\n      className: 'vjs-control-text',\n      textContent: `${this.localize(this.labelText_)}\\u00a0`\n    }, {\n      role: 'presentation'\n    });\n    el.appendChild(span);\n    this.contentEl_ = createEl('span', {\n      className: `${className}-display`\n    }, {\n      // span elements have no implicit role, but some screen readers (notably VoiceOver)\n      // treat them as a break between items in the DOM when using arrow keys\n      // (or left-to-right swipes on iOS) to read contents of a page. Using\n      // role='presentation' causes VoiceOver to NOT treat this span as a break.\n      role: 'presentation'\n    });\n    el.appendChild(this.contentEl_);\n    return el;\n  }\n  dispose() {\n    this.contentEl_ = null;\n    this.textNode_ = null;\n    super.dispose();\n  }\n\n  /**\n   * Updates the time display text node with a new time\n   *\n   * @param {number} [time=0] the time to update to\n   *\n   * @private\n   */\n  updateTextNode_(time = 0) {\n    time = formatTime(time);\n    if (this.formattedTime_ === time) {\n      return;\n    }\n    this.formattedTime_ = time;\n    this.requestNamedAnimationFrame('TimeDisplay#updateTextNode_', () => {\n      if (!this.contentEl_) {\n        return;\n      }\n      let oldNode = this.textNode_;\n      if (oldNode && this.contentEl_.firstChild !== oldNode) {\n        oldNode = null;\n        log$1.warn('TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.');\n      }\n      this.textNode_ = document.createTextNode(this.formattedTime_);\n      if (!this.textNode_) {\n        return;\n      }\n      if (oldNode) {\n        this.contentEl_.replaceChild(this.textNode_, oldNode);\n      } else {\n        this.contentEl_.appendChild(this.textNode_);\n      }\n    });\n  }\n\n  /**\n   * To be filled out in the child class, should update the displayed time\n   * in accordance with the fact that the current time has changed.\n   *\n   * @param {Event} [event]\n   *        The `timeupdate`  event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   */\n  updateContent(event) {}\n}\n\n/**\n * The text that is added to the `TimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\nTimeDisplay.prototype.labelText_ = 'Time';\n\n/**\n * The text that should display over the `TimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @protected\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nTimeDisplay.prototype.controlText_ = 'Time';\nComponent$1.registerComponent('TimeDisplay', TimeDisplay);\n\n/**\n * @file current-time-display.js\n */\n\n/**\n * Displays the current time\n *\n * @extends Component\n */\nclass CurrentTimeDisplay extends TimeDisplay {\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return 'vjs-current-time';\n  }\n\n  /**\n   * Update current time display\n   *\n   * @param {Event} [event]\n   *        The `timeupdate` event that caused this function to run.\n   *\n   * @listens Player#timeupdate\n   */\n  updateContent(event) {\n    // Allows for smooth scrubbing, when player can't keep up.\n    let time;\n    if (this.player_.ended()) {\n      time = this.player_.duration();\n    } else {\n      time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n    }\n    this.updateTextNode_(time);\n  }\n}\n\n/**\n * The text that is added to the `CurrentTimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\nCurrentTimeDisplay.prototype.labelText_ = 'Current Time';\n\n/**\n * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @protected\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nCurrentTimeDisplay.prototype.controlText_ = 'Current Time';\nComponent$1.registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);\n\n/**\n * @file duration-display.js\n */\n\n/**\n * Displays the duration\n *\n * @extends Component\n */\nclass DurationDisplay extends TimeDisplay {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    const updateContent = e => this.updateContent(e);\n\n    // we do not want to/need to throttle duration changes,\n    // as they should always display the changed duration as\n    // it has changed\n    this.on(player, 'durationchange', updateContent);\n\n    // Listen to loadstart because the player duration is reset when a new media element is loaded,\n    // but the durationchange on the user agent will not fire.\n    // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}\n    this.on(player, 'loadstart', updateContent);\n\n    // Also listen for timeupdate (in the parent) and loadedmetadata because removing those\n    // listeners could have broken dependent applications/libraries. These\n    // can likely be removed for 7.0.\n    this.on(player, 'loadedmetadata', updateContent);\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return 'vjs-duration';\n  }\n\n  /**\n   * Update duration time display.\n   *\n   * @param {Event} [event]\n   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused\n   *        this function to be called.\n   *\n   * @listens Player#durationchange\n   * @listens Player#timeupdate\n   * @listens Player#loadedmetadata\n   */\n  updateContent(event) {\n    const duration = this.player_.duration();\n    this.updateTextNode_(duration);\n  }\n}\n\n/**\n * The text that is added to the `DurationDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\nDurationDisplay.prototype.labelText_ = 'Duration';\n\n/**\n * The text that should display over the `DurationDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @protected\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nDurationDisplay.prototype.controlText_ = 'Duration';\nComponent$1.registerComponent('DurationDisplay', DurationDisplay);\n\n/**\n * @file time-divider.js\n */\n\n/**\n * The separator between the current time and duration.\n * Can be hidden if it's not needed in the design.\n *\n * @extends Component\n */\nclass TimeDivider extends Component$1 {\n  /**\n   * Create the component's DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const el = super.createEl('div', {\n      className: 'vjs-time-control vjs-time-divider'\n    }, {\n      // this element and its contents can be hidden from assistive techs since\n      // it is made extraneous by the announcement of the control text\n      // for the current time and duration displays\n      'aria-hidden': true\n    });\n    const div = super.createEl('div');\n    const span = super.createEl('span', {\n      textContent: '/'\n    });\n    div.appendChild(span);\n    el.appendChild(div);\n    return el;\n  }\n}\nComponent$1.registerComponent('TimeDivider', TimeDivider);\n\n/**\n * @file remaining-time-display.js\n */\n\n/**\n * Displays the time left in the video\n *\n * @extends Component\n */\nclass RemainingTimeDisplay extends TimeDisplay {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.on(player, 'durationchange', e => this.updateContent(e));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return 'vjs-remaining-time';\n  }\n\n  /**\n   * Create the `Component`'s DOM element with the \"minus\" character prepend to the time\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const el = super.createEl();\n    if (this.options_.displayNegative !== false) {\n      el.insertBefore(createEl('span', {}, {\n        'aria-hidden': true\n      }, '-'), this.contentEl_);\n    }\n    return el;\n  }\n\n  /**\n   * Update remaining time display.\n   *\n   * @param {Event} [event]\n   *        The `timeupdate` or `durationchange` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   * @listens Player#durationchange\n   */\n  updateContent(event) {\n    if (typeof this.player_.duration() !== 'number') {\n      return;\n    }\n    let time;\n\n    // @deprecated We should only use remainingTimeDisplay\n    // as of video.js 7\n    if (this.player_.ended()) {\n      time = 0;\n    } else if (this.player_.remainingTimeDisplay) {\n      time = this.player_.remainingTimeDisplay();\n    } else {\n      time = this.player_.remainingTime();\n    }\n    this.updateTextNode_(time);\n  }\n}\n\n/**\n * The text that is added to the `RemainingTimeDisplay` for screen reader users.\n *\n * @type {string}\n * @private\n */\nRemainingTimeDisplay.prototype.labelText_ = 'Remaining Time';\n\n/**\n * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.\n *\n * @type {string}\n * @protected\n *\n * @deprecated in v7; controlText_ is not used in non-active display Components\n */\nRemainingTimeDisplay.prototype.controlText_ = 'Remaining Time';\nComponent$1.registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);\n\n/**\n * @file live-display.js\n */\n\n// TODO - Future make it click to snap to live\n\n/**\n * Displays the live indicator when duration is Infinity.\n *\n * @extends Component\n */\nclass LiveDisplay extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.updateShowing();\n    this.on(this.player(), 'durationchange', e => this.updateShowing(e));\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const el = super.createEl('div', {\n      className: 'vjs-live-control vjs-control'\n    });\n    this.contentEl_ = createEl('div', {\n      className: 'vjs-live-display'\n    }, {\n      'aria-live': 'off'\n    });\n    this.contentEl_.appendChild(createEl('span', {\n      className: 'vjs-control-text',\n      textContent: `${this.localize('Stream Type')}\\u00a0`\n    }));\n    this.contentEl_.appendChild(document.createTextNode(this.localize('LIVE')));\n    el.appendChild(this.contentEl_);\n    return el;\n  }\n  dispose() {\n    this.contentEl_ = null;\n    super.dispose();\n  }\n\n  /**\n   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide\n   * it accordingly\n   *\n   * @param {Event} [event]\n   *        The {@link Player#durationchange} event that caused this function to run.\n   *\n   * @listens Player#durationchange\n   */\n  updateShowing(event) {\n    if (this.player().duration() === Infinity) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n}\nComponent$1.registerComponent('LiveDisplay', LiveDisplay);\n\n/**\n * @file seek-to-live.js\n */\n\n/**\n * Displays the live indicator when duration is Infinity.\n *\n * @extends Component\n */\nclass SeekToLive extends Button {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.updateLiveEdgeStatus();\n    if (this.player_.liveTracker) {\n      this.updateLiveEdgeStatusHandler_ = e => this.updateLiveEdgeStatus(e);\n      this.on(this.player_.liveTracker, 'liveedgechange', this.updateLiveEdgeStatusHandler_);\n    }\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const el = super.createEl('button', {\n      className: 'vjs-seek-to-live-control vjs-control'\n    });\n    this.textEl_ = createEl('span', {\n      className: 'vjs-seek-to-live-text',\n      textContent: this.localize('LIVE')\n    }, {\n      'aria-hidden': 'true'\n    });\n    el.appendChild(this.textEl_);\n    return el;\n  }\n\n  /**\n   * Update the state of this button if we are at the live edge\n   * or not\n   */\n  updateLiveEdgeStatus() {\n    // default to live edge\n    if (!this.player_.liveTracker || this.player_.liveTracker.atLiveEdge()) {\n      this.setAttribute('aria-disabled', true);\n      this.addClass('vjs-at-live-edge');\n      this.controlText('Seek to live, currently playing live');\n    } else {\n      this.setAttribute('aria-disabled', false);\n      this.removeClass('vjs-at-live-edge');\n      this.controlText('Seek to live, currently behind live');\n    }\n  }\n\n  /**\n   * On click bring us as near to the live point as possible.\n   * This requires that we wait for the next `live-seekable-change`\n   * event which will happen every segment length seconds.\n   */\n  handleClick() {\n    this.player_.liveTracker.seekToLiveEdge();\n  }\n\n  /**\n   * Dispose of the element and stop tracking\n   */\n  dispose() {\n    if (this.player_.liveTracker) {\n      this.off(this.player_.liveTracker, 'liveedgechange', this.updateLiveEdgeStatusHandler_);\n    }\n    this.textEl_ = null;\n    super.dispose();\n  }\n}\n/**\n * The text that should display over the `SeekToLive`s control. Added for localization.\n *\n * @type {string}\n * @protected\n */\nSeekToLive.prototype.controlText_ = 'Seek to live, currently playing live';\nComponent$1.registerComponent('SeekToLive', SeekToLive);\n\n/**\n * @file num.js\n * @module num\n */\n\n/**\n * Keep a number between a min and a max value\n *\n * @param {number} number\n *        The number to clamp\n *\n * @param {number} min\n *        The minimum value\n * @param {number} max\n *        The maximum value\n *\n * @return {number}\n *         the clamped number\n */\nfunction clamp(number, min, max) {\n  number = Number(number);\n  return Math.min(max, Math.max(min, isNaN(number) ? min : number));\n}\n\nvar Num = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  clamp: clamp\n});\n\n/**\n * @file slider.js\n */\n\n/**\n * The base functionality for a slider. Can be vertical or horizontal.\n * For instance the volume bar or the seek bar on a video is a slider.\n *\n * @extends Component\n */\nclass Slider extends Component$1 {\n  /**\n  * Create an instance of this class\n  *\n  * @param { import('../player').default } player\n  *        The `Player` that this class should be attached to.\n  *\n  * @param {Object} [options]\n  *        The key/value store of player options.\n  */\n  constructor(player, options) {\n    super(player, options);\n    this.handleMouseDown_ = e => this.handleMouseDown(e);\n    this.handleMouseUp_ = e => this.handleMouseUp(e);\n    this.handleKeyDown_ = e => this.handleKeyDown(e);\n    this.handleClick_ = e => this.handleClick(e);\n    this.handleMouseMove_ = e => this.handleMouseMove(e);\n    this.update_ = e => this.update(e);\n\n    // Set property names to bar to match with the child Slider class is looking for\n    this.bar = this.getChild(this.options_.barName);\n\n    // Set a horizontal or vertical class on the slider depending on the slider type\n    this.vertical(!!this.options_.vertical);\n    this.enable();\n  }\n\n  /**\n   * Are controls are currently enabled for this slider or not.\n   *\n   * @return {boolean}\n   *         true if controls are enabled, false otherwise\n   */\n  enabled() {\n    return this.enabled_;\n  }\n\n  /**\n   * Enable controls for this slider if they are disabled\n   */\n  enable() {\n    if (this.enabled()) {\n      return;\n    }\n    this.on('mousedown', this.handleMouseDown_);\n    this.on('touchstart', this.handleMouseDown_);\n    this.on('keydown', this.handleKeyDown_);\n    this.on('click', this.handleClick_);\n\n    // TODO: deprecated, controlsvisible does not seem to be fired\n    this.on(this.player_, 'controlsvisible', this.update);\n    if (this.playerEvent) {\n      this.on(this.player_, this.playerEvent, this.update);\n    }\n    this.removeClass('disabled');\n    this.setAttribute('tabindex', 0);\n    this.enabled_ = true;\n  }\n\n  /**\n   * Disable controls for this slider if they are enabled\n   */\n  disable() {\n    if (!this.enabled()) {\n      return;\n    }\n    const doc = this.bar.el_.ownerDocument;\n    this.off('mousedown', this.handleMouseDown_);\n    this.off('touchstart', this.handleMouseDown_);\n    this.off('keydown', this.handleKeyDown_);\n    this.off('click', this.handleClick_);\n    this.off(this.player_, 'controlsvisible', this.update_);\n    this.off(doc, 'mousemove', this.handleMouseMove_);\n    this.off(doc, 'mouseup', this.handleMouseUp_);\n    this.off(doc, 'touchmove', this.handleMouseMove_);\n    this.off(doc, 'touchend', this.handleMouseUp_);\n    this.removeAttribute('tabindex');\n    this.addClass('disabled');\n    if (this.playerEvent) {\n      this.off(this.player_, this.playerEvent, this.update);\n    }\n    this.enabled_ = false;\n  }\n\n  /**\n   * Create the `Slider`s DOM element.\n   *\n   * @param {string} type\n   *        Type of element to create.\n   *\n   * @param {Object} [props={}]\n   *        List of properties in Object form.\n   *\n   * @param {Object} [attributes={}]\n   *        list of attributes in Object form.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl(type, props = {}, attributes = {}) {\n    // Add the slider element class to all sub classes\n    props.className = props.className + ' vjs-slider';\n    props = Object.assign({\n      tabIndex: 0\n    }, props);\n    attributes = Object.assign({\n      'role': 'slider',\n      'aria-valuenow': 0,\n      'aria-valuemin': 0,\n      'aria-valuemax': 100\n    }, attributes);\n    return super.createEl(type, props, attributes);\n  }\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `Slider`.\n   *\n   * @param {MouseEvent} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   * @fires Slider#slideractive\n   */\n  handleMouseDown(event) {\n    const doc = this.bar.el_.ownerDocument;\n    if (event.type === 'mousedown') {\n      event.preventDefault();\n    }\n    // Do not call preventDefault() on touchstart in Chrome\n    // to avoid console warnings. Use a 'touch-action: none' style\n    // instead to prevent unintended scrolling.\n    // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n    if (event.type === 'touchstart' && !IS_CHROME) {\n      event.preventDefault();\n    }\n    blockTextSelection();\n    this.addClass('vjs-sliding');\n    /**\n     * Triggered when the slider is in an active state\n     *\n     * @event Slider#slideractive\n     * @type {MouseEvent}\n     */\n    this.trigger('slideractive');\n    this.on(doc, 'mousemove', this.handleMouseMove_);\n    this.on(doc, 'mouseup', this.handleMouseUp_);\n    this.on(doc, 'touchmove', this.handleMouseMove_);\n    this.on(doc, 'touchend', this.handleMouseUp_);\n    this.handleMouseMove(event, true);\n  }\n\n  /**\n   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.\n   * The `mousemove` and `touchmove` events will only only trigger this function during\n   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and\n   * {@link Slider#handleMouseUp}.\n   *\n   * @param {MouseEvent} event\n   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered\n   *        this function\n   * @param {boolean} mouseDown this is a flag that should be set to true if `handleMouseMove` is called directly. It allows us to skip things that should not happen if coming from mouse down but should happen on regular mouse move handler. Defaults to false.\n   *\n   * @listens mousemove\n   * @listens touchmove\n   */\n  handleMouseMove(event) {}\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `Slider`.\n   *\n   * @param {MouseEvent} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   * @fires Slider#sliderinactive\n   */\n  handleMouseUp(event) {\n    const doc = this.bar.el_.ownerDocument;\n    unblockTextSelection();\n    this.removeClass('vjs-sliding');\n    /**\n     * Triggered when the slider is no longer in an active state.\n     *\n     * @event Slider#sliderinactive\n     * @type {Event}\n     */\n    this.trigger('sliderinactive');\n    this.off(doc, 'mousemove', this.handleMouseMove_);\n    this.off(doc, 'mouseup', this.handleMouseUp_);\n    this.off(doc, 'touchmove', this.handleMouseMove_);\n    this.off(doc, 'touchend', this.handleMouseUp_);\n    this.update();\n  }\n\n  /**\n   * Update the progress bar of the `Slider`.\n   *\n   * @return {number}\n   *          The percentage of progress the progress bar represents as a\n   *          number from 0 to 1.\n   */\n  update() {\n    // In VolumeBar init we have a setTimeout for update that pops and update\n    // to the end of the execution stack. The player is destroyed before then\n    // update will cause an error\n    // If there's no bar...\n    if (!this.el_ || !this.bar) {\n      return;\n    }\n\n    // clamp progress between 0 and 1\n    // and only round to four decimal places, as we round to two below\n    const progress = this.getProgress();\n    if (progress === this.progress_) {\n      return progress;\n    }\n    this.progress_ = progress;\n    this.requestNamedAnimationFrame('Slider#update', () => {\n      // Set the new bar width or height\n      const sizeKey = this.vertical() ? 'height' : 'width';\n\n      // Convert to a percentage for css value\n      this.bar.el().style[sizeKey] = (progress * 100).toFixed(2) + '%';\n    });\n    return progress;\n  }\n\n  /**\n   * Get the percentage of the bar that should be filled\n   * but clamped and rounded.\n   *\n   * @return {number}\n   *         percentage filled that the slider is\n   */\n  getProgress() {\n    return Number(clamp(this.getPercent(), 0, 1).toFixed(4));\n  }\n\n  /**\n   * Calculate distance for slider\n   *\n   * @param {Event} event\n   *        The event that caused this function to run.\n   *\n   * @return {number}\n   *         The current position of the Slider.\n   *         - position.x for vertical `Slider`s\n   *         - position.y for horizontal `Slider`s\n   */\n  calculateDistance(event) {\n    const position = getPointerPosition(this.el_, event);\n    if (this.vertical()) {\n      return position.y;\n    }\n    return position.x;\n  }\n\n  /**\n   * Handle a `keydown` event on the `Slider`. Watches for left, right, up, and down\n   * arrow keys. This function will only be called when the slider has focus. See\n   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.\n   *\n   * @param {KeyboardEvent} event\n   *        the `keydown` event that caused this function to run.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    // Left and Down Arrows\n    if (keycode.isEventKey(event, 'Left') || keycode.isEventKey(event, 'Down')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.stepBack();\n\n      // Up and Right Arrows\n    } else if (keycode.isEventKey(event, 'Right') || keycode.isEventKey(event, 'Up')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.stepForward();\n    } else {\n      // Pass keydown handling up for unsupported keys\n      super.handleKeyDown(event);\n    }\n  }\n\n  /**\n   * Listener for click events on slider, used to prevent clicks\n   *   from bubbling up to parent elements like button menus.\n   *\n   * @param {Object} event\n   *        Event that caused this object to run\n   */\n  handleClick(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  /**\n   * Get/set if slider is horizontal for vertical\n   *\n   * @param {boolean} [bool]\n   *        - true if slider is vertical,\n   *        - false is horizontal\n   *\n   * @return {boolean}\n   *         - true if slider is vertical, and getting\n   *         - false if the slider is horizontal, and getting\n   */\n  vertical(bool) {\n    if (bool === undefined) {\n      return this.vertical_ || false;\n    }\n    this.vertical_ = !!bool;\n    if (this.vertical_) {\n      this.addClass('vjs-slider-vertical');\n    } else {\n      this.addClass('vjs-slider-horizontal');\n    }\n  }\n}\nComponent$1.registerComponent('Slider', Slider);\n\n/**\n * @file load-progress-bar.js\n */\n\n// get the percent width of a time compared to the total end\nconst percentify = (time, end) => clamp(time / end * 100, 0, 100).toFixed(2) + '%';\n\n/**\n * Shows loading progress\n *\n * @extends Component\n */\nclass LoadProgressBar extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.partEls_ = [];\n    this.on(player, 'progress', e => this.update(e));\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const el = super.createEl('div', {\n      className: 'vjs-load-progress'\n    });\n    const wrapper = createEl('span', {\n      className: 'vjs-control-text'\n    });\n    const loadedText = createEl('span', {\n      textContent: this.localize('Loaded')\n    });\n    const separator = document.createTextNode(': ');\n    this.percentageEl_ = createEl('span', {\n      className: 'vjs-control-text-loaded-percentage',\n      textContent: '0%'\n    });\n    el.appendChild(wrapper);\n    wrapper.appendChild(loadedText);\n    wrapper.appendChild(separator);\n    wrapper.appendChild(this.percentageEl_);\n    return el;\n  }\n  dispose() {\n    this.partEls_ = null;\n    this.percentageEl_ = null;\n    super.dispose();\n  }\n\n  /**\n   * Update progress bar\n   *\n   * @param {Event} [event]\n   *        The `progress` event that caused this function to run.\n   *\n   * @listens Player#progress\n   */\n  update(event) {\n    this.requestNamedAnimationFrame('LoadProgressBar#update', () => {\n      const liveTracker = this.player_.liveTracker;\n      const buffered = this.player_.buffered();\n      const duration = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : this.player_.duration();\n      const bufferedEnd = this.player_.bufferedEnd();\n      const children = this.partEls_;\n      const percent = percentify(bufferedEnd, duration);\n      if (this.percent_ !== percent) {\n        // update the width of the progress bar\n        this.el_.style.width = percent;\n        // update the control-text\n        textContent(this.percentageEl_, percent);\n        this.percent_ = percent;\n      }\n\n      // add child elements to represent the individual buffered time ranges\n      for (let i = 0; i < buffered.length; i++) {\n        const start = buffered.start(i);\n        const end = buffered.end(i);\n        let part = children[i];\n        if (!part) {\n          part = this.el_.appendChild(createEl());\n          children[i] = part;\n        }\n\n        //  only update if changed\n        if (part.dataset.start === start && part.dataset.end === end) {\n          continue;\n        }\n        part.dataset.start = start;\n        part.dataset.end = end;\n\n        // set the percent based on the width of the progress bar (bufferedEnd)\n        part.style.left = percentify(start, bufferedEnd);\n        part.style.width = percentify(end - start, bufferedEnd);\n      }\n\n      // remove unused buffered range elements\n      for (let i = children.length; i > buffered.length; i--) {\n        this.el_.removeChild(children[i - 1]);\n      }\n      children.length = buffered.length;\n    });\n  }\n}\nComponent$1.registerComponent('LoadProgressBar', LoadProgressBar);\n\n/**\n * @file time-tooltip.js\n */\n\n/**\n * Time tooltips display a time above the progress bar.\n *\n * @extends Component\n */\nclass TimeTooltip extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\n  }\n\n  /**\n   * Create the time tooltip DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-time-tooltip'\n    }, {\n      'aria-hidden': 'true'\n    });\n  }\n\n  /**\n   * Updates the position of the time tooltip relative to the `SeekBar`.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n  update(seekBarRect, seekBarPoint, content) {\n    const tooltipRect = findPosition(this.el_);\n    const playerRect = getBoundingClientRect(this.player_.el());\n    const seekBarPointPx = seekBarRect.width * seekBarPoint;\n\n    // do nothing if either rect isn't available\n    // for example, if the player isn't in the DOM for testing\n    if (!playerRect || !tooltipRect) {\n      return;\n    }\n\n    // This is the space left of the `seekBarPoint` available within the bounds\n    // of the player. We calculate any gap between the left edge of the player\n    // and the left edge of the `SeekBar` and add the number of pixels in the\n    // `SeekBar` before hitting the `seekBarPoint`\n    const spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;\n\n    // This is the space right of the `seekBarPoint` available within the bounds\n    // of the player. We calculate the number of pixels from the `seekBarPoint`\n    // to the right edge of the `SeekBar` and add to that any gap between the\n    // right edge of the `SeekBar` and the player.\n    const spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);\n\n    // This is the number of pixels by which the tooltip will need to be pulled\n    // further to the right to center it over the `seekBarPoint`.\n    let pullTooltipBy = tooltipRect.width / 2;\n\n    // Adjust the `pullTooltipBy` distance to the left or right depending on\n    // the results of the space calculations above.\n    if (spaceLeftOfPoint < pullTooltipBy) {\n      pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;\n    } else if (spaceRightOfPoint < pullTooltipBy) {\n      pullTooltipBy = spaceRightOfPoint;\n    }\n\n    // Due to the imprecision of decimal/ratio based calculations and varying\n    // rounding behaviors, there are cases where the spacing adjustment is off\n    // by a pixel or two. This adds insurance to these calculations.\n    if (pullTooltipBy < 0) {\n      pullTooltipBy = 0;\n    } else if (pullTooltipBy > tooltipRect.width) {\n      pullTooltipBy = tooltipRect.width;\n    }\n\n    // prevent small width fluctuations within 0.4px from\n    // changing the value below.\n    // This really helps for live to prevent the play\n    // progress time tooltip from jittering\n    pullTooltipBy = Math.round(pullTooltipBy);\n    this.el_.style.right = `-${pullTooltipBy}px`;\n    this.write(content);\n  }\n\n  /**\n   * Write the time to the tooltip DOM element.\n   *\n   * @param {string} content\n   *        The formatted time for the tooltip.\n   */\n  write(content) {\n    textContent(this.el_, content);\n  }\n\n  /**\n   * Updates the position of the time tooltip relative to the `SeekBar`.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   *\n   * @param {number} time\n   *        The time to update the tooltip to, not used during live playback\n   *\n   * @param {Function} cb\n   *        A function that will be called during the request animation frame\n   *        for tooltips that need to do additional animations from the default\n   */\n  updateTime(seekBarRect, seekBarPoint, time, cb) {\n    this.requestNamedAnimationFrame('TimeTooltip#updateTime', () => {\n      let content;\n      const duration = this.player_.duration();\n      if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {\n        const liveWindow = this.player_.liveTracker.liveWindow();\n        const secondsBehind = liveWindow - seekBarPoint * liveWindow;\n        content = (secondsBehind < 1 ? '' : '-') + formatTime(secondsBehind, liveWindow);\n      } else {\n        content = formatTime(time, duration);\n      }\n      this.update(seekBarRect, seekBarPoint, content);\n      if (cb) {\n        cb();\n      }\n    });\n  }\n}\nComponent$1.registerComponent('TimeTooltip', TimeTooltip);\n\n/**\n * @file play-progress-bar.js\n */\n\n/**\n * Used by {@link SeekBar} to display media playback progress as part of the\n * {@link ProgressControl}.\n *\n * @extends Component\n */\nclass PlayProgressBar extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\n  }\n\n  /**\n   * Create the the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-play-progress vjs-slider-bar'\n    }, {\n      'aria-hidden': 'true'\n    });\n  }\n\n  /**\n   * Enqueues updates to its own DOM as well as the DOM of its\n   * {@link TimeTooltip} child.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n  update(seekBarRect, seekBarPoint) {\n    const timeTooltip = this.getChild('timeTooltip');\n    if (!timeTooltip) {\n      return;\n    }\n    const time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n    timeTooltip.updateTime(seekBarRect, seekBarPoint, time);\n  }\n}\n\n/**\n * Default options for {@link PlayProgressBar}.\n *\n * @type {Object}\n * @private\n */\nPlayProgressBar.prototype.options_ = {\n  children: []\n};\n\n// Time tooltips should not be added to a player on mobile devices\nif (!IS_IOS && !IS_ANDROID) {\n  PlayProgressBar.prototype.options_.children.push('timeTooltip');\n}\nComponent$1.registerComponent('PlayProgressBar', PlayProgressBar);\n\n/**\n * @file mouse-time-display.js\n */\n\n/**\n * The {@link MouseTimeDisplay} component tracks mouse movement over the\n * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}\n * indicating the time which is represented by a given point in the\n * {@link ProgressControl}.\n *\n * @extends Component\n */\nclass MouseTimeDisplay extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\n  }\n\n  /**\n   * Create the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-mouse-display'\n    });\n  }\n\n  /**\n   * Enqueues updates to its own DOM as well as the DOM of its\n   * {@link TimeTooltip} child.\n   *\n   * @param {Object} seekBarRect\n   *        The `ClientRect` for the {@link SeekBar} element.\n   *\n   * @param {number} seekBarPoint\n   *        A number from 0 to 1, representing a horizontal reference point\n   *        from the left edge of the {@link SeekBar}\n   */\n  update(seekBarRect, seekBarPoint) {\n    const time = seekBarPoint * this.player_.duration();\n    this.getChild('timeTooltip').updateTime(seekBarRect, seekBarPoint, time, () => {\n      this.el_.style.left = `${seekBarRect.width * seekBarPoint}px`;\n    });\n  }\n}\n\n/**\n * Default options for `MouseTimeDisplay`\n *\n * @type {Object}\n * @private\n */\nMouseTimeDisplay.prototype.options_ = {\n  children: ['timeTooltip']\n};\nComponent$1.registerComponent('MouseTimeDisplay', MouseTimeDisplay);\n\n/**\n * @file seek-bar.js\n */\n\n// The number of seconds the `step*` functions move the timeline.\nconst STEP_SECONDS = 5;\n\n// The multiplier of STEP_SECONDS that PgUp/PgDown move the timeline.\nconst PAGE_KEY_MULTIPLIER = 12;\n\n/**\n * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}\n * as its `bar`.\n *\n * @extends Slider\n */\nclass SeekBar extends Slider {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.setEventHandlers_();\n  }\n\n  /**\n   * Sets the event handlers\n   *\n   * @private\n   */\n  setEventHandlers_() {\n    this.update_ = bind_(this, this.update);\n    this.update = throttle(this.update_, UPDATE_REFRESH_INTERVAL);\n    this.on(this.player_, ['ended', 'durationchange', 'timeupdate'], this.update);\n    if (this.player_.liveTracker) {\n      this.on(this.player_.liveTracker, 'liveedgechange', this.update);\n    }\n\n    // when playing, let's ensure we smoothly update the play progress bar\n    // via an interval\n    this.updateInterval = null;\n    this.enableIntervalHandler_ = e => this.enableInterval_(e);\n    this.disableIntervalHandler_ = e => this.disableInterval_(e);\n    this.on(this.player_, ['playing'], this.enableIntervalHandler_);\n    this.on(this.player_, ['ended', 'pause', 'waiting'], this.disableIntervalHandler_);\n\n    // we don't need to update the play progress if the document is hidden,\n    // also, this causes the CPU to spike and eventually crash the page on IE11.\n    if ('hidden' in document && 'visibilityState' in document) {\n      this.on(document, 'visibilitychange', this.toggleVisibility_);\n    }\n  }\n  toggleVisibility_(e) {\n    if (document.visibilityState === 'hidden') {\n      this.cancelNamedAnimationFrame('SeekBar#update');\n      this.cancelNamedAnimationFrame('Slider#update');\n      this.disableInterval_(e);\n    } else {\n      if (!this.player_.ended() && !this.player_.paused()) {\n        this.enableInterval_();\n      }\n\n      // we just switched back to the page and someone may be looking, so, update ASAP\n      this.update();\n    }\n  }\n  enableInterval_() {\n    if (this.updateInterval) {\n      return;\n    }\n    this.updateInterval = this.setInterval(this.update, UPDATE_REFRESH_INTERVAL);\n  }\n  disableInterval_(e) {\n    if (this.player_.liveTracker && this.player_.liveTracker.isLive() && e && e.type !== 'ended') {\n      return;\n    }\n    if (!this.updateInterval) {\n      return;\n    }\n    this.clearInterval(this.updateInterval);\n    this.updateInterval = null;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-progress-holder'\n    }, {\n      'aria-label': this.localize('Progress Bar')\n    });\n  }\n\n  /**\n   * This function updates the play progress bar and accessibility\n   * attributes to whatever is passed in.\n   *\n   * @param {Event} [event]\n   *        The `timeupdate` or `ended` event that caused this to run.\n   *\n   * @listens Player#timeupdate\n   *\n   * @return {number}\n   *          The current percent at a number from 0-1\n   */\n  update(event) {\n    // ignore updates while the tab is hidden\n    if (document.visibilityState === 'hidden') {\n      return;\n    }\n    const percent = super.update();\n    this.requestNamedAnimationFrame('SeekBar#update', () => {\n      const currentTime = this.player_.ended() ? this.player_.duration() : this.getCurrentTime_();\n      const liveTracker = this.player_.liveTracker;\n      let duration = this.player_.duration();\n      if (liveTracker && liveTracker.isLive()) {\n        duration = this.player_.liveTracker.liveCurrentTime();\n      }\n      if (this.percent_ !== percent) {\n        // machine readable value of progress bar (percentage complete)\n        this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2));\n        this.percent_ = percent;\n      }\n      if (this.currentTime_ !== currentTime || this.duration_ !== duration) {\n        // human readable value of progress bar (time complete)\n        this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(currentTime, duration), formatTime(duration, duration)], '{1} of {2}'));\n        this.currentTime_ = currentTime;\n        this.duration_ = duration;\n      }\n\n      // update the progress bar time tooltip with the current time\n      if (this.bar) {\n        this.bar.update(getBoundingClientRect(this.el()), this.getProgress());\n      }\n    });\n    return percent;\n  }\n\n  /**\n   * Prevent liveThreshold from causing seeks to seem like they\n   * are not happening from a user perspective.\n   *\n   * @param {number} ct\n   *        current time to seek to\n   */\n  userSeek_(ct) {\n    if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {\n      this.player_.liveTracker.nextSeekedFromUser();\n    }\n    this.player_.currentTime(ct);\n  }\n\n  /**\n   * Get the value of current time but allows for smooth scrubbing,\n   * when player can't keep up.\n   *\n   * @return {number}\n   *         The current time value to display\n   *\n   * @private\n   */\n  getCurrentTime_() {\n    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();\n  }\n\n  /**\n   * Get the percentage of media played so far.\n   *\n   * @return {number}\n   *         The percentage of media played so far (0 to 1).\n   */\n  getPercent() {\n    const currentTime = this.getCurrentTime_();\n    let percent;\n    const liveTracker = this.player_.liveTracker;\n    if (liveTracker && liveTracker.isLive()) {\n      percent = (currentTime - liveTracker.seekableStart()) / liveTracker.liveWindow();\n\n      // prevent the percent from changing at the live edge\n      if (liveTracker.atLiveEdge()) {\n        percent = 1;\n      }\n    } else {\n      percent = currentTime / this.player_.duration();\n    }\n    return percent;\n  }\n\n  /**\n   * Handle mouse down on seek bar\n   *\n   * @param {MouseEvent} event\n   *        The `mousedown` event that caused this to run.\n   *\n   * @listens mousedown\n   */\n  handleMouseDown(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n\n    // Stop event propagation to prevent double fire in progress-control.js\n    event.stopPropagation();\n    this.videoWasPlaying = !this.player_.paused();\n    this.player_.pause();\n    super.handleMouseDown(event);\n  }\n\n  /**\n   * Handle mouse move on seek bar\n   *\n   * @param {MouseEvent} event\n   *        The `mousemove` event that caused this to run.\n   * @param {boolean} mouseDown this is a flag that should be set to true if `handleMouseMove` is called directly. It allows us to skip things that should not happen if coming from mouse down but should happen on regular mouse move handler. Defaults to false\n   *\n   * @listens mousemove\n   */\n  handleMouseMove(event, mouseDown = false) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n    if (!mouseDown && !this.player_.scrubbing()) {\n      this.player_.scrubbing(true);\n    }\n    let newTime;\n    const distance = this.calculateDistance(event);\n    const liveTracker = this.player_.liveTracker;\n    if (!liveTracker || !liveTracker.isLive()) {\n      newTime = distance * this.player_.duration();\n\n      // Don't let video end while scrubbing.\n      if (newTime === this.player_.duration()) {\n        newTime = newTime - 0.1;\n      }\n    } else {\n      if (distance >= 0.99) {\n        liveTracker.seekToLiveEdge();\n        return;\n      }\n      const seekableStart = liveTracker.seekableStart();\n      const seekableEnd = liveTracker.liveCurrentTime();\n      newTime = seekableStart + distance * liveTracker.liveWindow();\n\n      // Don't let video end while scrubbing.\n      if (newTime >= seekableEnd) {\n        newTime = seekableEnd;\n      }\n\n      // Compensate for precision differences so that currentTime is not less\n      // than seekable start\n      if (newTime <= seekableStart) {\n        newTime = seekableStart + 0.1;\n      }\n\n      // On android seekableEnd can be Infinity sometimes,\n      // this will cause newTime to be Infinity, which is\n      // not a valid currentTime.\n      if (newTime === Infinity) {\n        return;\n      }\n    }\n\n    // Set new time (tell player to seek to new time)\n    this.userSeek_(newTime);\n  }\n  enable() {\n    super.enable();\n    const mouseTimeDisplay = this.getChild('mouseTimeDisplay');\n    if (!mouseTimeDisplay) {\n      return;\n    }\n    mouseTimeDisplay.show();\n  }\n  disable() {\n    super.disable();\n    const mouseTimeDisplay = this.getChild('mouseTimeDisplay');\n    if (!mouseTimeDisplay) {\n      return;\n    }\n    mouseTimeDisplay.hide();\n  }\n\n  /**\n   * Handle mouse up on seek bar\n   *\n   * @param {MouseEvent} event\n   *        The `mouseup` event that caused this to run.\n   *\n   * @listens mouseup\n   */\n  handleMouseUp(event) {\n    super.handleMouseUp(event);\n\n    // Stop event propagation to prevent double fire in progress-control.js\n    if (event) {\n      event.stopPropagation();\n    }\n    this.player_.scrubbing(false);\n\n    /**\n     * Trigger timeupdate because we're done seeking and the time has changed.\n     * This is particularly useful for if the player is paused to time the time displays.\n     *\n     * @event Tech#timeupdate\n     * @type {Event}\n     */\n    this.player_.trigger({\n      type: 'timeupdate',\n      target: this,\n      manuallyTriggered: true\n    });\n    if (this.videoWasPlaying) {\n      silencePromise(this.player_.play());\n    } else {\n      // We're done seeking and the time has changed.\n      // If the player is paused, make sure we display the correct time on the seek bar.\n      this.update_();\n    }\n  }\n\n  /**\n   * Move more quickly fast forward for keyboard-only users\n   */\n  stepForward() {\n    this.userSeek_(this.player_.currentTime() + STEP_SECONDS);\n  }\n\n  /**\n   * Move more quickly rewind for keyboard-only users\n   */\n  stepBack() {\n    this.userSeek_(this.player_.currentTime() - STEP_SECONDS);\n  }\n\n  /**\n   * Toggles the playback state of the player\n   * This gets called when enter or space is used on the seekbar\n   *\n   * @param {KeyboardEvent} event\n   *        The `keydown` event that caused this function to be called\n   *\n   */\n  handleAction(event) {\n    if (this.player_.paused()) {\n      this.player_.play();\n    } else {\n      this.player_.pause();\n    }\n  }\n\n  /**\n   * Called when this SeekBar has focus and a key gets pressed down.\n   * Supports the following keys:\n   *\n   *   Space or Enter key fire a click event\n   *   Home key moves to start of the timeline\n   *   End key moves to end of the timeline\n   *   Digit \"0\" through \"9\" keys move to 0%, 10% ... 80%, 90% of the timeline\n   *   PageDown key moves back a larger step than ArrowDown\n   *   PageUp key moves forward a large step\n   *\n   * @param {KeyboardEvent} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    const liveTracker = this.player_.liveTracker;\n    if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.handleAction(event);\n    } else if (keycode.isEventKey(event, 'Home')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.userSeek_(0);\n    } else if (keycode.isEventKey(event, 'End')) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (liveTracker && liveTracker.isLive()) {\n        this.userSeek_(liveTracker.liveCurrentTime());\n      } else {\n        this.userSeek_(this.player_.duration());\n      }\n    } else if (/^[0-9]$/.test(keycode(event))) {\n      event.preventDefault();\n      event.stopPropagation();\n      const gotoFraction = (keycode.codes[keycode(event)] - keycode.codes['0']) * 10.0 / 100.0;\n      if (liveTracker && liveTracker.isLive()) {\n        this.userSeek_(liveTracker.seekableStart() + liveTracker.liveWindow() * gotoFraction);\n      } else {\n        this.userSeek_(this.player_.duration() * gotoFraction);\n      }\n    } else if (keycode.isEventKey(event, 'PgDn')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.userSeek_(this.player_.currentTime() - STEP_SECONDS * PAGE_KEY_MULTIPLIER);\n    } else if (keycode.isEventKey(event, 'PgUp')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.userSeek_(this.player_.currentTime() + STEP_SECONDS * PAGE_KEY_MULTIPLIER);\n    } else {\n      // Pass keydown handling up for unsupported keys\n      super.handleKeyDown(event);\n    }\n  }\n  dispose() {\n    this.disableInterval_();\n    this.off(this.player_, ['ended', 'durationchange', 'timeupdate'], this.update);\n    if (this.player_.liveTracker) {\n      this.off(this.player_.liveTracker, 'liveedgechange', this.update);\n    }\n    this.off(this.player_, ['playing'], this.enableIntervalHandler_);\n    this.off(this.player_, ['ended', 'pause', 'waiting'], this.disableIntervalHandler_);\n\n    // we don't need to update the play progress if the document is hidden,\n    // also, this causes the CPU to spike and eventually crash the page on IE11.\n    if ('hidden' in document && 'visibilityState' in document) {\n      this.off(document, 'visibilitychange', this.toggleVisibility_);\n    }\n    super.dispose();\n  }\n}\n\n/**\n * Default options for the `SeekBar`\n *\n * @type {Object}\n * @private\n */\nSeekBar.prototype.options_ = {\n  children: ['loadProgressBar', 'playProgressBar'],\n  barName: 'playProgressBar'\n};\n\n// MouseTimeDisplay tooltips should not be added to a player on mobile devices\nif (!IS_IOS && !IS_ANDROID) {\n  SeekBar.prototype.options_.children.splice(1, 0, 'mouseTimeDisplay');\n}\nComponent$1.registerComponent('SeekBar', SeekBar);\n\n/**\n * @file progress-control.js\n */\n\n/**\n * The Progress Control component contains the seek bar, load progress,\n * and play progress.\n *\n * @extends Component\n */\nclass ProgressControl extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.handleMouseMove = throttle(bind_(this, this.handleMouseMove), UPDATE_REFRESH_INTERVAL);\n    this.throttledHandleMouseSeek = throttle(bind_(this, this.handleMouseSeek), UPDATE_REFRESH_INTERVAL);\n    this.handleMouseUpHandler_ = e => this.handleMouseUp(e);\n    this.handleMouseDownHandler_ = e => this.handleMouseDown(e);\n    this.enable();\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-progress-control vjs-control'\n    });\n  }\n\n  /**\n   * When the mouse moves over the `ProgressControl`, the pointer position\n   * gets passed down to the `MouseTimeDisplay` component.\n   *\n   * @param {Event} event\n   *        The `mousemove` event that caused this function to run.\n   *\n   * @listen mousemove\n   */\n  handleMouseMove(event) {\n    const seekBar = this.getChild('seekBar');\n    if (!seekBar) {\n      return;\n    }\n    const playProgressBar = seekBar.getChild('playProgressBar');\n    const mouseTimeDisplay = seekBar.getChild('mouseTimeDisplay');\n    if (!playProgressBar && !mouseTimeDisplay) {\n      return;\n    }\n    const seekBarEl = seekBar.el();\n    const seekBarRect = findPosition(seekBarEl);\n    let seekBarPoint = getPointerPosition(seekBarEl, event).x;\n\n    // The default skin has a gap on either side of the `SeekBar`. This means\n    // that it's possible to trigger this behavior outside the boundaries of\n    // the `SeekBar`. This ensures we stay within it at all times.\n    seekBarPoint = clamp(seekBarPoint, 0, 1);\n    if (mouseTimeDisplay) {\n      mouseTimeDisplay.update(seekBarRect, seekBarPoint);\n    }\n    if (playProgressBar) {\n      playProgressBar.update(seekBarRect, seekBar.getProgress());\n    }\n  }\n\n  /**\n   * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.\n   *\n   * @method ProgressControl#throttledHandleMouseSeek\n   * @param {Event} event\n   *        The `mousemove` event that caused this function to run.\n   *\n   * @listen mousemove\n   * @listen touchmove\n   */\n\n  /**\n   * Handle `mousemove` or `touchmove` events on the `ProgressControl`.\n   *\n   * @param {Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousemove\n   * @listens touchmove\n   */\n  handleMouseSeek(event) {\n    const seekBar = this.getChild('seekBar');\n    if (seekBar) {\n      seekBar.handleMouseMove(event);\n    }\n  }\n\n  /**\n   * Are controls are currently enabled for this progress control.\n   *\n   * @return {boolean}\n   *         true if controls are enabled, false otherwise\n   */\n  enabled() {\n    return this.enabled_;\n  }\n\n  /**\n   * Disable all controls on the progress control and its children\n   */\n  disable() {\n    this.children().forEach(child => child.disable && child.disable());\n    if (!this.enabled()) {\n      return;\n    }\n    this.off(['mousedown', 'touchstart'], this.handleMouseDownHandler_);\n    this.off(this.el_, 'mousemove', this.handleMouseMove);\n    this.removeListenersAddedOnMousedownAndTouchstart();\n    this.addClass('disabled');\n    this.enabled_ = false;\n\n    // Restore normal playback state if controls are disabled while scrubbing\n    if (this.player_.scrubbing()) {\n      const seekBar = this.getChild('seekBar');\n      this.player_.scrubbing(false);\n      if (seekBar.videoWasPlaying) {\n        silencePromise(this.player_.play());\n      }\n    }\n  }\n\n  /**\n   * Enable all controls on the progress control and its children\n   */\n  enable() {\n    this.children().forEach(child => child.enable && child.enable());\n    if (this.enabled()) {\n      return;\n    }\n    this.on(['mousedown', 'touchstart'], this.handleMouseDownHandler_);\n    this.on(this.el_, 'mousemove', this.handleMouseMove);\n    this.removeClass('disabled');\n    this.enabled_ = true;\n  }\n\n  /**\n   * Cleanup listeners after the user finishes interacting with the progress controls\n   */\n  removeListenersAddedOnMousedownAndTouchstart() {\n    const doc = this.el_.ownerDocument;\n    this.off(doc, 'mousemove', this.throttledHandleMouseSeek);\n    this.off(doc, 'touchmove', this.throttledHandleMouseSeek);\n    this.off(doc, 'mouseup', this.handleMouseUpHandler_);\n    this.off(doc, 'touchend', this.handleMouseUpHandler_);\n  }\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `ProgressControl`.\n   *\n   * @param {Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n  handleMouseDown(event) {\n    const doc = this.el_.ownerDocument;\n    const seekBar = this.getChild('seekBar');\n    if (seekBar) {\n      seekBar.handleMouseDown(event);\n    }\n    this.on(doc, 'mousemove', this.throttledHandleMouseSeek);\n    this.on(doc, 'touchmove', this.throttledHandleMouseSeek);\n    this.on(doc, 'mouseup', this.handleMouseUpHandler_);\n    this.on(doc, 'touchend', this.handleMouseUpHandler_);\n  }\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `ProgressControl`.\n   *\n   * @param {Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   */\n  handleMouseUp(event) {\n    const seekBar = this.getChild('seekBar');\n    if (seekBar) {\n      seekBar.handleMouseUp(event);\n    }\n    this.removeListenersAddedOnMousedownAndTouchstart();\n  }\n}\n\n/**\n * Default options for `ProgressControl`\n *\n * @type {Object}\n * @private\n */\nProgressControl.prototype.options_ = {\n  children: ['seekBar']\n};\nComponent$1.registerComponent('ProgressControl', ProgressControl);\n\n/**\n * @file picture-in-picture-toggle.js\n */\n\n/**\n * Toggle Picture-in-Picture mode\n *\n * @extends Button\n */\nclass PictureInPictureToggle extends Button {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @listens Player#enterpictureinpicture\n   * @listens Player#leavepictureinpicture\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.on(player, ['enterpictureinpicture', 'leavepictureinpicture'], e => this.handlePictureInPictureChange(e));\n    this.on(player, ['disablepictureinpicturechanged', 'loadedmetadata'], e => this.handlePictureInPictureEnabledChange(e));\n    this.on(player, ['loadedmetadata', 'audioonlymodechange', 'audiopostermodechange'], () => {\n      // This audio detection will not detect HLS or DASH audio-only streams because there was no reliable way to detect them at the time\n      const isSourceAudio = player.currentType().substring(0, 5) === 'audio';\n      if (isSourceAudio || player.audioPosterMode() || player.audioOnlyMode()) {\n        if (player.isInPictureInPicture()) {\n          player.exitPictureInPicture();\n        }\n        this.hide();\n      } else {\n        this.show();\n      }\n    });\n\n    // TODO: Deactivate button on player emptied event.\n    this.disable();\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-picture-in-picture-control ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Enables or disables button based on availability of a Picture-In-Picture mode.\n   *\n   * Enabled if\n   * - `player.options().enableDocumentPictureInPicture` is true and\n   *   window.documentPictureInPicture is available; or\n   * - `player.disablePictureInPicture()` is false and\n   *   element.requestPictureInPicture is available\n   */\n  handlePictureInPictureEnabledChange() {\n    if (document.pictureInPictureEnabled && this.player_.disablePictureInPicture() === false || this.player_.options_.enableDocumentPictureInPicture && 'documentPictureInPicture' in window$1) {\n      this.enable();\n    } else {\n      this.disable();\n    }\n  }\n\n  /**\n   * Handles enterpictureinpicture and leavepictureinpicture on the player and change control text accordingly.\n   *\n   * @param {Event} [event]\n   *        The {@link Player#enterpictureinpicture} or {@link Player#leavepictureinpicture} event that caused this function to be\n   *        called.\n   *\n   * @listens Player#enterpictureinpicture\n   * @listens Player#leavepictureinpicture\n   */\n  handlePictureInPictureChange(event) {\n    if (this.player_.isInPictureInPicture()) {\n      this.controlText('Exit Picture-in-Picture');\n    } else {\n      this.controlText('Picture-in-Picture');\n    }\n    this.handlePictureInPictureEnabledChange();\n  }\n\n  /**\n   * This gets called when an `PictureInPictureToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    if (!this.player_.isInPictureInPicture()) {\n      this.player_.requestPictureInPicture();\n    } else {\n      this.player_.exitPictureInPicture();\n    }\n  }\n}\n\n/**\n * The text that should display over the `PictureInPictureToggle`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nPictureInPictureToggle.prototype.controlText_ = 'Picture-in-Picture';\nComponent$1.registerComponent('PictureInPictureToggle', PictureInPictureToggle);\n\n/**\n * @file fullscreen-toggle.js\n */\n\n/**\n * Toggle fullscreen video\n *\n * @extends Button\n */\nclass FullscreenToggle extends Button {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.on(player, 'fullscreenchange', e => this.handleFullscreenChange(e));\n    if (document[player.fsApi_.fullscreenEnabled] === false) {\n      this.disable();\n    }\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-fullscreen-control ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Handles fullscreenchange on the player and change control text accordingly.\n   *\n   * @param {Event} [event]\n   *        The {@link Player#fullscreenchange} event that caused this function to be\n   *        called.\n   *\n   * @listens Player#fullscreenchange\n   */\n  handleFullscreenChange(event) {\n    if (this.player_.isFullscreen()) {\n      this.controlText('Exit Fullscreen');\n    } else {\n      this.controlText('Fullscreen');\n    }\n  }\n\n  /**\n   * This gets called when an `FullscreenToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    if (!this.player_.isFullscreen()) {\n      this.player_.requestFullscreen();\n    } else {\n      this.player_.exitFullscreen();\n    }\n  }\n}\n\n/**\n * The text that should display over the `FullscreenToggle`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nFullscreenToggle.prototype.controlText_ = 'Fullscreen';\nComponent$1.registerComponent('FullscreenToggle', FullscreenToggle);\n\n/**\n * Check if volume control is supported and if it isn't hide the\n * `Component` that was passed  using the `vjs-hidden` class.\n *\n * @param { import('../../component').default } self\n *        The component that should be hidden if volume is unsupported\n *\n * @param { import('../../player').default } player\n *        A reference to the player\n *\n * @private\n */\nconst checkVolumeSupport = function (self, player) {\n  // hide volume controls when they're not supported by the current tech\n  if (player.tech_ && !player.tech_.featuresVolumeControl) {\n    self.addClass('vjs-hidden');\n  }\n  self.on(player, 'loadstart', function () {\n    if (!player.tech_.featuresVolumeControl) {\n      self.addClass('vjs-hidden');\n    } else {\n      self.removeClass('vjs-hidden');\n    }\n  });\n};\n\n/**\n * @file volume-level.js\n */\n\n/**\n * Shows volume level\n *\n * @extends Component\n */\nclass VolumeLevel extends Component$1 {\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const el = super.createEl('div', {\n      className: 'vjs-volume-level'\n    });\n    el.appendChild(super.createEl('span', {\n      className: 'vjs-control-text'\n    }));\n    return el;\n  }\n}\nComponent$1.registerComponent('VolumeLevel', VolumeLevel);\n\n/**\n * @file volume-level-tooltip.js\n */\n\n/**\n * Volume level tooltips display a volume above or side by side the volume bar.\n *\n * @extends Component\n */\nclass VolumeLevelTooltip extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\n  }\n\n  /**\n   * Create the volume tooltip DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-volume-tooltip'\n    }, {\n      'aria-hidden': 'true'\n    });\n  }\n\n  /**\n   * Updates the position of the tooltip relative to the `VolumeBar` and\n   * its content text.\n   *\n   * @param {Object} rangeBarRect\n   *        The `ClientRect` for the {@link VolumeBar} element.\n   *\n   * @param {number} rangeBarPoint\n   *        A number from 0 to 1, representing a horizontal/vertical reference point\n   *        from the left edge of the {@link VolumeBar}\n   *\n   * @param {boolean} vertical\n   *        Referees to the Volume control position\n   *        in the control bar{@link VolumeControl}\n   *\n   */\n  update(rangeBarRect, rangeBarPoint, vertical, content) {\n    if (!vertical) {\n      const tooltipRect = getBoundingClientRect(this.el_);\n      const playerRect = getBoundingClientRect(this.player_.el());\n      const volumeBarPointPx = rangeBarRect.width * rangeBarPoint;\n      if (!playerRect || !tooltipRect) {\n        return;\n      }\n      const spaceLeftOfPoint = rangeBarRect.left - playerRect.left + volumeBarPointPx;\n      const spaceRightOfPoint = rangeBarRect.width - volumeBarPointPx + (playerRect.right - rangeBarRect.right);\n      let pullTooltipBy = tooltipRect.width / 2;\n      if (spaceLeftOfPoint < pullTooltipBy) {\n        pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;\n      } else if (spaceRightOfPoint < pullTooltipBy) {\n        pullTooltipBy = spaceRightOfPoint;\n      }\n      if (pullTooltipBy < 0) {\n        pullTooltipBy = 0;\n      } else if (pullTooltipBy > tooltipRect.width) {\n        pullTooltipBy = tooltipRect.width;\n      }\n      this.el_.style.right = `-${pullTooltipBy}px`;\n    }\n    this.write(`${content}%`);\n  }\n\n  /**\n   * Write the volume to the tooltip DOM element.\n   *\n   * @param {string} content\n   *        The formatted volume for the tooltip.\n   */\n  write(content) {\n    textContent(this.el_, content);\n  }\n\n  /**\n   * Updates the position of the volume tooltip relative to the `VolumeBar`.\n   *\n   * @param {Object} rangeBarRect\n   *        The `ClientRect` for the {@link VolumeBar} element.\n   *\n   * @param {number} rangeBarPoint\n   *        A number from 0 to 1, representing a horizontal/vertical reference point\n   *        from the left edge of the {@link VolumeBar}\n   *\n   * @param {boolean} vertical\n   *        Referees to the Volume control position\n   *        in the control bar{@link VolumeControl}\n   *\n   * @param {number} volume\n   *        The volume level to update the tooltip to\n   *\n   * @param {Function} cb\n   *        A function that will be called during the request animation frame\n   *        for tooltips that need to do additional animations from the default\n   */\n  updateVolume(rangeBarRect, rangeBarPoint, vertical, volume, cb) {\n    this.requestNamedAnimationFrame('VolumeLevelTooltip#updateVolume', () => {\n      this.update(rangeBarRect, rangeBarPoint, vertical, volume.toFixed(0));\n      if (cb) {\n        cb();\n      }\n    });\n  }\n}\nComponent$1.registerComponent('VolumeLevelTooltip', VolumeLevelTooltip);\n\n/**\n * @file mouse-volume-level-display.js\n */\n\n/**\n * The {@link MouseVolumeLevelDisplay} component tracks mouse movement over the\n * {@link VolumeControl}. It displays an indicator and a {@link VolumeLevelTooltip}\n * indicating the volume level which is represented by a given point in the\n * {@link VolumeBar}.\n *\n * @extends Component\n */\nclass MouseVolumeLevelDisplay extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The {@link Player} that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.update = throttle(bind_(this, this.update), UPDATE_REFRESH_INTERVAL);\n  }\n\n  /**\n   * Create the DOM element for this class.\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-mouse-display'\n    });\n  }\n\n  /**\n   * Enquires updates to its own DOM as well as the DOM of its\n   * {@link VolumeLevelTooltip} child.\n   *\n   * @param {Object} rangeBarRect\n   *        The `ClientRect` for the {@link VolumeBar} element.\n   *\n   * @param {number} rangeBarPoint\n   *        A number from 0 to 1, representing a horizontal/vertical reference point\n   *        from the left edge of the {@link VolumeBar}\n   *\n   * @param {boolean} vertical\n   *        Referees to the Volume control position\n   *        in the control bar{@link VolumeControl}\n   *\n   */\n  update(rangeBarRect, rangeBarPoint, vertical) {\n    const volume = 100 * rangeBarPoint;\n    this.getChild('volumeLevelTooltip').updateVolume(rangeBarRect, rangeBarPoint, vertical, volume, () => {\n      if (vertical) {\n        this.el_.style.bottom = `${rangeBarRect.height * rangeBarPoint}px`;\n      } else {\n        this.el_.style.left = `${rangeBarRect.width * rangeBarPoint}px`;\n      }\n    });\n  }\n}\n\n/**\n * Default options for `MouseVolumeLevelDisplay`\n *\n * @type {Object}\n * @private\n */\nMouseVolumeLevelDisplay.prototype.options_ = {\n  children: ['volumeLevelTooltip']\n};\nComponent$1.registerComponent('MouseVolumeLevelDisplay', MouseVolumeLevelDisplay);\n\n/**\n * @file volume-bar.js\n */\n\n/**\n * The bar that contains the volume level and can be clicked on to adjust the level\n *\n * @extends Slider\n */\nclass VolumeBar extends Slider {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.on('slideractive', e => this.updateLastVolume_(e));\n    this.on(player, 'volumechange', e => this.updateARIAAttributes(e));\n    player.ready(() => this.updateARIAAttributes());\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-volume-bar vjs-slider-bar'\n    }, {\n      'aria-label': this.localize('Volume Level'),\n      'aria-live': 'polite'\n    });\n  }\n\n  /**\n   * Handle mouse down on volume bar\n   *\n   * @param {Event} event\n   *        The `mousedown` event that caused this to run.\n   *\n   * @listens mousedown\n   */\n  handleMouseDown(event) {\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n    super.handleMouseDown(event);\n  }\n\n  /**\n   * Handle movement events on the {@link VolumeMenuButton}.\n   *\n   * @param {Event} event\n   *        The event that caused this function to run.\n   *\n   * @listens mousemove\n   */\n  handleMouseMove(event) {\n    const mouseVolumeLevelDisplay = this.getChild('mouseVolumeLevelDisplay');\n    if (mouseVolumeLevelDisplay) {\n      const volumeBarEl = this.el();\n      const volumeBarRect = getBoundingClientRect(volumeBarEl);\n      const vertical = this.vertical();\n      let volumeBarPoint = getPointerPosition(volumeBarEl, event);\n      volumeBarPoint = vertical ? volumeBarPoint.y : volumeBarPoint.x;\n      // The default skin has a gap on either side of the `VolumeBar`. This means\n      // that it's possible to trigger this behavior outside the boundaries of\n      // the `VolumeBar`. This ensures we stay within it at all times.\n      volumeBarPoint = clamp(volumeBarPoint, 0, 1);\n      mouseVolumeLevelDisplay.update(volumeBarRect, volumeBarPoint, vertical);\n    }\n    if (!isSingleLeftClick(event)) {\n      return;\n    }\n    this.checkMuted();\n    this.player_.volume(this.calculateDistance(event));\n  }\n\n  /**\n   * If the player is muted unmute it.\n   */\n  checkMuted() {\n    if (this.player_.muted()) {\n      this.player_.muted(false);\n    }\n  }\n\n  /**\n   * Get percent of volume level\n   *\n   * @return {number}\n   *         Volume level percent as a decimal number.\n   */\n  getPercent() {\n    if (this.player_.muted()) {\n      return 0;\n    }\n    return this.player_.volume();\n  }\n\n  /**\n   * Increase volume level for keyboard users\n   */\n  stepForward() {\n    this.checkMuted();\n    this.player_.volume(this.player_.volume() + 0.1);\n  }\n\n  /**\n   * Decrease volume level for keyboard users\n   */\n  stepBack() {\n    this.checkMuted();\n    this.player_.volume(this.player_.volume() - 0.1);\n  }\n\n  /**\n   * Update ARIA accessibility attributes\n   *\n   * @param {Event} [event]\n   *        The `volumechange` event that caused this function to run.\n   *\n   * @listens Player#volumechange\n   */\n  updateARIAAttributes(event) {\n    const ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();\n    this.el_.setAttribute('aria-valuenow', ariaValue);\n    this.el_.setAttribute('aria-valuetext', ariaValue + '%');\n  }\n\n  /**\n   * Returns the current value of the player volume as a percentage\n   *\n   * @private\n   */\n  volumeAsPercentage_() {\n    return Math.round(this.player_.volume() * 100);\n  }\n\n  /**\n   * When user starts dragging the VolumeBar, store the volume and listen for\n   * the end of the drag. When the drag ends, if the volume was set to zero,\n   * set lastVolume to the stored volume.\n   *\n   * @listens slideractive\n   * @private\n   */\n  updateLastVolume_() {\n    const volumeBeforeDrag = this.player_.volume();\n    this.one('sliderinactive', () => {\n      if (this.player_.volume() === 0) {\n        this.player_.lastVolume_(volumeBeforeDrag);\n      }\n    });\n  }\n}\n\n/**\n * Default options for the `VolumeBar`\n *\n * @type {Object}\n * @private\n */\nVolumeBar.prototype.options_ = {\n  children: ['volumeLevel'],\n  barName: 'volumeLevel'\n};\n\n// MouseVolumeLevelDisplay tooltip should not be added to a player on mobile devices\nif (!IS_IOS && !IS_ANDROID) {\n  VolumeBar.prototype.options_.children.splice(0, 0, 'mouseVolumeLevelDisplay');\n}\n\n/**\n * Call the update event for this Slider when this event happens on the player.\n *\n * @type {string}\n */\nVolumeBar.prototype.playerEvent = 'volumechange';\nComponent$1.registerComponent('VolumeBar', VolumeBar);\n\n/**\n * @file volume-control.js\n */\n\n/**\n * The component for controlling the volume level\n *\n * @extends Component\n */\nclass VolumeControl extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  constructor(player, options = {}) {\n    options.vertical = options.vertical || false;\n\n    // Pass the vertical option down to the VolumeBar if\n    // the VolumeBar is turned on.\n    if (typeof options.volumeBar === 'undefined' || isPlain(options.volumeBar)) {\n      options.volumeBar = options.volumeBar || {};\n      options.volumeBar.vertical = options.vertical;\n    }\n    super(player, options);\n\n    // hide this control if volume support is missing\n    checkVolumeSupport(this, player);\n    this.throttledHandleMouseMove = throttle(bind_(this, this.handleMouseMove), UPDATE_REFRESH_INTERVAL);\n    this.handleMouseUpHandler_ = e => this.handleMouseUp(e);\n    this.on('mousedown', e => this.handleMouseDown(e));\n    this.on('touchstart', e => this.handleMouseDown(e));\n    this.on('mousemove', e => this.handleMouseMove(e));\n\n    // while the slider is active (the mouse has been pressed down and\n    // is dragging) or in focus we do not want to hide the VolumeBar\n    this.on(this.volumeBar, ['focus', 'slideractive'], () => {\n      this.volumeBar.addClass('vjs-slider-active');\n      this.addClass('vjs-slider-active');\n      this.trigger('slideractive');\n    });\n    this.on(this.volumeBar, ['blur', 'sliderinactive'], () => {\n      this.volumeBar.removeClass('vjs-slider-active');\n      this.removeClass('vjs-slider-active');\n      this.trigger('sliderinactive');\n    });\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    let orientationClass = 'vjs-volume-horizontal';\n    if (this.options_.vertical) {\n      orientationClass = 'vjs-volume-vertical';\n    }\n    return super.createEl('div', {\n      className: `vjs-volume-control vjs-control ${orientationClass}`\n    });\n  }\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\n   *\n   * @param {Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n  handleMouseDown(event) {\n    const doc = this.el_.ownerDocument;\n    this.on(doc, 'mousemove', this.throttledHandleMouseMove);\n    this.on(doc, 'touchmove', this.throttledHandleMouseMove);\n    this.on(doc, 'mouseup', this.handleMouseUpHandler_);\n    this.on(doc, 'touchend', this.handleMouseUpHandler_);\n  }\n\n  /**\n   * Handle `mouseup` or `touchend` events on the `VolumeControl`.\n   *\n   * @param {Event} event\n   *        `mouseup` or `touchend` event that triggered this function.\n   *\n   * @listens touchend\n   * @listens mouseup\n   */\n  handleMouseUp(event) {\n    const doc = this.el_.ownerDocument;\n    this.off(doc, 'mousemove', this.throttledHandleMouseMove);\n    this.off(doc, 'touchmove', this.throttledHandleMouseMove);\n    this.off(doc, 'mouseup', this.handleMouseUpHandler_);\n    this.off(doc, 'touchend', this.handleMouseUpHandler_);\n  }\n\n  /**\n   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.\n   *\n   * @param {Event} event\n   *        `mousedown` or `touchstart` event that triggered this function\n   *\n   * @listens mousedown\n   * @listens touchstart\n   */\n  handleMouseMove(event) {\n    this.volumeBar.handleMouseMove(event);\n  }\n}\n\n/**\n * Default options for the `VolumeControl`\n *\n * @type {Object}\n * @private\n */\nVolumeControl.prototype.options_ = {\n  children: ['volumeBar']\n};\nComponent$1.registerComponent('VolumeControl', VolumeControl);\n\n/**\n * Check if muting volume is supported and if it isn't hide the mute toggle\n * button.\n *\n * @param { import('../../component').default } self\n *        A reference to the mute toggle button\n *\n * @param { import('../../player').default } player\n *        A reference to the player\n *\n * @private\n */\nconst checkMuteSupport = function (self, player) {\n  // hide mute toggle button if it's not supported by the current tech\n  if (player.tech_ && !player.tech_.featuresMuteControl) {\n    self.addClass('vjs-hidden');\n  }\n  self.on(player, 'loadstart', function () {\n    if (!player.tech_.featuresMuteControl) {\n      self.addClass('vjs-hidden');\n    } else {\n      self.removeClass('vjs-hidden');\n    }\n  });\n};\n\n/**\n * @file mute-toggle.js\n */\n\n/**\n * A button component for muting the audio.\n *\n * @extends Button\n */\nclass MuteToggle extends Button {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n\n    // hide this control if volume support is missing\n    checkMuteSupport(this, player);\n    this.on(player, ['loadstart', 'volumechange'], e => this.update(e));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-mute-control ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * This gets called when an `MuteToggle` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    const vol = this.player_.volume();\n    const lastVolume = this.player_.lastVolume_();\n    if (vol === 0) {\n      const volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;\n      this.player_.volume(volumeToSet);\n      this.player_.muted(false);\n    } else {\n      this.player_.muted(this.player_.muted() ? false : true);\n    }\n  }\n\n  /**\n   * Update the `MuteToggle` button based on the state of `volume` and `muted`\n   * on the player.\n   *\n   * @param {Event} [event]\n   *        The {@link Player#loadstart} event if this function was called\n   *        through an event.\n   *\n   * @listens Player#loadstart\n   * @listens Player#volumechange\n   */\n  update(event) {\n    this.updateIcon_();\n    this.updateControlText_();\n  }\n\n  /**\n   * Update the appearance of the `MuteToggle` icon.\n   *\n   * Possible states (given `level` variable below):\n   * - 0: crossed out\n   * - 1: zero bars of volume\n   * - 2: one bar of volume\n   * - 3: two bars of volume\n   *\n   * @private\n   */\n  updateIcon_() {\n    const vol = this.player_.volume();\n    let level = 3;\n\n    // in iOS when a player is loaded with muted attribute\n    // and volume is changed with a native mute button\n    // we want to make sure muted state is updated\n    if (IS_IOS && this.player_.tech_ && this.player_.tech_.el_) {\n      this.player_.muted(this.player_.tech_.el_.muted);\n    }\n    if (vol === 0 || this.player_.muted()) {\n      level = 0;\n    } else if (vol < 0.33) {\n      level = 1;\n    } else if (vol < 0.67) {\n      level = 2;\n    }\n    removeClass(this.el_, [0, 1, 2, 3].reduce((str, i) => str + `${i ? ' ' : ''}vjs-vol-${i}`, ''));\n    addClass(this.el_, `vjs-vol-${level}`);\n  }\n\n  /**\n   * If `muted` has changed on the player, update the control text\n   * (`title` attribute on `vjs-mute-control` element and content of\n   * `vjs-control-text` element).\n   *\n   * @private\n   */\n  updateControlText_() {\n    const soundOff = this.player_.muted() || this.player_.volume() === 0;\n    const text = soundOff ? 'Unmute' : 'Mute';\n    if (this.controlText() !== text) {\n      this.controlText(text);\n    }\n  }\n}\n\n/**\n * The text that should display over the `MuteToggle`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nMuteToggle.prototype.controlText_ = 'Mute';\nComponent$1.registerComponent('MuteToggle', MuteToggle);\n\n/**\n * @file volume-control.js\n */\n\n/**\n * A Component to contain the MuteToggle and VolumeControl so that\n * they can work together.\n *\n * @extends Component\n */\nclass VolumePanel extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  constructor(player, options = {}) {\n    if (typeof options.inline !== 'undefined') {\n      options.inline = options.inline;\n    } else {\n      options.inline = true;\n    }\n\n    // pass the inline option down to the VolumeControl as vertical if\n    // the VolumeControl is on.\n    if (typeof options.volumeControl === 'undefined' || isPlain(options.volumeControl)) {\n      options.volumeControl = options.volumeControl || {};\n      options.volumeControl.vertical = !options.inline;\n    }\n    super(player, options);\n\n    // this handler is used by mouse handler methods below\n    this.handleKeyPressHandler_ = e => this.handleKeyPress(e);\n    this.on(player, ['loadstart'], e => this.volumePanelState_(e));\n    this.on(this.muteToggle, 'keyup', e => this.handleKeyPress(e));\n    this.on(this.volumeControl, 'keyup', e => this.handleVolumeControlKeyUp(e));\n    this.on('keydown', e => this.handleKeyPress(e));\n    this.on('mouseover', e => this.handleMouseOver(e));\n    this.on('mouseout', e => this.handleMouseOut(e));\n\n    // while the slider is active (the mouse has been pressed down and\n    // is dragging) we do not want to hide the VolumeBar\n    this.on(this.volumeControl, ['slideractive'], this.sliderActive_);\n    this.on(this.volumeControl, ['sliderinactive'], this.sliderInactive_);\n  }\n\n  /**\n   * Add vjs-slider-active class to the VolumePanel\n   *\n   * @listens VolumeControl#slideractive\n   * @private\n   */\n  sliderActive_() {\n    this.addClass('vjs-slider-active');\n  }\n\n  /**\n   * Removes vjs-slider-active class to the VolumePanel\n   *\n   * @listens VolumeControl#sliderinactive\n   * @private\n   */\n  sliderInactive_() {\n    this.removeClass('vjs-slider-active');\n  }\n\n  /**\n   * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel\n   * depending on MuteToggle and VolumeControl state\n   *\n   * @listens Player#loadstart\n   * @private\n   */\n  volumePanelState_() {\n    // hide volume panel if neither volume control or mute toggle\n    // are displayed\n    if (this.volumeControl.hasClass('vjs-hidden') && this.muteToggle.hasClass('vjs-hidden')) {\n      this.addClass('vjs-hidden');\n    }\n\n    // if only mute toggle is visible we don't want\n    // volume panel expanding when hovered or active\n    if (this.volumeControl.hasClass('vjs-hidden') && !this.muteToggle.hasClass('vjs-hidden')) {\n      this.addClass('vjs-mute-toggle-only');\n    }\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    let orientationClass = 'vjs-volume-panel-horizontal';\n    if (!this.options_.inline) {\n      orientationClass = 'vjs-volume-panel-vertical';\n    }\n    return super.createEl('div', {\n      className: `vjs-volume-panel vjs-control ${orientationClass}`\n    });\n  }\n\n  /**\n   * Dispose of the `volume-panel` and all child components.\n   */\n  dispose() {\n    this.handleMouseOut();\n    super.dispose();\n  }\n\n  /**\n   * Handles `keyup` events on the `VolumeControl`, looking for ESC, which closes\n   * the volume panel and sets focus on `MuteToggle`.\n   *\n   * @param {Event} event\n   *        The `keyup` event that caused this function to be called.\n   *\n   * @listens keyup\n   */\n  handleVolumeControlKeyUp(event) {\n    if (keycode.isEventKey(event, 'Esc')) {\n      this.muteToggle.focus();\n    }\n  }\n\n  /**\n   * This gets called when a `VolumePanel` gains hover via a `mouseover` event.\n   * Turns on listening for `mouseover` event. When they happen it\n   * calls `this.handleMouseOver`.\n   *\n   * @param {Event} event\n   *        The `mouseover` event that caused this function to be called.\n   *\n   * @listens mouseover\n   */\n  handleMouseOver(event) {\n    this.addClass('vjs-hover');\n    on(document, 'keyup', this.handleKeyPressHandler_);\n  }\n\n  /**\n   * This gets called when a `VolumePanel` gains hover via a `mouseout` event.\n   * Turns on listening for `mouseout` event. When they happen it\n   * calls `this.handleMouseOut`.\n   *\n   * @param {Event} event\n   *        The `mouseout` event that caused this function to be called.\n   *\n   * @listens mouseout\n   */\n  handleMouseOut(event) {\n    this.removeClass('vjs-hover');\n    off(document, 'keyup', this.handleKeyPressHandler_);\n  }\n\n  /**\n   * Handles `keyup` event on the document or `keydown` event on the `VolumePanel`,\n   * looking for ESC, which hides the `VolumeControl`.\n   *\n   * @param {Event} event\n   *        The keypress that triggered this event.\n   *\n   * @listens keydown | keyup\n   */\n  handleKeyPress(event) {\n    if (keycode.isEventKey(event, 'Esc')) {\n      this.handleMouseOut();\n    }\n  }\n}\n\n/**\n * Default options for the `VolumeControl`\n *\n * @type {Object}\n * @private\n */\nVolumePanel.prototype.options_ = {\n  children: ['muteToggle', 'volumeControl']\n};\nComponent$1.registerComponent('VolumePanel', VolumePanel);\n\n/**\n * Button to skip forward a configurable amount of time\n * through a video. Renders in the control bar.\n *\n * e.g. options: {controlBar: {skipButtons: forward: 5}}\n *\n * @extends Button\n */\nclass SkipForward extends Button {\n  constructor(player, options) {\n    super(player, options);\n    this.validOptions = [5, 10, 30];\n    this.skipTime = this.getSkipForwardTime();\n    if (this.skipTime && this.validOptions.includes(this.skipTime)) {\n      this.controlText(this.localize('Skip forward {1} seconds', [this.skipTime]));\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n  getSkipForwardTime() {\n    const playerOptions = this.options_.playerOptions;\n    return playerOptions.controlBar && playerOptions.controlBar.skipButtons && playerOptions.controlBar.skipButtons.forward;\n  }\n  buildCSSClass() {\n    return `vjs-skip-forward-${this.getSkipForwardTime()} ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * On click, skips forward in the duration/seekable range by a configurable amount of seconds.\n   * If the time left in the duration/seekable range is less than the configured 'skip forward' time,\n   * skips to end of duration/seekable range.\n   *\n   * Handle a click on a `SkipForward` button\n   *\n   * @param {EventTarget~Event} event\n   *        The `click` event that caused this function\n   *        to be called\n   */\n  handleClick(event) {\n    const currentVideoTime = this.player_.currentTime();\n    const liveTracker = this.player_.liveTracker;\n    const duration = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : this.player_.duration();\n    let newTime;\n    if (currentVideoTime + this.skipTime <= duration) {\n      newTime = currentVideoTime + this.skipTime;\n    } else {\n      newTime = duration;\n    }\n    this.player_.currentTime(newTime);\n  }\n\n  /**\n   * Update control text on languagechange\n   */\n  handleLanguagechange() {\n    this.controlText(this.localize('Skip forward {1} seconds', [this.skipTime]));\n  }\n}\nComponent$1.registerComponent('SkipForward', SkipForward);\n\n/**\n * Button to skip backward a configurable amount of time\n * through a video. Renders in the control bar.\n *\n *  * e.g. options: {controlBar: {skipButtons: backward: 5}}\n *\n * @extends Button\n */\nclass SkipBackward extends Button {\n  constructor(player, options) {\n    super(player, options);\n    this.validOptions = [5, 10, 30];\n    this.skipTime = this.getSkipBackwardTime();\n    if (this.skipTime && this.validOptions.includes(this.skipTime)) {\n      this.controlText(this.localize('Skip backward {1} seconds', [this.skipTime]));\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n  getSkipBackwardTime() {\n    const playerOptions = this.options_.playerOptions;\n    return playerOptions.controlBar && playerOptions.controlBar.skipButtons && playerOptions.controlBar.skipButtons.backward;\n  }\n  buildCSSClass() {\n    return `vjs-skip-backward-${this.getSkipBackwardTime()} ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * On click, skips backward in the video by a configurable amount of seconds.\n   * If the current time in the video is less than the configured 'skip backward' time,\n   * skips to beginning of video or seekable range.\n   *\n   * Handle a click on a `SkipBackward` button\n   *\n   * @param {EventTarget~Event} event\n   *        The `click` event that caused this function\n   *        to be called\n   */\n  handleClick(event) {\n    const currentVideoTime = this.player_.currentTime();\n    const liveTracker = this.player_.liveTracker;\n    const seekableStart = liveTracker && liveTracker.isLive() && liveTracker.seekableStart();\n    let newTime;\n    if (seekableStart && currentVideoTime - this.skipTime <= seekableStart) {\n      newTime = seekableStart;\n    } else if (currentVideoTime >= this.skipTime) {\n      newTime = currentVideoTime - this.skipTime;\n    } else {\n      newTime = 0;\n    }\n    this.player_.currentTime(newTime);\n  }\n\n  /**\n   * Update control text on languagechange\n   */\n  handleLanguagechange() {\n    this.controlText(this.localize('Skip backward {1} seconds', [this.skipTime]));\n  }\n}\nSkipBackward.prototype.controlText_ = 'Skip Backward';\nComponent$1.registerComponent('SkipBackward', SkipBackward);\n\n/**\n * @file menu.js\n */\n\n/**\n * The Menu component is used to build popup menus, including subtitle and\n * captions selection menus.\n *\n * @extends Component\n */\nclass Menu extends Component$1 {\n  /**\n   * Create an instance of this class.\n   *\n   * @param { import('../player').default } player\n   *        the player that this component should attach to\n   *\n   * @param {Object} [options]\n   *        Object of option names and values\n   *\n   */\n  constructor(player, options) {\n    super(player, options);\n    if (options) {\n      this.menuButton_ = options.menuButton;\n    }\n    this.focusedChild_ = -1;\n    this.on('keydown', e => this.handleKeyDown(e));\n\n    // All the menu item instances share the same blur handler provided by the menu container.\n    this.boundHandleBlur_ = e => this.handleBlur(e);\n    this.boundHandleTapClick_ = e => this.handleTapClick(e);\n  }\n\n  /**\n   * Add event listeners to the {@link MenuItem}.\n   *\n   * @param {Object} component\n   *        The instance of the `MenuItem` to add listeners to.\n   *\n   */\n  addEventListenerForItem(component) {\n    if (!(component instanceof Component$1)) {\n      return;\n    }\n    this.on(component, 'blur', this.boundHandleBlur_);\n    this.on(component, ['tap', 'click'], this.boundHandleTapClick_);\n  }\n\n  /**\n   * Remove event listeners from the {@link MenuItem}.\n   *\n   * @param {Object} component\n   *        The instance of the `MenuItem` to remove listeners.\n   *\n   */\n  removeEventListenerForItem(component) {\n    if (!(component instanceof Component$1)) {\n      return;\n    }\n    this.off(component, 'blur', this.boundHandleBlur_);\n    this.off(component, ['tap', 'click'], this.boundHandleTapClick_);\n  }\n\n  /**\n   * This method will be called indirectly when the component has been added\n   * before the component adds to the new menu instance by `addItem`.\n   * In this case, the original menu instance will remove the component\n   * by calling `removeChild`.\n   *\n   * @param {Object} component\n   *        The instance of the `MenuItem`\n   */\n  removeChild(component) {\n    if (typeof component === 'string') {\n      component = this.getChild(component);\n    }\n    this.removeEventListenerForItem(component);\n    super.removeChild(component);\n  }\n\n  /**\n   * Add a {@link MenuItem} to the menu.\n   *\n   * @param {Object|string} component\n   *        The name or instance of the `MenuItem` to add.\n   *\n   */\n  addItem(component) {\n    const childComponent = this.addChild(component);\n    if (childComponent) {\n      this.addEventListenerForItem(childComponent);\n    }\n  }\n\n  /**\n   * Create the `Menu`s DOM element.\n   *\n   * @return {Element}\n   *         the element that was created\n   */\n  createEl() {\n    const contentElType = this.options_.contentElType || 'ul';\n    this.contentEl_ = createEl(contentElType, {\n      className: 'vjs-menu-content'\n    });\n    this.contentEl_.setAttribute('role', 'menu');\n    const el = super.createEl('div', {\n      append: this.contentEl_,\n      className: 'vjs-menu'\n    });\n    el.appendChild(this.contentEl_);\n\n    // Prevent clicks from bubbling up. Needed for Menu Buttons,\n    // where a click on the parent is significant\n    on(el, 'click', function (event) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    });\n    return el;\n  }\n  dispose() {\n    this.contentEl_ = null;\n    this.boundHandleBlur_ = null;\n    this.boundHandleTapClick_ = null;\n    super.dispose();\n  }\n\n  /**\n   * Called when a `MenuItem` loses focus.\n   *\n   * @param {Event} event\n   *        The `blur` event that caused this function to be called.\n   *\n   * @listens blur\n   */\n  handleBlur(event) {\n    const relatedTarget = event.relatedTarget || document.activeElement;\n\n    // Close menu popup when a user clicks outside the menu\n    if (!this.children().some(element => {\n      return element.el() === relatedTarget;\n    })) {\n      const btn = this.menuButton_;\n      if (btn && btn.buttonPressed_ && relatedTarget !== btn.el().firstChild) {\n        btn.unpressButton();\n      }\n    }\n  }\n\n  /**\n   * Called when a `MenuItem` gets clicked or tapped.\n   *\n   * @param {Event} event\n   *        The `click` or `tap` event that caused this function to be called.\n   *\n   * @listens click,tap\n   */\n  handleTapClick(event) {\n    // Unpress the associated MenuButton, and move focus back to it\n    if (this.menuButton_) {\n      this.menuButton_.unpressButton();\n      const childComponents = this.children();\n      if (!Array.isArray(childComponents)) {\n        return;\n      }\n      const foundComponent = childComponents.filter(component => component.el() === event.target)[0];\n      if (!foundComponent) {\n        return;\n      }\n\n      // don't focus menu button if item is a caption settings item\n      // because focus will move elsewhere\n      if (foundComponent.name() !== 'CaptionSettingsMenuItem') {\n        this.menuButton_.focus();\n      }\n    }\n  }\n\n  /**\n   * Handle a `keydown` event on this menu. This listener is added in the constructor.\n   *\n   * @param {Event} event\n   *        A `keydown` event that happened on the menu.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    // Left and Down Arrows\n    if (keycode.isEventKey(event, 'Left') || keycode.isEventKey(event, 'Down')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.stepForward();\n\n      // Up and Right Arrows\n    } else if (keycode.isEventKey(event, 'Right') || keycode.isEventKey(event, 'Up')) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.stepBack();\n    }\n  }\n\n  /**\n   * Move to next (lower) menu item for keyboard users.\n   */\n  stepForward() {\n    let stepChild = 0;\n    if (this.focusedChild_ !== undefined) {\n      stepChild = this.focusedChild_ + 1;\n    }\n    this.focus(stepChild);\n  }\n\n  /**\n   * Move to previous (higher) menu item for keyboard users.\n   */\n  stepBack() {\n    let stepChild = 0;\n    if (this.focusedChild_ !== undefined) {\n      stepChild = this.focusedChild_ - 1;\n    }\n    this.focus(stepChild);\n  }\n\n  /**\n   * Set focus on a {@link MenuItem} in the `Menu`.\n   *\n   * @param {Object|string} [item=0]\n   *        Index of child item set focus on.\n   */\n  focus(item = 0) {\n    const children = this.children().slice();\n    const haveTitle = children.length && children[0].hasClass('vjs-menu-title');\n    if (haveTitle) {\n      children.shift();\n    }\n    if (children.length > 0) {\n      if (item < 0) {\n        item = 0;\n      } else if (item >= children.length) {\n        item = children.length - 1;\n      }\n      this.focusedChild_ = item;\n      children[item].el_.focus();\n    }\n  }\n}\nComponent$1.registerComponent('Menu', Menu);\n\n/**\n * @file menu-button.js\n */\n\n/**\n * A `MenuButton` class for any popup {@link Menu}.\n *\n * @extends Component\n */\nclass MenuButton extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  constructor(player, options = {}) {\n    super(player, options);\n    this.menuButton_ = new Button(player, options);\n    this.menuButton_.controlText(this.controlText_);\n    this.menuButton_.el_.setAttribute('aria-haspopup', 'true');\n\n    // Add buildCSSClass values to the button, not the wrapper\n    const buttonClass = Button.prototype.buildCSSClass();\n    this.menuButton_.el_.className = this.buildCSSClass() + ' ' + buttonClass;\n    this.menuButton_.removeClass('vjs-control');\n    this.addChild(this.menuButton_);\n    this.update();\n    this.enabled_ = true;\n    const handleClick = e => this.handleClick(e);\n    this.handleMenuKeyUp_ = e => this.handleMenuKeyUp(e);\n    this.on(this.menuButton_, 'tap', handleClick);\n    this.on(this.menuButton_, 'click', handleClick);\n    this.on(this.menuButton_, 'keydown', e => this.handleKeyDown(e));\n    this.on(this.menuButton_, 'mouseenter', () => {\n      this.addClass('vjs-hover');\n      this.menu.show();\n      on(document, 'keyup', this.handleMenuKeyUp_);\n    });\n    this.on('mouseleave', e => this.handleMouseLeave(e));\n    this.on('keydown', e => this.handleSubmenuKeyDown(e));\n  }\n\n  /**\n   * Update the menu based on the current state of its items.\n   */\n  update() {\n    const menu = this.createMenu();\n    if (this.menu) {\n      this.menu.dispose();\n      this.removeChild(this.menu);\n    }\n    this.menu = menu;\n    this.addChild(menu);\n\n    /**\n     * Track the state of the menu button\n     *\n     * @type {Boolean}\n     * @private\n     */\n    this.buttonPressed_ = false;\n    this.menuButton_.el_.setAttribute('aria-expanded', 'false');\n    if (this.items && this.items.length <= this.hideThreshold_) {\n      this.hide();\n      this.menu.contentEl_.removeAttribute('role');\n    } else {\n      this.show();\n      this.menu.contentEl_.setAttribute('role', 'menu');\n    }\n  }\n\n  /**\n   * Create the menu and add all items to it.\n   *\n   * @return {Menu}\n   *         The constructed menu\n   */\n  createMenu() {\n    const menu = new Menu(this.player_, {\n      menuButton: this\n    });\n\n    /**\n     * Hide the menu if the number of items is less than or equal to this threshold. This defaults\n     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list\n     * it here because every time we run `createMenu` we need to reset the value.\n     *\n     * @protected\n     * @type {Number}\n     */\n    this.hideThreshold_ = 0;\n\n    // Add a title list item to the top\n    if (this.options_.title) {\n      const titleEl = createEl('li', {\n        className: 'vjs-menu-title',\n        textContent: toTitleCase$1(this.options_.title),\n        tabIndex: -1\n      });\n      const titleComponent = new Component$1(this.player_, {\n        el: titleEl\n      });\n      menu.addItem(titleComponent);\n    }\n    this.items = this.createItems();\n    if (this.items) {\n      // Add menu items to the menu\n      for (let i = 0; i < this.items.length; i++) {\n        menu.addItem(this.items[i]);\n      }\n    }\n    return menu;\n  }\n\n  /**\n   * Create the list of menu items. Specific to each subclass.\n   *\n   * @abstract\n   */\n  createItems() {}\n\n  /**\n   * Create the `MenuButtons`s DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: this.buildWrapperCSSClass()\n    }, {});\n  }\n\n  /**\n   * Allow sub components to stack CSS class names for the wrapper element\n   *\n   * @return {string}\n   *         The constructed wrapper DOM `className`\n   */\n  buildWrapperCSSClass() {\n    let menuButtonClass = 'vjs-menu-button';\n\n    // If the inline option is passed, we want to use different styles altogether.\n    if (this.options_.inline === true) {\n      menuButtonClass += '-inline';\n    } else {\n      menuButtonClass += '-popup';\n    }\n\n    // TODO: Fix the CSS so that this isn't necessary\n    const buttonClass = Button.prototype.buildCSSClass();\n    return `vjs-menu-button ${menuButtonClass} ${buttonClass} ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    let menuButtonClass = 'vjs-menu-button';\n\n    // If the inline option is passed, we want to use different styles altogether.\n    if (this.options_.inline === true) {\n      menuButtonClass += '-inline';\n    } else {\n      menuButtonClass += '-popup';\n    }\n    return `vjs-menu-button ${menuButtonClass} ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Get or set the localized control text that will be used for accessibility.\n   *\n   * > NOTE: This will come from the internal `menuButton_` element.\n   *\n   * @param {string} [text]\n   *        Control text for element.\n   *\n   * @param {Element} [el=this.menuButton_.el()]\n   *        Element to set the title on.\n   *\n   * @return {string}\n   *         - The control text when getting\n   */\n  controlText(text, el = this.menuButton_.el()) {\n    return this.menuButton_.controlText(text, el);\n  }\n\n  /**\n   * Dispose of the `menu-button` and all child components.\n   */\n  dispose() {\n    this.handleMouseLeave();\n    super.dispose();\n  }\n\n  /**\n   * Handle a click on a `MenuButton`.\n   * See {@link ClickableComponent#handleClick} for instances where this is called.\n   *\n   * @param {Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    if (this.buttonPressed_) {\n      this.unpressButton();\n    } else {\n      this.pressButton();\n    }\n  }\n\n  /**\n   * Handle `mouseleave` for `MenuButton`.\n   *\n   * @param {Event} event\n   *        The `mouseleave` event that caused this function to be called.\n   *\n   * @listens mouseleave\n   */\n  handleMouseLeave(event) {\n    this.removeClass('vjs-hover');\n    off(document, 'keyup', this.handleMenuKeyUp_);\n  }\n\n  /**\n   * Set the focus to the actual button, not to this element\n   */\n  focus() {\n    this.menuButton_.focus();\n  }\n\n  /**\n   * Remove the focus from the actual button, not this element\n   */\n  blur() {\n    this.menuButton_.blur();\n  }\n\n  /**\n   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See\n   * {@link ClickableComponent#handleKeyDown} for instances where this is called.\n   *\n   * @param {Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    // Escape or Tab unpress the 'button'\n    if (keycode.isEventKey(event, 'Esc') || keycode.isEventKey(event, 'Tab')) {\n      if (this.buttonPressed_) {\n        this.unpressButton();\n      }\n\n      // Don't preventDefault for Tab key - we still want to lose focus\n      if (!keycode.isEventKey(event, 'Tab')) {\n        event.preventDefault();\n        // Set focus back to the menu button's button\n        this.menuButton_.focus();\n      }\n      // Up Arrow or Down Arrow also 'press' the button to open the menu\n    } else if (keycode.isEventKey(event, 'Up') || keycode.isEventKey(event, 'Down')) {\n      if (!this.buttonPressed_) {\n        event.preventDefault();\n        this.pressButton();\n      }\n    }\n  }\n\n  /**\n   * Handle a `keyup` event on a `MenuButton`. The listener for this is added in\n   * the constructor.\n   *\n   * @param {Event} event\n   *        Key press event\n   *\n   * @listens keyup\n   */\n  handleMenuKeyUp(event) {\n    // Escape hides popup menu\n    if (keycode.isEventKey(event, 'Esc') || keycode.isEventKey(event, 'Tab')) {\n      this.removeClass('vjs-hover');\n    }\n  }\n\n  /**\n   * This method name now delegates to `handleSubmenuKeyDown`. This means\n   * anyone calling `handleSubmenuKeyPress` will not see their method calls\n   * stop working.\n   *\n   * @param {Event} event\n   *        The event that caused this function to be called.\n   */\n  handleSubmenuKeyPress(event) {\n    this.handleSubmenuKeyDown(event);\n  }\n\n  /**\n   * Handle a `keydown` event on a sub-menu. The listener for this is added in\n   * the constructor.\n   *\n   * @param {Event} event\n   *        Key press event\n   *\n   * @listens keydown\n   */\n  handleSubmenuKeyDown(event) {\n    // Escape or Tab unpress the 'button'\n    if (keycode.isEventKey(event, 'Esc') || keycode.isEventKey(event, 'Tab')) {\n      if (this.buttonPressed_) {\n        this.unpressButton();\n      }\n      // Don't preventDefault for Tab key - we still want to lose focus\n      if (!keycode.isEventKey(event, 'Tab')) {\n        event.preventDefault();\n        // Set focus back to the menu button's button\n        this.menuButton_.focus();\n      }\n    }\n  }\n\n  /**\n   * Put the current `MenuButton` into a pressed state.\n   */\n  pressButton() {\n    if (this.enabled_) {\n      this.buttonPressed_ = true;\n      this.menu.show();\n      this.menu.lockShowing();\n      this.menuButton_.el_.setAttribute('aria-expanded', 'true');\n\n      // set the focus into the submenu, except on iOS where it is resulting in\n      // undesired scrolling behavior when the player is in an iframe\n      if (IS_IOS && isInFrame()) {\n        // Return early so that the menu isn't focused\n        return;\n      }\n      this.menu.focus();\n    }\n  }\n\n  /**\n   * Take the current `MenuButton` out of a pressed state.\n   */\n  unpressButton() {\n    if (this.enabled_) {\n      this.buttonPressed_ = false;\n      this.menu.unlockShowing();\n      this.menu.hide();\n      this.menuButton_.el_.setAttribute('aria-expanded', 'false');\n    }\n  }\n\n  /**\n   * Disable the `MenuButton`. Don't allow it to be clicked.\n   */\n  disable() {\n    this.unpressButton();\n    this.enabled_ = false;\n    this.addClass('vjs-disabled');\n    this.menuButton_.disable();\n  }\n\n  /**\n   * Enable the `MenuButton`. Allow it to be clicked.\n   */\n  enable() {\n    this.enabled_ = true;\n    this.removeClass('vjs-disabled');\n    this.menuButton_.enable();\n  }\n}\nComponent$1.registerComponent('MenuButton', MenuButton);\n\n/**\n * @file track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific  track types (e.g. subtitles).\n *\n * @extends MenuButton\n */\nclass TrackButton extends MenuButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    const tracks = options.tracks;\n    super(player, options);\n    if (this.items.length <= 1) {\n      this.hide();\n    }\n    if (!tracks) {\n      return;\n    }\n    const updateHandler = bind_(this, this.update);\n    tracks.addEventListener('removetrack', updateHandler);\n    tracks.addEventListener('addtrack', updateHandler);\n    tracks.addEventListener('labelchange', updateHandler);\n    this.player_.on('ready', updateHandler);\n    this.player_.on('dispose', function () {\n      tracks.removeEventListener('removetrack', updateHandler);\n      tracks.removeEventListener('addtrack', updateHandler);\n      tracks.removeEventListener('labelchange', updateHandler);\n    });\n  }\n}\nComponent$1.registerComponent('TrackButton', TrackButton);\n\n/**\n * @file menu-keys.js\n */\n\n/**\n  * All keys used for operation of a menu (`MenuButton`, `Menu`, and `MenuItem`)\n  * Note that 'Enter' and 'Space' are not included here (otherwise they would\n  * prevent the `MenuButton` and `MenuItem` from being keyboard-clickable)\n *\n  * @typedef MenuKeys\n  * @array\n  */\nconst MenuKeys = ['Tab', 'Esc', 'Up', 'Down', 'Right', 'Left'];\n\n/**\n * @file menu-item.js\n */\n\n/**\n * The component for a menu item. `<li>`\n *\n * @extends ClickableComponent\n */\nclass MenuItem extends ClickableComponent {\n  /**\n   * Creates an instance of the this class.\n   *\n   * @param { import('../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   *\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.selectable = options.selectable;\n    this.isSelected_ = options.selected || false;\n    this.multiSelectable = options.multiSelectable;\n    this.selected(this.isSelected_);\n    if (this.selectable) {\n      if (this.multiSelectable) {\n        this.el_.setAttribute('role', 'menuitemcheckbox');\n      } else {\n        this.el_.setAttribute('role', 'menuitemradio');\n      }\n    } else {\n      this.el_.setAttribute('role', 'menuitem');\n    }\n  }\n\n  /**\n   * Create the `MenuItem's DOM element\n   *\n   * @param {string} [type=li]\n   *        Element's node type, not actually used, always set to `li`.\n   *\n   * @param {Object} [props={}]\n   *        An object of properties that should be set on the element\n   *\n   * @param {Object} [attrs={}]\n   *        An object of attributes that should be set on the element\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl(type, props, attrs) {\n    // The control is textual, not just an icon\n    this.nonIconControl = true;\n    const el = super.createEl('li', Object.assign({\n      className: 'vjs-menu-item',\n      tabIndex: -1\n    }, props), attrs);\n\n    // swap icon with menu item text.\n    el.replaceChild(createEl('span', {\n      className: 'vjs-menu-item-text',\n      textContent: this.localize(this.options_.label)\n    }), el.querySelector('.vjs-icon-placeholder'));\n    return el;\n  }\n\n  /**\n   * Ignore keys which are used by the menu, but pass any other ones up. See\n   * {@link ClickableComponent#handleKeyDown} for instances where this is called.\n   *\n   * @param {Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    if (!MenuKeys.some(key => keycode.isEventKey(event, key))) {\n      // Pass keydown handling up for unused keys\n      super.handleKeyDown(event);\n    }\n  }\n\n  /**\n   * Any click on a `MenuItem` puts it into the selected state.\n   * See {@link ClickableComponent#handleClick} for instances where this is called.\n   *\n   * @param {Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    this.selected(true);\n  }\n\n  /**\n   * Set the state for this menu item as selected or not.\n   *\n   * @param {boolean} selected\n   *        if the menu item is selected or not\n   */\n  selected(selected) {\n    if (this.selectable) {\n      if (selected) {\n        this.addClass('vjs-selected');\n        this.el_.setAttribute('aria-checked', 'true');\n        // aria-checked isn't fully supported by browsers/screen readers,\n        // so indicate selected state to screen reader in the control text.\n        this.controlText(', selected');\n        this.isSelected_ = true;\n      } else {\n        this.removeClass('vjs-selected');\n        this.el_.setAttribute('aria-checked', 'false');\n        // Indicate un-selected state to screen reader\n        this.controlText('');\n        this.isSelected_ = false;\n      }\n    }\n  }\n}\nComponent$1.registerComponent('MenuItem', MenuItem);\n\n/**\n * @file text-track-menu-item.js\n */\n\n/**\n * The specific menu item type for selecting a language within a text track kind\n *\n * @extends MenuItem\n */\nclass TextTrackMenuItem extends MenuItem {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    const track = options.track;\n    const tracks = player.textTracks();\n\n    // Modify options for parent MenuItem class's init.\n    options.label = track.label || track.language || 'Unknown';\n    options.selected = track.mode === 'showing';\n    super(player, options);\n    this.track = track;\n    // Determine the relevant kind(s) of tracks for this component and filter\n    // out empty kinds.\n    this.kinds = (options.kinds || [options.kind || this.track.kind]).filter(Boolean);\n    const changeHandler = (...args) => {\n      this.handleTracksChange.apply(this, args);\n    };\n    const selectedLanguageChangeHandler = (...args) => {\n      this.handleSelectedLanguageChange.apply(this, args);\n    };\n    player.on(['loadstart', 'texttrackchange'], changeHandler);\n    tracks.addEventListener('change', changeHandler);\n    tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n    this.on('dispose', function () {\n      player.off(['loadstart', 'texttrackchange'], changeHandler);\n      tracks.removeEventListener('change', changeHandler);\n      tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n    });\n\n    // iOS7 doesn't dispatch change events to TextTrackLists when an\n    // associated track's mode changes. Without something like\n    // Object.observe() (also not present on iOS7), it's not\n    // possible to detect changes to the mode attribute and polyfill\n    // the change event. As a poor substitute, we manually dispatch\n    // change events whenever the controls modify the mode.\n    if (tracks.onchange === undefined) {\n      let event;\n      this.on(['tap', 'click'], function () {\n        if (typeof window$1.Event !== 'object') {\n          // Android 2.3 throws an Illegal Constructor error for window.Event\n          try {\n            event = new window$1.Event('change');\n          } catch (err) {\n            // continue regardless of error\n          }\n        }\n        if (!event) {\n          event = document.createEvent('Event');\n          event.initEvent('change', true, true);\n        }\n        tracks.dispatchEvent(event);\n      });\n    }\n\n    // set the default state based on current tracks\n    this.handleTracksChange();\n  }\n\n  /**\n   * This gets called when an `TextTrackMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} event\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    const referenceTrack = this.track;\n    const tracks = this.player_.textTracks();\n    super.handleClick(event);\n    if (!tracks) {\n      return;\n    }\n    for (let i = 0; i < tracks.length; i++) {\n      const track = tracks[i];\n\n      // If the track from the text tracks list is not of the right kind,\n      // skip it. We do not want to affect tracks of incompatible kind(s).\n      if (this.kinds.indexOf(track.kind) === -1) {\n        continue;\n      }\n\n      // If this text track is the component's track and it is not showing,\n      // set it to showing.\n      if (track === referenceTrack) {\n        if (track.mode !== 'showing') {\n          track.mode = 'showing';\n        }\n\n        // If this text track is not the component's track and it is not\n        // disabled, set it to disabled.\n      } else if (track.mode !== 'disabled') {\n        track.mode = 'disabled';\n      }\n    }\n  }\n\n  /**\n   * Handle text track list change\n   *\n   * @param {Event} event\n   *        The `change` event that caused this function to be called.\n   *\n   * @listens TextTrackList#change\n   */\n  handleTracksChange(event) {\n    const shouldBeSelected = this.track.mode === 'showing';\n\n    // Prevent redundant selected() calls because they may cause\n    // screen readers to read the appended control text unnecessarily\n    if (shouldBeSelected !== this.isSelected_) {\n      this.selected(shouldBeSelected);\n    }\n  }\n  handleSelectedLanguageChange(event) {\n    if (this.track.mode === 'showing') {\n      const selectedLanguage = this.player_.cache_.selectedLanguage;\n\n      // Don't replace the kind of track across the same language\n      if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {\n        return;\n      }\n      this.player_.cache_.selectedLanguage = {\n        enabled: true,\n        language: this.track.language,\n        kind: this.track.kind\n      };\n    }\n  }\n  dispose() {\n    // remove reference to track object on dispose\n    this.track = null;\n    super.dispose();\n  }\n}\nComponent$1.registerComponent('TextTrackMenuItem', TextTrackMenuItem);\n\n/**\n * @file off-text-track-menu-item.js\n */\n\n/**\n * A special menu item for turning of a specific type of text track\n *\n * @extends TextTrackMenuItem\n */\nclass OffTextTrackMenuItem extends TextTrackMenuItem {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    // Create pseudo track info\n    // Requires options['kind']\n    options.track = {\n      player,\n      // it is no longer necessary to store `kind` or `kinds` on the track itself\n      // since they are now stored in the `kinds` property of all instances of\n      // TextTrackMenuItem, but this will remain for backwards compatibility\n      kind: options.kind,\n      kinds: options.kinds,\n      default: false,\n      mode: 'disabled'\n    };\n    if (!options.kinds) {\n      options.kinds = [options.kind];\n    }\n    if (options.label) {\n      options.track.label = options.label;\n    } else {\n      options.track.label = options.kinds.join(' and ') + ' off';\n    }\n\n    // MenuItem is selectable\n    options.selectable = true;\n    // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n    options.multiSelectable = false;\n    super(player, options);\n  }\n\n  /**\n   * Handle text track change\n   *\n   * @param {Event} event\n   *        The event that caused this function to run\n   */\n  handleTracksChange(event) {\n    const tracks = this.player().textTracks();\n    let shouldBeSelected = true;\n    for (let i = 0, l = tracks.length; i < l; i++) {\n      const track = tracks[i];\n      if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === 'showing') {\n        shouldBeSelected = false;\n        break;\n      }\n    }\n\n    // Prevent redundant selected() calls because they may cause\n    // screen readers to read the appended control text unnecessarily\n    if (shouldBeSelected !== this.isSelected_) {\n      this.selected(shouldBeSelected);\n    }\n  }\n  handleSelectedLanguageChange(event) {\n    const tracks = this.player().textTracks();\n    let allHidden = true;\n    for (let i = 0, l = tracks.length; i < l; i++) {\n      const track = tracks[i];\n      if (['captions', 'descriptions', 'subtitles'].indexOf(track.kind) > -1 && track.mode === 'showing') {\n        allHidden = false;\n        break;\n      }\n    }\n    if (allHidden) {\n      this.player_.cache_.selectedLanguage = {\n        enabled: false\n      };\n    }\n  }\n\n  /**\n   * Update control text and label on languagechange\n   */\n  handleLanguagechange() {\n    this.$('.vjs-menu-item-text').textContent = this.player_.localize(this.options_.label);\n    super.handleLanguagechange();\n  }\n}\nComponent$1.registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);\n\n/**\n * @file text-track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific text track types (e.g. subtitles)\n *\n * @extends MenuButton\n */\nclass TextTrackButton extends TrackButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  constructor(player, options = {}) {\n    options.tracks = player.textTracks();\n    super(player, options);\n  }\n\n  /**\n   * Create a menu item for each text track\n   *\n   * @param {TextTrackMenuItem[]} [items=[]]\n   *        Existing array of items to use during creation\n   *\n   * @return {TextTrackMenuItem[]}\n   *         Array of menu items that were created\n   */\n  createItems(items = [], TrackMenuItem = TextTrackMenuItem) {\n    // Label is an override for the [track] off label\n    // USed to localise captions/subtitles\n    let label;\n    if (this.label_) {\n      label = `${this.label_} off`;\n    }\n    // Add an OFF menu item to turn all tracks off\n    items.push(new OffTextTrackMenuItem(this.player_, {\n      kinds: this.kinds_,\n      kind: this.kind_,\n      label\n    }));\n    this.hideThreshold_ += 1;\n    const tracks = this.player_.textTracks();\n    if (!Array.isArray(this.kinds_)) {\n      this.kinds_ = [this.kind_];\n    }\n    for (let i = 0; i < tracks.length; i++) {\n      const track = tracks[i];\n\n      // only add tracks that are of an appropriate kind and have a label\n      if (this.kinds_.indexOf(track.kind) > -1) {\n        const item = new TrackMenuItem(this.player_, {\n          track,\n          kinds: this.kinds_,\n          kind: this.kind_,\n          // MenuItem is selectable\n          selectable: true,\n          // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n          multiSelectable: false\n        });\n        item.addClass(`vjs-${track.kind}-menu-item`);\n        items.push(item);\n      }\n    }\n    return items;\n  }\n}\nComponent$1.registerComponent('TextTrackButton', TextTrackButton);\n\n/**\n * @file chapters-track-menu-item.js\n */\n\n/**\n * The chapter track menu item\n *\n * @extends MenuItem\n */\nclass ChaptersTrackMenuItem extends MenuItem {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    const track = options.track;\n    const cue = options.cue;\n    const currentTime = player.currentTime();\n\n    // Modify options for parent MenuItem class's init.\n    options.selectable = true;\n    options.multiSelectable = false;\n    options.label = cue.text;\n    options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;\n    super(player, options);\n    this.track = track;\n    this.cue = cue;\n  }\n\n  /**\n   * This gets called when an `ChaptersTrackMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    super.handleClick();\n    this.player_.currentTime(this.cue.startTime);\n  }\n}\nComponent$1.registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);\n\n/**\n * @file chapters-button.js\n */\n\n/**\n * The button component for toggling and selecting chapters\n * Chapters act much differently than other text tracks\n * Cues are navigation vs. other tracks of alternative languages\n *\n * @extends TextTrackButton\n */\nclass ChaptersButton extends TextTrackButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Function} [ready]\n   *        The function to call when this function is ready.\n   */\n  constructor(player, options, ready) {\n    super(player, options, ready);\n    this.selectCurrentItem_ = () => {\n      this.items.forEach(item => {\n        item.selected(this.track_.activeCues[0] === item.cue);\n      });\n    };\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-chapters-button ${super.buildCSSClass()}`;\n  }\n  buildWrapperCSSClass() {\n    return `vjs-chapters-button ${super.buildWrapperCSSClass()}`;\n  }\n\n  /**\n   * Update the menu based on the current state of its items.\n   *\n   * @param {Event} [event]\n   *        An event that triggered this function to run.\n   *\n   * @listens TextTrackList#addtrack\n   * @listens TextTrackList#removetrack\n   * @listens TextTrackList#change\n   */\n  update(event) {\n    if (event && event.track && event.track.kind !== 'chapters') {\n      return;\n    }\n    const track = this.findChaptersTrack();\n    if (track !== this.track_) {\n      this.setTrack(track);\n      super.update();\n    } else if (!this.items || track && track.cues && track.cues.length !== this.items.length) {\n      // Update the menu initially or if the number of cues has changed since set\n      super.update();\n    }\n  }\n\n  /**\n   * Set the currently selected track for the chapters button.\n   *\n   * @param {TextTrack} track\n   *        The new track to select. Nothing will change if this is the currently selected\n   *        track.\n   */\n  setTrack(track) {\n    if (this.track_ === track) {\n      return;\n    }\n    if (!this.updateHandler_) {\n      this.updateHandler_ = this.update.bind(this);\n    }\n\n    // here this.track_ refers to the old track instance\n    if (this.track_) {\n      const remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n      if (remoteTextTrackEl) {\n        remoteTextTrackEl.removeEventListener('load', this.updateHandler_);\n      }\n      this.track_.removeEventListener('cuechange', this.selectCurrentItem_);\n      this.track_ = null;\n    }\n    this.track_ = track;\n\n    // here this.track_ refers to the new track instance\n    if (this.track_) {\n      this.track_.mode = 'hidden';\n      const remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);\n      if (remoteTextTrackEl) {\n        remoteTextTrackEl.addEventListener('load', this.updateHandler_);\n      }\n      this.track_.addEventListener('cuechange', this.selectCurrentItem_);\n    }\n  }\n\n  /**\n   * Find the track object that is currently in use by this ChaptersButton\n   *\n   * @return {TextTrack|undefined}\n   *         The current track or undefined if none was found.\n   */\n  findChaptersTrack() {\n    const tracks = this.player_.textTracks() || [];\n    for (let i = tracks.length - 1; i >= 0; i--) {\n      // We will always choose the last track as our chaptersTrack\n      const track = tracks[i];\n      if (track.kind === this.kind_) {\n        return track;\n      }\n    }\n  }\n\n  /**\n   * Get the caption for the ChaptersButton based on the track label. This will also\n   * use the current tracks localized kind as a fallback if a label does not exist.\n   *\n   * @return {string}\n   *         The tracks current label or the localized track kind.\n   */\n  getMenuCaption() {\n    if (this.track_ && this.track_.label) {\n      return this.track_.label;\n    }\n    return this.localize(toTitleCase$1(this.kind_));\n  }\n\n  /**\n   * Create menu from chapter track\n   *\n   * @return { import('../../menu/menu').default }\n   *         New menu for the chapter buttons\n   */\n  createMenu() {\n    this.options_.title = this.getMenuCaption();\n    return super.createMenu();\n  }\n\n  /**\n   * Create a menu item for each text track\n   *\n   * @return  { import('./text-track-menu-item').default[] }\n   *         Array of menu items\n   */\n  createItems() {\n    const items = [];\n    if (!this.track_) {\n      return items;\n    }\n    const cues = this.track_.cues;\n    if (!cues) {\n      return items;\n    }\n    for (let i = 0, l = cues.length; i < l; i++) {\n      const cue = cues[i];\n      const mi = new ChaptersTrackMenuItem(this.player_, {\n        track: this.track_,\n        cue\n      });\n      items.push(mi);\n    }\n    return items;\n  }\n}\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\nChaptersButton.prototype.kind_ = 'chapters';\n\n/**\n * The text that should display over the `ChaptersButton`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nChaptersButton.prototype.controlText_ = 'Chapters';\nComponent$1.registerComponent('ChaptersButton', ChaptersButton);\n\n/**\n * @file descriptions-button.js\n */\n\n/**\n * The button component for toggling and selecting descriptions\n *\n * @extends TextTrackButton\n */\nclass DescriptionsButton extends TextTrackButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Function} [ready]\n   *        The function to call when this component is ready.\n   */\n  constructor(player, options, ready) {\n    super(player, options, ready);\n    const tracks = player.textTracks();\n    const changeHandler = bind_(this, this.handleTracksChange);\n    tracks.addEventListener('change', changeHandler);\n    this.on('dispose', function () {\n      tracks.removeEventListener('change', changeHandler);\n    });\n  }\n\n  /**\n   * Handle text track change\n   *\n   * @param {Event} event\n   *        The event that caused this function to run\n   *\n   * @listens TextTrackList#change\n   */\n  handleTracksChange(event) {\n    const tracks = this.player().textTracks();\n    let disabled = false;\n\n    // Check whether a track of a different kind is showing\n    for (let i = 0, l = tracks.length; i < l; i++) {\n      const track = tracks[i];\n      if (track.kind !== this.kind_ && track.mode === 'showing') {\n        disabled = true;\n        break;\n      }\n    }\n\n    // If another track is showing, disable this menu button\n    if (disabled) {\n      this.disable();\n    } else {\n      this.enable();\n    }\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-descriptions-button ${super.buildCSSClass()}`;\n  }\n  buildWrapperCSSClass() {\n    return `vjs-descriptions-button ${super.buildWrapperCSSClass()}`;\n  }\n}\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\nDescriptionsButton.prototype.kind_ = 'descriptions';\n\n/**\n * The text that should display over the `DescriptionsButton`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nDescriptionsButton.prototype.controlText_ = 'Descriptions';\nComponent$1.registerComponent('DescriptionsButton', DescriptionsButton);\n\n/**\n * @file subtitles-button.js\n */\n\n/**\n * The button component for toggling and selecting subtitles\n *\n * @extends TextTrackButton\n */\nclass SubtitlesButton extends TextTrackButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Function} [ready]\n   *        The function to call when this component is ready.\n   */\n  constructor(player, options, ready) {\n    super(player, options, ready);\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-subtitles-button ${super.buildCSSClass()}`;\n  }\n  buildWrapperCSSClass() {\n    return `vjs-subtitles-button ${super.buildWrapperCSSClass()}`;\n  }\n}\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\nSubtitlesButton.prototype.kind_ = 'subtitles';\n\n/**\n * The text that should display over the `SubtitlesButton`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nSubtitlesButton.prototype.controlText_ = 'Subtitles';\nComponent$1.registerComponent('SubtitlesButton', SubtitlesButton);\n\n/**\n * @file caption-settings-menu-item.js\n */\n\n/**\n * The menu item for caption track settings menu\n *\n * @extends TextTrackMenuItem\n */\nclass CaptionSettingsMenuItem extends TextTrackMenuItem {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    options.track = {\n      player,\n      kind: options.kind,\n      label: options.kind + ' settings',\n      selectable: false,\n      default: false,\n      mode: 'disabled'\n    };\n\n    // CaptionSettingsMenuItem has no concept of 'selected'\n    options.selectable = false;\n    options.name = 'CaptionSettingsMenuItem';\n    super(player, options);\n    this.addClass('vjs-texttrack-settings');\n    this.controlText(', opens ' + options.kind + ' settings dialog');\n  }\n\n  /**\n   * This gets called when an `CaptionSettingsMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    this.player().getChild('textTrackSettings').open();\n  }\n\n  /**\n   * Update control text and label on languagechange\n   */\n  handleLanguagechange() {\n    this.$('.vjs-menu-item-text').textContent = this.player_.localize(this.options_.kind + ' settings');\n    super.handleLanguagechange();\n  }\n}\nComponent$1.registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);\n\n/**\n * @file captions-button.js\n */\n\n/**\n * The button component for toggling and selecting captions\n *\n * @extends TextTrackButton\n */\nclass CaptionsButton extends TextTrackButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Function} [ready]\n   *        The function to call when this component is ready.\n   */\n  constructor(player, options, ready) {\n    super(player, options, ready);\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-captions-button ${super.buildCSSClass()}`;\n  }\n  buildWrapperCSSClass() {\n    return `vjs-captions-button ${super.buildWrapperCSSClass()}`;\n  }\n\n  /**\n   * Create caption menu items\n   *\n   * @return {CaptionSettingsMenuItem[]}\n   *         The array of current menu items.\n   */\n  createItems() {\n    const items = [];\n    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\n      items.push(new CaptionSettingsMenuItem(this.player_, {\n        kind: this.kind_\n      }));\n      this.hideThreshold_ += 1;\n    }\n    return super.createItems(items);\n  }\n}\n\n/**\n * `kind` of TextTrack to look for to associate it with this menu.\n *\n * @type {string}\n * @private\n */\nCaptionsButton.prototype.kind_ = 'captions';\n\n/**\n * The text that should display over the `CaptionsButton`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nCaptionsButton.prototype.controlText_ = 'Captions';\nComponent$1.registerComponent('CaptionsButton', CaptionsButton);\n\n/**\n * @file subs-caps-menu-item.js\n */\n\n/**\n * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles\n * in the SubsCapsMenu.\n *\n * @extends TextTrackMenuItem\n */\nclass SubsCapsMenuItem extends TextTrackMenuItem {\n  createEl(type, props, attrs) {\n    const el = super.createEl(type, props, attrs);\n    const parentSpan = el.querySelector('.vjs-menu-item-text');\n    if (this.options_.track.kind === 'captions') {\n      parentSpan.appendChild(createEl('span', {\n        className: 'vjs-icon-placeholder'\n      }, {\n        'aria-hidden': true\n      }));\n      parentSpan.appendChild(createEl('span', {\n        className: 'vjs-control-text',\n        // space added as the text will visually flow with the\n        // label\n        textContent: ` ${this.localize('Captions')}`\n      }));\n    }\n    return el;\n  }\n}\nComponent$1.registerComponent('SubsCapsMenuItem', SubsCapsMenuItem);\n\n/**\n * @file sub-caps-button.js\n */\n\n/**\n * The button component for toggling and selecting captions and/or subtitles\n *\n * @extends TextTrackButton\n */\nclass SubsCapsButton extends TextTrackButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {Function} [ready]\n   *        The function to call when this component is ready.\n   */\n  constructor(player, options = {}) {\n    super(player, options);\n\n    // Although North America uses \"captions\" in most cases for\n    // \"captions and subtitles\" other locales use \"subtitles\"\n    this.label_ = 'subtitles';\n    if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(this.player_.language_) > -1) {\n      this.label_ = 'captions';\n    }\n    this.menuButton_.controlText(toTitleCase$1(this.label_));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-subs-caps-button ${super.buildCSSClass()}`;\n  }\n  buildWrapperCSSClass() {\n    return `vjs-subs-caps-button ${super.buildWrapperCSSClass()}`;\n  }\n\n  /**\n   * Create caption/subtitles menu items\n   *\n   * @return {CaptionSettingsMenuItem[]}\n   *         The array of current menu items.\n   */\n  createItems() {\n    let items = [];\n    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {\n      items.push(new CaptionSettingsMenuItem(this.player_, {\n        kind: this.label_\n      }));\n      this.hideThreshold_ += 1;\n    }\n    items = super.createItems(items, SubsCapsMenuItem);\n    return items;\n  }\n}\n\n/**\n * `kind`s of TextTrack to look for to associate it with this menu.\n *\n * @type {array}\n * @private\n */\nSubsCapsButton.prototype.kinds_ = ['captions', 'subtitles'];\n\n/**\n * The text that should display over the `SubsCapsButton`s controls.\n *\n *\n * @type {string}\n * @protected\n */\nSubsCapsButton.prototype.controlText_ = 'Subtitles';\nComponent$1.registerComponent('SubsCapsButton', SubsCapsButton);\n\n/**\n * @file audio-track-menu-item.js\n */\n\n/**\n * An {@link AudioTrack} {@link MenuItem}\n *\n * @extends MenuItem\n */\nclass AudioTrackMenuItem extends MenuItem {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    const track = options.track;\n    const tracks = player.audioTracks();\n\n    // Modify options for parent MenuItem class's init.\n    options.label = track.label || track.language || 'Unknown';\n    options.selected = track.enabled;\n    super(player, options);\n    this.track = track;\n    this.addClass(`vjs-${track.kind}-menu-item`);\n    const changeHandler = (...args) => {\n      this.handleTracksChange.apply(this, args);\n    };\n    tracks.addEventListener('change', changeHandler);\n    this.on('dispose', () => {\n      tracks.removeEventListener('change', changeHandler);\n    });\n  }\n  createEl(type, props, attrs) {\n    const el = super.createEl(type, props, attrs);\n    const parentSpan = el.querySelector('.vjs-menu-item-text');\n    if (this.options_.track.kind === 'main-desc') {\n      parentSpan.appendChild(createEl('span', {\n        className: 'vjs-icon-placeholder'\n      }, {\n        'aria-hidden': true\n      }));\n      parentSpan.appendChild(createEl('span', {\n        className: 'vjs-control-text',\n        textContent: ' ' + this.localize('Descriptions')\n      }));\n    }\n    return el;\n  }\n\n  /**\n   * This gets called when an `AudioTrackMenuItem is \"clicked\". See {@link ClickableComponent}\n   * for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    super.handleClick(event);\n\n    // the audio track list will automatically toggle other tracks\n    // off for us.\n    this.track.enabled = true;\n\n    // when native audio tracks are used, we want to make sure that other tracks are turned off\n    if (this.player_.tech_.featuresNativeAudioTracks) {\n      const tracks = this.player_.audioTracks();\n      for (let i = 0; i < tracks.length; i++) {\n        const track = tracks[i];\n\n        // skip the current track since we enabled it above\n        if (track === this.track) {\n          continue;\n        }\n        track.enabled = track === this.track;\n      }\n    }\n  }\n\n  /**\n   * Handle any {@link AudioTrack} change.\n   *\n   * @param {Event} [event]\n   *        The {@link AudioTrackList#change} event that caused this to run.\n   *\n   * @listens AudioTrackList#change\n   */\n  handleTracksChange(event) {\n    this.selected(this.track.enabled);\n  }\n}\nComponent$1.registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);\n\n/**\n * @file audio-track-button.js\n */\n\n/**\n * The base class for buttons that toggle specific {@link AudioTrack} types.\n *\n * @extends TrackButton\n */\nclass AudioTrackButton extends TrackButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param {Player} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options={}]\n   *        The key/value store of player options.\n   */\n  constructor(player, options = {}) {\n    options.tracks = player.audioTracks();\n    super(player, options);\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-audio-button ${super.buildCSSClass()}`;\n  }\n  buildWrapperCSSClass() {\n    return `vjs-audio-button ${super.buildWrapperCSSClass()}`;\n  }\n\n  /**\n   * Create a menu item for each audio track\n   *\n   * @param {AudioTrackMenuItem[]} [items=[]]\n   *        An array of existing menu items to use.\n   *\n   * @return {AudioTrackMenuItem[]}\n   *         An array of menu items\n   */\n  createItems(items = []) {\n    // if there's only one audio track, there no point in showing it\n    this.hideThreshold_ = 1;\n    const tracks = this.player_.audioTracks();\n    for (let i = 0; i < tracks.length; i++) {\n      const track = tracks[i];\n      items.push(new AudioTrackMenuItem(this.player_, {\n        track,\n        // MenuItem is selectable\n        selectable: true,\n        // MenuItem is NOT multiSelectable (i.e. only one can be marked \"selected\" at a time)\n        multiSelectable: false\n      }));\n    }\n    return items;\n  }\n}\n\n/**\n * The text that should display over the `AudioTrackButton`s controls. Added for localization.\n *\n * @type {string}\n * @protected\n */\nAudioTrackButton.prototype.controlText_ = 'Audio Track';\nComponent$1.registerComponent('AudioTrackButton', AudioTrackButton);\n\n/**\n * @file playback-rate-menu-item.js\n */\n\n/**\n * The specific menu item type for selecting a playback rate.\n *\n * @extends MenuItem\n */\nclass PlaybackRateMenuItem extends MenuItem {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    const label = options.rate;\n    const rate = parseFloat(label, 10);\n\n    // Modify options for parent MenuItem class's init.\n    options.label = label;\n    options.selected = rate === player.playbackRate();\n    options.selectable = true;\n    options.multiSelectable = false;\n    super(player, options);\n    this.label = label;\n    this.rate = rate;\n    this.on(player, 'ratechange', e => this.update(e));\n  }\n\n  /**\n   * This gets called when an `PlaybackRateMenuItem` is \"clicked\". See\n   * {@link ClickableComponent} for more detailed information on what a click can be.\n   *\n   * @param {Event} [event]\n   *        The `keydown`, `tap`, or `click` event that caused this function to be\n   *        called.\n   *\n   * @listens tap\n   * @listens click\n   */\n  handleClick(event) {\n    super.handleClick();\n    this.player().playbackRate(this.rate);\n  }\n\n  /**\n   * Update the PlaybackRateMenuItem when the playbackrate changes.\n   *\n   * @param {Event} [event]\n   *        The `ratechange` event that caused this function to run.\n   *\n   * @listens Player#ratechange\n   */\n  update(event) {\n    this.selected(this.player().playbackRate() === this.rate);\n  }\n}\n\n/**\n * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.\n *\n * @type {string}\n * @private\n */\nPlaybackRateMenuItem.prototype.contentElType = 'button';\nComponent$1.registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);\n\n/**\n * @file playback-rate-menu-button.js\n */\n\n/**\n * The component for controlling the playback rate.\n *\n * @extends MenuButton\n */\nclass PlaybackRateMenuButton extends MenuButton {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../../player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.menuButton_.el_.setAttribute('aria-describedby', this.labelElId_);\n    this.updateVisibility();\n    this.updateLabel();\n    this.on(player, 'loadstart', e => this.updateVisibility(e));\n    this.on(player, 'ratechange', e => this.updateLabel(e));\n    this.on(player, 'playbackrateschange', e => this.handlePlaybackRateschange(e));\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    const el = super.createEl();\n    this.labelElId_ = 'vjs-playback-rate-value-label-' + this.id_;\n    this.labelEl_ = createEl('div', {\n      className: 'vjs-playback-rate-value',\n      id: this.labelElId_,\n      textContent: '1x'\n    });\n    el.appendChild(this.labelEl_);\n    return el;\n  }\n  dispose() {\n    this.labelEl_ = null;\n    super.dispose();\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-playback-rate ${super.buildCSSClass()}`;\n  }\n  buildWrapperCSSClass() {\n    return `vjs-playback-rate ${super.buildWrapperCSSClass()}`;\n  }\n\n  /**\n   * Create the list of menu items. Specific to each subclass.\n   *\n   */\n  createItems() {\n    const rates = this.playbackRates();\n    const items = [];\n    for (let i = rates.length - 1; i >= 0; i--) {\n      items.push(new PlaybackRateMenuItem(this.player(), {\n        rate: rates[i] + 'x'\n      }));\n    }\n    return items;\n  }\n\n  /**\n   * On playbackrateschange, update the menu to account for the new items.\n   *\n   * @listens Player#playbackrateschange\n   */\n  handlePlaybackRateschange(event) {\n    this.update();\n  }\n\n  /**\n   * Get possible playback rates\n   *\n   * @return {Array}\n   *         All possible playback rates\n   */\n  playbackRates() {\n    const player = this.player();\n    return player.playbackRates && player.playbackRates() || [];\n  }\n\n  /**\n   * Get whether playback rates is supported by the tech\n   * and an array of playback rates exists\n   *\n   * @return {boolean}\n   *         Whether changing playback rate is supported\n   */\n  playbackRateSupported() {\n    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;\n  }\n\n  /**\n   * Hide playback rate controls when they're no playback rate options to select\n   *\n   * @param {Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#loadstart\n   */\n  updateVisibility(event) {\n    if (this.playbackRateSupported()) {\n      this.removeClass('vjs-hidden');\n    } else {\n      this.addClass('vjs-hidden');\n    }\n  }\n\n  /**\n   * Update button label when rate changed\n   *\n   * @param {Event} [event]\n   *        The event that caused this function to run.\n   *\n   * @listens Player#ratechange\n   */\n  updateLabel(event) {\n    if (this.playbackRateSupported()) {\n      this.labelEl_.textContent = this.player().playbackRate() + 'x';\n    }\n  }\n}\n\n/**\n * The text that should display over the `PlaybackRateMenuButton`s controls.\n *\n * Added for localization.\n *\n * @type {string}\n * @protected\n */\nPlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';\nComponent$1.registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);\n\n/**\n * @file spacer.js\n */\n\n/**\n * Just an empty spacer element that can be used as an append point for plugins, etc.\n * Also can be used to create space between elements when necessary.\n *\n * @extends Component\n */\nclass Spacer extends Component$1 {\n  /**\n  * Builds the default DOM `className`.\n  *\n  * @return {string}\n  *         The DOM `className` for this object.\n  */\n  buildCSSClass() {\n    return `vjs-spacer ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl(tag = 'div', props = {}, attributes = {}) {\n    if (!props.className) {\n      props.className = this.buildCSSClass();\n    }\n    return super.createEl(tag, props, attributes);\n  }\n}\nComponent$1.registerComponent('Spacer', Spacer);\n\n/**\n * @file custom-control-spacer.js\n */\n\n/**\n * Spacer specifically meant to be used as an insertion point for new plugins, etc.\n *\n * @extends Spacer\n */\nclass CustomControlSpacer extends Spacer {\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   */\n  buildCSSClass() {\n    return `vjs-custom-control-spacer ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: this.buildCSSClass(),\n      // No-flex/table-cell mode requires there be some content\n      // in the cell to fill the remaining space of the table.\n      textContent: '\\u00a0'\n    });\n  }\n}\nComponent$1.registerComponent('CustomControlSpacer', CustomControlSpacer);\n\n/**\n * @file control-bar.js\n */\n\n/**\n * Container of main controls.\n *\n * @extends Component\n */\nclass ControlBar extends Component$1 {\n  /**\n   * Create the `Component`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    return super.createEl('div', {\n      className: 'vjs-control-bar',\n      dir: 'ltr'\n    });\n  }\n}\n\n/**\n * Default options for `ControlBar`\n *\n * @type {Object}\n * @private\n */\nControlBar.prototype.options_ = {\n  children: ['playToggle', 'skipBackward', 'skipForward', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'seekToLive', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'audioTrackButton', 'fullscreenToggle']\n};\nif ('exitPictureInPicture' in document) {\n  ControlBar.prototype.options_.children.splice(ControlBar.prototype.options_.children.length - 1, 0, 'pictureInPictureToggle');\n}\nComponent$1.registerComponent('ControlBar', ControlBar);\n\n/**\n * @file error-display.js\n */\n\n/**\n * A display that indicates an error has occurred. This means that the video\n * is unplayable.\n *\n * @extends ModalDialog\n */\nclass ErrorDisplay extends ModalDialog {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param  { import('./player').default } player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param  {Object} [options]\n   *         The key/value store of player options.\n   */\n  constructor(player, options) {\n    super(player, options);\n    this.on(player, 'error', e => this.open(e));\n  }\n\n  /**\n   * Builds the default DOM `className`.\n   *\n   * @return {string}\n   *         The DOM `className` for this object.\n   *\n   * @deprecated Since version 5.\n   */\n  buildCSSClass() {\n    return `vjs-error-display ${super.buildCSSClass()}`;\n  }\n\n  /**\n   * Gets the localized error message based on the `Player`s error.\n   *\n   * @return {string}\n   *         The `Player`s error message localized or an empty string.\n   */\n  content() {\n    const error = this.player().error();\n    return error ? this.localize(error.message) : '';\n  }\n}\n\n/**\n * The default options for an `ErrorDisplay`.\n *\n * @private\n */\nErrorDisplay.prototype.options_ = Object.assign({}, ModalDialog.prototype.options_, {\n  pauseOnOpen: false,\n  fillAlways: true,\n  temporary: false,\n  uncloseable: true\n});\nComponent$1.registerComponent('ErrorDisplay', ErrorDisplay);\n\n/**\n * @file text-track-settings.js\n */\nconst LOCAL_STORAGE_KEY$1 = 'vjs-text-track-settings';\nconst COLOR_BLACK = ['#000', 'Black'];\nconst COLOR_BLUE = ['#00F', 'Blue'];\nconst COLOR_CYAN = ['#0FF', 'Cyan'];\nconst COLOR_GREEN = ['#0F0', 'Green'];\nconst COLOR_MAGENTA = ['#F0F', 'Magenta'];\nconst COLOR_RED = ['#F00', 'Red'];\nconst COLOR_WHITE = ['#FFF', 'White'];\nconst COLOR_YELLOW = ['#FF0', 'Yellow'];\nconst OPACITY_OPAQUE = ['1', 'Opaque'];\nconst OPACITY_SEMI = ['0.5', 'Semi-Transparent'];\nconst OPACITY_TRANS = ['0', 'Transparent'];\n\n// Configuration for the various <select> elements in the DOM of this component.\n//\n// Possible keys include:\n//\n// `default`:\n//   The default option index. Only needs to be provided if not zero.\n// `parser`:\n//   A function which is used to parse the value from the selected option in\n//   a customized way.\n// `selector`:\n//   The selector used to find the associated <select> element.\nconst selectConfigs = {\n  backgroundColor: {\n    selector: '.vjs-bg-color > select',\n    id: 'captions-background-color-%s',\n    label: 'Color',\n    options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n  },\n  backgroundOpacity: {\n    selector: '.vjs-bg-opacity > select',\n    id: 'captions-background-opacity-%s',\n    label: 'Opacity',\n    options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]\n  },\n  color: {\n    selector: '.vjs-text-color > select',\n    id: 'captions-foreground-color-%s',\n    label: 'Color',\n    options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]\n  },\n  edgeStyle: {\n    selector: '.vjs-edge-style > select',\n    id: '%s',\n    label: 'Text Edge Style',\n    options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]\n  },\n  fontFamily: {\n    selector: '.vjs-font-family > select',\n    id: 'captions-font-family-%s',\n    label: 'Font Family',\n    options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]\n  },\n  fontPercent: {\n    selector: '.vjs-font-percent > select',\n    id: 'captions-font-size-%s',\n    label: 'Font Size',\n    options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],\n    default: 2,\n    parser: v => v === '1.00' ? null : Number(v)\n  },\n  textOpacity: {\n    selector: '.vjs-text-opacity > select',\n    id: 'captions-foreground-opacity-%s',\n    label: 'Opacity',\n    options: [OPACITY_OPAQUE, OPACITY_SEMI]\n  },\n  // Options for this object are defined below.\n  windowColor: {\n    selector: '.vjs-window-color > select',\n    id: 'captions-window-color-%s',\n    label: 'Color'\n  },\n  // Options for this object are defined below.\n  windowOpacity: {\n    selector: '.vjs-window-opacity > select',\n    id: 'captions-window-opacity-%s',\n    label: 'Opacity',\n    options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]\n  }\n};\nselectConfigs.windowColor.options = selectConfigs.backgroundColor.options;\n\n/**\n * Get the actual value of an option.\n *\n * @param  {string} value\n *         The value to get\n *\n * @param  {Function} [parser]\n *         Optional function to adjust the value.\n *\n * @return {*}\n *         - Will be `undefined` if no value exists\n *         - Will be `undefined` if the given value is \"none\".\n *         - Will be the actual value otherwise.\n *\n * @private\n */\nfunction parseOptionValue(value, parser) {\n  if (parser) {\n    value = parser(value);\n  }\n  if (value && value !== 'none') {\n    return value;\n  }\n}\n\n/**\n * Gets the value of the selected <option> element within a <select> element.\n *\n * @param  {Element} el\n *         the element to look in\n *\n * @param  {Function} [parser]\n *         Optional function to adjust the value.\n *\n * @return {*}\n *         - Will be `undefined` if no value exists\n *         - Will be `undefined` if the given value is \"none\".\n *         - Will be the actual value otherwise.\n *\n * @private\n */\nfunction getSelectedOptionValue(el, parser) {\n  const value = el.options[el.options.selectedIndex].value;\n  return parseOptionValue(value, parser);\n}\n\n/**\n * Sets the selected <option> element within a <select> element based on a\n * given value.\n *\n * @param {Element} el\n *        The element to look in.\n *\n * @param {string} value\n *        the property to look on.\n *\n * @param {Function} [parser]\n *        Optional function to adjust the value before comparing.\n *\n * @private\n */\nfunction setSelectedOption(el, value, parser) {\n  if (!value) {\n    return;\n  }\n  for (let i = 0; i < el.options.length; i++) {\n    if (parseOptionValue(el.options[i].value, parser) === value) {\n      el.selectedIndex = i;\n      break;\n    }\n  }\n}\n\n/**\n * Manipulate Text Tracks settings.\n *\n * @extends ModalDialog\n */\nclass TextTrackSettings extends ModalDialog {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('../player').default } player\n   *         The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *         The key/value store of player options.\n   */\n  constructor(player, options) {\n    options.temporary = false;\n    super(player, options);\n    this.updateDisplay = this.updateDisplay.bind(this);\n\n    // fill the modal and pretend we have opened it\n    this.fill();\n    this.hasBeenOpened_ = this.hasBeenFilled_ = true;\n    this.endDialog = createEl('p', {\n      className: 'vjs-control-text',\n      textContent: this.localize('End of dialog window.')\n    });\n    this.el().appendChild(this.endDialog);\n    this.setDefaults();\n\n    // Grab `persistTextTrackSettings` from the player options if not passed in child options\n    if (options.persistTextTrackSettings === undefined) {\n      this.options_.persistTextTrackSettings = this.options_.playerOptions.persistTextTrackSettings;\n    }\n    this.on(this.$('.vjs-done-button'), 'click', () => {\n      this.saveSettings();\n      this.close();\n    });\n    this.on(this.$('.vjs-default-button'), 'click', () => {\n      this.setDefaults();\n      this.updateDisplay();\n    });\n    each(selectConfigs, config => {\n      this.on(this.$(config.selector), 'change', this.updateDisplay);\n    });\n    if (this.options_.persistTextTrackSettings) {\n      this.restoreSettings();\n    }\n  }\n  dispose() {\n    this.endDialog = null;\n    super.dispose();\n  }\n\n  /**\n   * Create a <select> element with configured options.\n   *\n   * @param {string} key\n   *        Configuration key to use during creation.\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  createElSelect_(key, legendId = '', type = 'label') {\n    const config = selectConfigs[key];\n    const id = config.id.replace('%s', this.id_);\n    const selectLabelledbyIds = [legendId, id].join(' ').trim();\n    return [`<${type} id=\"${id}\" class=\"${type === 'label' ? 'vjs-label' : ''}\">`, this.localize(config.label), `</${type}>`, `<select aria-labelledby=\"${selectLabelledbyIds}\">`].concat(config.options.map(o => {\n      const optionId = id + '-' + o[1].replace(/\\W+/g, '');\n      return [`<option id=\"${optionId}\" value=\"${o[0]}\" `, `aria-labelledby=\"${selectLabelledbyIds} ${optionId}\">`, this.localize(o[1]), '</option>'].join('');\n    })).concat('</select>').join('');\n  }\n\n  /**\n   * Create foreground color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  createElFgColor_() {\n    const legendId = `captions-text-legend-${this.id_}`;\n    return ['<fieldset class=\"vjs-fg vjs-track-setting\">', `<legend id=\"${legendId}\">`, this.localize('Text'), '</legend>', '<span class=\"vjs-text-color\">', this.createElSelect_('color', legendId), '</span>', '<span class=\"vjs-text-opacity vjs-opacity\">', this.createElSelect_('textOpacity', legendId), '</span>', '</fieldset>'].join('');\n  }\n\n  /**\n   * Create background color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  createElBgColor_() {\n    const legendId = `captions-background-${this.id_}`;\n    return ['<fieldset class=\"vjs-bg vjs-track-setting\">', `<legend id=\"${legendId}\">`, this.localize('Text Background'), '</legend>', '<span class=\"vjs-bg-color\">', this.createElSelect_('backgroundColor', legendId), '</span>', '<span class=\"vjs-bg-opacity vjs-opacity\">', this.createElSelect_('backgroundOpacity', legendId), '</span>', '</fieldset>'].join('');\n  }\n\n  /**\n   * Create window color element for the component\n   *\n   * @return {string}\n   *         An HTML string.\n   *\n   * @private\n   */\n  createElWinColor_() {\n    const legendId = `captions-window-${this.id_}`;\n    return ['<fieldset class=\"vjs-window vjs-track-setting\">', `<legend id=\"${legendId}\">`, this.localize('Caption Area Background'), '</legend>', '<span class=\"vjs-window-color\">', this.createElSelect_('windowColor', legendId), '</span>', '<span class=\"vjs-window-opacity vjs-opacity\">', this.createElSelect_('windowOpacity', legendId), '</span>', '</fieldset>'].join('');\n  }\n\n  /**\n   * Create color elements for the component\n   *\n   * @return {Element}\n   *         The element that was created\n   *\n   * @private\n   */\n  createElColors_() {\n    return createEl('div', {\n      className: 'vjs-track-settings-colors',\n      innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join('')\n    });\n  }\n\n  /**\n   * Create font elements for the component\n   *\n   * @return {Element}\n   *         The element that was created.\n   *\n   * @private\n   */\n  createElFont_() {\n    return createEl('div', {\n      className: 'vjs-track-settings-font',\n      innerHTML: ['<fieldset class=\"vjs-font-percent vjs-track-setting\">', this.createElSelect_('fontPercent', '', 'legend'), '</fieldset>', '<fieldset class=\"vjs-edge-style vjs-track-setting\">', this.createElSelect_('edgeStyle', '', 'legend'), '</fieldset>', '<fieldset class=\"vjs-font-family vjs-track-setting\">', this.createElSelect_('fontFamily', '', 'legend'), '</fieldset>'].join('')\n    });\n  }\n\n  /**\n   * Create controls for the component\n   *\n   * @return {Element}\n   *         The element that was created.\n   *\n   * @private\n   */\n  createElControls_() {\n    const defaultsDescription = this.localize('restore all settings to the default values');\n    return createEl('div', {\n      className: 'vjs-track-settings-controls',\n      innerHTML: [`<button type=\"button\" class=\"vjs-default-button\" title=\"${defaultsDescription}\">`, this.localize('Reset'), `<span class=\"vjs-control-text\"> ${defaultsDescription}</span>`, '</button>', `<button type=\"button\" class=\"vjs-done-button\">${this.localize('Done')}</button>`].join('')\n    });\n  }\n  content() {\n    return [this.createElColors_(), this.createElFont_(), this.createElControls_()];\n  }\n  label() {\n    return this.localize('Caption Settings Dialog');\n  }\n  description() {\n    return this.localize('Beginning of dialog window. Escape will cancel and close the window.');\n  }\n  buildCSSClass() {\n    return super.buildCSSClass() + ' vjs-text-track-settings';\n  }\n\n  /**\n   * Gets an object of text track settings (or null).\n   *\n   * @return {Object}\n   *         An object with config values parsed from the DOM or localStorage.\n   */\n  getValues() {\n    return reduce(selectConfigs, (accum, config, key) => {\n      const value = getSelectedOptionValue(this.$(config.selector), config.parser);\n      if (value !== undefined) {\n        accum[key] = value;\n      }\n      return accum;\n    }, {});\n  }\n\n  /**\n   * Sets text track settings from an object of values.\n   *\n   * @param {Object} values\n   *        An object with config values parsed from the DOM or localStorage.\n   */\n  setValues(values) {\n    each(selectConfigs, (config, key) => {\n      setSelectedOption(this.$(config.selector), values[key], config.parser);\n    });\n  }\n\n  /**\n   * Sets all `<select>` elements to their default values.\n   */\n  setDefaults() {\n    each(selectConfigs, config => {\n      const index = config.hasOwnProperty('default') ? config.default : 0;\n      this.$(config.selector).selectedIndex = index;\n    });\n  }\n\n  /**\n   * Restore texttrack settings from localStorage\n   */\n  restoreSettings() {\n    let values;\n    try {\n      values = JSON.parse(window$1.localStorage.getItem(LOCAL_STORAGE_KEY$1));\n    } catch (err) {\n      log$1.warn(err);\n    }\n    if (values) {\n      this.setValues(values);\n    }\n  }\n\n  /**\n   * Save text track settings to localStorage\n   */\n  saveSettings() {\n    if (!this.options_.persistTextTrackSettings) {\n      return;\n    }\n    const values = this.getValues();\n    try {\n      if (Object.keys(values).length) {\n        window$1.localStorage.setItem(LOCAL_STORAGE_KEY$1, JSON.stringify(values));\n      } else {\n        window$1.localStorage.removeItem(LOCAL_STORAGE_KEY$1);\n      }\n    } catch (err) {\n      log$1.warn(err);\n    }\n  }\n\n  /**\n   * Update display of text track settings\n   */\n  updateDisplay() {\n    const ttDisplay = this.player_.getChild('textTrackDisplay');\n    if (ttDisplay) {\n      ttDisplay.updateDisplay();\n    }\n  }\n\n  /**\n   * conditionally blur the element and refocus the captions button\n   *\n   * @private\n   */\n  conditionalBlur_() {\n    this.previouslyActiveEl_ = null;\n    const cb = this.player_.controlBar;\n    const subsCapsBtn = cb && cb.subsCapsButton;\n    const ccBtn = cb && cb.captionsButton;\n    if (subsCapsBtn) {\n      subsCapsBtn.focus();\n    } else if (ccBtn) {\n      ccBtn.focus();\n    }\n  }\n\n  /**\n   * Repopulate dialog with new localizations on languagechange\n   */\n  handleLanguagechange() {\n    this.fill();\n  }\n}\nComponent$1.registerComponent('TextTrackSettings', TextTrackSettings);\n\n/**\n * @file resize-manager.js\n */\n\n/**\n * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.\n *\n * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.\n *\n * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.\n * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.\n *\n * @example <caption>How to disable the resize manager</caption>\n * const player = videojs('#vid', {\n *   resizeManager: false\n * });\n *\n * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}\n *\n * @extends Component\n */\nclass ResizeManager extends Component$1 {\n  /**\n   * Create the ResizeManager.\n   *\n   * @param {Object} player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of ResizeManager options.\n   *\n   * @param {Object} [options.ResizeObserver]\n   *        A polyfill for ResizeObserver can be passed in here.\n   *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.\n   */\n  constructor(player, options) {\n    let RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || window$1.ResizeObserver;\n\n    // if `null` was passed, we want to disable the ResizeObserver\n    if (options.ResizeObserver === null) {\n      RESIZE_OBSERVER_AVAILABLE = false;\n    }\n\n    // Only create an element when ResizeObserver isn't available\n    const options_ = merge$1({\n      createEl: !RESIZE_OBSERVER_AVAILABLE,\n      reportTouchActivity: false\n    }, options);\n    super(player, options_);\n    this.ResizeObserver = options.ResizeObserver || window$1.ResizeObserver;\n    this.loadListener_ = null;\n    this.resizeObserver_ = null;\n    this.debouncedHandler_ = debounce(() => {\n      this.resizeHandler();\n    }, 100, false, this);\n    if (RESIZE_OBSERVER_AVAILABLE) {\n      this.resizeObserver_ = new this.ResizeObserver(this.debouncedHandler_);\n      this.resizeObserver_.observe(player.el());\n    } else {\n      this.loadListener_ = () => {\n        if (!this.el_ || !this.el_.contentWindow) {\n          return;\n        }\n        const debouncedHandler_ = this.debouncedHandler_;\n        let unloadListener_ = this.unloadListener_ = function () {\n          off(this, 'resize', debouncedHandler_);\n          off(this, 'unload', unloadListener_);\n          unloadListener_ = null;\n        };\n\n        // safari and edge can unload the iframe before resizemanager dispose\n        // we have to dispose of event handlers correctly before that happens\n        on(this.el_.contentWindow, 'unload', unloadListener_);\n        on(this.el_.contentWindow, 'resize', debouncedHandler_);\n      };\n      this.one('load', this.loadListener_);\n    }\n  }\n  createEl() {\n    return super.createEl('iframe', {\n      className: 'vjs-resize-manager',\n      tabIndex: -1,\n      title: this.localize('No content')\n    }, {\n      'aria-hidden': 'true'\n    });\n  }\n\n  /**\n   * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver\n   *\n   * @fires Player#playerresize\n   */\n  resizeHandler() {\n    /**\n     * Called when the player size has changed\n     *\n     * @event Player#playerresize\n     * @type {Event}\n     */\n    // make sure player is still around to trigger\n    // prevents this from causing an error after dispose\n    if (!this.player_ || !this.player_.trigger) {\n      return;\n    }\n    this.player_.trigger('playerresize');\n  }\n  dispose() {\n    if (this.debouncedHandler_) {\n      this.debouncedHandler_.cancel();\n    }\n    if (this.resizeObserver_) {\n      if (this.player_.el()) {\n        this.resizeObserver_.unobserve(this.player_.el());\n      }\n      this.resizeObserver_.disconnect();\n    }\n    if (this.loadListener_) {\n      this.off('load', this.loadListener_);\n    }\n    if (this.el_ && this.el_.contentWindow && this.unloadListener_) {\n      this.unloadListener_.call(this.el_.contentWindow);\n    }\n    this.ResizeObserver = null;\n    this.resizeObserver = null;\n    this.debouncedHandler_ = null;\n    this.loadListener_ = null;\n    super.dispose();\n  }\n}\nComponent$1.registerComponent('ResizeManager', ResizeManager);\n\nconst defaults = {\n  trackingThreshold: 20,\n  liveTolerance: 15\n};\n\n/*\n  track when we are at the live edge, and other helpers for live playback */\n\n/**\n * A class for checking live current time and determining when the player\n * is at or behind the live edge.\n */\nclass LiveTracker extends Component$1 {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param { import('./player').default } player\n   *        The `Player` that this class should be attached to.\n   *\n   * @param {Object} [options]\n   *        The key/value store of player options.\n   *\n   * @param {number} [options.trackingThreshold=20]\n   *        Number of seconds of live window (seekableEnd - seekableStart) that\n   *        media needs to have before the liveui will be shown.\n   *\n   * @param {number} [options.liveTolerance=15]\n   *        Number of seconds behind live that we have to be\n   *        before we will be considered non-live. Note that this will only\n   *        be used when playing at the live edge. This allows large seekable end\n   *        changes to not effect whether we are live or not.\n   */\n  constructor(player, options) {\n    // LiveTracker does not need an element\n    const options_ = merge$1(defaults, options, {\n      createEl: false\n    });\n    super(player, options_);\n    this.trackLiveHandler_ = () => this.trackLive_();\n    this.handlePlay_ = e => this.handlePlay(e);\n    this.handleFirstTimeupdate_ = e => this.handleFirstTimeupdate(e);\n    this.handleSeeked_ = e => this.handleSeeked(e);\n    this.seekToLiveEdge_ = e => this.seekToLiveEdge(e);\n    this.reset_();\n    this.on(this.player_, 'durationchange', e => this.handleDurationchange(e));\n    // we should try to toggle tracking on canplay as native playback engines, like Safari\n    // may not have the proper values for things like seekableEnd until then\n    this.on(this.player_, 'canplay', () => this.toggleTracking());\n  }\n\n  /**\n   * all the functionality for tracking when seek end changes\n   * and for tracking how far past seek end we should be\n   */\n  trackLive_() {\n    const seekable = this.player_.seekable();\n\n    // skip undefined seekable\n    if (!seekable || !seekable.length) {\n      return;\n    }\n    const newTime = Number(window$1.performance.now().toFixed(4));\n    const deltaTime = this.lastTime_ === -1 ? 0 : (newTime - this.lastTime_) / 1000;\n    this.lastTime_ = newTime;\n    this.pastSeekEnd_ = this.pastSeekEnd() + deltaTime;\n    const liveCurrentTime = this.liveCurrentTime();\n    const currentTime = this.player_.currentTime();\n\n    // we are behind live if any are true\n    // 1. the player is paused\n    // 2. the user seeked to a location 2 seconds away from live\n    // 3. the difference between live and current time is greater\n    //    liveTolerance which defaults to 15s\n    let isBehind = this.player_.paused() || this.seekedBehindLive_ || Math.abs(liveCurrentTime - currentTime) > this.options_.liveTolerance;\n\n    // we cannot be behind if\n    // 1. until we have not seen a timeupdate yet\n    // 2. liveCurrentTime is Infinity, which happens on Android and Native Safari\n    if (!this.timeupdateSeen_ || liveCurrentTime === Infinity) {\n      isBehind = false;\n    }\n    if (isBehind !== this.behindLiveEdge_) {\n      this.behindLiveEdge_ = isBehind;\n      this.trigger('liveedgechange');\n    }\n  }\n\n  /**\n   * handle a durationchange event on the player\n   * and start/stop tracking accordingly.\n   */\n  handleDurationchange() {\n    this.toggleTracking();\n  }\n\n  /**\n   * start/stop tracking\n   */\n  toggleTracking() {\n    if (this.player_.duration() === Infinity && this.liveWindow() >= this.options_.trackingThreshold) {\n      if (this.player_.options_.liveui) {\n        this.player_.addClass('vjs-liveui');\n      }\n      this.startTracking();\n    } else {\n      this.player_.removeClass('vjs-liveui');\n      this.stopTracking();\n    }\n  }\n\n  /**\n   * start tracking live playback\n   */\n  startTracking() {\n    if (this.isTracking()) {\n      return;\n    }\n\n    // If we haven't seen a timeupdate, we need to check whether playback\n    // began before this component started tracking. This can happen commonly\n    // when using autoplay.\n    if (!this.timeupdateSeen_) {\n      this.timeupdateSeen_ = this.player_.hasStarted();\n    }\n    this.trackingInterval_ = this.setInterval(this.trackLiveHandler_, UPDATE_REFRESH_INTERVAL);\n    this.trackLive_();\n    this.on(this.player_, ['play', 'pause'], this.trackLiveHandler_);\n    if (!this.timeupdateSeen_) {\n      this.one(this.player_, 'play', this.handlePlay_);\n      this.one(this.player_, 'timeupdate', this.handleFirstTimeupdate_);\n    } else {\n      this.on(this.player_, 'seeked', this.handleSeeked_);\n    }\n  }\n\n  /**\n   * handle the first timeupdate on the player if it wasn't already playing\n   * when live tracker started tracking.\n   */\n  handleFirstTimeupdate() {\n    this.timeupdateSeen_ = true;\n    this.on(this.player_, 'seeked', this.handleSeeked_);\n  }\n\n  /**\n   * Keep track of what time a seek starts, and listen for seeked\n   * to find where a seek ends.\n   */\n  handleSeeked() {\n    const timeDiff = Math.abs(this.liveCurrentTime() - this.player_.currentTime());\n    this.seekedBehindLive_ = this.nextSeekedFromUser_ && timeDiff > 2;\n    this.nextSeekedFromUser_ = false;\n    this.trackLive_();\n  }\n\n  /**\n   * handle the first play on the player, and make sure that we seek\n   * right to the live edge.\n   */\n  handlePlay() {\n    this.one(this.player_, 'timeupdate', this.seekToLiveEdge_);\n  }\n\n  /**\n   * Stop tracking, and set all internal variables to\n   * their initial value.\n   */\n  reset_() {\n    this.lastTime_ = -1;\n    this.pastSeekEnd_ = 0;\n    this.lastSeekEnd_ = -1;\n    this.behindLiveEdge_ = true;\n    this.timeupdateSeen_ = false;\n    this.seekedBehindLive_ = false;\n    this.nextSeekedFromUser_ = false;\n    this.clearInterval(this.trackingInterval_);\n    this.trackingInterval_ = null;\n    this.off(this.player_, ['play', 'pause'], this.trackLiveHandler_);\n    this.off(this.player_, 'seeked', this.handleSeeked_);\n    this.off(this.player_, 'play', this.handlePlay_);\n    this.off(this.player_, 'timeupdate', this.handleFirstTimeupdate_);\n    this.off(this.player_, 'timeupdate', this.seekToLiveEdge_);\n  }\n\n  /**\n   * The next seeked event is from the user. Meaning that any seek\n   * > 2s behind live will be considered behind live for real and\n   * liveTolerance will be ignored.\n   */\n  nextSeekedFromUser() {\n    this.nextSeekedFromUser_ = true;\n  }\n\n  /**\n   * stop tracking live playback\n   */\n  stopTracking() {\n    if (!this.isTracking()) {\n      return;\n    }\n    this.reset_();\n    this.trigger('liveedgechange');\n  }\n\n  /**\n   * A helper to get the player seekable end\n   * so that we don't have to null check everywhere\n   *\n   * @return {number}\n   *         The furthest seekable end or Infinity.\n   */\n  seekableEnd() {\n    const seekable = this.player_.seekable();\n    const seekableEnds = [];\n    let i = seekable ? seekable.length : 0;\n    while (i--) {\n      seekableEnds.push(seekable.end(i));\n    }\n\n    // grab the furthest seekable end after sorting, or if there are none\n    // default to Infinity\n    return seekableEnds.length ? seekableEnds.sort()[seekableEnds.length - 1] : Infinity;\n  }\n\n  /**\n   * A helper to get the player seekable start\n   * so that we don't have to null check everywhere\n   *\n   * @return {number}\n   *         The earliest seekable start or 0.\n   */\n  seekableStart() {\n    const seekable = this.player_.seekable();\n    const seekableStarts = [];\n    let i = seekable ? seekable.length : 0;\n    while (i--) {\n      seekableStarts.push(seekable.start(i));\n    }\n\n    // grab the first seekable start after sorting, or if there are none\n    // default to 0\n    return seekableStarts.length ? seekableStarts.sort()[0] : 0;\n  }\n\n  /**\n   * Get the live time window aka\n   * the amount of time between seekable start and\n   * live current time.\n   *\n   * @return {number}\n   *         The amount of seconds that are seekable in\n   *         the live video.\n   */\n  liveWindow() {\n    const liveCurrentTime = this.liveCurrentTime();\n\n    // if liveCurrenTime is Infinity then we don't have a liveWindow at all\n    if (liveCurrentTime === Infinity) {\n      return 0;\n    }\n    return liveCurrentTime - this.seekableStart();\n  }\n\n  /**\n   * Determines if the player is live, only checks if this component\n   * is tracking live playback or not\n   *\n   * @return {boolean}\n   *         Whether liveTracker is tracking\n   */\n  isLive() {\n    return this.isTracking();\n  }\n\n  /**\n   * Determines if currentTime is at the live edge and won't fall behind\n   * on each seekableendchange\n   *\n   * @return {boolean}\n   *         Whether playback is at the live edge\n   */\n  atLiveEdge() {\n    return !this.behindLiveEdge();\n  }\n\n  /**\n   * get what we expect the live current time to be\n   *\n   * @return {number}\n   *         The expected live current time\n   */\n  liveCurrentTime() {\n    return this.pastSeekEnd() + this.seekableEnd();\n  }\n\n  /**\n   * The number of seconds that have occurred after seekable end\n   * changed. This will be reset to 0 once seekable end changes.\n   *\n   * @return {number}\n   *         Seconds past the current seekable end\n   */\n  pastSeekEnd() {\n    const seekableEnd = this.seekableEnd();\n    if (this.lastSeekEnd_ !== -1 && seekableEnd !== this.lastSeekEnd_) {\n      this.pastSeekEnd_ = 0;\n    }\n    this.lastSeekEnd_ = seekableEnd;\n    return this.pastSeekEnd_;\n  }\n\n  /**\n   * If we are currently behind the live edge, aka currentTime will be\n   * behind on a seekableendchange\n   *\n   * @return {boolean}\n   *         If we are behind the live edge\n   */\n  behindLiveEdge() {\n    return this.behindLiveEdge_;\n  }\n\n  /**\n   * Whether live tracker is currently tracking or not.\n   */\n  isTracking() {\n    return typeof this.trackingInterval_ === 'number';\n  }\n\n  /**\n   * Seek to the live edge if we are behind the live edge\n   */\n  seekToLiveEdge() {\n    this.seekedBehindLive_ = false;\n    if (this.atLiveEdge()) {\n      return;\n    }\n    this.nextSeekedFromUser_ = false;\n    this.player_.currentTime(this.liveCurrentTime());\n  }\n\n  /**\n   * Dispose of liveTracker\n   */\n  dispose() {\n    this.stopTracking();\n    super.dispose();\n  }\n}\nComponent$1.registerComponent('LiveTracker', LiveTracker);\n\n/**\n * Displays an element over the player which contains an optional title and\n * description for the current content.\n *\n * Much of the code for this component originated in the now obsolete\n * videojs-dock plugin: https://github.com/brightcove/videojs-dock/\n *\n * @extends Component\n */\nclass TitleBar extends Component$1 {\n  constructor(player, options) {\n    super(player, options);\n    this.on('statechanged', e => this.updateDom_());\n    this.updateDom_();\n  }\n\n  /**\n   * Create the `TitleBar`'s DOM element\n   *\n   * @return {Element}\n   *         The element that was created.\n   */\n  createEl() {\n    this.els = {\n      title: createEl('div', {\n        className: 'vjs-title-bar-title',\n        id: `vjs-title-bar-title-${newGUID()}`\n      }),\n      description: createEl('div', {\n        className: 'vjs-title-bar-description',\n        id: `vjs-title-bar-description-${newGUID()}`\n      })\n    };\n    return createEl('div', {\n      className: 'vjs-title-bar'\n    }, {}, Object.values(this.els));\n  }\n\n  /**\n   * Updates the DOM based on the component's state object.\n   */\n  updateDom_() {\n    const tech = this.player_.tech_;\n    const techEl = tech && tech.el_;\n    const techAriaAttrs = {\n      title: 'aria-labelledby',\n      description: 'aria-describedby'\n    };\n    ['title', 'description'].forEach(k => {\n      const value = this.state[k];\n      const el = this.els[k];\n      const techAriaAttr = techAriaAttrs[k];\n      emptyEl(el);\n      if (value) {\n        textContent(el, value);\n      }\n\n      // If there is a tech element available, update its ARIA attributes\n      // according to whether a title and/or description have been provided.\n      if (techEl) {\n        techEl.removeAttribute(techAriaAttr);\n        if (value) {\n          techEl.setAttribute(techAriaAttr, el.id);\n        }\n      }\n    });\n    if (this.state.title || this.state.description) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Update the contents of the title bar component with new title and\n   * description text.\n   *\n   * If both title and description are missing, the title bar will be hidden.\n   *\n   * If either title or description are present, the title bar will be visible.\n   *\n   * NOTE: Any previously set value will be preserved. To unset a previously\n   * set value, you must pass an empty string or null.\n   *\n   * For example:\n   *\n   * ```\n   * update({title: 'foo', description: 'bar'}) // title: 'foo', description: 'bar'\n   * update({description: 'bar2'}) // title: 'foo', description: 'bar2'\n   * update({title: ''}) // title: '', description: 'bar2'\n   * update({title: 'foo', description: null}) // title: 'foo', description: null\n   * ```\n   *\n   * @param  {Object} [options={}]\n   *         An options object. When empty, the title bar will be hidden.\n   *\n   * @param  {string} [options.title]\n   *         A title to display in the title bar.\n   *\n   * @param  {string} [options.description]\n   *         A description to display in the title bar.\n   */\n  update(options) {\n    this.setState(options);\n  }\n\n  /**\n   * Dispose the component.\n   */\n  dispose() {\n    const tech = this.player_.tech_;\n    const techEl = tech && tech.el_;\n    if (techEl) {\n      techEl.removeAttribute('aria-labelledby');\n      techEl.removeAttribute('aria-describedby');\n    }\n    super.dispose();\n    this.els = null;\n  }\n}\nComponent$1.registerComponent('TitleBar', TitleBar);\n\n/**\n * This function is used to fire a sourceset when there is something\n * similar to `mediaEl.load()` being called. It will try to find the source via\n * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`\n * with the source that was found or empty string if we cannot know. If it cannot\n * find a source then `sourceset` will not be fired.\n *\n * @param { import('./html5').default } tech\n *        The tech object that sourceset was setup on\n *\n * @return {boolean}\n *         returns false if the sourceset was not fired and true otherwise.\n */\nconst sourcesetLoad = tech => {\n  const el = tech.el();\n\n  // if `el.src` is set, that source will be loaded.\n  if (el.hasAttribute('src')) {\n    tech.triggerSourceset(el.src);\n    return true;\n  }\n\n  /**\n   * Since there isn't a src property on the media element, source elements will be used for\n   * implementing the source selection algorithm. This happens asynchronously and\n   * for most cases were there is more than one source we cannot tell what source will\n   * be loaded, without re-implementing the source selection algorithm. At this time we are not\n   * going to do that. There are three special cases that we do handle here though:\n   *\n   * 1. If there are no sources, do not fire `sourceset`.\n   * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`\n   * 3. If there is more than one `<source>` but all of them have the same `src` url.\n   *    That will be our src.\n   */\n  const sources = tech.$$('source');\n  const srcUrls = [];\n  let src = '';\n\n  // if there are no sources, do not fire sourceset\n  if (!sources.length) {\n    return false;\n  }\n\n  // only count valid/non-duplicate source elements\n  for (let i = 0; i < sources.length; i++) {\n    const url = sources[i].src;\n    if (url && srcUrls.indexOf(url) === -1) {\n      srcUrls.push(url);\n    }\n  }\n\n  // there were no valid sources\n  if (!srcUrls.length) {\n    return false;\n  }\n\n  // there is only one valid source element url\n  // use that\n  if (srcUrls.length === 1) {\n    src = srcUrls[0];\n  }\n  tech.triggerSourceset(src);\n  return true;\n};\n\n/**\n * our implementation of an `innerHTML` descriptor for browsers\n * that do not have one.\n */\nconst innerHTMLDescriptorPolyfill = Object.defineProperty({}, 'innerHTML', {\n  get() {\n    return this.cloneNode(true).innerHTML;\n  },\n  set(v) {\n    // make a dummy node to use innerHTML on\n    const dummy = document.createElement(this.nodeName.toLowerCase());\n\n    // set innerHTML to the value provided\n    dummy.innerHTML = v;\n\n    // make a document fragment to hold the nodes from dummy\n    const docFrag = document.createDocumentFragment();\n\n    // copy all of the nodes created by the innerHTML on dummy\n    // to the document fragment\n    while (dummy.childNodes.length) {\n      docFrag.appendChild(dummy.childNodes[0]);\n    }\n\n    // remove content\n    this.innerText = '';\n\n    // now we add all of that html in one by appending the\n    // document fragment. This is how innerHTML does it.\n    window$1.Element.prototype.appendChild.call(this, docFrag);\n\n    // then return the result that innerHTML's setter would\n    return this.innerHTML;\n  }\n});\n\n/**\n * Get a property descriptor given a list of priorities and the\n * property to get.\n */\nconst getDescriptor = (priority, prop) => {\n  let descriptor = {};\n  for (let i = 0; i < priority.length; i++) {\n    descriptor = Object.getOwnPropertyDescriptor(priority[i], prop);\n    if (descriptor && descriptor.set && descriptor.get) {\n      break;\n    }\n  }\n  descriptor.enumerable = true;\n  descriptor.configurable = true;\n  return descriptor;\n};\nconst getInnerHTMLDescriptor = tech => getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, window$1.Element.prototype, innerHTMLDescriptorPolyfill], 'innerHTML');\n\n/**\n * Patches browser internal functions so that we can tell synchronously\n * if a `<source>` was appended to the media element. For some reason this\n * causes a `sourceset` if the the media element is ready and has no source.\n * This happens when:\n * - The page has just loaded and the media element does not have a source.\n * - The media element was emptied of all sources, then `load()` was called.\n *\n * It does this by patching the following functions/properties when they are supported:\n *\n * - `append()` - can be used to add a `<source>` element to the media element\n * - `appendChild()` - can be used to add a `<source>` element to the media element\n * - `insertAdjacentHTML()` -  can be used to add a `<source>` element to the media element\n * - `innerHTML` -  can be used to add a `<source>` element to the media element\n *\n * @param {Html5} tech\n *        The tech object that sourceset is being setup on.\n */\nconst firstSourceWatch = function (tech) {\n  const el = tech.el();\n\n  // make sure firstSourceWatch isn't setup twice.\n  if (el.resetSourceWatch_) {\n    return;\n  }\n  const old = {};\n  const innerDescriptor = getInnerHTMLDescriptor(tech);\n  const appendWrapper = appendFn => (...args) => {\n    const retval = appendFn.apply(el, args);\n    sourcesetLoad(tech);\n    return retval;\n  };\n  ['append', 'appendChild', 'insertAdjacentHTML'].forEach(k => {\n    if (!el[k]) {\n      return;\n    }\n\n    // store the old function\n    old[k] = el[k];\n\n    // call the old function with a sourceset if a source\n    // was loaded\n    el[k] = appendWrapper(old[k]);\n  });\n  Object.defineProperty(el, 'innerHTML', merge$1(innerDescriptor, {\n    set: appendWrapper(innerDescriptor.set)\n  }));\n  el.resetSourceWatch_ = () => {\n    el.resetSourceWatch_ = null;\n    Object.keys(old).forEach(k => {\n      el[k] = old[k];\n    });\n    Object.defineProperty(el, 'innerHTML', innerDescriptor);\n  };\n\n  // on the first sourceset, we need to revert our changes\n  tech.one('sourceset', el.resetSourceWatch_);\n};\n\n/**\n * our implementation of a `src` descriptor for browsers\n * that do not have one\n */\nconst srcDescriptorPolyfill = Object.defineProperty({}, 'src', {\n  get() {\n    if (this.hasAttribute('src')) {\n      return getAbsoluteURL(window$1.Element.prototype.getAttribute.call(this, 'src'));\n    }\n    return '';\n  },\n  set(v) {\n    window$1.Element.prototype.setAttribute.call(this, 'src', v);\n    return v;\n  }\n});\nconst getSrcDescriptor = tech => getDescriptor([tech.el(), window$1.HTMLMediaElement.prototype, srcDescriptorPolyfill], 'src');\n\n/**\n * setup `sourceset` handling on the `Html5` tech. This function\n * patches the following element properties/functions:\n *\n * - `src` - to determine when `src` is set\n * - `setAttribute()` - to determine when `src` is set\n * - `load()` - this re-triggers the source selection algorithm, and can\n *              cause a sourceset.\n *\n * If there is no source when we are adding `sourceset` support or during a `load()`\n * we also patch the functions listed in `firstSourceWatch`.\n *\n * @param {Html5} tech\n *        The tech to patch\n */\nconst setupSourceset = function (tech) {\n  if (!tech.featuresSourceset) {\n    return;\n  }\n  const el = tech.el();\n\n  // make sure sourceset isn't setup twice.\n  if (el.resetSourceset_) {\n    return;\n  }\n  const srcDescriptor = getSrcDescriptor(tech);\n  const oldSetAttribute = el.setAttribute;\n  const oldLoad = el.load;\n  Object.defineProperty(el, 'src', merge$1(srcDescriptor, {\n    set: v => {\n      const retval = srcDescriptor.set.call(el, v);\n\n      // we use the getter here to get the actual value set on src\n      tech.triggerSourceset(el.src);\n      return retval;\n    }\n  }));\n  el.setAttribute = (n, v) => {\n    const retval = oldSetAttribute.call(el, n, v);\n    if (/src/i.test(n)) {\n      tech.triggerSourceset(el.src);\n    }\n    return retval;\n  };\n  el.load = () => {\n    const retval = oldLoad.call(el);\n\n    // if load was called, but there was no source to fire\n    // sourceset on. We have to watch for a source append\n    // as that can trigger a `sourceset` when the media element\n    // has no source\n    if (!sourcesetLoad(tech)) {\n      tech.triggerSourceset('');\n      firstSourceWatch(tech);\n    }\n    return retval;\n  };\n  if (el.currentSrc) {\n    tech.triggerSourceset(el.currentSrc);\n  } else if (!sourcesetLoad(tech)) {\n    firstSourceWatch(tech);\n  }\n  el.resetSourceset_ = () => {\n    el.resetSourceset_ = null;\n    el.load = oldLoad;\n    el.setAttribute = oldSetAttribute;\n    Object.defineProperty(el, 'src', srcDescriptor);\n    if (el.resetSourceWatch_) {\n      el.resetSourceWatch_();\n    }\n  };\n};\n\n/**\n * @file html5.js\n */\n\n/**\n * HTML5 Media Controller - Wrapper for HTML5 Media API\n *\n * @mixes Tech~SourceHandlerAdditions\n * @extends Tech\n */\nclass Html5 extends Tech {\n  /**\n  * Create an instance of this Tech.\n  *\n  * @param {Object} [options]\n  *        The key/value store of player options.\n  *\n  * @param {Function} [ready]\n  *        Callback function to call when the `HTML5` Tech is ready.\n  */\n  constructor(options, ready) {\n    super(options, ready);\n    const source = options.source;\n    let crossoriginTracks = false;\n    this.featuresVideoFrameCallback = this.featuresVideoFrameCallback && this.el_.tagName === 'VIDEO';\n\n    // Set the source if one is provided\n    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)\n    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source\n    // anyway so the error gets fired.\n    if (source && (this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {\n      this.setSource(source);\n    } else {\n      this.handleLateInit_(this.el_);\n    }\n\n    // setup sourceset after late sourceset/init\n    if (options.enableSourceset) {\n      this.setupSourcesetHandling_();\n    }\n    this.isScrubbing_ = false;\n    if (this.el_.hasChildNodes()) {\n      const nodes = this.el_.childNodes;\n      let nodesLength = nodes.length;\n      const removeNodes = [];\n      while (nodesLength--) {\n        const node = nodes[nodesLength];\n        const nodeName = node.nodeName.toLowerCase();\n        if (nodeName === 'track') {\n          if (!this.featuresNativeTextTracks) {\n            // Empty video tag tracks so the built-in player doesn't use them also.\n            // This may not be fast enough to stop HTML5 browsers from reading the tags\n            // so we'll need to turn off any default tracks if we're manually doing\n            // captions and subtitles. videoElement.textTracks\n            removeNodes.push(node);\n          } else {\n            // store HTMLTrackElement and TextTrack to remote list\n            this.remoteTextTrackEls().addTrackElement_(node);\n            this.remoteTextTracks().addTrack(node.track);\n            this.textTracks().addTrack(node.track);\n            if (!crossoriginTracks && !this.el_.hasAttribute('crossorigin') && isCrossOrigin(node.src)) {\n              crossoriginTracks = true;\n            }\n          }\n        }\n      }\n      for (let i = 0; i < removeNodes.length; i++) {\n        this.el_.removeChild(removeNodes[i]);\n      }\n    }\n    this.proxyNativeTracks_();\n    if (this.featuresNativeTextTracks && crossoriginTracks) {\n      log$1.warn('Text Tracks are being loaded from another origin but the crossorigin attribute isn\\'t used.\\n' + 'This may prevent text tracks from loading.');\n    }\n\n    // prevent iOS Safari from disabling metadata text tracks during native playback\n    this.restoreMetadataTracksInIOSNativePlayer_();\n\n    // Determine if native controls should be used\n    // Our goal should be to get the custom controls on mobile solid everywhere\n    // so we can remove this all together. Right now this will block custom\n    // controls on touch enabled laptops like the Chrome Pixel\n    if ((TOUCH_ENABLED || IS_IPHONE) && options.nativeControlsForTouch === true) {\n      this.setControls(true);\n    }\n\n    // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`\n    // into a `fullscreenchange` event\n    this.proxyWebkitFullscreen_();\n    this.triggerReady();\n  }\n\n  /**\n   * Dispose of `HTML5` media element and remove all tracks.\n   */\n  dispose() {\n    if (this.el_ && this.el_.resetSourceset_) {\n      this.el_.resetSourceset_();\n    }\n    Html5.disposeMediaElement(this.el_);\n    this.options_ = null;\n\n    // tech will handle clearing of the emulated track list\n    super.dispose();\n  }\n\n  /**\n   * Modify the media element so that we can detect when\n   * the source is changed. Fires `sourceset` just after the source has changed\n   */\n  setupSourcesetHandling_() {\n    setupSourceset(this);\n  }\n\n  /**\n   * When a captions track is enabled in the iOS Safari native player, all other\n   * tracks are disabled (including metadata tracks), which nulls all of their\n   * associated cue points. This will restore metadata tracks to their pre-fullscreen\n   * state in those cases so that cue points are not needlessly lost.\n   *\n   * @private\n   */\n  restoreMetadataTracksInIOSNativePlayer_() {\n    const textTracks = this.textTracks();\n    let metadataTracksPreFullscreenState;\n\n    // captures a snapshot of every metadata track's current state\n    const takeMetadataTrackSnapshot = () => {\n      metadataTracksPreFullscreenState = [];\n      for (let i = 0; i < textTracks.length; i++) {\n        const track = textTracks[i];\n        if (track.kind === 'metadata') {\n          metadataTracksPreFullscreenState.push({\n            track,\n            storedMode: track.mode\n          });\n        }\n      }\n    };\n\n    // snapshot each metadata track's initial state, and update the snapshot\n    // each time there is a track 'change' event\n    takeMetadataTrackSnapshot();\n    textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n    this.on('dispose', () => textTracks.removeEventListener('change', takeMetadataTrackSnapshot));\n    const restoreTrackMode = () => {\n      for (let i = 0; i < metadataTracksPreFullscreenState.length; i++) {\n        const storedTrack = metadataTracksPreFullscreenState[i];\n        if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {\n          storedTrack.track.mode = storedTrack.storedMode;\n        }\n      }\n      // we only want this handler to be executed on the first 'change' event\n      textTracks.removeEventListener('change', restoreTrackMode);\n    };\n\n    // when we enter fullscreen playback, stop updating the snapshot and\n    // restore all track modes to their pre-fullscreen state\n    this.on('webkitbeginfullscreen', () => {\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', restoreTrackMode);\n      textTracks.addEventListener('change', restoreTrackMode);\n    });\n\n    // start updating the snapshot again after leaving fullscreen\n    this.on('webkitendfullscreen', () => {\n      // remove the listener before adding it just in case it wasn't previously removed\n      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);\n      textTracks.addEventListener('change', takeMetadataTrackSnapshot);\n\n      // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback\n      textTracks.removeEventListener('change', restoreTrackMode);\n    });\n  }\n\n  /**\n   * Attempt to force override of tracks for the given type\n   *\n   * @param {string} type - Track type to override, possible values include 'Audio',\n   * 'Video', and 'Text'.\n   * @param {boolean} override - If set to true native audio/video will be overridden,\n   * otherwise native audio/video will potentially be used.\n   * @private\n   */\n  overrideNative_(type, override) {\n    // If there is no behavioral change don't add/remove listeners\n    if (override !== this[`featuresNative${type}Tracks`]) {\n      return;\n    }\n    const lowerCaseType = type.toLowerCase();\n    if (this[`${lowerCaseType}TracksListeners_`]) {\n      Object.keys(this[`${lowerCaseType}TracksListeners_`]).forEach(eventName => {\n        const elTracks = this.el()[`${lowerCaseType}Tracks`];\n        elTracks.removeEventListener(eventName, this[`${lowerCaseType}TracksListeners_`][eventName]);\n      });\n    }\n    this[`featuresNative${type}Tracks`] = !override;\n    this[`${lowerCaseType}TracksListeners_`] = null;\n    this.proxyNativeTracksForType_(lowerCaseType);\n  }\n\n  /**\n   * Attempt to force override of native audio tracks.\n   *\n   * @param {boolean} override - If set to true native audio will be overridden,\n   * otherwise native audio will potentially be used.\n   */\n  overrideNativeAudioTracks(override) {\n    this.overrideNative_('Audio', override);\n  }\n\n  /**\n   * Attempt to force override of native video tracks.\n   *\n   * @param {boolean} override - If set to true native video will be overridden,\n   * otherwise native video will potentially be used.\n   */\n  overrideNativeVideoTracks(override) {\n    this.overrideNative_('Video', override);\n  }\n\n  /**\n   * Proxy native track list events for the given type to our track\n   * lists if the browser we are playing in supports that type of track list.\n   *\n   * @param {string} name - Track type; values include 'audio', 'video', and 'text'\n   * @private\n   */\n  proxyNativeTracksForType_(name) {\n    const props = NORMAL[name];\n    const elTracks = this.el()[props.getterName];\n    const techTracks = this[props.getterName]();\n    if (!this[`featuresNative${props.capitalName}Tracks`] || !elTracks || !elTracks.addEventListener) {\n      return;\n    }\n    const listeners = {\n      change: e => {\n        const event = {\n          type: 'change',\n          target: techTracks,\n          currentTarget: techTracks,\n          srcElement: techTracks\n        };\n        techTracks.trigger(event);\n\n        // if we are a text track change event, we should also notify the\n        // remote text track list. This can potentially cause a false positive\n        // if we were to get a change event on a non-remote track and\n        // we triggered the event on the remote text track list which doesn't\n        // contain that track. However, best practices mean looping through the\n        // list of tracks and searching for the appropriate mode value, so,\n        // this shouldn't pose an issue\n        if (name === 'text') {\n          this[REMOTE.remoteText.getterName]().trigger(event);\n        }\n      },\n      addtrack(e) {\n        techTracks.addTrack(e.track);\n      },\n      removetrack(e) {\n        techTracks.removeTrack(e.track);\n      }\n    };\n    const removeOldTracks = function () {\n      const removeTracks = [];\n      for (let i = 0; i < techTracks.length; i++) {\n        let found = false;\n        for (let j = 0; j < elTracks.length; j++) {\n          if (elTracks[j] === techTracks[i]) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          removeTracks.push(techTracks[i]);\n        }\n      }\n      while (removeTracks.length) {\n        techTracks.removeTrack(removeTracks.shift());\n      }\n    };\n    this[props.getterName + 'Listeners_'] = listeners;\n    Object.keys(listeners).forEach(eventName => {\n      const listener = listeners[eventName];\n      elTracks.addEventListener(eventName, listener);\n      this.on('dispose', e => elTracks.removeEventListener(eventName, listener));\n    });\n\n    // Remove (native) tracks that are not used anymore\n    this.on('loadstart', removeOldTracks);\n    this.on('dispose', e => this.off('loadstart', removeOldTracks));\n  }\n\n  /**\n   * Proxy all native track list events to our track lists if the browser we are playing\n   * in supports that type of track list.\n   *\n   * @private\n   */\n  proxyNativeTracks_() {\n    NORMAL.names.forEach(name => {\n      this.proxyNativeTracksForType_(name);\n    });\n  }\n\n  /**\n   * Create the `Html5` Tech's DOM element.\n   *\n   * @return {Element}\n   *         The element that gets created.\n   */\n  createEl() {\n    let el = this.options_.tag;\n\n    // Check if this browser supports moving the element into the box.\n    // On the iPhone video will break if you move the element,\n    // So we have to create a brand new element.\n    // If we ingested the player div, we do not need to move the media element.\n    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {\n      // If the original tag is still there, clone and remove it.\n      if (el) {\n        const clone = el.cloneNode(true);\n        if (el.parentNode) {\n          el.parentNode.insertBefore(clone, el);\n        }\n        Html5.disposeMediaElement(el);\n        el = clone;\n      } else {\n        el = document.createElement('video');\n\n        // determine if native controls should be used\n        const tagAttributes = this.options_.tag && getAttributes(this.options_.tag);\n        const attributes = merge$1({}, tagAttributes);\n        if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {\n          delete attributes.controls;\n        }\n        setAttributes(el, Object.assign(attributes, {\n          id: this.options_.techId,\n          class: 'vjs-tech'\n        }));\n      }\n      el.playerId = this.options_.playerId;\n    }\n    if (typeof this.options_.preload !== 'undefined') {\n      setAttribute(el, 'preload', this.options_.preload);\n    }\n    if (this.options_.disablePictureInPicture !== undefined) {\n      el.disablePictureInPicture = this.options_.disablePictureInPicture;\n    }\n\n    // Update specific tag settings, in case they were overridden\n    // `autoplay` has to be *last* so that `muted` and `playsinline` are present\n    // when iOS/Safari or other browsers attempt to autoplay.\n    const settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];\n    for (let i = 0; i < settingsAttrs.length; i++) {\n      const attr = settingsAttrs[i];\n      const value = this.options_[attr];\n      if (typeof value !== 'undefined') {\n        if (value) {\n          setAttribute(el, attr, attr);\n        } else {\n          removeAttribute(el, attr);\n        }\n        el[attr] = value;\n      }\n    }\n    return el;\n  }\n\n  /**\n   * This will be triggered if the loadstart event has already fired, before videojs was\n   * ready. Two known examples of when this can happen are:\n   * 1. If we're loading the playback object after it has started loading\n   * 2. The media is already playing the (often with autoplay on) then\n   *\n   * This function will fire another loadstart so that videojs can catchup.\n   *\n   * @fires Tech#loadstart\n   *\n   * @return {undefined}\n   *         returns nothing.\n   */\n  handleLateInit_(el) {\n    if (el.networkState === 0 || el.networkState === 3) {\n      // The video element hasn't started loading the source yet\n      // or didn't find a source\n      return;\n    }\n    if (el.readyState === 0) {\n      // NetworkState is set synchronously BUT loadstart is fired at the\n      // end of the current stack, usually before setInterval(fn, 0).\n      // So at this point we know loadstart may have already fired or is\n      // about to fire, and either way the player hasn't seen it yet.\n      // We don't want to fire loadstart prematurely here and cause a\n      // double loadstart so we'll wait and see if it happens between now\n      // and the next loop, and fire it if not.\n      // HOWEVER, we also want to make sure it fires before loadedmetadata\n      // which could also happen between now and the next loop, so we'll\n      // watch for that also.\n      let loadstartFired = false;\n      const setLoadstartFired = function () {\n        loadstartFired = true;\n      };\n      this.on('loadstart', setLoadstartFired);\n      const triggerLoadstart = function () {\n        // We did miss the original loadstart. Make sure the player\n        // sees loadstart before loadedmetadata\n        if (!loadstartFired) {\n          this.trigger('loadstart');\n        }\n      };\n      this.on('loadedmetadata', triggerLoadstart);\n      this.ready(function () {\n        this.off('loadstart', setLoadstartFired);\n        this.off('loadedmetadata', triggerLoadstart);\n        if (!loadstartFired) {\n          // We did miss the original native loadstart. Fire it now.\n          this.trigger('loadstart');\n        }\n      });\n      return;\n    }\n\n    // From here on we know that loadstart already fired and we missed it.\n    // The other readyState events aren't as much of a problem if we double\n    // them, so not going to go to as much trouble as loadstart to prevent\n    // that unless we find reason to.\n    const eventsToTrigger = ['loadstart'];\n\n    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater\n    eventsToTrigger.push('loadedmetadata');\n\n    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater\n    if (el.readyState >= 2) {\n      eventsToTrigger.push('loadeddata');\n    }\n\n    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater\n    if (el.readyState >= 3) {\n      eventsToTrigger.push('canplay');\n    }\n\n    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)\n    if (el.readyState >= 4) {\n      eventsToTrigger.push('canplaythrough');\n    }\n\n    // We still need to give the player time to add event listeners\n    this.ready(function () {\n      eventsToTrigger.forEach(function (type) {\n        this.trigger(type);\n      }, this);\n    });\n  }\n\n  /**\n   * Set whether we are scrubbing or not.\n   * This is used to decide whether we should use `fastSeek` or not.\n   * `fastSeek` is used to provide trick play on Safari browsers.\n   *\n   * @param {boolean} isScrubbing\n   *                  - true for we are currently scrubbing\n   *                  - false for we are no longer scrubbing\n   */\n  setScrubbing(isScrubbing) {\n    this.isScrubbing_ = isScrubbing;\n  }\n\n  /**\n   * Get whether we are scrubbing or not.\n   *\n   * @return {boolean} isScrubbing\n   *                  - true for we are currently scrubbing\n   *                  - false for we are no longer scrubbing\n   */\n  scrubbing() {\n    return this.isScrubbing_;\n  }\n\n  /**\n   * Set current time for the `HTML5` tech.\n   *\n   * @param {number} seconds\n   *        Set the current time of the media to this.\n   */\n  setCurrentTime(seconds) {\n    try {\n      if (this.isScrubbing_ && this.el_.fastSeek && IS_ANY_SAFARI) {\n        this.el_.fastSeek(seconds);\n      } else {\n        this.el_.currentTime = seconds;\n      }\n    } catch (e) {\n      log$1(e, 'Video is not ready. (Video.js)');\n      // this.warning(VideoJS.warnings.videoNotReady);\n    }\n  }\n\n  /**\n   * Get the current duration of the HTML5 media element.\n   *\n   * @return {number}\n   *         The duration of the media or 0 if there is no duration.\n   */\n  duration() {\n    // Android Chrome will report duration as Infinity for VOD HLS until after\n    // playback has started, which triggers the live display erroneously.\n    // Return NaN if playback has not started and trigger a durationupdate once\n    // the duration can be reliably known.\n    if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {\n      // Wait for the first `timeupdate` with currentTime > 0 - there may be\n      // several with 0\n      const checkProgress = () => {\n        if (this.el_.currentTime > 0) {\n          // Trigger durationchange for genuinely live video\n          if (this.el_.duration === Infinity) {\n            this.trigger('durationchange');\n          }\n          this.off('timeupdate', checkProgress);\n        }\n      };\n      this.on('timeupdate', checkProgress);\n      return NaN;\n    }\n    return this.el_.duration || NaN;\n  }\n\n  /**\n   * Get the current width of the HTML5 media element.\n   *\n   * @return {number}\n   *         The width of the HTML5 media element.\n   */\n  width() {\n    return this.el_.offsetWidth;\n  }\n\n  /**\n   * Get the current height of the HTML5 media element.\n   *\n   * @return {number}\n   *         The height of the HTML5 media element.\n   */\n  height() {\n    return this.el_.offsetHeight;\n  }\n\n  /**\n   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into\n   * `fullscreenchange` event.\n   *\n   * @private\n   * @fires fullscreenchange\n   * @listens webkitendfullscreen\n   * @listens webkitbeginfullscreen\n   * @listens webkitbeginfullscreen\n   */\n  proxyWebkitFullscreen_() {\n    if (!('webkitDisplayingFullscreen' in this.el_)) {\n      return;\n    }\n    const endFn = function () {\n      this.trigger('fullscreenchange', {\n        isFullscreen: false\n      });\n      // Safari will sometimes set controls on the videoelement when existing fullscreen.\n      if (this.el_.controls && !this.options_.nativeControlsForTouch && this.controls()) {\n        this.el_.controls = false;\n      }\n    };\n    const beginFn = function () {\n      if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {\n        this.one('webkitendfullscreen', endFn);\n        this.trigger('fullscreenchange', {\n          isFullscreen: true,\n          // set a flag in case another tech triggers fullscreenchange\n          nativeIOSFullscreen: true\n        });\n      }\n    };\n    this.on('webkitbeginfullscreen', beginFn);\n    this.on('dispose', () => {\n      this.off('webkitbeginfullscreen', beginFn);\n      this.off('webkitendfullscreen', endFn);\n    });\n  }\n\n  /**\n   * Check if fullscreen is supported on the video el.\n   *\n   * @return {boolean}\n   *         - True if fullscreen is supported.\n   *         - False if fullscreen is not supported.\n   */\n  supportsFullScreen() {\n    return typeof this.el_.webkitEnterFullScreen === 'function';\n  }\n\n  /**\n   * Request that the `HTML5` Tech enter fullscreen.\n   */\n  enterFullScreen() {\n    const video = this.el_;\n    if (video.paused && video.networkState <= video.HAVE_METADATA) {\n      // attempt to prime the video element for programmatic access\n      // this isn't necessary on the desktop but shouldn't hurt\n      silencePromise(this.el_.play());\n\n      // playing and pausing synchronously during the transition to fullscreen\n      // can get iOS ~6.1 devices into a play/pause loop\n      this.setTimeout(function () {\n        video.pause();\n        try {\n          video.webkitEnterFullScreen();\n        } catch (e) {\n          this.trigger('fullscreenerror', e);\n        }\n      }, 0);\n    } else {\n      try {\n        video.webkitEnterFullScreen();\n      } catch (e) {\n        this.trigger('fullscreenerror', e);\n      }\n    }\n  }\n\n  /**\n   * Request that the `HTML5` Tech exit fullscreen.\n   */\n  exitFullScreen() {\n    if (!this.el_.webkitDisplayingFullscreen) {\n      this.trigger('fullscreenerror', new Error('The video is not fullscreen'));\n      return;\n    }\n    this.el_.webkitExitFullScreen();\n  }\n\n  /**\n   * Create a floating video window always on top of other windows so that users may\n   * continue consuming media while they interact with other content sites, or\n   * applications on their device.\n   *\n   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}\n   *\n   * @return {Promise}\n   *         A promise with a Picture-in-Picture window.\n   */\n  requestPictureInPicture() {\n    return this.el_.requestPictureInPicture();\n  }\n\n  /**\n   * Native requestVideoFrameCallback if supported by browser/tech, or fallback\n   * Don't use rVCF on Safari when DRM is playing, as it doesn't fire\n   * Needs to be checked later than the constructor\n   * This will be a false positive for clear sources loaded after a Fairplay source\n   *\n   * @param {function} cb function to call\n   * @return {number} id of request\n   */\n  requestVideoFrameCallback(cb) {\n    if (this.featuresVideoFrameCallback && !this.el_.webkitKeys) {\n      return this.el_.requestVideoFrameCallback(cb);\n    }\n    return super.requestVideoFrameCallback(cb);\n  }\n\n  /**\n   * Native or fallback requestVideoFrameCallback\n   *\n   * @param {number} id request id to cancel\n   */\n  cancelVideoFrameCallback(id) {\n    if (this.featuresVideoFrameCallback && !this.el_.webkitKeys) {\n      this.el_.cancelVideoFrameCallback(id);\n    } else {\n      super.cancelVideoFrameCallback(id);\n    }\n  }\n\n  /**\n   * A getter/setter for the `Html5` Tech's source object.\n   * > Note: Please use {@link Html5#setSource}\n   *\n   * @param {Tech~SourceObject} [src]\n   *        The source object you want to set on the `HTML5` techs element.\n   *\n   * @return {Tech~SourceObject|undefined}\n   *         - The current source object when a source is not passed in.\n   *         - undefined when setting\n   *\n   * @deprecated Since version 5.\n   */\n  src(src) {\n    if (src === undefined) {\n      return this.el_.src;\n    }\n\n    // Setting src through `src` instead of `setSrc` will be deprecated\n    this.setSrc(src);\n  }\n\n  /**\n   * Reset the tech by removing all sources and then calling\n   * {@link Html5.resetMediaElement}.\n   */\n  reset() {\n    Html5.resetMediaElement(this.el_);\n  }\n\n  /**\n   * Get the current source on the `HTML5` Tech. Falls back to returning the source from\n   * the HTML5 media element.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object from the HTML5 tech. With a fallback to the\n   *         elements source.\n   */\n  currentSrc() {\n    if (this.currentSource_) {\n      return this.currentSource_.src;\n    }\n    return this.el_.currentSrc;\n  }\n\n  /**\n   * Set controls attribute for the HTML5 media Element.\n   *\n   * @param {string} val\n   *        Value to set the controls attribute to\n   */\n  setControls(val) {\n    this.el_.controls = !!val;\n  }\n\n  /**\n   * Create and returns a remote {@link TextTrack} object.\n   *\n   * @param {string} kind\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)\n   *\n   * @param {string} [label]\n   *        Label to identify the text track\n   *\n   * @param {string} [language]\n   *        Two letter language abbreviation\n   *\n   * @return {TextTrack}\n   *         The TextTrack that gets created.\n   */\n  addTextTrack(kind, label, language) {\n    if (!this.featuresNativeTextTracks) {\n      return super.addTextTrack(kind, label, language);\n    }\n    return this.el_.addTextTrack(kind, label, language);\n  }\n\n  /**\n   * Creates either native TextTrack or an emulated TextTrack depending\n   * on the value of `featuresNativeTextTracks`\n   *\n   * @param {Object} options\n   *        The object should contain the options to initialize the TextTrack with.\n   *\n   * @param {string} [options.kind]\n   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).\n   *\n   * @param {string} [options.label]\n   *        Label to identify the text track\n   *\n   * @param {string} [options.language]\n   *        Two letter language abbreviation.\n   *\n   * @param {boolean} [options.default]\n   *        Default this track to on.\n   *\n   * @param {string} [options.id]\n   *        The internal id to assign this track.\n   *\n   * @param {string} [options.src]\n   *        A source url for the track.\n   *\n   * @return {HTMLTrackElement}\n   *         The track element that gets created.\n   */\n  createRemoteTextTrack(options) {\n    if (!this.featuresNativeTextTracks) {\n      return super.createRemoteTextTrack(options);\n    }\n    const htmlTrackElement = document.createElement('track');\n    if (options.kind) {\n      htmlTrackElement.kind = options.kind;\n    }\n    if (options.label) {\n      htmlTrackElement.label = options.label;\n    }\n    if (options.language || options.srclang) {\n      htmlTrackElement.srclang = options.language || options.srclang;\n    }\n    if (options.default) {\n      htmlTrackElement.default = options.default;\n    }\n    if (options.id) {\n      htmlTrackElement.id = options.id;\n    }\n    if (options.src) {\n      htmlTrackElement.src = options.src;\n    }\n    return htmlTrackElement;\n  }\n\n  /**\n   * Creates a remote text track object and returns an html track element.\n   *\n   * @param {Object} options The object should contain values for\n   * kind, language, label, and src (location of the WebVTT file)\n   * @param {boolean} [manualCleanup=false] if set to true, the TextTrack\n   * will not be removed from the TextTrackList and HtmlTrackElementList\n   * after a source change\n   * @return {HTMLTrackElement} An Html Track Element.\n   * This can be an emulated {@link HTMLTrackElement} or a native one.\n   *\n   */\n  addRemoteTextTrack(options, manualCleanup) {\n    const htmlTrackElement = super.addRemoteTextTrack(options, manualCleanup);\n    if (this.featuresNativeTextTracks) {\n      this.el().appendChild(htmlTrackElement);\n    }\n    return htmlTrackElement;\n  }\n\n  /**\n   * Remove remote `TextTrack` from `TextTrackList` object\n   *\n   * @param {TextTrack} track\n   *        `TextTrack` object to remove\n   */\n  removeRemoteTextTrack(track) {\n    super.removeRemoteTextTrack(track);\n    if (this.featuresNativeTextTracks) {\n      const tracks = this.$$('track');\n      let i = tracks.length;\n      while (i--) {\n        if (track === tracks[i] || track === tracks[i].track) {\n          this.el().removeChild(tracks[i]);\n        }\n      }\n    }\n  }\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object}\n   *         An object with supported media playback quality metrics\n   */\n  getVideoPlaybackQuality() {\n    if (typeof this.el().getVideoPlaybackQuality === 'function') {\n      return this.el().getVideoPlaybackQuality();\n    }\n    const videoPlaybackQuality = {};\n    if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {\n      videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;\n      videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;\n    }\n    if (window$1.performance) {\n      videoPlaybackQuality.creationTime = window$1.performance.now();\n    }\n    return videoPlaybackQuality;\n  }\n}\n\n/* HTML5 Support Testing ---------------------------------------------------- */\n\n/**\n * Element for testing browser HTML5 media capabilities\n *\n * @type {Element}\n * @constant\n * @private\n */\ndefineLazyProperty(Html5, 'TEST_VID', function () {\n  if (!isReal()) {\n    return;\n  }\n  const video = document.createElement('video');\n  const track = document.createElement('track');\n  track.kind = 'captions';\n  track.srclang = 'en';\n  track.label = 'English';\n  video.appendChild(track);\n  return video;\n});\n\n/**\n * Check if HTML5 media is supported by this browser/device.\n *\n * @return {boolean}\n *         - True if HTML5 media is supported.\n *         - False if HTML5 media is not supported.\n */\nHtml5.isSupported = function () {\n  // IE with no Media Player is a LIAR! (#984)\n  try {\n    Html5.TEST_VID.volume = 0.5;\n  } catch (e) {\n    return false;\n  }\n  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);\n};\n\n/**\n * Check if the tech can support the given type\n *\n * @param {string} type\n *        The mimetype to check\n * @return {string} 'probably', 'maybe', or '' (empty string)\n */\nHtml5.canPlayType = function (type) {\n  return Html5.TEST_VID.canPlayType(type);\n};\n\n/**\n * Check if the tech can support the given source\n *\n * @param {Object} srcObj\n *        The source object\n * @param {Object} options\n *        The options passed to the tech\n * @return {string} 'probably', 'maybe', or '' (empty string)\n */\nHtml5.canPlaySource = function (srcObj, options) {\n  return Html5.canPlayType(srcObj.type);\n};\n\n/**\n * Check if the volume can be changed in this browser/device.\n * Volume cannot be changed in a lot of mobile devices.\n * Specifically, it can't be changed from 1 on iOS.\n *\n * @return {boolean}\n *         - True if volume can be controlled\n *         - False otherwise\n */\nHtml5.canControlVolume = function () {\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    const volume = Html5.TEST_VID.volume;\n    Html5.TEST_VID.volume = volume / 2 + 0.1;\n    const canControl = volume !== Html5.TEST_VID.volume;\n\n    // With the introduction of iOS 15, there are cases where the volume is read as\n    // changed but reverts back to its original state at the start of the next tick.\n    // To determine whether volume can be controlled on iOS,\n    // a timeout is set and the volume is checked asynchronously.\n    // Since `features` doesn't currently work asynchronously, the value is manually set.\n    if (canControl && IS_IOS) {\n      window$1.setTimeout(() => {\n        if (Html5 && Html5.prototype) {\n          Html5.prototype.featuresVolumeControl = volume !== Html5.TEST_VID.volume;\n        }\n      });\n\n      // default iOS to false, which will be updated in the timeout above.\n      return false;\n    }\n    return canControl;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if the volume can be muted in this browser/device.\n * Some devices, e.g. iOS, don't allow changing volume\n * but permits muting/unmuting.\n *\n * @return {boolean}\n *      - True if volume can be muted\n *      - False otherwise\n */\nHtml5.canMuteVolume = function () {\n  try {\n    const muted = Html5.TEST_VID.muted;\n\n    // in some versions of iOS muted property doesn't always\n    // work, so we want to set both property and attribute\n    Html5.TEST_VID.muted = !muted;\n    if (Html5.TEST_VID.muted) {\n      setAttribute(Html5.TEST_VID, 'muted', 'muted');\n    } else {\n      removeAttribute(Html5.TEST_VID, 'muted', 'muted');\n    }\n    return muted !== Html5.TEST_VID.muted;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if the playback rate can be changed in this browser/device.\n *\n * @return {boolean}\n *         - True if playback rate can be controlled\n *         - False otherwise\n */\nHtml5.canControlPlaybackRate = function () {\n  // Playback rate API is implemented in Android Chrome, but doesn't do anything\n  // https://github.com/videojs/video.js/issues/3180\n  if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {\n    return false;\n  }\n  // IE will error if Windows Media Player not installed #3315\n  try {\n    const playbackRate = Html5.TEST_VID.playbackRate;\n    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;\n    return playbackRate !== Html5.TEST_VID.playbackRate;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Check if we can override a video/audio elements attributes, with\n * Object.defineProperty.\n *\n * @return {boolean}\n *         - True if builtin attributes can be overridden\n *         - False otherwise\n */\nHtml5.canOverrideAttributes = function () {\n  // if we cannot overwrite the src/innerHTML property, there is no support\n  // iOS 7 safari for instance cannot do this.\n  try {\n    const noop = () => {};\n    Object.defineProperty(document.createElement('video'), 'src', {\n      get: noop,\n      set: noop\n    });\n    Object.defineProperty(document.createElement('audio'), 'src', {\n      get: noop,\n      set: noop\n    });\n    Object.defineProperty(document.createElement('video'), 'innerHTML', {\n      get: noop,\n      set: noop\n    });\n    Object.defineProperty(document.createElement('audio'), 'innerHTML', {\n      get: noop,\n      set: noop\n    });\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Check to see if native `TextTrack`s are supported by this browser/device.\n *\n * @return {boolean}\n *         - True if native `TextTrack`s are supported.\n *         - False otherwise\n */\nHtml5.supportsNativeTextTracks = function () {\n  return IS_ANY_SAFARI || IS_IOS && IS_CHROME;\n};\n\n/**\n * Check to see if native `VideoTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `VideoTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeVideoTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);\n};\n\n/**\n * Check to see if native `AudioTrack`s are supported by this browser/device\n *\n * @return {boolean}\n *        - True if native `AudioTrack`s are supported.\n *        - False otherwise\n */\nHtml5.supportsNativeAudioTracks = function () {\n  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);\n};\n\n/**\n * An array of events available on the Html5 tech.\n *\n * @private\n * @type {Array}\n */\nHtml5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];\n\n/**\n * Boolean indicating whether the `Tech` supports volume control.\n *\n * @type {boolean}\n * @default {@link Html5.canControlVolume}\n */\n/**\n * Boolean indicating whether the `Tech` supports muting volume.\n *\n * @type {boolean}\n * @default {@link Html5.canMuteVolume}\n */\n\n/**\n * Boolean indicating whether the `Tech` supports changing the speed at which the media\n * plays. Examples:\n *   - Set player to play 2x (twice) as fast\n *   - Set player to play 0.5x (half) as fast\n *\n * @type {boolean}\n * @default {@link Html5.canControlPlaybackRate}\n */\n\n/**\n * Boolean indicating whether the `Tech` supports the `sourceset` event.\n *\n * @type {boolean}\n * @default\n */\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeTextTracks}\n */\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeVideoTracks}\n */\n/**\n * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.\n *\n * @type {boolean}\n * @default {@link Html5.supportsNativeAudioTracks}\n */\n[['featuresMuteControl', 'canMuteVolume'], ['featuresPlaybackRate', 'canControlPlaybackRate'], ['featuresSourceset', 'canOverrideAttributes'], ['featuresNativeTextTracks', 'supportsNativeTextTracks'], ['featuresNativeVideoTracks', 'supportsNativeVideoTracks'], ['featuresNativeAudioTracks', 'supportsNativeAudioTracks']].forEach(function ([key, fn]) {\n  defineLazyProperty(Html5.prototype, key, () => Html5[fn](), true);\n});\nHtml5.prototype.featuresVolumeControl = Html5.canControlVolume();\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the media element\n * moving in the DOM. iOS breaks if you move the media element, so this is set this to\n * false there. Everywhere else this should be true.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.movingMediaElementInDOM = !IS_IOS;\n\n// TODO: Previous comment: No longer appears to be used. Can probably be removed.\n//       Is this true?\n/**\n * Boolean indicating whether the `HTML5` tech currently supports automatic media resize\n * when going into fullscreen.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresFullscreenResize = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the progress event.\n * If this is false, manual `progress` events will be triggered instead.\n *\n * @type {boolean}\n * @default\n */\nHtml5.prototype.featuresProgressEvents = true;\n\n/**\n * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.\n * If this is false, manual `timeupdate` events will be triggered instead.\n *\n * @default\n */\nHtml5.prototype.featuresTimeupdateEvents = true;\n\n/**\n * Whether the HTML5 el supports `requestVideoFrameCallback`\n *\n * @type {boolean}\n */\nHtml5.prototype.featuresVideoFrameCallback = !!(Html5.TEST_VID && Html5.TEST_VID.requestVideoFrameCallback);\nHtml5.disposeMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n  if (el.parentNode) {\n    el.parentNode.removeChild(el);\n  }\n\n  // remove any child track or source nodes to prevent their loading\n  while (el.hasChildNodes()) {\n    el.removeChild(el.firstChild);\n  }\n\n  // remove any src reference. not setting `src=''` because that causes a warning\n  // in firefox\n  el.removeAttribute('src');\n\n  // force the media element to update its loading state by calling load()\n  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // not supported\n      }\n    })();\n  }\n};\nHtml5.resetMediaElement = function (el) {\n  if (!el) {\n    return;\n  }\n  const sources = el.querySelectorAll('source');\n  let i = sources.length;\n  while (i--) {\n    el.removeChild(sources[i]);\n  }\n\n  // remove any src reference.\n  // not setting `src=''` because that throws an error\n  el.removeAttribute('src');\n  if (typeof el.load === 'function') {\n    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)\n    (function () {\n      try {\n        el.load();\n      } catch (e) {\n        // satisfy linter\n      }\n    })();\n  }\n};\n\n/* Native HTML5 element property wrapping ----------------------------------- */\n// Wrap native boolean attributes with getters that check both property and attribute\n// The list is as followed:\n// muted, defaultMuted, autoplay, controls, loop, playsinline\n[\n/**\n * Get the value of `muted` from the media element. `muted` indicates\n * that the volume for the media should be set to silent. This does not actually change\n * the `volume` attribute.\n *\n * @method Html5#muted\n * @return {boolean}\n *         - True if the value of `volume` should be ignored and the audio set to silent.\n *         - False if the value of `volume` should be used.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n/**\n * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates\n * whether the media should start muted or not. Only changes the default state of the\n * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the\n * current state.\n *\n * @method Html5#defaultMuted\n * @return {boolean}\n *         - The value of `defaultMuted` from the media element.\n *         - True indicates that the media should start muted.\n *         - False indicates that the media should not start muted\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n/**\n * Get the value of `autoplay` from the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#autoplay\n * @return {boolean}\n *         - The value of `autoplay` from the media element.\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n/**\n * Get the value of `controls` from the media element. `controls` indicates\n * whether the native media controls should be shown or hidden.\n *\n * @method Html5#controls\n * @return {boolean}\n *         - The value of `controls` from the media element.\n *         - True indicates that native controls should be showing.\n *         - False indicates that native controls should be hidden.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}\n */\n'controls',\n/**\n * Get the value of `loop` from the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#loop\n * @return {boolean}\n *         - The value of `loop` from the media element.\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n/**\n * Get the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#playsinline\n * @return {boolean}\n *         - The value of `playsinline` from the media element.\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop] || this.el_.hasAttribute(prop);\n  };\n});\n\n// Wrap native boolean attributes with setters that set both property and attribute\n// The list is as followed:\n// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline\n// setControls is special-cased above\n[\n/**\n * Set the value of `muted` on the media element. `muted` indicates that the current\n * audio level should be silent.\n *\n * @method Html5#setMuted\n * @param {boolean} muted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}\n */\n'muted',\n/**\n * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current\n * audio level should be silent, but will only effect the muted level on initial playback..\n *\n * @method Html5.prototype.setDefaultMuted\n * @param {boolean} defaultMuted\n *        - True if the audio should be set to silent\n *        - False otherwise\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}\n */\n'defaultMuted',\n/**\n * Set the value of `autoplay` on the media element. `autoplay` indicates\n * that the media should start to play as soon as the page is ready.\n *\n * @method Html5#setAutoplay\n * @param {boolean} autoplay\n *         - True indicates that the media should start as soon as the page loads.\n *         - False indicates that the media should not start as soon as the page loads.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}\n */\n'autoplay',\n/**\n * Set the value of `loop` on the media element. `loop` indicates\n * that the media should return to the start of the media and continue playing once\n * it reaches the end.\n *\n * @method Html5#setLoop\n * @param {boolean} loop\n *         - True indicates that playback should seek back to start once\n *           the end of a media is reached.\n *         - False indicates that playback should not loop back to the start when the\n *           end of the media is reached.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}\n */\n'loop',\n/**\n * Set the value of `playsinline` from the media element. `playsinline` indicates\n * to the browser that non-fullscreen playback is preferred when fullscreen\n * playback is the native default, such as in iOS Safari.\n *\n * @method Html5#setPlaysinline\n * @param {boolean} playsinline\n *         - True indicates that the media should play inline.\n *         - False indicates that the media should not play inline.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n */\n'playsinline'].forEach(function (prop) {\n  Html5.prototype['set' + toTitleCase$1(prop)] = function (v) {\n    this.el_[prop] = v;\n    if (v) {\n      this.el_.setAttribute(prop, prop);\n    } else {\n      this.el_.removeAttribute(prop);\n    }\n  };\n});\n\n// Wrap native properties with a getter\n// The list is as followed\n// paused, currentTime, buffered, volume, poster, preload, error, seeking\n// seekable, ended, playbackRate, defaultPlaybackRate, disablePictureInPicture\n// played, networkState, readyState, videoWidth, videoHeight, crossOrigin\n[\n/**\n * Get the value of `paused` from the media element. `paused` indicates whether the media element\n * is currently paused or not.\n *\n * @method Html5#paused\n * @return {boolean}\n *         The value of `paused` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}\n */\n'paused',\n/**\n * Get the value of `currentTime` from the media element. `currentTime` indicates\n * the current second that the media is at in playback.\n *\n * @method Html5#currentTime\n * @return {number}\n *         The value of `currentTime` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}\n */\n'currentTime',\n/**\n * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`\n * object that represents the parts of the media that are already downloaded and\n * available for playback.\n *\n * @method Html5#buffered\n * @return {TimeRange}\n *         The value of `buffered` from the media element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}\n */\n'buffered',\n/**\n * Get the value of `volume` from the media element. `volume` indicates\n * the current playback volume of audio for a media. `volume` will be a value from 0\n * (silent) to 1 (loudest and default).\n *\n * @method Html5#volume\n * @return {number}\n *         The value of `volume` from the media element. Value will be between 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n/**\n * Get the value of `poster` from the media element. `poster` indicates\n * that the url of an image file that can/will be shown when no media data is available.\n *\n * @method Html5#poster\n * @return {string}\n *         The value of `poster` from the media element. Value will be a url to an\n *         image.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}\n */\n'poster',\n/**\n * Get the value of `preload` from the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#preload\n * @return {string}\n *         The value of `preload` from the media element. Will be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n/**\n * Get the value of the `error` from the media element. `error` indicates any\n * MediaError that may have occurred during playback. If error returns null there is no\n * current error.\n *\n * @method Html5#error\n * @return {MediaError|null}\n *         The value of `error` from the media element. Will be `MediaError` if there\n *         is a current error and null otherwise.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}\n */\n'error',\n/**\n * Get the value of `seeking` from the media element. `seeking` indicates whether the\n * media is currently seeking to a new position or not.\n *\n * @method Html5#seeking\n * @return {boolean}\n *         - The value of `seeking` from the media element.\n *         - True indicates that the media is currently seeking to a new position.\n *         - False indicates that the media is not seeking to a new position at this time.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}\n */\n'seeking',\n/**\n * Get the value of `seekable` from the media element. `seekable` returns a\n * `TimeRange` object indicating ranges of time that can currently be `seeked` to.\n *\n * @method Html5#seekable\n * @return {TimeRange}\n *         The value of `seekable` from the media element. A `TimeRange` object\n *         indicating the current ranges of time that can be seeked to.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}\n */\n'seekable',\n/**\n * Get the value of `ended` from the media element. `ended` indicates whether\n * the media has reached the end or not.\n *\n * @method Html5#ended\n * @return {boolean}\n *         - The value of `ended` from the media element.\n *         - True indicates that the media has ended.\n *         - False indicates that the media has not ended.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}\n */\n'ended',\n/**\n * Get the value of `playbackRate` from the media element. `playbackRate` indicates\n * the rate at which the media is currently playing back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#playbackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n/**\n * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates\n * the rate at which the media is currently playing back. This value will not indicate the current\n * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.\n *\n * Examples:\n *   - if defaultPlaybackRate is set to 2, media will play twice as fast.\n *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5.prototype.defaultPlaybackRate\n * @return {number}\n *         The value of `defaultPlaybackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'defaultPlaybackRate',\n/**\n * Get the value of 'disablePictureInPicture' from the video element.\n *\n * @method Html5#disablePictureInPicture\n * @return {boolean} value\n *         - The value of `disablePictureInPicture` from the video element.\n *         - True indicates that the video can't be played in Picture-In-Picture mode\n *         - False indicates that the video can be played in Picture-In-Picture mode\n *\n * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}\n */\n'disablePictureInPicture',\n/**\n * Get the value of `played` from the media element. `played` returns a `TimeRange`\n * object representing points in the media timeline that have been played.\n *\n * @method Html5#played\n * @return {TimeRange}\n *         The value of `played` from the media element. A `TimeRange` object indicating\n *         the ranges of time that have been played.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}\n */\n'played',\n/**\n * Get the value of `networkState` from the media element. `networkState` indicates\n * the current network state. It returns an enumeration from the following list:\n * - 0: NETWORK_EMPTY\n * - 1: NETWORK_IDLE\n * - 2: NETWORK_LOADING\n * - 3: NETWORK_NO_SOURCE\n *\n * @method Html5#networkState\n * @return {number}\n *         The value of `networkState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}\n */\n'networkState',\n/**\n * Get the value of `readyState` from the media element. `readyState` indicates\n * the current state of the media element. It returns an enumeration from the\n * following list:\n * - 0: HAVE_NOTHING\n * - 1: HAVE_METADATA\n * - 2: HAVE_CURRENT_DATA\n * - 3: HAVE_FUTURE_DATA\n * - 4: HAVE_ENOUGH_DATA\n *\n * @method Html5#readyState\n * @return {number}\n *         The value of `readyState` from the media element. This will be a number\n *         from the list in the description.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}\n */\n'readyState',\n/**\n * Get the value of `videoWidth` from the video element. `videoWidth` indicates\n * the current width of the video in css pixels.\n *\n * @method Html5#videoWidth\n * @return {number}\n *         The value of `videoWidth` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoWidth',\n/**\n * Get the value of `videoHeight` from the video element. `videoHeight` indicates\n * the current height of the video in css pixels.\n *\n * @method Html5#videoHeight\n * @return {number}\n *         The value of `videoHeight` from the video element. This will be a number\n *         in css pixels.\n *\n * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}\n */\n'videoHeight',\n/**\n * Get the value of `crossOrigin` from the media element. `crossOrigin` indicates\n * to the browser that should sent the cookies along with the requests for the\n * different assets/playlists\n *\n * @method Html5#crossOrigin\n * @return {string}\n *         - anonymous indicates that the media should not sent cookies.\n *         - use-credentials indicates that the media should sent cookies along the requests.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}\n */\n'crossOrigin'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop];\n  };\n});\n\n// Wrap native properties with a setter in this format:\n// set + toTitleCase(name)\n// The list is as follows:\n// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate,\n// setDisablePictureInPicture, setCrossOrigin\n[\n/**\n * Set the value of `volume` on the media element. `volume` indicates the current\n * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and\n * so on.\n *\n * @method Html5#setVolume\n * @param {number} percentAsDecimal\n *        The volume percent as a decimal. Valid range is from 0-1.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}\n */\n'volume',\n/**\n * Set the value of `src` on the media element. `src` indicates the current\n * {@link Tech~SourceObject} for the media.\n *\n * @method Html5#setSrc\n * @param {Tech~SourceObject} src\n *        The source object to set as the current source.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}\n */\n'src',\n/**\n * Set the value of `poster` on the media element. `poster` is the url to\n * an image file that can/will be shown when no media data is available.\n *\n * @method Html5#setPoster\n * @param {string} poster\n *        The url to an image that should be used as the `poster` for the media\n *        element.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}\n */\n'poster',\n/**\n * Set the value of `preload` on the media element. `preload` indicates\n * what should download before the media is interacted with. It can have the following\n * values:\n * - none: nothing should be downloaded\n * - metadata: poster and the first few frames of the media may be downloaded to get\n *   media dimensions and other metadata\n * - auto: allow the media and metadata for the media to be downloaded before\n *    interaction\n *\n * @method Html5#setPreload\n * @param {string} preload\n *         The value of `preload` to set on the media element. Must be 'none', 'metadata',\n *         or 'auto'.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}\n */\n'preload',\n/**\n * Set the value of `playbackRate` on the media element. `playbackRate` indicates\n * the rate at which the media should play back. Examples:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5#setPlaybackRate\n * @return {number}\n *         The value of `playbackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}\n */\n'playbackRate',\n/**\n * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates\n * the rate at which the media should play back upon initial startup. Changing this value\n * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.\n *\n * Example Values:\n *   - if playbackRate is set to 2, media will play twice as fast.\n *   - if playbackRate is set to 0.5, media will play half as fast.\n *\n * @method Html5.prototype.setDefaultPlaybackRate\n * @return {number}\n *         The value of `defaultPlaybackRate` from the media element. A number indicating\n *         the current playback speed of the media, where 1 is normal speed.\n *\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}\n */\n'defaultPlaybackRate',\n/**\n * Prevents the browser from suggesting a Picture-in-Picture context menu\n * or to request Picture-in-Picture automatically in some cases.\n *\n * @method Html5#setDisablePictureInPicture\n * @param {boolean} value\n *         The true value will disable Picture-in-Picture mode.\n *\n * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}\n */\n'disablePictureInPicture',\n/**\n * Set the value of `crossOrigin` from the media element. `crossOrigin` indicates\n * to the browser that should sent the cookies along with the requests for the\n * different assets/playlists\n *\n * @method Html5#setCrossOrigin\n * @param {string} crossOrigin\n *         - anonymous indicates that the media should not sent cookies.\n *         - use-credentials indicates that the media should sent cookies along the requests.\n *\n * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}\n */\n'crossOrigin'].forEach(function (prop) {\n  Html5.prototype['set' + toTitleCase$1(prop)] = function (v) {\n    this.el_[prop] = v;\n  };\n});\n\n// wrap native functions with a function\n// The list is as follows:\n// pause, load, play\n[\n/**\n * A wrapper around the media elements `pause` function. This will call the `HTML5`\n * media elements `pause` function.\n *\n * @method Html5#pause\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}\n */\n'pause',\n/**\n * A wrapper around the media elements `load` function. This will call the `HTML5`s\n * media element `load` function.\n *\n * @method Html5#load\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}\n */\n'load',\n/**\n * A wrapper around the media elements `play` function. This will call the `HTML5`s\n * media element `play` function.\n *\n * @method Html5#play\n * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}\n */\n'play'].forEach(function (prop) {\n  Html5.prototype[prop] = function () {\n    return this.el_[prop]();\n  };\n});\nTech.withSourceHandlers(Html5);\n\n/**\n * Native source handler for Html5, simply passes the source to the media element.\n *\n * @property {Tech~SourceObject} source\n *        The source object\n *\n * @property {Html5} tech\n *        The instance of the HTML5 tech.\n */\nHtml5.nativeSourceHandler = {};\n\n/**\n * Check if the media element can play the given mime type.\n *\n * @param {string} type\n *        The mimetype to check\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string)\n */\nHtml5.nativeSourceHandler.canPlayType = function (type) {\n  // IE without MediaPlayer throws an error (#519)\n  try {\n    return Html5.TEST_VID.canPlayType(type);\n  } catch (e) {\n    return '';\n  }\n};\n\n/**\n * Check if the media element can handle a source natively.\n *\n * @param {Tech~SourceObject} source\n *         The source object\n *\n * @param {Object} [options]\n *         Options to be passed to the tech.\n *\n * @return {string}\n *         'probably', 'maybe', or '' (empty string).\n */\nHtml5.nativeSourceHandler.canHandleSource = function (source, options) {\n  // If a type was provided we should rely on that\n  if (source.type) {\n    return Html5.nativeSourceHandler.canPlayType(source.type);\n\n    // If no type, fall back to checking 'video/[EXTENSION]'\n  } else if (source.src) {\n    const ext = getFileExtension(source.src);\n    return Html5.nativeSourceHandler.canPlayType(`video/${ext}`);\n  }\n  return '';\n};\n\n/**\n * Pass the source to the native media element.\n *\n * @param {Tech~SourceObject} source\n *        The source object\n *\n * @param {Html5} tech\n *        The instance of the Html5 tech\n *\n * @param {Object} [options]\n *        The options to pass to the source\n */\nHtml5.nativeSourceHandler.handleSource = function (source, tech, options) {\n  tech.setSrc(source.src);\n};\n\n/**\n * A noop for the native dispose function, as cleanup is not needed.\n */\nHtml5.nativeSourceHandler.dispose = function () {};\n\n// Register the native source handler\nHtml5.registerSourceHandler(Html5.nativeSourceHandler);\nTech.registerTech('Html5', Html5);\n\n/**\n * @file player.js\n */\n\n// The following tech events are simply re-triggered\n// on the player when they happen\nconst TECH_EVENTS_RETRIGGER = [\n/**\n * Fired while the user agent is downloading media data.\n *\n * @event Player#progress\n * @type {Event}\n */\n/**\n * Retrigger the `progress` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechProgress_\n * @fires Player#progress\n * @listens Tech#progress\n */\n'progress',\n/**\n * Fires when the loading of an audio/video is aborted.\n *\n * @event Player#abort\n * @type {Event}\n */\n/**\n * Retrigger the `abort` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechAbort_\n * @fires Player#abort\n * @listens Tech#abort\n */\n'abort',\n/**\n * Fires when the browser is intentionally not getting media data.\n *\n * @event Player#suspend\n * @type {Event}\n */\n/**\n * Retrigger the `suspend` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechSuspend_\n * @fires Player#suspend\n * @listens Tech#suspend\n */\n'suspend',\n/**\n * Fires when the current playlist is empty.\n *\n * @event Player#emptied\n * @type {Event}\n */\n/**\n * Retrigger the `emptied` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechEmptied_\n * @fires Player#emptied\n * @listens Tech#emptied\n */\n'emptied',\n/**\n * Fires when the browser is trying to get media data, but data is not available.\n *\n * @event Player#stalled\n * @type {Event}\n */\n/**\n * Retrigger the `stalled` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechStalled_\n * @fires Player#stalled\n * @listens Tech#stalled\n */\n'stalled',\n/**\n * Fires when the browser has loaded meta data for the audio/video.\n *\n * @event Player#loadedmetadata\n * @type {Event}\n */\n/**\n * Retrigger the `loadedmetadata` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoadedmetadata_\n * @fires Player#loadedmetadata\n * @listens Tech#loadedmetadata\n */\n'loadedmetadata',\n/**\n * Fires when the browser has loaded the current frame of the audio/video.\n *\n * @event Player#loadeddata\n * @type {event}\n */\n/**\n * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechLoaddeddata_\n * @fires Player#loadeddata\n * @listens Tech#loadeddata\n */\n'loadeddata',\n/**\n * Fires when the current playback position has changed.\n *\n * @event Player#timeupdate\n * @type {event}\n */\n/**\n * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTimeUpdate_\n * @fires Player#timeupdate\n * @listens Tech#timeupdate\n */\n'timeupdate',\n/**\n * Fires when the video's intrinsic dimensions change\n *\n * @event Player#resize\n * @type {event}\n */\n/**\n * Retrigger the `resize` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechResize_\n * @fires Player#resize\n * @listens Tech#resize\n */\n'resize',\n/**\n * Fires when the volume has been changed\n *\n * @event Player#volumechange\n * @type {event}\n */\n/**\n * Retrigger the `volumechange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechVolumechange_\n * @fires Player#volumechange\n * @listens Tech#volumechange\n */\n'volumechange',\n/**\n * Fires when the text track has been changed\n *\n * @event Player#texttrackchange\n * @type {event}\n */\n/**\n * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.\n *\n * @private\n * @method Player#handleTechTexttrackchange_\n * @fires Player#texttrackchange\n * @listens Tech#texttrackchange\n */\n'texttrackchange'];\n\n// events to queue when playback rate is zero\n// this is a hash for the sole purpose of mapping non-camel-cased event names\n// to camel-cased function names\nconst TECH_EVENTS_QUEUE = {\n  canplay: 'CanPlay',\n  canplaythrough: 'CanPlayThrough',\n  playing: 'Playing',\n  seeked: 'Seeked'\n};\nconst BREAKPOINT_ORDER = ['tiny', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'huge'];\nconst BREAKPOINT_CLASSES = {};\n\n// grep: vjs-layout-tiny\n// grep: vjs-layout-x-small\n// grep: vjs-layout-small\n// grep: vjs-layout-medium\n// grep: vjs-layout-large\n// grep: vjs-layout-x-large\n// grep: vjs-layout-huge\nBREAKPOINT_ORDER.forEach(k => {\n  const v = k.charAt(0) === 'x' ? `x-${k.substring(1)}` : k;\n  BREAKPOINT_CLASSES[k] = `vjs-layout-${v}`;\n});\nconst DEFAULT_BREAKPOINTS = {\n  tiny: 210,\n  xsmall: 320,\n  small: 425,\n  medium: 768,\n  large: 1440,\n  xlarge: 2560,\n  huge: Infinity\n};\n\n/**\n * An instance of the `Player` class is created when any of the Video.js setup methods\n * are used to initialize a video.\n *\n * After an instance has been created it can be accessed globally in three ways:\n * 1. By calling `videojs.getPlayer('example_video_1');`\n * 2. By calling `videojs('example_video_1');` (not recomended)\n * 2. By using it directly via  `videojs.players.example_video_1;`\n *\n * @extends Component\n * @global\n */\nclass Player extends Component$1 {\n  /**\n   * Create an instance of this class.\n   *\n   * @param {Element} tag\n   *        The original video DOM element used for configuring options.\n   *\n   * @param {Object} [options]\n   *        Object of option names and values.\n   *\n   * @param {Function} [ready]\n   *        Ready callback function.\n   */\n  constructor(tag, options, ready) {\n    // Make sure tag ID exists\n    tag.id = tag.id || options.id || `vjs_video_${newGUID()}`;\n\n    // Set Options\n    // The options argument overrides options set in the video tag\n    // which overrides globally set options.\n    // This latter part coincides with the load order\n    // (tag must exist before Player)\n    options = Object.assign(Player.getTagSettings(tag), options);\n\n    // Delay the initialization of children because we need to set up\n    // player properties first, and can't use `this` before `super()`\n    options.initChildren = false;\n\n    // Same with creating the element\n    options.createEl = false;\n\n    // don't auto mixin the evented mixin\n    options.evented = false;\n\n    // we don't want the player to report touch activity on itself\n    // see enableTouchActivity in Component\n    options.reportTouchActivity = false;\n\n    // If language is not set, get the closest lang attribute\n    if (!options.language) {\n      const closest = tag.closest('[lang]');\n      if (closest) {\n        options.language = closest.getAttribute('lang');\n      }\n    }\n\n    // Run base component initializing with new options\n    super(null, options, ready);\n\n    // Create bound methods for document listeners.\n    this.boundDocumentFullscreenChange_ = e => this.documentFullscreenChange_(e);\n    this.boundFullWindowOnEscKey_ = e => this.fullWindowOnEscKey(e);\n    this.boundUpdateStyleEl_ = e => this.updateStyleEl_(e);\n    this.boundApplyInitTime_ = e => this.applyInitTime_(e);\n    this.boundUpdateCurrentBreakpoint_ = e => this.updateCurrentBreakpoint_(e);\n    this.boundHandleTechClick_ = e => this.handleTechClick_(e);\n    this.boundHandleTechDoubleClick_ = e => this.handleTechDoubleClick_(e);\n    this.boundHandleTechTouchStart_ = e => this.handleTechTouchStart_(e);\n    this.boundHandleTechTouchMove_ = e => this.handleTechTouchMove_(e);\n    this.boundHandleTechTouchEnd_ = e => this.handleTechTouchEnd_(e);\n    this.boundHandleTechTap_ = e => this.handleTechTap_(e);\n\n    // default isFullscreen_ to false\n    this.isFullscreen_ = false;\n\n    // create logger\n    this.log = createLogger(this.id_);\n\n    // Hold our own reference to fullscreen api so it can be mocked in tests\n    this.fsApi_ = FullscreenApi;\n\n    // Tracks when a tech changes the poster\n    this.isPosterFromTech_ = false;\n\n    // Holds callback info that gets queued when playback rate is zero\n    // and a seek is happening\n    this.queuedCallbacks_ = [];\n\n    // Turn off API access because we're loading a new tech that might load asynchronously\n    this.isReady_ = false;\n\n    // Init state hasStarted_\n    this.hasStarted_ = false;\n\n    // Init state userActive_\n    this.userActive_ = false;\n\n    // Init debugEnabled_\n    this.debugEnabled_ = false;\n\n    // Init state audioOnlyMode_\n    this.audioOnlyMode_ = false;\n\n    // Init state audioPosterMode_\n    this.audioPosterMode_ = false;\n\n    // Init state audioOnlyCache_\n    this.audioOnlyCache_ = {\n      playerHeight: null,\n      hiddenChildren: []\n    };\n\n    // if the global option object was accidentally blown away by\n    // someone, bail early with an informative error\n    if (!this.options_ || !this.options_.techOrder || !this.options_.techOrder.length) {\n      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');\n    }\n\n    // Store the original tag used to set options\n    this.tag = tag;\n\n    // Store the tag attributes used to restore html5 element\n    this.tagAttributes = tag && getAttributes(tag);\n\n    // Update current language\n    this.language(this.options_.language);\n\n    // Update Supported Languages\n    if (options.languages) {\n      // Normalise player option languages to lowercase\n      const languagesToLower = {};\n      Object.getOwnPropertyNames(options.languages).forEach(function (name) {\n        languagesToLower[name.toLowerCase()] = options.languages[name];\n      });\n      this.languages_ = languagesToLower;\n    } else {\n      this.languages_ = Player.prototype.options_.languages;\n    }\n    this.resetCache_();\n\n    // Set poster\n    this.poster_ = options.poster || '';\n\n    // Set controls\n    this.controls_ = !!options.controls;\n\n    // Original tag settings stored in options\n    // now remove immediately so native controls don't flash.\n    // May be turned back on by HTML5 tech if nativeControlsForTouch is true\n    tag.controls = false;\n    tag.removeAttribute('controls');\n    this.changingSrc_ = false;\n    this.playCallbacks_ = [];\n    this.playTerminatedQueue_ = [];\n\n    // the attribute overrides the option\n    if (tag.hasAttribute('autoplay')) {\n      this.autoplay(true);\n    } else {\n      // otherwise use the setter to validate and\n      // set the correct value.\n      this.autoplay(this.options_.autoplay);\n    }\n\n    // check plugins\n    if (options.plugins) {\n      Object.keys(options.plugins).forEach(name => {\n        if (typeof this[name] !== 'function') {\n          throw new Error(`plugin \"${name}\" does not exist`);\n        }\n      });\n    }\n\n    /*\n     * Store the internal state of scrubbing\n     *\n     * @private\n     * @return {Boolean} True if the user is scrubbing\n     */\n    this.scrubbing_ = false;\n    this.el_ = this.createEl();\n\n    // Make this an evented object and use `el_` as its event bus.\n    evented(this, {\n      eventBusKey: 'el_'\n    });\n\n    // listen to document and player fullscreenchange handlers so we receive those events\n    // before a user can receive them so we can update isFullscreen appropriately.\n    // make sure that we listen to fullscreenchange events before everything else to make sure that\n    // our isFullscreen method is updated properly for internal components as well as external.\n    if (this.fsApi_.requestFullscreen) {\n      on(document, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);\n      this.on(this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);\n    }\n    if (this.fluid_) {\n      this.on(['playerreset', 'resize'], this.boundUpdateStyleEl_);\n    }\n    // We also want to pass the original player options to each component and plugin\n    // as well so they don't need to reach back into the player for options later.\n    // We also need to do another copy of this.options_ so we don't end up with\n    // an infinite loop.\n    const playerOptionsCopy = merge$1(this.options_);\n\n    // Load plugins\n    if (options.plugins) {\n      Object.keys(options.plugins).forEach(name => {\n        this[name](options.plugins[name]);\n      });\n    }\n\n    // Enable debug mode to fire debugon event for all plugins.\n    if (options.debug) {\n      this.debug(true);\n    }\n    this.options_.playerOptions = playerOptionsCopy;\n    this.middleware_ = [];\n    this.playbackRates(options.playbackRates);\n    this.initChildren();\n\n    // Set isAudio based on whether or not an audio tag was used\n    this.isAudio(tag.nodeName.toLowerCase() === 'audio');\n\n    // Update controls className. Can't do this when the controls are initially\n    // set because the element doesn't exist yet.\n    if (this.controls()) {\n      this.addClass('vjs-controls-enabled');\n    } else {\n      this.addClass('vjs-controls-disabled');\n    }\n\n    // Set ARIA label and region role depending on player type\n    this.el_.setAttribute('role', 'region');\n    if (this.isAudio()) {\n      this.el_.setAttribute('aria-label', this.localize('Audio Player'));\n    } else {\n      this.el_.setAttribute('aria-label', this.localize('Video Player'));\n    }\n    if (this.isAudio()) {\n      this.addClass('vjs-audio');\n    }\n\n    // TODO: Make this smarter. Toggle user state between touching/mousing\n    // using events, since devices can have both touch and mouse events.\n    // TODO: Make this check be performed again when the window switches between monitors\n    // (See https://github.com/videojs/video.js/issues/5683)\n    if (TOUCH_ENABLED) {\n      this.addClass('vjs-touch-enabled');\n    }\n\n    // iOS Safari has broken hover handling\n    if (!IS_IOS) {\n      this.addClass('vjs-workinghover');\n    }\n\n    // Make player easily findable by ID\n    Player.players[this.id_] = this;\n\n    // Add a major version class to aid css in plugins\n    const majorVersion = version$6.split('.')[0];\n    this.addClass(`vjs-v${majorVersion}`);\n\n    // When the player is first initialized, trigger activity so components\n    // like the control bar show themselves if needed\n    this.userActive(true);\n    this.reportUserActivity();\n    this.one('play', e => this.listenForUserActivity_(e));\n    this.on('keydown', e => this.handleKeyDown(e));\n    this.on('languagechange', e => this.handleLanguagechange(e));\n    this.breakpoints(this.options_.breakpoints);\n    this.responsive(this.options_.responsive);\n\n    // Calling both the audio mode methods after the player is fully\n    // setup to be able to listen to the events triggered by them\n    this.on('ready', () => {\n      // Calling the audioPosterMode method first so that\n      // the audioOnlyMode can take precedence when both options are set to true\n      this.audioPosterMode(this.options_.audioPosterMode);\n      this.audioOnlyMode(this.options_.audioOnlyMode);\n    });\n  }\n\n  /**\n   * Destroys the video player and does any necessary cleanup.\n   *\n   * This is especially helpful if you are dynamically adding and removing videos\n   * to/from the DOM.\n   *\n   * @fires Player#dispose\n   */\n  dispose() {\n    /**\n     * Called when the player is being disposed of.\n     *\n     * @event Player#dispose\n     * @type {Event}\n     */\n    this.trigger('dispose');\n    // prevent dispose from being called twice\n    this.off('dispose');\n\n    // Make sure all player-specific document listeners are unbound. This is\n    off(document, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);\n    off(document, 'keydown', this.boundFullWindowOnEscKey_);\n    if (this.styleEl_ && this.styleEl_.parentNode) {\n      this.styleEl_.parentNode.removeChild(this.styleEl_);\n      this.styleEl_ = null;\n    }\n\n    // Kill reference to this player\n    Player.players[this.id_] = null;\n    if (this.tag && this.tag.player) {\n      this.tag.player = null;\n    }\n    if (this.el_ && this.el_.player) {\n      this.el_.player = null;\n    }\n    if (this.tech_) {\n      this.tech_.dispose();\n      this.isPosterFromTech_ = false;\n      this.poster_ = '';\n    }\n    if (this.playerElIngest_) {\n      this.playerElIngest_ = null;\n    }\n    if (this.tag) {\n      this.tag = null;\n    }\n    clearCacheForPlayer(this);\n\n    // remove all event handlers for track lists\n    // all tracks and track listeners are removed on\n    // tech dispose\n    ALL.names.forEach(name => {\n      const props = ALL[name];\n      const list = this[props.getterName]();\n\n      // if it is not a native list\n      // we have to manually remove event listeners\n      if (list && list.off) {\n        list.off();\n      }\n    });\n\n    // the actual .el_ is removed here, or replaced if\n    super.dispose({\n      restoreEl: this.options_.restoreEl\n    });\n  }\n\n  /**\n   * Create the `Player`'s DOM element.\n   *\n   * @return {Element}\n   *         The DOM element that gets created.\n   */\n  createEl() {\n    let tag = this.tag;\n    let el;\n    let playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');\n    const divEmbed = this.tag.tagName.toLowerCase() === 'video-js';\n    if (playerElIngest) {\n      el = this.el_ = tag.parentNode;\n    } else if (!divEmbed) {\n      el = this.el_ = super.createEl('div');\n    }\n\n    // Copy over all the attributes from the tag, including ID and class\n    // ID will now reference player box, not the video tag\n    const attrs = getAttributes(tag);\n    if (divEmbed) {\n      el = this.el_ = tag;\n      tag = this.tag = document.createElement('video');\n      while (el.children.length) {\n        tag.appendChild(el.firstChild);\n      }\n      if (!hasClass(el, 'video-js')) {\n        addClass(el, 'video-js');\n      }\n      el.appendChild(tag);\n      playerElIngest = this.playerElIngest_ = el;\n      // move properties over from our custom `video-js` element\n      // to our new `video` element. This will move things like\n      // `src` or `controls` that were set via js before the player\n      // was initialized.\n      Object.keys(el).forEach(k => {\n        try {\n          tag[k] = el[k];\n        } catch (e) {\n          // we got a a property like outerHTML which we can't actually copy, ignore it\n        }\n      });\n    }\n\n    // set tabindex to -1 to remove the video element from the focus order\n    tag.setAttribute('tabindex', '-1');\n    attrs.tabindex = '-1';\n\n    // Workaround for #4583 on Chrome (on Windows) with JAWS.\n    // See https://github.com/FreedomScientific/VFO-standards-support/issues/78\n    // Note that we can't detect if JAWS is being used, but this ARIA attribute\n    // doesn't change behavior of Chrome if JAWS is not being used\n    if (IS_CHROME && IS_WINDOWS) {\n      tag.setAttribute('role', 'application');\n      attrs.role = 'application';\n    }\n\n    // Remove width/height attrs from tag so CSS can make it 100% width/height\n    tag.removeAttribute('width');\n    tag.removeAttribute('height');\n    if ('width' in attrs) {\n      delete attrs.width;\n    }\n    if ('height' in attrs) {\n      delete attrs.height;\n    }\n    Object.getOwnPropertyNames(attrs).forEach(function (attr) {\n      // don't copy over the class attribute to the player element when we're in a div embed\n      // the class is already set up properly in the divEmbed case\n      // and we want to make sure that the `video-js` class doesn't get lost\n      if (!(divEmbed && attr === 'class')) {\n        el.setAttribute(attr, attrs[attr]);\n      }\n      if (divEmbed) {\n        tag.setAttribute(attr, attrs[attr]);\n      }\n    });\n\n    // Update tag id/class for use as HTML5 playback tech\n    // Might think we should do this after embedding in container so .vjs-tech class\n    // doesn't flash 100% width/height, but class only applies with .video-js parent\n    tag.playerId = tag.id;\n    tag.id += '_html5_api';\n    tag.className = 'vjs-tech';\n\n    // Make player findable on elements\n    tag.player = el.player = this;\n    // Default state of video is paused\n    this.addClass('vjs-paused');\n\n    // Add a style element in the player that we'll use to set the width/height\n    // of the player in a way that's still overridable by CSS, just like the\n    // video element\n    if (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true) {\n      this.styleEl_ = createStyleElement('vjs-styles-dimensions');\n      const defaultsStyleEl = $('.vjs-styles-defaults');\n      const head = $('head');\n      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);\n    }\n    this.fill_ = false;\n    this.fluid_ = false;\n\n    // Pass in the width/height/aspectRatio options which will update the style el\n    this.width(this.options_.width);\n    this.height(this.options_.height);\n    this.fill(this.options_.fill);\n    this.fluid(this.options_.fluid);\n    this.aspectRatio(this.options_.aspectRatio);\n    // support both crossOrigin and crossorigin to reduce confusion and issues around the name\n    this.crossOrigin(this.options_.crossOrigin || this.options_.crossorigin);\n\n    // Hide any links within the video/audio tag,\n    // because IE doesn't hide them completely from screen readers.\n    const links = tag.getElementsByTagName('a');\n    for (let i = 0; i < links.length; i++) {\n      const linkEl = links.item(i);\n      addClass(linkEl, 'vjs-hidden');\n      linkEl.setAttribute('hidden', 'hidden');\n    }\n\n    // insertElFirst seems to cause the networkState to flicker from 3 to 2, so\n    // keep track of the original for later so we can know if the source originally failed\n    tag.initNetworkState_ = tag.networkState;\n\n    // Wrap video tag in div (el/box) container\n    if (tag.parentNode && !playerElIngest) {\n      tag.parentNode.insertBefore(el, tag);\n    }\n\n    // insert the tag as the first child of the player element\n    // then manually add it to the children array so that this.addChild\n    // will work properly for other components\n    //\n    // Breaks iPhone, fixed in HTML5 setup.\n    prependTo(tag, el);\n    this.children_.unshift(tag);\n\n    // Set lang attr on player to ensure CSS :lang() in consistent with player\n    // if it's been set to something different to the doc\n    this.el_.setAttribute('lang', this.language_);\n    this.el_.setAttribute('translate', 'no');\n    this.el_ = el;\n    return el;\n  }\n\n  /**\n   * Get or set the `Player`'s crossOrigin option. For the HTML5 player, this\n   * sets the `crossOrigin` property on the `<video>` tag to control the CORS\n   * behavior.\n   *\n   * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}\n   *\n   * @param {string|null} [value]\n   *        The value to set the `Player`'s crossOrigin to. If an argument is\n   *        given, must be one of `'anonymous'` or `'use-credentials'`, or 'null'.\n   *\n   * @return {string|null|undefined}\n   *         - The current crossOrigin value of the `Player` when getting.\n   *         - undefined when setting\n   */\n  crossOrigin(value) {\n    // `null` can be set to unset a value\n    if (typeof value === 'undefined') {\n      return this.techGet_('crossOrigin');\n    }\n    if (value !== null && value !== 'anonymous' && value !== 'use-credentials') {\n      log$1.warn(`crossOrigin must be null,  \"anonymous\" or \"use-credentials\", given \"${value}\"`);\n      return;\n    }\n    this.techCall_('setCrossOrigin', value);\n    if (this.posterImage) {\n      this.posterImage.crossOrigin(value);\n    }\n    return;\n  }\n\n  /**\n   * A getter/setter for the `Player`'s width. Returns the player's configured value.\n   * To get the current width use `currentWidth()`.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player`'s width to.\n   *\n   * @return {number}\n   *         The current width of the `Player` when getting.\n   */\n  width(value) {\n    return this.dimension('width', value);\n  }\n\n  /**\n   * A getter/setter for the `Player`'s height. Returns the player's configured value.\n   * To get the current height use `currentheight()`.\n   *\n   * @param {number} [value]\n   *        The value to set the `Player`'s height to.\n   *\n   * @return {number}\n   *         The current height of the `Player` when getting.\n   */\n  height(value) {\n    return this.dimension('height', value);\n  }\n\n  /**\n   * A getter/setter for the `Player`'s width & height.\n   *\n   * @param {string} dimension\n   *        This string can be:\n   *        - 'width'\n   *        - 'height'\n   *\n   * @param {number} [value]\n   *        Value for dimension specified in the first argument.\n   *\n   * @return {number}\n   *         The dimension arguments value when getting (width/height).\n   */\n  dimension(dimension, value) {\n    const privDimension = dimension + '_';\n    if (value === undefined) {\n      return this[privDimension] || 0;\n    }\n    if (value === '' || value === 'auto') {\n      // If an empty string is given, reset the dimension to be automatic\n      this[privDimension] = undefined;\n      this.updateStyleEl_();\n      return;\n    }\n    const parsedVal = parseFloat(value);\n    if (isNaN(parsedVal)) {\n      log$1.error(`Improper value \"${value}\" supplied for for ${dimension}`);\n      return;\n    }\n    this[privDimension] = parsedVal;\n    this.updateStyleEl_();\n  }\n\n  /**\n   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.\n   *\n   * Turning this on will turn off fill mode.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will be a getter.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n  fluid(bool) {\n    if (bool === undefined) {\n      return !!this.fluid_;\n    }\n    this.fluid_ = !!bool;\n    if (isEvented(this)) {\n      this.off(['playerreset', 'resize'], this.boundUpdateStyleEl_);\n    }\n    if (bool) {\n      this.addClass('vjs-fluid');\n      this.fill(false);\n      addEventedCallback(this, () => {\n        this.on(['playerreset', 'resize'], this.boundUpdateStyleEl_);\n      });\n    } else {\n      this.removeClass('vjs-fluid');\n    }\n    this.updateStyleEl_();\n  }\n\n  /**\n   * A getter/setter/toggler for the vjs-fill `className` on the `Player`.\n   *\n   * Turning this on will turn off fluid mode.\n   *\n   * @param {boolean} [bool]\n   *        - A value of true adds the class.\n   *        - A value of false removes the class.\n   *        - No value will be a getter.\n   *\n   * @return {boolean|undefined}\n   *         - The value of fluid when getting.\n   *         - `undefined` when setting.\n   */\n  fill(bool) {\n    if (bool === undefined) {\n      return !!this.fill_;\n    }\n    this.fill_ = !!bool;\n    if (bool) {\n      this.addClass('vjs-fill');\n      this.fluid(false);\n    } else {\n      this.removeClass('vjs-fill');\n    }\n  }\n\n  /**\n   * Get/Set the aspect ratio\n   *\n   * @param {string} [ratio]\n   *        Aspect ratio for player\n   *\n   * @return {string|undefined}\n   *         returns the current aspect ratio when getting\n   */\n\n  /**\n   * A getter/setter for the `Player`'s aspect ratio.\n   *\n   * @param {string} [ratio]\n   *        The value to set the `Player`'s aspect ratio to.\n   *\n   * @return {string|undefined}\n   *         - The current aspect ratio of the `Player` when getting.\n   *         - undefined when setting\n   */\n  aspectRatio(ratio) {\n    if (ratio === undefined) {\n      return this.aspectRatio_;\n    }\n\n    // Check for width:height format\n    if (!/^\\d+\\:\\d+$/.test(ratio)) {\n      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');\n    }\n    this.aspectRatio_ = ratio;\n\n    // We're assuming if you set an aspect ratio you want fluid mode,\n    // because in fixed mode you could calculate width and height yourself.\n    this.fluid(true);\n    this.updateStyleEl_();\n  }\n\n  /**\n   * Update styles of the `Player` element (height, width and aspect ratio).\n   *\n   * @private\n   * @listens Tech#loadedmetadata\n   */\n  updateStyleEl_() {\n    if (window$1.VIDEOJS_NO_DYNAMIC_STYLE === true) {\n      const width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;\n      const height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;\n      const techEl = this.tech_ && this.tech_.el();\n      if (techEl) {\n        if (width >= 0) {\n          techEl.width = width;\n        }\n        if (height >= 0) {\n          techEl.height = height;\n        }\n      }\n      return;\n    }\n    let width;\n    let height;\n    let aspectRatio;\n    let idClass;\n\n    // The aspect ratio is either used directly or to calculate width and height.\n    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {\n      // Use any aspectRatio that's been specifically set\n      aspectRatio = this.aspectRatio_;\n    } else if (this.videoWidth() > 0) {\n      // Otherwise try to get the aspect ratio from the video metadata\n      aspectRatio = this.videoWidth() + ':' + this.videoHeight();\n    } else {\n      // Or use a default. The video element's is 2:1, but 16:9 is more common.\n      aspectRatio = '16:9';\n    }\n\n    // Get the ratio as a decimal we can use to calculate dimensions\n    const ratioParts = aspectRatio.split(':');\n    const ratioMultiplier = ratioParts[1] / ratioParts[0];\n    if (this.width_ !== undefined) {\n      // Use any width that's been specifically set\n      width = this.width_;\n    } else if (this.height_ !== undefined) {\n      // Or calculate the width from the aspect ratio if a height has been set\n      width = this.height_ / ratioMultiplier;\n    } else {\n      // Or use the video's metadata, or use the video el's default of 300\n      width = this.videoWidth() || 300;\n    }\n    if (this.height_ !== undefined) {\n      // Use any height that's been specifically set\n      height = this.height_;\n    } else {\n      // Otherwise calculate the height from the ratio and the width\n      height = width * ratioMultiplier;\n    }\n\n    // Ensure the CSS class is valid by starting with an alpha character\n    if (/^[^a-zA-Z]/.test(this.id())) {\n      idClass = 'dimensions-' + this.id();\n    } else {\n      idClass = this.id() + '-dimensions';\n    }\n\n    // Ensure the right class is still on the player for the style element\n    this.addClass(idClass);\n    setTextContent(this.styleEl_, `\n      .${idClass} {\n        width: ${width}px;\n        height: ${height}px;\n      }\n\n      .${idClass}.vjs-fluid:not(.vjs-audio-only-mode) {\n        padding-top: ${ratioMultiplier * 100}%;\n      }\n    `);\n  }\n\n  /**\n   * Load/Create an instance of playback {@link Tech} including element\n   * and API methods. Then append the `Tech` element in `Player` as a child.\n   *\n   * @param {string} techName\n   *        name of the playback technology\n   *\n   * @param {string} source\n   *        video source\n   *\n   * @private\n   */\n  loadTech_(techName, source) {\n    // Pause and remove current playback technology\n    if (this.tech_) {\n      this.unloadTech_();\n    }\n    const titleTechName = toTitleCase$1(techName);\n    const camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);\n\n    // get rid of the HTML5 video tag as soon as we are using another tech\n    if (titleTechName !== 'Html5' && this.tag) {\n      Tech.getTech('Html5').disposeMediaElement(this.tag);\n      this.tag.player = null;\n      this.tag = null;\n    }\n    this.techName_ = titleTechName;\n\n    // Turn off API access because we're loading a new tech that might load asynchronously\n    this.isReady_ = false;\n    let autoplay = this.autoplay();\n\n    // if autoplay is a string (or `true` with normalizeAutoplay: true) we pass false to the tech\n    // because the player is going to handle autoplay on `loadstart`\n    if (typeof this.autoplay() === 'string' || this.autoplay() === true && this.options_.normalizeAutoplay) {\n      autoplay = false;\n    }\n\n    // Grab tech-specific options from player options and add source and parent element to use.\n    const techOptions = {\n      source,\n      autoplay,\n      'nativeControlsForTouch': this.options_.nativeControlsForTouch,\n      'playerId': this.id(),\n      'techId': `${this.id()}_${camelTechName}_api`,\n      'playsinline': this.options_.playsinline,\n      'preload': this.options_.preload,\n      'loop': this.options_.loop,\n      'disablePictureInPicture': this.options_.disablePictureInPicture,\n      'muted': this.options_.muted,\n      'poster': this.poster(),\n      'language': this.language(),\n      'playerElIngest': this.playerElIngest_ || false,\n      'vtt.js': this.options_['vtt.js'],\n      'canOverridePoster': !!this.options_.techCanOverridePoster,\n      'enableSourceset': this.options_.enableSourceset\n    };\n    ALL.names.forEach(name => {\n      const props = ALL[name];\n      techOptions[props.getterName] = this[props.privateName];\n    });\n    Object.assign(techOptions, this.options_[titleTechName]);\n    Object.assign(techOptions, this.options_[camelTechName]);\n    Object.assign(techOptions, this.options_[techName.toLowerCase()]);\n    if (this.tag) {\n      techOptions.tag = this.tag;\n    }\n    if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {\n      techOptions.startTime = this.cache_.currentTime;\n    }\n\n    // Initialize tech instance\n    const TechClass = Tech.getTech(techName);\n    if (!TechClass) {\n      throw new Error(`No Tech named '${titleTechName}' exists! '${titleTechName}' should be registered using videojs.registerTech()'`);\n    }\n    this.tech_ = new TechClass(techOptions);\n\n    // player.triggerReady is always async, so don't need this to be async\n    this.tech_.ready(bind_(this, this.handleTechReady_), true);\n    textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);\n\n    // Listen to all HTML5-defined events and trigger them on the player\n    TECH_EVENTS_RETRIGGER.forEach(event => {\n      this.on(this.tech_, event, e => this[`handleTech${toTitleCase$1(event)}_`](e));\n    });\n    Object.keys(TECH_EVENTS_QUEUE).forEach(event => {\n      this.on(this.tech_, event, eventObj => {\n        if (this.tech_.playbackRate() === 0 && this.tech_.seeking()) {\n          this.queuedCallbacks_.push({\n            callback: this[`handleTech${TECH_EVENTS_QUEUE[event]}_`].bind(this),\n            event: eventObj\n          });\n          return;\n        }\n        this[`handleTech${TECH_EVENTS_QUEUE[event]}_`](eventObj);\n      });\n    });\n    this.on(this.tech_, 'loadstart', e => this.handleTechLoadStart_(e));\n    this.on(this.tech_, 'sourceset', e => this.handleTechSourceset_(e));\n    this.on(this.tech_, 'waiting', e => this.handleTechWaiting_(e));\n    this.on(this.tech_, 'ended', e => this.handleTechEnded_(e));\n    this.on(this.tech_, 'seeking', e => this.handleTechSeeking_(e));\n    this.on(this.tech_, 'play', e => this.handleTechPlay_(e));\n    this.on(this.tech_, 'pause', e => this.handleTechPause_(e));\n    this.on(this.tech_, 'durationchange', e => this.handleTechDurationChange_(e));\n    this.on(this.tech_, 'fullscreenchange', (e, data) => this.handleTechFullscreenChange_(e, data));\n    this.on(this.tech_, 'fullscreenerror', (e, err) => this.handleTechFullscreenError_(e, err));\n    this.on(this.tech_, 'enterpictureinpicture', e => this.handleTechEnterPictureInPicture_(e));\n    this.on(this.tech_, 'leavepictureinpicture', e => this.handleTechLeavePictureInPicture_(e));\n    this.on(this.tech_, 'error', e => this.handleTechError_(e));\n    this.on(this.tech_, 'posterchange', e => this.handleTechPosterChange_(e));\n    this.on(this.tech_, 'textdata', e => this.handleTechTextData_(e));\n    this.on(this.tech_, 'ratechange', e => this.handleTechRateChange_(e));\n    this.on(this.tech_, 'loadedmetadata', this.boundUpdateStyleEl_);\n    this.usingNativeControls(this.techGet_('controls'));\n    if (this.controls() && !this.usingNativeControls()) {\n      this.addTechControlsListeners_();\n    }\n\n    // Add the tech element in the DOM if it was not already there\n    // Make sure to not insert the original video element if using Html5\n    if (this.tech_.el().parentNode !== this.el() && (titleTechName !== 'Html5' || !this.tag)) {\n      prependTo(this.tech_.el(), this.el());\n    }\n\n    // Get rid of the original video tag reference after the first tech is loaded\n    if (this.tag) {\n      this.tag.player = null;\n      this.tag = null;\n    }\n  }\n\n  /**\n   * Unload and dispose of the current playback {@link Tech}.\n   *\n   * @private\n   */\n  unloadTech_() {\n    // Save the current text tracks so that we can reuse the same text tracks with the next tech\n    ALL.names.forEach(name => {\n      const props = ALL[name];\n      this[props.privateName] = this[props.getterName]();\n    });\n    this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);\n    this.isReady_ = false;\n    this.tech_.dispose();\n    this.tech_ = false;\n    if (this.isPosterFromTech_) {\n      this.poster_ = '';\n      this.trigger('posterchange');\n    }\n    this.isPosterFromTech_ = false;\n  }\n\n  /**\n   * Return a reference to the current {@link Tech}.\n   * It will print a warning by default about the danger of using the tech directly\n   * but any argument that is passed in will silence the warning.\n   *\n   * @param {*} [safety]\n   *        Anything passed in to silence the warning\n   *\n   * @return {Tech}\n   *         The Tech\n   */\n  tech(safety) {\n    if (safety === undefined) {\n      log$1.warn('Using the tech directly can be dangerous. I hope you know what you\\'re doing.\\n' + 'See https://github.com/videojs/video.js/issues/2617 for more info.\\n');\n    }\n    return this.tech_;\n  }\n\n  /**\n   * Set up click and touch listeners for the playback element\n   *\n   * - On desktops: a click on the video itself will toggle playback\n   * - On mobile devices: a click on the video toggles controls\n   *   which is done by toggling the user state between active and\n   *   inactive\n   * - A tap can signal that a user has become active or has become inactive\n   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another\n   *   quick tap should hide them again (signaling the user is in an inactive\n   *   viewing state)\n   * - In addition to this, we still want the user to be considered inactive after\n   *   a few seconds of inactivity.\n   *\n   * > Note: the only part of iOS interaction we can't mimic with this setup\n   * is a touch and hold on the video element counting as activity in order to\n   * keep the controls showing, but that shouldn't be an issue. A touch and hold\n   * on any controls will still keep the user active\n   *\n   * @private\n   */\n  addTechControlsListeners_() {\n    // Make sure to remove all the previous listeners in case we are called multiple times.\n    this.removeTechControlsListeners_();\n    this.on(this.tech_, 'click', this.boundHandleTechClick_);\n    this.on(this.tech_, 'dblclick', this.boundHandleTechDoubleClick_);\n\n    // If the controls were hidden we don't want that to change without a tap event\n    // so we'll check if the controls were already showing before reporting user\n    // activity\n    this.on(this.tech_, 'touchstart', this.boundHandleTechTouchStart_);\n    this.on(this.tech_, 'touchmove', this.boundHandleTechTouchMove_);\n    this.on(this.tech_, 'touchend', this.boundHandleTechTouchEnd_);\n\n    // The tap listener needs to come after the touchend listener because the tap\n    // listener cancels out any reportedUserActivity when setting userActive(false)\n    this.on(this.tech_, 'tap', this.boundHandleTechTap_);\n  }\n\n  /**\n   * Remove the listeners used for click and tap controls. This is needed for\n   * toggling to controls disabled, where a tap/touch should do nothing.\n   *\n   * @private\n   */\n  removeTechControlsListeners_() {\n    // We don't want to just use `this.off()` because there might be other needed\n    // listeners added by techs that extend this.\n    this.off(this.tech_, 'tap', this.boundHandleTechTap_);\n    this.off(this.tech_, 'touchstart', this.boundHandleTechTouchStart_);\n    this.off(this.tech_, 'touchmove', this.boundHandleTechTouchMove_);\n    this.off(this.tech_, 'touchend', this.boundHandleTechTouchEnd_);\n    this.off(this.tech_, 'click', this.boundHandleTechClick_);\n    this.off(this.tech_, 'dblclick', this.boundHandleTechDoubleClick_);\n  }\n\n  /**\n   * Player waits for the tech to be ready\n   *\n   * @private\n   */\n  handleTechReady_() {\n    this.triggerReady();\n\n    // Keep the same volume as before\n    if (this.cache_.volume) {\n      this.techCall_('setVolume', this.cache_.volume);\n    }\n\n    // Look if the tech found a higher resolution poster while loading\n    this.handleTechPosterChange_();\n\n    // Update the duration if available\n    this.handleTechDurationChange_();\n  }\n\n  /**\n   * Retrigger the `loadstart` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#loadstart\n   * @listens Tech#loadstart\n   * @private\n   */\n  handleTechLoadStart_() {\n    // TODO: Update to use `emptied` event instead. See #1277.\n\n    this.removeClass('vjs-ended', 'vjs-seeking');\n\n    // reset the error state\n    this.error(null);\n\n    // Update the duration\n    this.handleTechDurationChange_();\n    if (!this.paused()) {\n      /**\n       * Fired when the user agent begins looking for media data\n       *\n       * @event Player#loadstart\n       * @type {Event}\n       */\n      this.trigger('loadstart');\n    } else {\n      // reset the hasStarted state\n      this.hasStarted(false);\n      this.trigger('loadstart');\n    }\n\n    // autoplay happens after loadstart for the browser,\n    // so we mimic that behavior\n    this.manualAutoplay_(this.autoplay() === true && this.options_.normalizeAutoplay ? 'play' : this.autoplay());\n  }\n\n  /**\n   * Handle autoplay string values, rather than the typical boolean\n   * values that should be handled by the tech. Note that this is not\n   * part of any specification. Valid values and what they do can be\n   * found on the autoplay getter at Player#autoplay()\n   */\n  manualAutoplay_(type) {\n    if (!this.tech_ || typeof type !== 'string') {\n      return;\n    }\n\n    // Save original muted() value, set muted to true, and attempt to play().\n    // On promise rejection, restore muted from saved value\n    const resolveMuted = () => {\n      const previouslyMuted = this.muted();\n      this.muted(true);\n      const restoreMuted = () => {\n        this.muted(previouslyMuted);\n      };\n\n      // restore muted on play terminatation\n      this.playTerminatedQueue_.push(restoreMuted);\n      const mutedPromise = this.play();\n      if (!isPromise(mutedPromise)) {\n        return;\n      }\n      return mutedPromise.catch(err => {\n        restoreMuted();\n        throw new Error(`Rejection at manualAutoplay. Restoring muted value. ${err ? err : ''}`);\n      });\n    };\n    let promise;\n\n    // if muted defaults to true\n    // the only thing we can do is call play\n    if (type === 'any' && !this.muted()) {\n      promise = this.play();\n      if (isPromise(promise)) {\n        promise = promise.catch(resolveMuted);\n      }\n    } else if (type === 'muted' && !this.muted()) {\n      promise = resolveMuted();\n    } else {\n      promise = this.play();\n    }\n    if (!isPromise(promise)) {\n      return;\n    }\n    return promise.then(() => {\n      this.trigger({\n        type: 'autoplay-success',\n        autoplay: type\n      });\n    }).catch(() => {\n      this.trigger({\n        type: 'autoplay-failure',\n        autoplay: type\n      });\n    });\n  }\n\n  /**\n   * Update the internal source caches so that we return the correct source from\n   * `src()`, `currentSource()`, and `currentSources()`.\n   *\n   * > Note: `currentSources` will not be updated if the source that is passed in exists\n   *         in the current `currentSources` cache.\n   *\n   *\n   * @param {Tech~SourceObject} srcObj\n   *        A string or object source to update our caches to.\n   */\n  updateSourceCaches_(srcObj = '') {\n    let src = srcObj;\n    let type = '';\n    if (typeof src !== 'string') {\n      src = srcObj.src;\n      type = srcObj.type;\n    }\n\n    // make sure all the caches are set to default values\n    // to prevent null checking\n    this.cache_.source = this.cache_.source || {};\n    this.cache_.sources = this.cache_.sources || [];\n\n    // try to get the type of the src that was passed in\n    if (src && !type) {\n      type = findMimetype(this, src);\n    }\n\n    // update `currentSource` cache always\n    this.cache_.source = merge$1({}, srcObj, {\n      src,\n      type\n    });\n    const matchingSources = this.cache_.sources.filter(s => s.src && s.src === src);\n    const sourceElSources = [];\n    const sourceEls = this.$$('source');\n    const matchingSourceEls = [];\n    for (let i = 0; i < sourceEls.length; i++) {\n      const sourceObj = getAttributes(sourceEls[i]);\n      sourceElSources.push(sourceObj);\n      if (sourceObj.src && sourceObj.src === src) {\n        matchingSourceEls.push(sourceObj.src);\n      }\n    }\n\n    // if we have matching source els but not matching sources\n    // the current source cache is not up to date\n    if (matchingSourceEls.length && !matchingSources.length) {\n      this.cache_.sources = sourceElSources;\n      // if we don't have matching source or source els set the\n      // sources cache to the `currentSource` cache\n    } else if (!matchingSources.length) {\n      this.cache_.sources = [this.cache_.source];\n    }\n\n    // update the tech `src` cache\n    this.cache_.src = src;\n  }\n\n  /**\n   * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}\n   * causing the media element to reload.\n   *\n   * It will fire for the initial source and each subsequent source.\n   * This event is a custom event from Video.js and is triggered by the {@link Tech}.\n   *\n   * The event object for this event contains a `src` property that will contain the source\n   * that was available when the event was triggered. This is generally only necessary if Video.js\n   * is switching techs while the source was being changed.\n   *\n   * It is also fired when `load` is called on the player (or media element)\n   * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}\n   * says that the resource selection algorithm needs to be aborted and restarted.\n   * In this case, it is very likely that the `src` property will be set to the\n   * empty string `\"\"` to indicate we do not know what the source will be but\n   * that it is changing.\n   *\n   * *This event is currently still experimental and may change in minor releases.*\n   * __To use this, pass `enableSourceset` option to the player.__\n   *\n   * @event Player#sourceset\n   * @type {Event}\n   * @prop {string} src\n   *                The source url available when the `sourceset` was triggered.\n   *                It will be an empty string if we cannot know what the source is\n   *                but know that the source will change.\n   */\n  /**\n   * Retrigger the `sourceset` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#sourceset\n   * @listens Tech#sourceset\n   * @private\n   */\n  handleTechSourceset_(event) {\n    // only update the source cache when the source\n    // was not updated using the player api\n    if (!this.changingSrc_) {\n      let updateSourceCaches = src => this.updateSourceCaches_(src);\n      const playerSrc = this.currentSource().src;\n      const eventSrc = event.src;\n\n      // if we have a playerSrc that is not a blob, and a tech src that is a blob\n      if (playerSrc && !/^blob:/.test(playerSrc) && /^blob:/.test(eventSrc)) {\n        // if both the tech source and the player source were updated we assume\n        // something like @videojs/http-streaming did the sourceset and skip updating the source cache.\n        if (!this.lastSource_ || this.lastSource_.tech !== eventSrc && this.lastSource_.player !== playerSrc) {\n          updateSourceCaches = () => {};\n        }\n      }\n\n      // update the source to the initial source right away\n      // in some cases this will be empty string\n      updateSourceCaches(eventSrc);\n\n      // if the `sourceset` `src` was an empty string\n      // wait for a `loadstart` to update the cache to `currentSrc`.\n      // If a sourceset happens before a `loadstart`, we reset the state\n      if (!event.src) {\n        this.tech_.any(['sourceset', 'loadstart'], e => {\n          // if a sourceset happens before a `loadstart` there\n          // is nothing to do as this `handleTechSourceset_`\n          // will be called again and this will be handled there.\n          if (e.type === 'sourceset') {\n            return;\n          }\n          const techSrc = this.techGet('currentSrc');\n          this.lastSource_.tech = techSrc;\n          this.updateSourceCaches_(techSrc);\n        });\n      }\n    }\n    this.lastSource_ = {\n      player: this.currentSource().src,\n      tech: event.src\n    };\n    this.trigger({\n      src: event.src,\n      type: 'sourceset'\n    });\n  }\n\n  /**\n   * Add/remove the vjs-has-started class\n   *\n   *\n   * @param {boolean} request\n   *        - true: adds the class\n   *        - false: remove the class\n   *\n   * @return {boolean}\n   *         the boolean value of hasStarted_\n   */\n  hasStarted(request) {\n    if (request === undefined) {\n      // act as getter, if we have no request to change\n      return this.hasStarted_;\n    }\n    if (request === this.hasStarted_) {\n      return;\n    }\n    this.hasStarted_ = request;\n    if (this.hasStarted_) {\n      this.addClass('vjs-has-started');\n    } else {\n      this.removeClass('vjs-has-started');\n    }\n  }\n\n  /**\n   * Fired whenever the media begins or resumes playback\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}\n   * @fires Player#play\n   * @listens Tech#play\n   * @private\n   */\n  handleTechPlay_() {\n    this.removeClass('vjs-ended', 'vjs-paused');\n    this.addClass('vjs-playing');\n\n    // hide the poster when the user hits play\n    this.hasStarted(true);\n    /**\n     * Triggered whenever an {@link Tech#play} event happens. Indicates that\n     * playback has started or resumed.\n     *\n     * @event Player#play\n     * @type {Event}\n     */\n    this.trigger('play');\n  }\n\n  /**\n   * Retrigger the `ratechange` event that was triggered by the {@link Tech}.\n   *\n   * If there were any events queued while the playback rate was zero, fire\n   * those events now.\n   *\n   * @private\n   * @method Player#handleTechRateChange_\n   * @fires Player#ratechange\n   * @listens Tech#ratechange\n   */\n  handleTechRateChange_() {\n    if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {\n      this.queuedCallbacks_.forEach(queued => queued.callback(queued.event));\n      this.queuedCallbacks_ = [];\n    }\n    this.cache_.lastPlaybackRate = this.tech_.playbackRate();\n    /**\n     * Fires when the playing speed of the audio/video is changed\n     *\n     * @event Player#ratechange\n     * @type {event}\n     */\n    this.trigger('ratechange');\n  }\n\n  /**\n   * Retrigger the `waiting` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#waiting\n   * @listens Tech#waiting\n   * @private\n   */\n  handleTechWaiting_() {\n    this.addClass('vjs-waiting');\n    /**\n     * A readyState change on the DOM element has caused playback to stop.\n     *\n     * @event Player#waiting\n     * @type {Event}\n     */\n    this.trigger('waiting');\n\n    // Browsers may emit a timeupdate event after a waiting event. In order to prevent\n    // premature removal of the waiting class, wait for the time to change.\n    const timeWhenWaiting = this.currentTime();\n    const timeUpdateListener = () => {\n      if (timeWhenWaiting !== this.currentTime()) {\n        this.removeClass('vjs-waiting');\n        this.off('timeupdate', timeUpdateListener);\n      }\n    };\n    this.on('timeupdate', timeUpdateListener);\n  }\n\n  /**\n   * Retrigger the `canplay` event that was triggered by the {@link Tech}.\n   * > Note: This is not consistent between browsers. See #1351\n   *\n   * @fires Player#canplay\n   * @listens Tech#canplay\n   * @private\n   */\n  handleTechCanPlay_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_FUTURE_DATA or greater.\n     *\n     * @event Player#canplay\n     * @type {Event}\n     */\n    this.trigger('canplay');\n  }\n\n  /**\n   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#canplaythrough\n   * @listens Tech#canplaythrough\n   * @private\n   */\n  handleTechCanPlayThrough_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the\n     * entire media file can be played without buffering.\n     *\n     * @event Player#canplaythrough\n     * @type {Event}\n     */\n    this.trigger('canplaythrough');\n  }\n\n  /**\n   * Retrigger the `playing` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#playing\n   * @listens Tech#playing\n   * @private\n   */\n  handleTechPlaying_() {\n    this.removeClass('vjs-waiting');\n    /**\n     * The media is no longer blocked from playback, and has started playing.\n     *\n     * @event Player#playing\n     * @type {Event}\n     */\n    this.trigger('playing');\n  }\n\n  /**\n   * Retrigger the `seeking` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeking\n   * @listens Tech#seeking\n   * @private\n   */\n  handleTechSeeking_() {\n    this.addClass('vjs-seeking');\n    /**\n     * Fired whenever the player is jumping to a new time\n     *\n     * @event Player#seeking\n     * @type {Event}\n     */\n    this.trigger('seeking');\n  }\n\n  /**\n   * Retrigger the `seeked` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#seeked\n   * @listens Tech#seeked\n   * @private\n   */\n  handleTechSeeked_() {\n    this.removeClass('vjs-seeking', 'vjs-ended');\n    /**\n     * Fired when the player has finished jumping to a new time\n     *\n     * @event Player#seeked\n     * @type {Event}\n     */\n    this.trigger('seeked');\n  }\n\n  /**\n   * Retrigger the `pause` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#pause\n   * @listens Tech#pause\n   * @private\n   */\n  handleTechPause_() {\n    this.removeClass('vjs-playing');\n    this.addClass('vjs-paused');\n    /**\n     * Fired whenever the media has been paused\n     *\n     * @event Player#pause\n     * @type {Event}\n     */\n    this.trigger('pause');\n  }\n\n  /**\n   * Retrigger the `ended` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#ended\n   * @listens Tech#ended\n   * @private\n   */\n  handleTechEnded_() {\n    this.addClass('vjs-ended');\n    this.removeClass('vjs-waiting');\n    if (this.options_.loop) {\n      this.currentTime(0);\n      this.play();\n    } else if (!this.paused()) {\n      this.pause();\n    }\n\n    /**\n     * Fired when the end of the media resource is reached (currentTime == duration)\n     *\n     * @event Player#ended\n     * @type {Event}\n     */\n    this.trigger('ended');\n  }\n\n  /**\n   * Fired when the duration of the media resource is first known or changed\n   *\n   * @listens Tech#durationchange\n   * @private\n   */\n  handleTechDurationChange_() {\n    this.duration(this.techGet_('duration'));\n  }\n\n  /**\n   * Handle a click on the media element to play/pause\n   *\n   * @param {Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#click\n   * @private\n   */\n  handleTechClick_(event) {\n    // When controls are disabled a click should not toggle playback because\n    // the click is considered a control\n    if (!this.controls_) {\n      return;\n    }\n    if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.click === undefined || this.options_.userActions.click !== false) {\n      if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.click === 'function') {\n        this.options_.userActions.click.call(this, event);\n      } else if (this.paused()) {\n        silencePromise(this.play());\n      } else {\n        this.pause();\n      }\n    }\n  }\n\n  /**\n   * Handle a double-click on the media element to enter/exit fullscreen\n   *\n   * @param {Event} event\n   *        the event that caused this function to trigger\n   *\n   * @listens Tech#dblclick\n   * @private\n   */\n  handleTechDoubleClick_(event) {\n    if (!this.controls_) {\n      return;\n    }\n\n    // we do not want to toggle fullscreen state\n    // when double-clicking inside a control bar or a modal\n    const inAllowedEls = Array.prototype.some.call(this.$$('.vjs-control-bar, .vjs-modal-dialog'), el => el.contains(event.target));\n    if (!inAllowedEls) {\n      /*\n       * options.userActions.doubleClick\n       *\n       * If `undefined` or `true`, double-click toggles fullscreen if controls are present\n       * Set to `false` to disable double-click handling\n       * Set to a function to substitute an external double-click handler\n       */\n      if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.doubleClick === undefined || this.options_.userActions.doubleClick !== false) {\n        if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.doubleClick === 'function') {\n          this.options_.userActions.doubleClick.call(this, event);\n        } else if (this.isFullscreen()) {\n          this.exitFullscreen();\n        } else {\n          this.requestFullscreen();\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle a tap on the media element. It will toggle the user\n   * activity state, which hides and shows the controls.\n   *\n   * @listens Tech#tap\n   * @private\n   */\n  handleTechTap_() {\n    this.userActive(!this.userActive());\n  }\n\n  /**\n   * Handle touch to start\n   *\n   * @listens Tech#touchstart\n   * @private\n   */\n  handleTechTouchStart_() {\n    this.userWasActive = this.userActive();\n  }\n\n  /**\n   * Handle touch to move\n   *\n   * @listens Tech#touchmove\n   * @private\n   */\n  handleTechTouchMove_() {\n    if (this.userWasActive) {\n      this.reportUserActivity();\n    }\n  }\n\n  /**\n   * Handle touch to end\n   *\n   * @param {Event} event\n   *        the touchend event that triggered\n   *        this function\n   *\n   * @listens Tech#touchend\n   * @private\n   */\n  handleTechTouchEnd_(event) {\n    // Stop the mouse events from also happening\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * @private\n   */\n  toggleFullscreenClass_() {\n    if (this.isFullscreen()) {\n      this.addClass('vjs-fullscreen');\n    } else {\n      this.removeClass('vjs-fullscreen');\n    }\n  }\n\n  /**\n   * when the document fschange event triggers it calls this\n   */\n  documentFullscreenChange_(e) {\n    const targetPlayer = e.target.player;\n\n    // if another player was fullscreen\n    // do a null check for targetPlayer because older firefox's would put document as e.target\n    if (targetPlayer && targetPlayer !== this) {\n      return;\n    }\n    const el = this.el();\n    let isFs = document[this.fsApi_.fullscreenElement] === el;\n    if (!isFs && el.matches) {\n      isFs = el.matches(':' + this.fsApi_.fullscreen);\n    } else if (!isFs && el.msMatchesSelector) {\n      isFs = el.msMatchesSelector(':' + this.fsApi_.fullscreen);\n    }\n    this.isFullscreen(isFs);\n  }\n\n  /**\n   * Handle Tech Fullscreen Change\n   *\n   * @param {Event} event\n   *        the fullscreenchange event that triggered this function\n   *\n   * @param {Object} data\n   *        the data that was sent with the event\n   *\n   * @private\n   * @listens Tech#fullscreenchange\n   * @fires Player#fullscreenchange\n   */\n  handleTechFullscreenChange_(event, data) {\n    if (data) {\n      if (data.nativeIOSFullscreen) {\n        this.addClass('vjs-ios-native-fs');\n        this.tech_.one('webkitendfullscreen', () => {\n          this.removeClass('vjs-ios-native-fs');\n        });\n      }\n      this.isFullscreen(data.isFullscreen);\n    }\n  }\n  handleTechFullscreenError_(event, err) {\n    this.trigger('fullscreenerror', err);\n  }\n\n  /**\n   * @private\n   */\n  togglePictureInPictureClass_() {\n    if (this.isInPictureInPicture()) {\n      this.addClass('vjs-picture-in-picture');\n    } else {\n      this.removeClass('vjs-picture-in-picture');\n    }\n  }\n\n  /**\n   * Handle Tech Enter Picture-in-Picture.\n   *\n   * @param {Event} event\n   *        the enterpictureinpicture event that triggered this function\n   *\n   * @private\n   * @listens Tech#enterpictureinpicture\n   */\n  handleTechEnterPictureInPicture_(event) {\n    this.isInPictureInPicture(true);\n  }\n\n  /**\n   * Handle Tech Leave Picture-in-Picture.\n   *\n   * @param {Event} event\n   *        the leavepictureinpicture event that triggered this function\n   *\n   * @private\n   * @listens Tech#leavepictureinpicture\n   */\n  handleTechLeavePictureInPicture_(event) {\n    this.isInPictureInPicture(false);\n  }\n\n  /**\n   * Fires when an error occurred during the loading of an audio/video.\n   *\n   * @private\n   * @listens Tech#error\n   */\n  handleTechError_() {\n    const error = this.tech_.error();\n    this.error(error);\n  }\n\n  /**\n   * Retrigger the `textdata` event that was triggered by the {@link Tech}.\n   *\n   * @fires Player#textdata\n   * @listens Tech#textdata\n   * @private\n   */\n  handleTechTextData_() {\n    let data = null;\n    if (arguments.length > 1) {\n      data = arguments[1];\n    }\n\n    /**\n     * Fires when we get a textdata event from tech\n     *\n     * @event Player#textdata\n     * @type {Event}\n     */\n    this.trigger('textdata', data);\n  }\n\n  /**\n   * Get object for cached values.\n   *\n   * @return {Object}\n   *         get the current object cache\n   */\n  getCache() {\n    return this.cache_;\n  }\n\n  /**\n   * Resets the internal cache object.\n   *\n   * Using this function outside the player constructor or reset method may\n   * have unintended side-effects.\n   *\n   * @private\n   */\n  resetCache_() {\n    this.cache_ = {\n      // Right now, the currentTime is not _really_ cached because it is always\n      // retrieved from the tech (see: currentTime). However, for completeness,\n      // we set it to zero here to ensure that if we do start actually caching\n      // it, we reset it along with everything else.\n      currentTime: 0,\n      initTime: 0,\n      inactivityTimeout: this.options_.inactivityTimeout,\n      duration: NaN,\n      lastVolume: 1,\n      lastPlaybackRate: this.defaultPlaybackRate(),\n      media: null,\n      src: '',\n      source: {},\n      sources: [],\n      playbackRates: [],\n      volume: 1\n    };\n  }\n\n  /**\n   * Pass values to the playback tech\n   *\n   * @param {string} [method]\n   *        the method to call\n   *\n   * @param {Object} arg\n   *        the argument to pass\n   *\n   * @private\n   */\n  techCall_(method, arg) {\n    // If it's not ready yet, call method when it is\n\n    this.ready(function () {\n      if (method in allowedSetters) {\n        return set(this.middleware_, this.tech_, method, arg);\n      } else if (method in allowedMediators) {\n        return mediate(this.middleware_, this.tech_, method, arg);\n      }\n      try {\n        if (this.tech_) {\n          this.tech_[method](arg);\n        }\n      } catch (e) {\n        log$1(e);\n        throw e;\n      }\n    }, true);\n  }\n\n  /**\n   * Mediate attempt to call playback tech method\n   * and return the value of the method called.\n   *\n   * @param {string} method\n   *        Tech method\n   *\n   * @return {*}\n   *         Value returned by the tech method called, undefined if tech\n   *         is not ready or tech method is not present\n   *\n   * @private\n   */\n  techGet_(method) {\n    if (!this.tech_ || !this.tech_.isReady_) {\n      return;\n    }\n    if (method in allowedGetters) {\n      return get(this.middleware_, this.tech_, method);\n    } else if (method in allowedMediators) {\n      return mediate(this.middleware_, this.tech_, method);\n    }\n\n    // Log error when playback tech object is present but method\n    // is undefined or unavailable\n    try {\n      return this.tech_[method]();\n    } catch (e) {\n      // When building additional tech libs, an expected method may not be defined yet\n      if (this.tech_[method] === undefined) {\n        log$1(`Video.js: ${method} method not defined for ${this.techName_} playback technology.`, e);\n        throw e;\n      }\n\n      // When a method isn't available on the object it throws a TypeError\n      if (e.name === 'TypeError') {\n        log$1(`Video.js: ${method} unavailable on ${this.techName_} playback technology element.`, e);\n        this.tech_.isReady_ = false;\n        throw e;\n      }\n\n      // If error unknown, just log and throw\n      log$1(e);\n      throw e;\n    }\n  }\n\n  /**\n   * Attempt to begin playback at the first opportunity.\n   *\n   * @return {Promise|undefined}\n   *         Returns a promise if the browser supports Promises (or one\n   *         was passed in as an option). This promise will be resolved on\n   *         the return value of play. If this is undefined it will fulfill the\n   *         promise chain otherwise the promise chain will be fulfilled when\n   *         the promise from play is fulfilled.\n   */\n  play() {\n    return new Promise(resolve => {\n      this.play_(resolve);\n    });\n  }\n\n  /**\n   * The actual logic for play, takes a callback that will be resolved on the\n   * return value of play. This allows us to resolve to the play promise if there\n   * is one on modern browsers.\n   *\n   * @private\n   * @param {Function} [callback]\n   *        The callback that should be called when the techs play is actually called\n   */\n  play_(callback = silencePromise) {\n    this.playCallbacks_.push(callback);\n    const isSrcReady = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc()));\n    const isSafariOrIOS = Boolean(IS_ANY_SAFARI || IS_IOS);\n\n    // treat calls to play_ somewhat like the `one` event function\n    if (this.waitToPlay_) {\n      this.off(['ready', 'loadstart'], this.waitToPlay_);\n      this.waitToPlay_ = null;\n    }\n\n    // if the player/tech is not ready or the src itself is not ready\n    // queue up a call to play on `ready` or `loadstart`\n    if (!this.isReady_ || !isSrcReady) {\n      this.waitToPlay_ = e => {\n        this.play_();\n      };\n      this.one(['ready', 'loadstart'], this.waitToPlay_);\n\n      // if we are in Safari, there is a high chance that loadstart will trigger after the gesture timeperiod\n      // in that case, we need to prime the video element by calling load so it'll be ready in time\n      if (!isSrcReady && isSafariOrIOS) {\n        this.load();\n      }\n      return;\n    }\n\n    // If the player/tech is ready and we have a source, we can attempt playback.\n    const val = this.techGet_('play');\n\n    // For native playback, reset the progress bar if we get a play call from a replay.\n    const isNativeReplay = isSafariOrIOS && this.hasClass('vjs-ended');\n    if (isNativeReplay) {\n      this.resetProgressBar_();\n    }\n    // play was terminated if the returned value is null\n    if (val === null) {\n      this.runPlayTerminatedQueue_();\n    } else {\n      this.runPlayCallbacks_(val);\n    }\n  }\n\n  /**\n   * These functions will be run when if play is terminated. If play\n   * runPlayCallbacks_ is run these function will not be run. This allows us\n   * to differentiate between a terminated play and an actual call to play.\n   */\n  runPlayTerminatedQueue_() {\n    const queue = this.playTerminatedQueue_.slice(0);\n    this.playTerminatedQueue_ = [];\n    queue.forEach(function (q) {\n      q();\n    });\n  }\n\n  /**\n   * When a callback to play is delayed we have to run these\n   * callbacks when play is actually called on the tech. This function\n   * runs the callbacks that were delayed and accepts the return value\n   * from the tech.\n   *\n   * @param {undefined|Promise} val\n   *        The return value from the tech.\n   */\n  runPlayCallbacks_(val) {\n    const callbacks = this.playCallbacks_.slice(0);\n    this.playCallbacks_ = [];\n    // clear play terminatedQueue since we finished a real play\n    this.playTerminatedQueue_ = [];\n    callbacks.forEach(function (cb) {\n      cb(val);\n    });\n  }\n\n  /**\n   * Pause the video playback\n   *\n   * @return {Player}\n   *         A reference to the player object this function was called on\n   */\n  pause() {\n    this.techCall_('pause');\n  }\n\n  /**\n   * Check if the player is paused or has yet to play\n   *\n   * @return {boolean}\n   *         - false: if the media is currently playing\n   *         - true: if media is not currently playing\n   */\n  paused() {\n    // The initial state of paused should be true (in Safari it's actually false)\n    return this.techGet_('paused') === false ? false : true;\n  }\n\n  /**\n   * Get a TimeRange object representing the current ranges of time that the user\n   * has played.\n   *\n   * @return { import('./utils/time').TimeRange }\n   *         A time range object that represents all the increments of time that have\n   *         been played.\n   */\n  played() {\n    return this.techGet_('played') || createTimeRanges$1(0, 0);\n  }\n\n  /**\n   * Returns whether or not the user is \"scrubbing\". Scrubbing is\n   * when the user has clicked the progress bar handle and is\n   * dragging it along the progress bar.\n   *\n   * @param {boolean} [isScrubbing]\n   *        whether the user is or is not scrubbing\n   *\n   * @return {boolean}\n   *         The value of scrubbing when getting\n   */\n  scrubbing(isScrubbing) {\n    if (typeof isScrubbing === 'undefined') {\n      return this.scrubbing_;\n    }\n    this.scrubbing_ = !!isScrubbing;\n    this.techCall_('setScrubbing', this.scrubbing_);\n    if (isScrubbing) {\n      this.addClass('vjs-scrubbing');\n    } else {\n      this.removeClass('vjs-scrubbing');\n    }\n  }\n\n  /**\n   * Get or set the current time (in seconds)\n   *\n   * @param {number|string} [seconds]\n   *        The time to seek to in seconds\n   *\n   * @return {number}\n   *         - the current time in seconds when getting\n   */\n  currentTime(seconds) {\n    if (typeof seconds !== 'undefined') {\n      if (seconds < 0) {\n        seconds = 0;\n      }\n      if (!this.isReady_ || this.changingSrc_ || !this.tech_ || !this.tech_.isReady_) {\n        this.cache_.initTime = seconds;\n        this.off('canplay', this.boundApplyInitTime_);\n        this.one('canplay', this.boundApplyInitTime_);\n        return;\n      }\n      this.techCall_('setCurrentTime', seconds);\n      this.cache_.initTime = 0;\n      return;\n    }\n\n    // cache last currentTime and return. default to 0 seconds\n    //\n    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's\n    // currentTime when scrubbing, but may not provide much performance benefit after all.\n    // Should be tested. Also something has to read the actual current time or the cache will\n    // never get updated.\n    this.cache_.currentTime = this.techGet_('currentTime') || 0;\n    return this.cache_.currentTime;\n  }\n\n  /**\n   * Apply the value of initTime stored in cache as currentTime.\n   *\n   * @private\n   */\n  applyInitTime_() {\n    this.currentTime(this.cache_.initTime);\n  }\n\n  /**\n   * Normally gets the length in time of the video in seconds;\n   * in all but the rarest use cases an argument will NOT be passed to the method\n   *\n   * > **NOTE**: The video must have started loading before the duration can be\n   * known, and depending on preload behaviour may not be known until the video starts\n   * playing.\n   *\n   * @fires Player#durationchange\n   *\n   * @param {number} [seconds]\n   *        The duration of the video to set in seconds\n   *\n   * @return {number}\n   *         - The duration of the video in seconds when getting\n   */\n  duration(seconds) {\n    if (seconds === undefined) {\n      // return NaN if the duration is not known\n      return this.cache_.duration !== undefined ? this.cache_.duration : NaN;\n    }\n    seconds = parseFloat(seconds);\n\n    // Standardize on Infinity for signaling video is live\n    if (seconds < 0) {\n      seconds = Infinity;\n    }\n    if (seconds !== this.cache_.duration) {\n      // Cache the last set value for optimized scrubbing\n      this.cache_.duration = seconds;\n      if (seconds === Infinity) {\n        this.addClass('vjs-live');\n      } else {\n        this.removeClass('vjs-live');\n      }\n      if (!isNaN(seconds)) {\n        // Do not fire durationchange unless the duration value is known.\n        // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}\n\n        /**\n         * @event Player#durationchange\n         * @type {Event}\n         */\n        this.trigger('durationchange');\n      }\n    }\n  }\n\n  /**\n   * Calculates how much time is left in the video. Not part\n   * of the native video API.\n   *\n   * @return {number}\n   *         The time remaining in seconds\n   */\n  remainingTime() {\n    return this.duration() - this.currentTime();\n  }\n\n  /**\n   * A remaining time function that is intended to be used when\n   * the time is to be displayed directly to the user.\n   *\n   * @return {number}\n   *         The rounded time remaining in seconds\n   */\n  remainingTimeDisplay() {\n    return Math.floor(this.duration()) - Math.floor(this.currentTime());\n  }\n\n  //\n  // Kind of like an array of portions of the video that have been downloaded.\n\n  /**\n   * Get a TimeRange object with an array of the times of the video\n   * that have been downloaded. If you just want the percent of the\n   * video that's been downloaded, use bufferedPercent.\n   *\n   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}\n   *\n   * @return { import('./utils/time').TimeRange }\n   *         A mock {@link TimeRanges} object (following HTML spec)\n   */\n  buffered() {\n    let buffered = this.techGet_('buffered');\n    if (!buffered || !buffered.length) {\n      buffered = createTimeRanges$1(0, 0);\n    }\n    return buffered;\n  }\n\n  /**\n   * Get the percent (as a decimal) of the video that's been downloaded.\n   * This method is not a part of the native HTML video API.\n   *\n   * @return {number}\n   *         A decimal between 0 and 1 representing the percent\n   *         that is buffered 0 being 0% and 1 being 100%\n   */\n  bufferedPercent() {\n    return bufferedPercent(this.buffered(), this.duration());\n  }\n\n  /**\n   * Get the ending time of the last buffered time range\n   * This is used in the progress bar to encapsulate all time ranges.\n   *\n   * @return {number}\n   *         The end of the last buffered time range\n   */\n  bufferedEnd() {\n    const buffered = this.buffered();\n    const duration = this.duration();\n    let end = buffered.end(buffered.length - 1);\n    if (end > duration) {\n      end = duration;\n    }\n    return end;\n  }\n\n  /**\n   * Get or set the current volume of the media\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {number}\n   *         The current volume as a percent when getting\n   */\n  volume(percentAsDecimal) {\n    let vol;\n    if (percentAsDecimal !== undefined) {\n      // Force value to between 0 and 1\n      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));\n      this.cache_.volume = vol;\n      this.techCall_('setVolume', vol);\n      if (vol > 0) {\n        this.lastVolume_(vol);\n      }\n      return;\n    }\n\n    // Default to 1 when returning current volume.\n    vol = parseFloat(this.techGet_('volume'));\n    return isNaN(vol) ? 1 : vol;\n  }\n\n  /**\n   * Get the current muted state, or turn mute on or off\n   *\n   * @param {boolean} [muted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean}\n   *         - true if mute is on and getting\n   *         - false if mute is off and getting\n   */\n  muted(muted) {\n    if (muted !== undefined) {\n      this.techCall_('setMuted', muted);\n      return;\n    }\n    return this.techGet_('muted') || false;\n  }\n\n  /**\n   * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted\n   * indicates the state of muted on initial playback.\n   *\n   * ```js\n   *   var myPlayer = videojs('some-player-id');\n   *\n   *   myPlayer.src(\"http://www.example.com/path/to/video.mp4\");\n   *\n   *   // get, should be false\n   *   console.log(myPlayer.defaultMuted());\n   *   // set to true\n   *   myPlayer.defaultMuted(true);\n   *   // get should be true\n   *   console.log(myPlayer.defaultMuted());\n   * ```\n   *\n   * @param {boolean} [defaultMuted]\n   *        - true to mute\n   *        - false to unmute\n   *\n   * @return {boolean|Player}\n   *         - true if defaultMuted is on and getting\n   *         - false if defaultMuted is off and getting\n   *         - A reference to the current player when setting\n   */\n  defaultMuted(defaultMuted) {\n    if (defaultMuted !== undefined) {\n      return this.techCall_('setDefaultMuted', defaultMuted);\n    }\n    return this.techGet_('defaultMuted') || false;\n  }\n\n  /**\n   * Get the last volume, or set it\n   *\n   * @param  {number} [percentAsDecimal]\n   *         The new last volume as a decimal percent:\n   *         - 0 is muted/0%/off\n   *         - 1.0 is 100%/full\n   *         - 0.5 is half volume or 50%\n   *\n   * @return {number}\n   *         the current value of lastVolume as a percent when getting\n   *\n   * @private\n   */\n  lastVolume_(percentAsDecimal) {\n    if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {\n      this.cache_.lastVolume = percentAsDecimal;\n      return;\n    }\n    return this.cache_.lastVolume;\n  }\n\n  /**\n   * Check if current tech can support native fullscreen\n   * (e.g. with built in controls like iOS)\n   *\n   * @return {boolean}\n   *         if native fullscreen is supported\n   */\n  supportsFullScreen() {\n    return this.techGet_('supportsFullScreen') || false;\n  }\n\n  /**\n   * Check if the player is in fullscreen mode or tell the player that it\n   * is or is not in fullscreen mode.\n   *\n   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official\n   * property and instead document.fullscreenElement is used. But isFullscreen is\n   * still a valuable property for internal player workings.\n   *\n   * @param  {boolean} [isFS]\n   *         Set the players current fullscreen state\n   *\n   * @return {boolean}\n   *         - true if fullscreen is on and getting\n   *         - false if fullscreen is off and getting\n   */\n  isFullscreen(isFS) {\n    if (isFS !== undefined) {\n      const oldValue = this.isFullscreen_;\n      this.isFullscreen_ = Boolean(isFS);\n\n      // if we changed fullscreen state and we're in prefixed mode, trigger fullscreenchange\n      // this is the only place where we trigger fullscreenchange events for older browsers\n      // fullWindow mode is treated as a prefixed event and will get a fullscreenchange event as well\n      if (this.isFullscreen_ !== oldValue && this.fsApi_.prefixed) {\n        /**\n           * @event Player#fullscreenchange\n           * @type {Event}\n           */\n        this.trigger('fullscreenchange');\n      }\n      this.toggleFullscreenClass_();\n      return;\n    }\n    return this.isFullscreen_;\n  }\n\n  /**\n   * Increase the size of the video to full screen\n   * In some browsers, full screen is not supported natively, so it enters\n   * \"full window mode\", where the video fills the browser window.\n   * In browsers and devices that support native full screen, sometimes the\n   * browser's default controls will be shown, and not the Video.js custom skin.\n   * This includes most mobile devices (iOS, Android) and older versions of\n   * Safari.\n   *\n   * @param  {Object} [fullscreenOptions]\n   *         Override the player fullscreen options\n   *\n   * @fires Player#fullscreenchange\n   */\n  requestFullscreen(fullscreenOptions) {\n    if (this.isInPictureInPicture()) {\n      this.exitPictureInPicture();\n    }\n    const self = this;\n    return new Promise((resolve, reject) => {\n      function offHandler() {\n        self.off('fullscreenerror', errorHandler);\n        self.off('fullscreenchange', changeHandler);\n      }\n      function changeHandler() {\n        offHandler();\n        resolve();\n      }\n      function errorHandler(e, err) {\n        offHandler();\n        reject(err);\n      }\n      self.one('fullscreenchange', changeHandler);\n      self.one('fullscreenerror', errorHandler);\n      const promise = self.requestFullscreenHelper_(fullscreenOptions);\n      if (promise) {\n        promise.then(offHandler, offHandler);\n        promise.then(resolve, reject);\n      }\n    });\n  }\n  requestFullscreenHelper_(fullscreenOptions) {\n    let fsOptions;\n\n    // Only pass fullscreen options to requestFullscreen in spec-compliant browsers.\n    // Use defaults or player configured option unless passed directly to this method.\n    if (!this.fsApi_.prefixed) {\n      fsOptions = this.options_.fullscreen && this.options_.fullscreen.options || {};\n      if (fullscreenOptions !== undefined) {\n        fsOptions = fullscreenOptions;\n      }\n    }\n\n    // This method works as follows:\n    // 1. if a fullscreen api is available, use it\n    //   1. call requestFullscreen with potential options\n    //   2. if we got a promise from above, use it to update isFullscreen()\n    // 2. otherwise, if the tech supports fullscreen, call `enterFullScreen` on it.\n    //   This is particularly used for iPhone, older iPads, and non-safari browser on iOS.\n    // 3. otherwise, use \"fullWindow\" mode\n    if (this.fsApi_.requestFullscreen) {\n      const promise = this.el_[this.fsApi_.requestFullscreen](fsOptions);\n\n      // Even on browsers with promise support this may not return a promise\n      if (promise) {\n        promise.then(() => this.isFullscreen(true), () => this.isFullscreen(false));\n      }\n      return promise;\n    } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {\n      // we can't take the video.js controls fullscreen but we can go fullscreen\n      // with native controls\n      this.techCall_('enterFullScreen');\n    } else {\n      // fullscreen isn't supported so we'll just stretch the video element to\n      // fill the viewport\n      this.enterFullWindow();\n    }\n  }\n\n  /**\n   * Return the video to its normal size after having been in full screen mode\n   *\n   * @fires Player#fullscreenchange\n   */\n  exitFullscreen() {\n    const self = this;\n    return new Promise((resolve, reject) => {\n      function offHandler() {\n        self.off('fullscreenerror', errorHandler);\n        self.off('fullscreenchange', changeHandler);\n      }\n      function changeHandler() {\n        offHandler();\n        resolve();\n      }\n      function errorHandler(e, err) {\n        offHandler();\n        reject(err);\n      }\n      self.one('fullscreenchange', changeHandler);\n      self.one('fullscreenerror', errorHandler);\n      const promise = self.exitFullscreenHelper_();\n      if (promise) {\n        promise.then(offHandler, offHandler);\n        // map the promise to our resolve/reject methods\n        promise.then(resolve, reject);\n      }\n    });\n  }\n  exitFullscreenHelper_() {\n    if (this.fsApi_.requestFullscreen) {\n      const promise = document[this.fsApi_.exitFullscreen]();\n\n      // Even on browsers with promise support this may not return a promise\n      if (promise) {\n        // we're splitting the promise here, so, we want to catch the\n        // potential error so that this chain doesn't have unhandled errors\n        silencePromise(promise.then(() => this.isFullscreen(false)));\n      }\n      return promise;\n    } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {\n      this.techCall_('exitFullScreen');\n    } else {\n      this.exitFullWindow();\n    }\n  }\n\n  /**\n   * When fullscreen isn't supported we can stretch the\n   * video container to as wide as the browser will let us.\n   *\n   * @fires Player#enterFullWindow\n   */\n  enterFullWindow() {\n    this.isFullscreen(true);\n    this.isFullWindow = true;\n\n    // Storing original doc overflow value to return to when fullscreen is off\n    this.docOrigOverflow = document.documentElement.style.overflow;\n\n    // Add listener for esc key to exit fullscreen\n    on(document, 'keydown', this.boundFullWindowOnEscKey_);\n\n    // Hide any scroll bars\n    document.documentElement.style.overflow = 'hidden';\n\n    // Apply fullscreen styles\n    addClass(document.body, 'vjs-full-window');\n\n    /**\n     * @event Player#enterFullWindow\n     * @type {Event}\n     */\n    this.trigger('enterFullWindow');\n  }\n\n  /**\n   * Check for call to either exit full window or\n   * full screen on ESC key\n   *\n   * @param {string} event\n   *        Event to check for key press\n   */\n  fullWindowOnEscKey(event) {\n    if (keycode.isEventKey(event, 'Esc')) {\n      if (this.isFullscreen() === true) {\n        if (!this.isFullWindow) {\n          this.exitFullscreen();\n        } else {\n          this.exitFullWindow();\n        }\n      }\n    }\n  }\n\n  /**\n   * Exit full window\n   *\n   * @fires Player#exitFullWindow\n   */\n  exitFullWindow() {\n    this.isFullscreen(false);\n    this.isFullWindow = false;\n    off(document, 'keydown', this.boundFullWindowOnEscKey_);\n\n    // Unhide scroll bars.\n    document.documentElement.style.overflow = this.docOrigOverflow;\n\n    // Remove fullscreen styles\n    removeClass(document.body, 'vjs-full-window');\n\n    // Resize the box, controller, and poster to original sizes\n    // this.positionAll();\n    /**\n     * @event Player#exitFullWindow\n     * @type {Event}\n     */\n    this.trigger('exitFullWindow');\n  }\n\n  /**\n   * Disable Picture-in-Picture mode.\n   *\n   * @param {boolean} value\n   *                  - true will disable Picture-in-Picture mode\n   *                  - false will enable Picture-in-Picture mode\n   */\n  disablePictureInPicture(value) {\n    if (value === undefined) {\n      return this.techGet_('disablePictureInPicture');\n    }\n    this.techCall_('setDisablePictureInPicture', value);\n    this.options_.disablePictureInPicture = value;\n    this.trigger('disablepictureinpicturechanged');\n  }\n\n  /**\n   * Check if the player is in Picture-in-Picture mode or tell the player that it\n   * is or is not in Picture-in-Picture mode.\n   *\n   * @param  {boolean} [isPiP]\n   *         Set the players current Picture-in-Picture state\n   *\n   * @return {boolean}\n   *         - true if Picture-in-Picture is on and getting\n   *         - false if Picture-in-Picture is off and getting\n   */\n  isInPictureInPicture(isPiP) {\n    if (isPiP !== undefined) {\n      this.isInPictureInPicture_ = !!isPiP;\n      this.togglePictureInPictureClass_();\n      return;\n    }\n    return !!this.isInPictureInPicture_;\n  }\n\n  /**\n   * Create a floating video window always on top of other windows so that users may\n   * continue consuming media while they interact with other content sites, or\n   * applications on their device.\n   *\n   * This can use document picture-in-picture or element picture in picture\n   *\n   * Set `enableDocumentPictureInPicture` to `true` to use docPiP on a supported browser\n   * Else set `disablePictureInPicture` to `false` to disable elPiP on a supported browser\n   *\n   *\n   * @see [Spec]{@link https://w3c.github.io/picture-in-picture/}\n   * @see [Spec]{@link https://wicg.github.io/document-picture-in-picture/}\n   *\n   * @fires Player#enterpictureinpicture\n   *\n   * @return {Promise}\n   *         A promise with a Picture-in-Picture window.\n   */\n  requestPictureInPicture() {\n    if (this.options_.enableDocumentPictureInPicture && window$1.documentPictureInPicture) {\n      const pipContainer = document.createElement(this.el().tagName);\n      pipContainer.classList = this.el().classList;\n      pipContainer.classList.add('vjs-pip-container');\n      if (this.posterImage) {\n        pipContainer.appendChild(this.posterImage.el().cloneNode(true));\n      }\n      if (this.titleBar) {\n        pipContainer.appendChild(this.titleBar.el().cloneNode(true));\n      }\n      pipContainer.appendChild(createEl('p', {\n        className: 'vjs-pip-text'\n      }, {}, this.localize('Playing in picture-in-picture')));\n      return window$1.documentPictureInPicture.requestWindow({\n        // The aspect ratio won't be correct, Chrome bug https://crbug.com/1407629\n        initialAspectRatio: this.videoWidth() / this.videoHeight(),\n        copyStyleSheets: true\n      }).then(pipWindow => {\n        this.el_.parentNode.insertBefore(pipContainer, this.el_);\n        pipWindow.document.body.append(this.el_);\n        pipWindow.document.body.classList.add('vjs-pip-window');\n        this.player_.isInPictureInPicture(true);\n        this.player_.trigger('enterpictureinpicture');\n\n        // Listen for the PiP closing event to move the video back.\n        pipWindow.addEventListener('unload', event => {\n          const pipVideo = event.target.querySelector('.video-js');\n          pipContainer.replaceWith(pipVideo);\n          this.player_.isInPictureInPicture(false);\n          this.player_.trigger('leavepictureinpicture');\n        });\n        return pipWindow;\n      });\n    }\n    if ('pictureInPictureEnabled' in document && this.disablePictureInPicture() === false) {\n      /**\n       * This event fires when the player enters picture in picture mode\n       *\n       * @event Player#enterpictureinpicture\n       * @type {Event}\n       */\n      return this.techGet_('requestPictureInPicture');\n    }\n    return Promise.reject('No PiP mode is available');\n  }\n\n  /**\n   * Exit Picture-in-Picture mode.\n   *\n   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}\n   *\n   * @fires Player#leavepictureinpicture\n   *\n   * @return {Promise}\n   *         A promise.\n   */\n  exitPictureInPicture() {\n    if (window$1.documentPictureInPicture && window$1.documentPictureInPicture.window) {\n      // With documentPictureInPicture, Player#leavepictureinpicture is fired in the unload handler\n      window$1.documentPictureInPicture.window.close();\n      return Promise.resolve();\n    }\n    if ('pictureInPictureEnabled' in document) {\n      /**\n       * This event fires when the player leaves picture in picture mode\n       *\n       * @event Player#leavepictureinpicture\n       * @type {Event}\n       */\n      return document.exitPictureInPicture();\n    }\n  }\n\n  /**\n   * Called when this Player has focus and a key gets pressed down, or when\n   * any Component of this player receives a key press that it doesn't handle.\n   * This allows player-wide hotkeys (either as defined below, or optionally\n   * by an external function).\n   *\n   * @param {Event} event\n   *        The `keydown` event that caused this function to be called.\n   *\n   * @listens keydown\n   */\n  handleKeyDown(event) {\n    const {\n      userActions\n    } = this.options_;\n\n    // Bail out if hotkeys are not configured.\n    if (!userActions || !userActions.hotkeys) {\n      return;\n    }\n\n    // Function that determines whether or not to exclude an element from\n    // hotkeys handling.\n    const excludeElement = el => {\n      const tagName = el.tagName.toLowerCase();\n\n      // The first and easiest test is for `contenteditable` elements.\n      if (el.isContentEditable) {\n        return true;\n      }\n\n      // Inputs matching these types will still trigger hotkey handling as\n      // they are not text inputs.\n      const allowedInputTypes = ['button', 'checkbox', 'hidden', 'radio', 'reset', 'submit'];\n      if (tagName === 'input') {\n        return allowedInputTypes.indexOf(el.type) === -1;\n      }\n\n      // The final test is by tag name. These tags will be excluded entirely.\n      const excludedTags = ['textarea'];\n      return excludedTags.indexOf(tagName) !== -1;\n    };\n\n    // Bail out if the user is focused on an interactive form element.\n    if (excludeElement(this.el_.ownerDocument.activeElement)) {\n      return;\n    }\n    if (typeof userActions.hotkeys === 'function') {\n      userActions.hotkeys.call(this, event);\n    } else {\n      this.handleHotkeys(event);\n    }\n  }\n\n  /**\n   * Called when this Player receives a hotkey keydown event.\n   * Supported player-wide hotkeys are:\n   *\n   *   f          - toggle fullscreen\n   *   m          - toggle mute\n   *   k or Space - toggle play/pause\n   *\n   * @param {Event} event\n   *        The `keydown` event that caused this function to be called.\n   */\n  handleHotkeys(event) {\n    const hotkeys = this.options_.userActions ? this.options_.userActions.hotkeys : {};\n\n    // set fullscreenKey, muteKey, playPauseKey from `hotkeys`, use defaults if not set\n    const {\n      fullscreenKey = keydownEvent => keycode.isEventKey(keydownEvent, 'f'),\n      muteKey = keydownEvent => keycode.isEventKey(keydownEvent, 'm'),\n      playPauseKey = keydownEvent => keycode.isEventKey(keydownEvent, 'k') || keycode.isEventKey(keydownEvent, 'Space')\n    } = hotkeys;\n    if (fullscreenKey.call(this, event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      const FSToggle = Component$1.getComponent('FullscreenToggle');\n      if (document[this.fsApi_.fullscreenEnabled] !== false) {\n        FSToggle.prototype.handleClick.call(this, event);\n      }\n    } else if (muteKey.call(this, event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      const MuteToggle = Component$1.getComponent('MuteToggle');\n      MuteToggle.prototype.handleClick.call(this, event);\n    } else if (playPauseKey.call(this, event)) {\n      event.preventDefault();\n      event.stopPropagation();\n      const PlayToggle = Component$1.getComponent('PlayToggle');\n      PlayToggle.prototype.handleClick.call(this, event);\n    }\n  }\n\n  /**\n   * Check whether the player can play a given mimetype\n   *\n   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype\n   *\n   * @param {string} type\n   *        The mimetype to check\n   *\n   * @return {string}\n   *         'probably', 'maybe', or '' (empty string)\n   */\n  canPlayType(type) {\n    let can;\n\n    // Loop through each playback technology in the options order\n    for (let i = 0, j = this.options_.techOrder; i < j.length; i++) {\n      const techName = j[i];\n      let tech = Tech.getTech(techName);\n\n      // Support old behavior of techs being registered as components.\n      // Remove once that deprecated behavior is removed.\n      if (!tech) {\n        tech = Component$1.getComponent(techName);\n      }\n\n      // Check if the current tech is defined before continuing\n      if (!tech) {\n        log$1.error(`The \"${techName}\" tech is undefined. Skipped browser support check for that tech.`);\n        continue;\n      }\n\n      // Check if the browser supports this technology\n      if (tech.isSupported()) {\n        can = tech.canPlayType(type);\n        if (can) {\n          return can;\n        }\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Select source based on tech-order or source-order\n   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,\n   * defaults to tech-order selection\n   *\n   * @param {Array} sources\n   *        The sources for a media asset\n   *\n   * @return {Object|boolean}\n   *         Object of source and tech order or false\n   */\n  selectSource(sources) {\n    // Get only the techs specified in `techOrder` that exist and are supported by the\n    // current platform\n    const techs = this.options_.techOrder.map(techName => {\n      return [techName, Tech.getTech(techName)];\n    }).filter(([techName, tech]) => {\n      // Check if the current tech is defined before continuing\n      if (tech) {\n        // Check if the browser supports this technology\n        return tech.isSupported();\n      }\n      log$1.error(`The \"${techName}\" tech is undefined. Skipped browser support check for that tech.`);\n      return false;\n    });\n\n    // Iterate over each `innerArray` element once per `outerArray` element and execute\n    // `tester` with both. If `tester` returns a non-falsy value, exit early and return\n    // that value.\n    const findFirstPassingTechSourcePair = function (outerArray, innerArray, tester) {\n      let found;\n      outerArray.some(outerChoice => {\n        return innerArray.some(innerChoice => {\n          found = tester(outerChoice, innerChoice);\n          if (found) {\n            return true;\n          }\n        });\n      });\n      return found;\n    };\n    let foundSourceAndTech;\n    const flip = fn => (a, b) => fn(b, a);\n    const finder = ([techName, tech], source) => {\n      if (tech.canPlaySource(source, this.options_[techName.toLowerCase()])) {\n        return {\n          source,\n          tech: techName\n        };\n      }\n    };\n\n    // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources\n    // to select from them based on their priority.\n    if (this.options_.sourceOrder) {\n      // Source-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));\n    } else {\n      // Tech-first ordering\n      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);\n    }\n    return foundSourceAndTech || false;\n  }\n\n  /**\n   * Executes source setting and getting logic\n   *\n   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]\n   *        A SourceObject, an array of SourceObjects, or a string referencing\n   *        a URL to a media source. It is _highly recommended_ that an object\n   *        or array of objects is used here, so that source selection\n   *        algorithms can take the `type` into account.\n   *\n   *        If not provided, this method acts as a getter.\n   * @param {boolean} isRetry\n   *        Indicates whether this is being called internally as a result of a retry\n   *\n   * @return {string|undefined}\n   *         If the `source` argument is missing, returns the current source\n   *         URL. Otherwise, returns nothing/undefined.\n   */\n  handleSrc_(source, isRetry) {\n    // getter usage\n    if (typeof source === 'undefined') {\n      return this.cache_.src || '';\n    }\n\n    // Reset retry behavior for new source\n    if (this.resetRetryOnError_) {\n      this.resetRetryOnError_();\n    }\n\n    // filter out invalid sources and turn our source into\n    // an array of source objects\n    const sources = filterSource(source);\n\n    // if a source was passed in then it is invalid because\n    // it was filtered to a zero length Array. So we have to\n    // show an error\n    if (!sources.length) {\n      this.setTimeout(function () {\n        this.error({\n          code: 4,\n          message: this.options_.notSupportedMessage\n        });\n      }, 0);\n      return;\n    }\n\n    // initial sources\n    this.changingSrc_ = true;\n\n    // Only update the cached source list if we are not retrying a new source after error,\n    // since in that case we want to include the failed source(s) in the cache\n    if (!isRetry) {\n      this.cache_.sources = sources;\n    }\n    this.updateSourceCaches_(sources[0]);\n\n    // middlewareSource is the source after it has been changed by middleware\n    setSource(this, sources[0], (middlewareSource, mws) => {\n      this.middleware_ = mws;\n\n      // since sourceSet is async we have to update the cache again after we select a source since\n      // the source that is selected could be out of order from the cache update above this callback.\n      if (!isRetry) {\n        this.cache_.sources = sources;\n      }\n      this.updateSourceCaches_(middlewareSource);\n      const err = this.src_(middlewareSource);\n      if (err) {\n        if (sources.length > 1) {\n          return this.handleSrc_(sources.slice(1));\n        }\n        this.changingSrc_ = false;\n\n        // We need to wrap this in a timeout to give folks a chance to add error event handlers\n        this.setTimeout(function () {\n          this.error({\n            code: 4,\n            message: this.options_.notSupportedMessage\n          });\n        }, 0);\n\n        // we could not find an appropriate tech, but let's still notify the delegate that this is it\n        // this needs a better comment about why this is needed\n        this.triggerReady();\n        return;\n      }\n      setTech(mws, this.tech_);\n    });\n\n    // Try another available source if this one fails before playback.\n    if (sources.length > 1) {\n      const retry = () => {\n        // Remove the error modal\n        this.error(null);\n        this.handleSrc_(sources.slice(1), true);\n      };\n      const stopListeningForErrors = () => {\n        this.off('error', retry);\n      };\n      this.one('error', retry);\n      this.one('playing', stopListeningForErrors);\n      this.resetRetryOnError_ = () => {\n        this.off('error', retry);\n        this.off('playing', stopListeningForErrors);\n      };\n    }\n  }\n\n  /**\n   * Get or set the video source.\n   *\n   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]\n   *        A SourceObject, an array of SourceObjects, or a string referencing\n   *        a URL to a media source. It is _highly recommended_ that an object\n   *        or array of objects is used here, so that source selection\n   *        algorithms can take the `type` into account.\n   *\n   *        If not provided, this method acts as a getter.\n   *\n   * @return {string|undefined}\n   *         If the `source` argument is missing, returns the current source\n   *         URL. Otherwise, returns nothing/undefined.\n   */\n  src(source) {\n    return this.handleSrc_(source, false);\n  }\n\n  /**\n   * Set the source object on the tech, returns a boolean that indicates whether\n   * there is a tech that can play the source or not\n   *\n   * @param {Tech~SourceObject} source\n   *        The source object to set on the Tech\n   *\n   * @return {boolean}\n   *         - True if there is no Tech to playback this source\n   *         - False otherwise\n   *\n   * @private\n   */\n  src_(source) {\n    const sourceTech = this.selectSource([source]);\n    if (!sourceTech) {\n      return true;\n    }\n    if (!titleCaseEquals(sourceTech.tech, this.techName_)) {\n      this.changingSrc_ = true;\n      // load this technology with the chosen source\n      this.loadTech_(sourceTech.tech, sourceTech.source);\n      this.tech_.ready(() => {\n        this.changingSrc_ = false;\n      });\n      return false;\n    }\n\n    // wait until the tech is ready to set the source\n    // and set it synchronously if possible (#2326)\n    this.ready(function () {\n      // The setSource tech method was added with source handlers\n      // so older techs won't support it\n      // We need to check the direct prototype for the case where subclasses\n      // of the tech do not support source handlers\n      if (this.tech_.constructor.prototype.hasOwnProperty('setSource')) {\n        this.techCall_('setSource', source);\n      } else {\n        this.techCall_('src', source.src);\n      }\n      this.changingSrc_ = false;\n    }, true);\n    return false;\n  }\n\n  /**\n   * Begin loading the src data.\n   */\n  load() {\n    this.techCall_('load');\n  }\n\n  /**\n   * Reset the player. Loads the first tech in the techOrder,\n   * removes all the text tracks in the existing `tech`,\n   * and calls `reset` on the `tech`.\n   */\n  reset() {\n    if (this.paused()) {\n      this.doReset_();\n    } else {\n      const playPromise = this.play();\n      silencePromise(playPromise.then(() => this.doReset_()));\n    }\n  }\n  doReset_() {\n    if (this.tech_) {\n      this.tech_.clearTracks('text');\n    }\n    this.resetCache_();\n    this.poster('');\n    this.loadTech_(this.options_.techOrder[0], null);\n    this.techCall_('reset');\n    this.resetControlBarUI_();\n    if (isEvented(this)) {\n      this.trigger('playerreset');\n    }\n  }\n\n  /**\n   * Reset Control Bar's UI by calling sub-methods that reset\n   * all of Control Bar's components\n   */\n  resetControlBarUI_() {\n    this.resetProgressBar_();\n    this.resetPlaybackRate_();\n    this.resetVolumeBar_();\n  }\n\n  /**\n   * Reset tech's progress so progress bar is reset in the UI\n   */\n  resetProgressBar_() {\n    this.currentTime(0);\n    const {\n      currentTimeDisplay,\n      durationDisplay,\n      progressControl,\n      remainingTimeDisplay\n    } = this.controlBar || {};\n    const {\n      seekBar\n    } = progressControl || {};\n    if (currentTimeDisplay) {\n      currentTimeDisplay.updateContent();\n    }\n    if (durationDisplay) {\n      durationDisplay.updateContent();\n    }\n    if (remainingTimeDisplay) {\n      remainingTimeDisplay.updateContent();\n    }\n    if (seekBar) {\n      seekBar.update();\n      if (seekBar.loadProgressBar) {\n        seekBar.loadProgressBar.update();\n      }\n    }\n  }\n\n  /**\n   * Reset Playback ratio\n   */\n  resetPlaybackRate_() {\n    this.playbackRate(this.defaultPlaybackRate());\n    this.handleTechRateChange_();\n  }\n\n  /**\n   * Reset Volume bar\n   */\n  resetVolumeBar_() {\n    this.volume(1.0);\n    this.trigger('volumechange');\n  }\n\n  /**\n   * Returns all of the current source objects.\n   *\n   * @return {Tech~SourceObject[]}\n   *         The current source objects\n   */\n  currentSources() {\n    const source = this.currentSource();\n    const sources = [];\n\n    // assume `{}` or `{ src }`\n    if (Object.keys(source).length !== 0) {\n      sources.push(source);\n    }\n    return this.cache_.sources || sources;\n  }\n\n  /**\n   * Returns the current source object.\n   *\n   * @return {Tech~SourceObject}\n   *         The current source object\n   */\n  currentSource() {\n    return this.cache_.source || {};\n  }\n\n  /**\n   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4\n   * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.\n   *\n   * @return {string}\n   *         The current source\n   */\n  currentSrc() {\n    return this.currentSource() && this.currentSource().src || '';\n  }\n\n  /**\n   * Get the current source type e.g. video/mp4\n   * This can allow you rebuild the current source object so that you could load the same\n   * source and tech later\n   *\n   * @return {string}\n   *         The source MIME type\n   */\n  currentType() {\n    return this.currentSource() && this.currentSource().type || '';\n  }\n\n  /**\n   * Get or set the preload attribute\n   *\n   * @param {boolean} [value]\n   *        - true means that we should preload\n   *        - false means that we should not preload\n   *\n   * @return {string}\n   *         The preload attribute value when getting\n   */\n  preload(value) {\n    if (value !== undefined) {\n      this.techCall_('setPreload', value);\n      this.options_.preload = value;\n      return;\n    }\n    return this.techGet_('preload');\n  }\n\n  /**\n   * Get or set the autoplay option. When this is a boolean it will\n   * modify the attribute on the tech. When this is a string the attribute on\n   * the tech will be removed and `Player` will handle autoplay on loadstarts.\n   *\n   * @param {boolean|string} [value]\n   *        - true: autoplay using the browser behavior\n   *        - false: do not autoplay\n   *        - 'play': call play() on every loadstart\n   *        - 'muted': call muted() then play() on every loadstart\n   *        - 'any': call play() on every loadstart. if that fails call muted() then play().\n   *        - *: values other than those listed here will be set `autoplay` to true\n   *\n   * @return {boolean|string}\n   *         The current value of autoplay when getting\n   */\n  autoplay(value) {\n    // getter usage\n    if (value === undefined) {\n      return this.options_.autoplay || false;\n    }\n    let techAutoplay;\n\n    // if the value is a valid string set it to that, or normalize `true` to 'play', if need be\n    if (typeof value === 'string' && /(any|play|muted)/.test(value) || value === true && this.options_.normalizeAutoplay) {\n      this.options_.autoplay = value;\n      this.manualAutoplay_(typeof value === 'string' ? value : 'play');\n      techAutoplay = false;\n\n      // any falsy value sets autoplay to false in the browser,\n      // lets do the same\n    } else if (!value) {\n      this.options_.autoplay = false;\n\n      // any other value (ie truthy) sets autoplay to true\n    } else {\n      this.options_.autoplay = true;\n    }\n    techAutoplay = typeof techAutoplay === 'undefined' ? this.options_.autoplay : techAutoplay;\n\n    // if we don't have a tech then we do not queue up\n    // a setAutoplay call on tech ready. We do this because the\n    // autoplay option will be passed in the constructor and we\n    // do not need to set it twice\n    if (this.tech_) {\n      this.techCall_('setAutoplay', techAutoplay);\n    }\n  }\n\n  /**\n   * Set or unset the playsinline attribute.\n   * Playsinline tells the browser that non-fullscreen playback is preferred.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should try to play inline by default\n   *        - false means that we should use the browser's default playback mode,\n   *          which in most cases is inline. iOS Safari is a notable exception\n   *          and plays fullscreen by default.\n   *\n   * @return {string|Player}\n   *         - the current value of playsinline\n   *         - the player when setting\n   *\n   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}\n   */\n  playsinline(value) {\n    if (value !== undefined) {\n      this.techCall_('setPlaysinline', value);\n      this.options_.playsinline = value;\n      return this;\n    }\n    return this.techGet_('playsinline');\n  }\n\n  /**\n   * Get or set the loop attribute on the video element.\n   *\n   * @param {boolean} [value]\n   *        - true means that we should loop the video\n   *        - false means that we should not loop the video\n   *\n   * @return {boolean}\n   *         The current value of loop when getting\n   */\n  loop(value) {\n    if (value !== undefined) {\n      this.techCall_('setLoop', value);\n      this.options_.loop = value;\n      return;\n    }\n    return this.techGet_('loop');\n  }\n\n  /**\n   * Get or set the poster image source url\n   *\n   * @fires Player#posterchange\n   *\n   * @param {string} [src]\n   *        Poster image source URL\n   *\n   * @return {string}\n   *         The current value of poster when getting\n   */\n  poster(src) {\n    if (src === undefined) {\n      return this.poster_;\n    }\n\n    // The correct way to remove a poster is to set as an empty string\n    // other falsey values will throw errors\n    if (!src) {\n      src = '';\n    }\n    if (src === this.poster_) {\n      return;\n    }\n\n    // update the internal poster variable\n    this.poster_ = src;\n\n    // update the tech's poster\n    this.techCall_('setPoster', src);\n    this.isPosterFromTech_ = false;\n\n    // alert components that the poster has been set\n    /**\n     * This event fires when the poster image is changed on the player.\n     *\n     * @event Player#posterchange\n     * @type {Event}\n     */\n    this.trigger('posterchange');\n  }\n\n  /**\n   * Some techs (e.g. YouTube) can provide a poster source in an\n   * asynchronous way. We want the poster component to use this\n   * poster source so that it covers up the tech's controls.\n   * (YouTube's play button). However we only want to use this\n   * source if the player user hasn't set a poster through\n   * the normal APIs.\n   *\n   * @fires Player#posterchange\n   * @listens Tech#posterchange\n   * @private\n   */\n  handleTechPosterChange_() {\n    if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {\n      const newPoster = this.tech_.poster() || '';\n      if (newPoster !== this.poster_) {\n        this.poster_ = newPoster;\n        this.isPosterFromTech_ = true;\n\n        // Let components know the poster has changed\n        this.trigger('posterchange');\n      }\n    }\n  }\n\n  /**\n   * Get or set whether or not the controls are showing.\n   *\n   * @fires Player#controlsenabled\n   *\n   * @param {boolean} [bool]\n   *        - true to turn controls on\n   *        - false to turn controls off\n   *\n   * @return {boolean}\n   *         The current value of controls when getting\n   */\n  controls(bool) {\n    if (bool === undefined) {\n      return !!this.controls_;\n    }\n    bool = !!bool;\n\n    // Don't trigger a change event unless it actually changed\n    if (this.controls_ === bool) {\n      return;\n    }\n    this.controls_ = bool;\n    if (this.usingNativeControls()) {\n      this.techCall_('setControls', bool);\n    }\n    if (this.controls_) {\n      this.removeClass('vjs-controls-disabled');\n      this.addClass('vjs-controls-enabled');\n      /**\n       * @event Player#controlsenabled\n       * @type {Event}\n       */\n      this.trigger('controlsenabled');\n      if (!this.usingNativeControls()) {\n        this.addTechControlsListeners_();\n      }\n    } else {\n      this.removeClass('vjs-controls-enabled');\n      this.addClass('vjs-controls-disabled');\n      /**\n       * @event Player#controlsdisabled\n       * @type {Event}\n       */\n      this.trigger('controlsdisabled');\n      if (!this.usingNativeControls()) {\n        this.removeTechControlsListeners_();\n      }\n    }\n  }\n\n  /**\n   * Toggle native controls on/off. Native controls are the controls built into\n   * devices (e.g. default iPhone controls) or other techs\n   * (e.g. Vimeo Controls)\n   * **This should only be set by the current tech, because only the tech knows\n   * if it can support native controls**\n   *\n   * @fires Player#usingnativecontrols\n   * @fires Player#usingcustomcontrols\n   *\n   * @param {boolean} [bool]\n   *        - true to turn native controls on\n   *        - false to turn native controls off\n   *\n   * @return {boolean}\n   *         The current value of native controls when getting\n   */\n  usingNativeControls(bool) {\n    if (bool === undefined) {\n      return !!this.usingNativeControls_;\n    }\n    bool = !!bool;\n\n    // Don't trigger a change event unless it actually changed\n    if (this.usingNativeControls_ === bool) {\n      return;\n    }\n    this.usingNativeControls_ = bool;\n    if (this.usingNativeControls_) {\n      this.addClass('vjs-using-native-controls');\n\n      /**\n       * player is using the native device controls\n       *\n       * @event Player#usingnativecontrols\n       * @type {Event}\n       */\n      this.trigger('usingnativecontrols');\n    } else {\n      this.removeClass('vjs-using-native-controls');\n\n      /**\n       * player is using the custom HTML controls\n       *\n       * @event Player#usingcustomcontrols\n       * @type {Event}\n       */\n      this.trigger('usingcustomcontrols');\n    }\n  }\n\n  /**\n   * Set or get the current MediaError\n   *\n   * @fires Player#error\n   *\n   * @param  {MediaError|string|number} [err]\n   *         A MediaError or a string/number to be turned\n   *         into a MediaError\n   *\n   * @return {MediaError|null}\n   *         The current MediaError when getting (or null)\n   */\n  error(err) {\n    if (err === undefined) {\n      return this.error_ || null;\n    }\n\n    // allow hooks to modify error object\n    hooks('beforeerror').forEach(hookFunction => {\n      const newErr = hookFunction(this, err);\n      if (!(isObject(newErr) && !Array.isArray(newErr) || typeof newErr === 'string' || typeof newErr === 'number' || newErr === null)) {\n        this.log.error('please return a value that MediaError expects in beforeerror hooks');\n        return;\n      }\n      err = newErr;\n    });\n\n    // Suppress the first error message for no compatible source until\n    // user interaction\n    if (this.options_.suppressNotSupportedError && err && err.code === 4) {\n      const triggerSuppressedError = function () {\n        this.error(err);\n      };\n      this.options_.suppressNotSupportedError = false;\n      this.any(['click', 'touchstart'], triggerSuppressedError);\n      this.one('loadstart', function () {\n        this.off(['click', 'touchstart'], triggerSuppressedError);\n      });\n      return;\n    }\n\n    // restoring to default\n    if (err === null) {\n      this.error_ = err;\n      this.removeClass('vjs-error');\n      if (this.errorDisplay) {\n        this.errorDisplay.close();\n      }\n      return;\n    }\n    this.error_ = new MediaError(err);\n\n    // add the vjs-error classname to the player\n    this.addClass('vjs-error');\n\n    // log the name of the error type and any message\n    // IE11 logs \"[object object]\" and required you to expand message to see error object\n    log$1.error(`(CODE:${this.error_.code} ${MediaError.errorTypes[this.error_.code]})`, this.error_.message, this.error_);\n\n    /**\n     * @event Player#error\n     * @type {Event}\n     */\n    this.trigger('error');\n\n    // notify hooks of the per player error\n    hooks('error').forEach(hookFunction => hookFunction(this, this.error_));\n    return;\n  }\n\n  /**\n   * Report user activity\n   *\n   * @param {Object} event\n   *        Event object\n   */\n  reportUserActivity(event) {\n    this.userActivity_ = true;\n  }\n\n  /**\n   * Get/set if user is active\n   *\n   * @fires Player#useractive\n   * @fires Player#userinactive\n   *\n   * @param {boolean} [bool]\n   *        - true if the user is active\n   *        - false if the user is inactive\n   *\n   * @return {boolean}\n   *         The current value of userActive when getting\n   */\n  userActive(bool) {\n    if (bool === undefined) {\n      return this.userActive_;\n    }\n    bool = !!bool;\n    if (bool === this.userActive_) {\n      return;\n    }\n    this.userActive_ = bool;\n    if (this.userActive_) {\n      this.userActivity_ = true;\n      this.removeClass('vjs-user-inactive');\n      this.addClass('vjs-user-active');\n      /**\n       * @event Player#useractive\n       * @type {Event}\n       */\n      this.trigger('useractive');\n      return;\n    }\n\n    // Chrome/Safari/IE have bugs where when you change the cursor it can\n    // trigger a mousemove event. This causes an issue when you're hiding\n    // the cursor when the user is inactive, and a mousemove signals user\n    // activity. Making it impossible to go into inactive mode. Specifically\n    // this happens in fullscreen when we really need to hide the cursor.\n    //\n    // When this gets resolved in ALL browsers it can be removed\n    // https://code.google.com/p/chromium/issues/detail?id=103041\n    if (this.tech_) {\n      this.tech_.one('mousemove', function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n      });\n    }\n    this.userActivity_ = false;\n    this.removeClass('vjs-user-active');\n    this.addClass('vjs-user-inactive');\n    /**\n     * @event Player#userinactive\n     * @type {Event}\n     */\n    this.trigger('userinactive');\n  }\n\n  /**\n   * Listen for user activity based on timeout value\n   *\n   * @private\n   */\n  listenForUserActivity_() {\n    let mouseInProgress;\n    let lastMoveX;\n    let lastMoveY;\n    const handleActivity = bind_(this, this.reportUserActivity);\n    const handleMouseMove = function (e) {\n      // #1068 - Prevent mousemove spamming\n      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970\n      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {\n        lastMoveX = e.screenX;\n        lastMoveY = e.screenY;\n        handleActivity();\n      }\n    };\n    const handleMouseDown = function () {\n      handleActivity();\n      // For as long as the they are touching the device or have their mouse down,\n      // we consider them active even if they're not moving their finger or mouse.\n      // So we want to continue to update that they are active\n      this.clearInterval(mouseInProgress);\n      // Setting userActivity=true now and setting the interval to the same time\n      // as the activityCheck interval (250) should ensure we never miss the\n      // next activityCheck\n      mouseInProgress = this.setInterval(handleActivity, 250);\n    };\n    const handleMouseUpAndMouseLeave = function (event) {\n      handleActivity();\n      // Stop the interval that maintains activity if the mouse/touch is down\n      this.clearInterval(mouseInProgress);\n    };\n\n    // Any mouse movement will be considered user activity\n    this.on('mousedown', handleMouseDown);\n    this.on('mousemove', handleMouseMove);\n    this.on('mouseup', handleMouseUpAndMouseLeave);\n    this.on('mouseleave', handleMouseUpAndMouseLeave);\n    const controlBar = this.getChild('controlBar');\n\n    // Fixes bug on Android & iOS where when tapping progressBar (when control bar is displayed)\n    // controlBar would no longer be hidden by default timeout.\n    if (controlBar && !IS_IOS && !IS_ANDROID) {\n      controlBar.on('mouseenter', function (event) {\n        if (this.player().options_.inactivityTimeout !== 0) {\n          this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout;\n        }\n        this.player().options_.inactivityTimeout = 0;\n      });\n      controlBar.on('mouseleave', function (event) {\n        this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;\n      });\n    }\n\n    // Listen for keyboard navigation\n    // Shouldn't need to use inProgress interval because of key repeat\n    this.on('keydown', handleActivity);\n    this.on('keyup', handleActivity);\n\n    // Run an interval every 250 milliseconds instead of stuffing everything into\n    // the mousemove/touchmove function itself, to prevent performance degradation.\n    // `this.reportUserActivity` simply sets this.userActivity_ to true, which\n    // then gets picked up by this loop\n    // http://ejohn.org/blog/learning-from-twitter/\n    let inactivityTimeout;\n    this.setInterval(function () {\n      // Check to see if mouse/touch activity has happened\n      if (!this.userActivity_) {\n        return;\n      }\n\n      // Reset the activity tracker\n      this.userActivity_ = false;\n\n      // If the user state was inactive, set the state to active\n      this.userActive(true);\n\n      // Clear any existing inactivity timeout to start the timer over\n      this.clearTimeout(inactivityTimeout);\n      const timeout = this.options_.inactivityTimeout;\n      if (timeout <= 0) {\n        return;\n      }\n\n      // In <timeout> milliseconds, if no more activity has occurred the\n      // user will be considered inactive\n      inactivityTimeout = this.setTimeout(function () {\n        // Protect against the case where the inactivityTimeout can trigger just\n        // before the next user activity is picked up by the activity check loop\n        // causing a flicker\n        if (!this.userActivity_) {\n          this.userActive(false);\n        }\n      }, timeout);\n    }, 250);\n  }\n\n  /**\n   * Gets or sets the current playback rate. A playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed\n   * playback, for instance.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate\n   *\n   * @param {number} [rate]\n   *       New playback rate to set.\n   *\n   * @return {number}\n   *         The current playback rate when getting or 1.0\n   */\n  playbackRate(rate) {\n    if (rate !== undefined) {\n      // NOTE: this.cache_.lastPlaybackRate is set from the tech handler\n      // that is registered above\n      this.techCall_('setPlaybackRate', rate);\n      return;\n    }\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.cache_.lastPlaybackRate || this.techGet_('playbackRate');\n    }\n    return 1.0;\n  }\n\n  /**\n   * Gets or sets the current default playback rate. A default playback rate of\n   * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.\n   * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not\n   * not the current playbackRate.\n   *\n   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate\n   *\n   * @param {number} [rate]\n   *       New default playback rate to set.\n   *\n   * @return {number|Player}\n   *         - The default playback rate when getting or 1.0\n   *         - the player when setting\n   */\n  defaultPlaybackRate(rate) {\n    if (rate !== undefined) {\n      return this.techCall_('setDefaultPlaybackRate', rate);\n    }\n    if (this.tech_ && this.tech_.featuresPlaybackRate) {\n      return this.techGet_('defaultPlaybackRate');\n    }\n    return 1.0;\n  }\n\n  /**\n   * Gets or sets the audio flag\n   *\n   * @param {boolean} bool\n   *        - true signals that this is an audio player\n   *        - false signals that this is not an audio player\n   *\n   * @return {boolean}\n   *         The current value of isAudio when getting\n   */\n  isAudio(bool) {\n    if (bool !== undefined) {\n      this.isAudio_ = !!bool;\n      return;\n    }\n    return !!this.isAudio_;\n  }\n  enableAudioOnlyUI_() {\n    // Update styling immediately to show the control bar so we can get its height\n    this.addClass('vjs-audio-only-mode');\n    const playerChildren = this.children();\n    const controlBar = this.getChild('ControlBar');\n    const controlBarHeight = controlBar && controlBar.currentHeight();\n\n    // Hide all player components except the control bar. Control bar components\n    // needed only for video are hidden with CSS\n    playerChildren.forEach(child => {\n      if (child === controlBar) {\n        return;\n      }\n      if (child.el_ && !child.hasClass('vjs-hidden')) {\n        child.hide();\n        this.audioOnlyCache_.hiddenChildren.push(child);\n      }\n    });\n    this.audioOnlyCache_.playerHeight = this.currentHeight();\n\n    // Set the player height the same as the control bar\n    this.height(controlBarHeight);\n    this.trigger('audioonlymodechange');\n  }\n  disableAudioOnlyUI_() {\n    this.removeClass('vjs-audio-only-mode');\n\n    // Show player components that were previously hidden\n    this.audioOnlyCache_.hiddenChildren.forEach(child => child.show());\n\n    // Reset player height\n    this.height(this.audioOnlyCache_.playerHeight);\n    this.trigger('audioonlymodechange');\n  }\n\n  /**\n   * Get the current audioOnlyMode state or set audioOnlyMode to true or false.\n   *\n   * Setting this to `true` will hide all player components except the control bar,\n   * as well as control bar components needed only for video.\n   *\n   * @param {boolean} [value]\n   *         The value to set audioOnlyMode to.\n   *\n   * @return {Promise|boolean}\n   *        A Promise is returned when setting the state, and a boolean when getting\n   *        the present state\n   */\n  audioOnlyMode(value) {\n    if (typeof value !== 'boolean' || value === this.audioOnlyMode_) {\n      return this.audioOnlyMode_;\n    }\n    this.audioOnlyMode_ = value;\n\n    // Enable Audio Only Mode\n    if (value) {\n      const exitPromises = [];\n\n      // Fullscreen and PiP are not supported in audioOnlyMode, so exit if we need to.\n      if (this.isInPictureInPicture()) {\n        exitPromises.push(this.exitPictureInPicture());\n      }\n      if (this.isFullscreen()) {\n        exitPromises.push(this.exitFullscreen());\n      }\n      if (this.audioPosterMode()) {\n        exitPromises.push(this.audioPosterMode(false));\n      }\n      return Promise.all(exitPromises).then(() => this.enableAudioOnlyUI_());\n    }\n\n    // Disable Audio Only Mode\n    return Promise.resolve().then(() => this.disableAudioOnlyUI_());\n  }\n  enablePosterModeUI_() {\n    // Hide the video element and show the poster image to enable posterModeUI\n    const tech = this.tech_ && this.tech_;\n    tech.hide();\n    this.addClass('vjs-audio-poster-mode');\n    this.trigger('audiopostermodechange');\n  }\n  disablePosterModeUI_() {\n    // Show the video element and hide the poster image to disable posterModeUI\n    const tech = this.tech_ && this.tech_;\n    tech.show();\n    this.removeClass('vjs-audio-poster-mode');\n    this.trigger('audiopostermodechange');\n  }\n\n  /**\n   * Get the current audioPosterMode state or set audioPosterMode to true or false\n   *\n   * @param {boolean} [value]\n   *         The value to set audioPosterMode to.\n   *\n   * @return {Promise|boolean}\n   *         A Promise is returned when setting the state, and a boolean when getting\n   *        the present state\n   */\n  audioPosterMode(value) {\n    if (typeof value !== 'boolean' || value === this.audioPosterMode_) {\n      return this.audioPosterMode_;\n    }\n    this.audioPosterMode_ = value;\n    if (value) {\n      if (this.audioOnlyMode()) {\n        const audioOnlyModePromise = this.audioOnlyMode(false);\n        return audioOnlyModePromise.then(() => {\n          // enable audio poster mode after audio only mode is disabled\n          this.enablePosterModeUI_();\n        });\n      }\n      return Promise.resolve().then(() => {\n        // enable audio poster mode\n        this.enablePosterModeUI_();\n      });\n    }\n    return Promise.resolve().then(() => {\n      // disable audio poster mode\n      this.disablePosterModeUI_();\n    });\n  }\n\n  /**\n   * A helper method for adding a {@link TextTrack} to our\n   * {@link TextTrackList}.\n   *\n   * In addition to the W3C settings we allow adding additional info through options.\n   *\n   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack\n   *\n   * @param {string} [kind]\n   *        the kind of TextTrack you are adding\n   *\n   * @param {string} [label]\n   *        the label to give the TextTrack label\n   *\n   * @param {string} [language]\n   *        the language to set on the TextTrack\n   *\n   * @return {TextTrack|undefined}\n   *         the TextTrack that was added or undefined\n   *         if there is no tech\n   */\n  addTextTrack(kind, label, language) {\n    if (this.tech_) {\n      return this.tech_.addTextTrack(kind, label, language);\n    }\n  }\n\n  /**\n   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}.\n   *\n   * @param {Object} options\n   *        Options to pass to {@link HTMLTrackElement} during creation. See\n   *        {@link HTMLTrackElement} for object properties that you should use.\n   *\n   * @param {boolean} [manualCleanup=false] if set to true, the TextTrack will not be removed\n   *                                        from the TextTrackList and HtmlTrackElementList\n   *                                        after a source change\n   *\n   * @return { import('./tracks/html-track-element').default }\n   *         the HTMLTrackElement that was created and added\n   *         to the HtmlTrackElementList and the remote\n   *         TextTrackList\n   *\n   */\n  addRemoteTextTrack(options, manualCleanup) {\n    if (this.tech_) {\n      return this.tech_.addRemoteTextTrack(options, manualCleanup);\n    }\n  }\n\n  /**\n   * Remove a remote {@link TextTrack} from the respective\n   * {@link TextTrackList} and {@link HtmlTrackElementList}.\n   *\n   * @param {Object} track\n   *        Remote {@link TextTrack} to remove\n   *\n   * @return {undefined}\n   *         does not return anything\n   */\n  removeRemoteTextTrack(obj = {}) {\n    let {\n      track\n    } = obj;\n    if (!track) {\n      track = obj;\n    }\n\n    // destructure the input into an object with a track argument, defaulting to arguments[0]\n    // default the whole argument to an empty object if nothing was passed in\n\n    if (this.tech_) {\n      return this.tech_.removeRemoteTextTrack(track);\n    }\n  }\n\n  /**\n   * Gets available media playback quality metrics as specified by the W3C's Media\n   * Playback Quality API.\n   *\n   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}\n   *\n   * @return {Object|undefined}\n   *         An object with supported media playback quality metrics or undefined if there\n   *         is no tech or the tech does not support it.\n   */\n  getVideoPlaybackQuality() {\n    return this.techGet_('getVideoPlaybackQuality');\n  }\n\n  /**\n   * Get video width\n   *\n   * @return {number}\n   *         current video width\n   */\n  videoWidth() {\n    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;\n  }\n\n  /**\n   * Get video height\n   *\n   * @return {number}\n   *         current video height\n   */\n  videoHeight() {\n    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;\n  }\n\n  /**\n   * The player's language code.\n   *\n   * Changing the language will trigger\n   * [languagechange]{@link Player#event:languagechange}\n   * which Components can use to update control text.\n   * ClickableComponent will update its control text by default on\n   * [languagechange]{@link Player#event:languagechange}.\n   *\n   * @fires Player#languagechange\n   *\n   * @param {string} [code]\n   *        the language code to set the player to\n   *\n   * @return {string}\n   *         The current language code when getting\n   */\n  language(code) {\n    if (code === undefined) {\n      return this.language_;\n    }\n    if (this.language_ !== String(code).toLowerCase()) {\n      this.language_ = String(code).toLowerCase();\n\n      // during first init, it's possible some things won't be evented\n      if (isEvented(this)) {\n        /**\n        * fires when the player language change\n        *\n        * @event Player#languagechange\n        * @type {Event}\n        */\n        this.trigger('languagechange');\n      }\n    }\n  }\n\n  /**\n   * Get the player's language dictionary\n   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time\n   * Languages specified directly in the player options have precedence\n   *\n   * @return {Array}\n   *         An array of of supported languages\n   */\n  languages() {\n    return merge$1(Player.prototype.options_.languages, this.languages_);\n  }\n\n  /**\n   * returns a JavaScript object representing the current track\n   * information. **DOES not return it as JSON**\n   *\n   * @return {Object}\n   *         Object representing the current of track info\n   */\n  toJSON() {\n    const options = merge$1(this.options_);\n    const tracks = options.tracks;\n    options.tracks = [];\n    for (let i = 0; i < tracks.length; i++) {\n      let track = tracks[i];\n\n      // deep merge tracks and null out player so no circular references\n      track = merge$1(track);\n      track.player = undefined;\n      options.tracks[i] = track;\n    }\n    return options;\n  }\n\n  /**\n   * Creates a simple modal dialog (an instance of the {@link ModalDialog}\n   * component) that immediately overlays the player with arbitrary\n   * content and removes itself when closed.\n   *\n   * @param {string|Function|Element|Array|null} content\n   *        Same as {@link ModalDialog#content}'s param of the same name.\n   *        The most straight-forward usage is to provide a string or DOM\n   *        element.\n   *\n   * @param {Object} [options]\n   *        Extra options which will be passed on to the {@link ModalDialog}.\n   *\n   * @return {ModalDialog}\n   *         the {@link ModalDialog} that was created\n   */\n  createModal(content, options) {\n    options = options || {};\n    options.content = content || '';\n    const modal = new ModalDialog(this, options);\n    this.addChild(modal);\n    modal.on('dispose', () => {\n      this.removeChild(modal);\n    });\n    modal.open();\n    return modal;\n  }\n\n  /**\n   * Change breakpoint classes when the player resizes.\n   *\n   * @private\n   */\n  updateCurrentBreakpoint_() {\n    if (!this.responsive()) {\n      return;\n    }\n    const currentBreakpoint = this.currentBreakpoint();\n    const currentWidth = this.currentWidth();\n    for (let i = 0; i < BREAKPOINT_ORDER.length; i++) {\n      const candidateBreakpoint = BREAKPOINT_ORDER[i];\n      const maxWidth = this.breakpoints_[candidateBreakpoint];\n      if (currentWidth <= maxWidth) {\n        // The current breakpoint did not change, nothing to do.\n        if (currentBreakpoint === candidateBreakpoint) {\n          return;\n        }\n\n        // Only remove a class if there is a current breakpoint.\n        if (currentBreakpoint) {\n          this.removeClass(BREAKPOINT_CLASSES[currentBreakpoint]);\n        }\n        this.addClass(BREAKPOINT_CLASSES[candidateBreakpoint]);\n        this.breakpoint_ = candidateBreakpoint;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Removes the current breakpoint.\n   *\n   * @private\n   */\n  removeCurrentBreakpoint_() {\n    const className = this.currentBreakpointClass();\n    this.breakpoint_ = '';\n    if (className) {\n      this.removeClass(className);\n    }\n  }\n\n  /**\n   * Get or set breakpoints on the player.\n   *\n   * Calling this method with an object or `true` will remove any previous\n   * custom breakpoints and start from the defaults again.\n   *\n   * @param  {Object|boolean} [breakpoints]\n   *         If an object is given, it can be used to provide custom\n   *         breakpoints. If `true` is given, will set default breakpoints.\n   *         If this argument is not given, will simply return the current\n   *         breakpoints.\n   *\n   * @param  {number} [breakpoints.tiny]\n   *         The maximum width for the \"vjs-layout-tiny\" class.\n   *\n   * @param  {number} [breakpoints.xsmall]\n   *         The maximum width for the \"vjs-layout-x-small\" class.\n   *\n   * @param  {number} [breakpoints.small]\n   *         The maximum width for the \"vjs-layout-small\" class.\n   *\n   * @param  {number} [breakpoints.medium]\n   *         The maximum width for the \"vjs-layout-medium\" class.\n   *\n   * @param  {number} [breakpoints.large]\n   *         The maximum width for the \"vjs-layout-large\" class.\n   *\n   * @param  {number} [breakpoints.xlarge]\n   *         The maximum width for the \"vjs-layout-x-large\" class.\n   *\n   * @param  {number} [breakpoints.huge]\n   *         The maximum width for the \"vjs-layout-huge\" class.\n   *\n   * @return {Object}\n   *         An object mapping breakpoint names to maximum width values.\n   */\n  breakpoints(breakpoints) {\n    // Used as a getter.\n    if (breakpoints === undefined) {\n      return Object.assign(this.breakpoints_);\n    }\n    this.breakpoint_ = '';\n    this.breakpoints_ = Object.assign({}, DEFAULT_BREAKPOINTS, breakpoints);\n\n    // When breakpoint definitions change, we need to update the currently\n    // selected breakpoint.\n    this.updateCurrentBreakpoint_();\n\n    // Clone the breakpoints before returning.\n    return Object.assign(this.breakpoints_);\n  }\n\n  /**\n   * Get or set a flag indicating whether or not this player should adjust\n   * its UI based on its dimensions.\n   *\n   * @param  {boolean} value\n   *         Should be `true` if the player should adjust its UI based on its\n   *         dimensions; otherwise, should be `false`.\n   *\n   * @return {boolean}\n   *         Will be `true` if this player should adjust its UI based on its\n   *         dimensions; otherwise, will be `false`.\n   */\n  responsive(value) {\n    // Used as a getter.\n    if (value === undefined) {\n      return this.responsive_;\n    }\n    value = Boolean(value);\n    const current = this.responsive_;\n\n    // Nothing changed.\n    if (value === current) {\n      return;\n    }\n\n    // The value actually changed, set it.\n    this.responsive_ = value;\n\n    // Start listening for breakpoints and set the initial breakpoint if the\n    // player is now responsive.\n    if (value) {\n      this.on('playerresize', this.boundUpdateCurrentBreakpoint_);\n      this.updateCurrentBreakpoint_();\n\n      // Stop listening for breakpoints if the player is no longer responsive.\n    } else {\n      this.off('playerresize', this.boundUpdateCurrentBreakpoint_);\n      this.removeCurrentBreakpoint_();\n    }\n    return value;\n  }\n\n  /**\n   * Get current breakpoint name, if any.\n   *\n   * @return {string}\n   *         If there is currently a breakpoint set, returns a the key from the\n   *         breakpoints object matching it. Otherwise, returns an empty string.\n   */\n  currentBreakpoint() {\n    return this.breakpoint_;\n  }\n\n  /**\n   * Get the current breakpoint class name.\n   *\n   * @return {string}\n   *         The matching class name (e.g. `\"vjs-layout-tiny\"` or\n   *         `\"vjs-layout-large\"`) for the current breakpoint. Empty string if\n   *         there is no current breakpoint.\n   */\n  currentBreakpointClass() {\n    return BREAKPOINT_CLASSES[this.breakpoint_] || '';\n  }\n\n  /**\n   * An object that describes a single piece of media.\n   *\n   * Properties that are not part of this type description will be retained; so,\n   * this can be viewed as a generic metadata storage mechanism as well.\n   *\n   * @see      {@link https://wicg.github.io/mediasession/#the-mediametadata-interface}\n   * @typedef  {Object} Player~MediaObject\n   *\n   * @property {string} [album]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API.\n   *\n   * @property {string} [artist]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API.\n   *\n   * @property {Object[]} [artwork]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API. If not specified, will be populated via the `poster`, if\n   *           available.\n   *\n   * @property {string} [poster]\n   *           URL to an image that will display before playback.\n   *\n   * @property {Tech~SourceObject|Tech~SourceObject[]|string} [src]\n   *           A single source object, an array of source objects, or a string\n   *           referencing a URL to a media source. It is _highly recommended_\n   *           that an object or array of objects is used here, so that source\n   *           selection algorithms can take the `type` into account.\n   *\n   * @property {string} [title]\n   *           Unused, except if this object is passed to the `MediaSession`\n   *           API.\n   *\n   * @property {Object[]} [textTracks]\n   *           An array of objects to be used to create text tracks, following\n   *           the {@link https://www.w3.org/TR/html50/embedded-content-0.html#the-track-element|native track element format}.\n   *           For ease of removal, these will be created as \"remote\" text\n   *           tracks and set to automatically clean up on source changes.\n   *\n   *           These objects may have properties like `src`, `kind`, `label`,\n   *           and `language`, see {@link Tech#createRemoteTextTrack}.\n   */\n\n  /**\n   * Populate the player using a {@link Player~MediaObject|MediaObject}.\n   *\n   * @param  {Player~MediaObject} media\n   *         A media object.\n   *\n   * @param  {Function} ready\n   *         A callback to be called when the player is ready.\n   */\n  loadMedia(media, ready) {\n    if (!media || typeof media !== 'object') {\n      return;\n    }\n    this.reset();\n\n    // Clone the media object so it cannot be mutated from outside.\n    this.cache_.media = merge$1(media);\n    const {\n      artist,\n      artwork,\n      description,\n      poster,\n      src,\n      textTracks,\n      title\n    } = this.cache_.media;\n\n    // If `artwork` is not given, create it using `poster`.\n    if (!artwork && poster) {\n      this.cache_.media.artwork = [{\n        src: poster,\n        type: getMimetype(poster)\n      }];\n    }\n    if (src) {\n      this.src(src);\n    }\n    if (poster) {\n      this.poster(poster);\n    }\n    if (Array.isArray(textTracks)) {\n      textTracks.forEach(tt => this.addRemoteTextTrack(tt, false));\n    }\n    if (this.titleBar) {\n      this.titleBar.update({\n        title,\n        description: description || artist || ''\n      });\n    }\n    this.ready(ready);\n  }\n\n  /**\n   * Get a clone of the current {@link Player~MediaObject} for this player.\n   *\n   * If the `loadMedia` method has not been used, will attempt to return a\n   * {@link Player~MediaObject} based on the current state of the player.\n   *\n   * @return {Player~MediaObject}\n   */\n  getMedia() {\n    if (!this.cache_.media) {\n      const poster = this.poster();\n      const src = this.currentSources();\n      const textTracks = Array.prototype.map.call(this.remoteTextTracks(), tt => ({\n        kind: tt.kind,\n        label: tt.label,\n        language: tt.language,\n        src: tt.src\n      }));\n      const media = {\n        src,\n        textTracks\n      };\n      if (poster) {\n        media.poster = poster;\n        media.artwork = [{\n          src: media.poster,\n          type: getMimetype(media.poster)\n        }];\n      }\n      return media;\n    }\n    return merge$1(this.cache_.media);\n  }\n\n  /**\n   * Gets tag settings\n   *\n   * @param {Element} tag\n   *        The player tag\n   *\n   * @return {Object}\n   *         An object containing all of the settings\n   *         for a player tag\n   */\n  static getTagSettings(tag) {\n    const baseOptions = {\n      sources: [],\n      tracks: []\n    };\n    const tagOptions = getAttributes(tag);\n    const dataSetup = tagOptions['data-setup'];\n    if (hasClass(tag, 'vjs-fill')) {\n      tagOptions.fill = true;\n    }\n    if (hasClass(tag, 'vjs-fluid')) {\n      tagOptions.fluid = true;\n    }\n\n    // Check if data-setup attr exists.\n    if (dataSetup !== null) {\n      // Parse options JSON\n      // If empty string, make it a parsable json object.\n      const [err, data] = safeParseTuple(dataSetup || '{}');\n      if (err) {\n        log$1.error(err);\n      }\n      Object.assign(tagOptions, data);\n    }\n    Object.assign(baseOptions, tagOptions);\n\n    // Get tag children settings\n    if (tag.hasChildNodes()) {\n      const children = tag.childNodes;\n      for (let i = 0, j = children.length; i < j; i++) {\n        const child = children[i];\n        // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/\n        const childName = child.nodeName.toLowerCase();\n        if (childName === 'source') {\n          baseOptions.sources.push(getAttributes(child));\n        } else if (childName === 'track') {\n          baseOptions.tracks.push(getAttributes(child));\n        }\n      }\n    }\n    return baseOptions;\n  }\n\n  /**\n   * Set debug mode to enable/disable logs at info level.\n   *\n   * @param {boolean} enabled\n   * @fires Player#debugon\n   * @fires Player#debugoff\n   */\n  debug(enabled) {\n    if (enabled === undefined) {\n      return this.debugEnabled_;\n    }\n    if (enabled) {\n      this.trigger('debugon');\n      this.previousLogLevel_ = this.log.level;\n      this.log.level('debug');\n      this.debugEnabled_ = true;\n    } else {\n      this.trigger('debugoff');\n      this.log.level(this.previousLogLevel_);\n      this.previousLogLevel_ = undefined;\n      this.debugEnabled_ = false;\n    }\n  }\n\n  /**\n   * Set or get current playback rates.\n   * Takes an array and updates the playback rates menu with the new items.\n   * Pass in an empty array to hide the menu.\n   * Values other than arrays are ignored.\n   *\n   * @fires Player#playbackrateschange\n   * @param {number[]} newRates\n   *                   The new rates that the playback rates menu should update to.\n   *                   An empty array will hide the menu\n   * @return {number[]} When used as a getter will return the current playback rates\n   */\n  playbackRates(newRates) {\n    if (newRates === undefined) {\n      return this.cache_.playbackRates;\n    }\n\n    // ignore any value that isn't an array\n    if (!Array.isArray(newRates)) {\n      return;\n    }\n\n    // ignore any arrays that don't only contain numbers\n    if (!newRates.every(rate => typeof rate === 'number')) {\n      return;\n    }\n    this.cache_.playbackRates = newRates;\n\n    /**\n    * fires when the playback rates in a player are changed\n    *\n    * @event Player#playbackrateschange\n    * @type {Event}\n    */\n    this.trigger('playbackrateschange');\n  }\n}\n\n/**\n * Get the {@link VideoTrackList}\n *\n * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist\n *\n * @return {VideoTrackList}\n *         the current video track list\n *\n * @method Player.prototype.videoTracks\n */\n\n/**\n * Get the {@link AudioTrackList}\n *\n * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist\n *\n * @return {AudioTrackList}\n *         the current audio track list\n *\n * @method Player.prototype.audioTracks\n */\n\n/**\n * Get the {@link TextTrackList}\n *\n * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks\n *\n * @return {TextTrackList}\n *         the current text track list\n *\n * @method Player.prototype.textTracks\n */\n\n/**\n * Get the remote {@link TextTrackList}\n *\n * @return {TextTrackList}\n *         The current remote text track list\n *\n * @method Player.prototype.remoteTextTracks\n */\n\n/**\n * Get the remote {@link HtmlTrackElementList} tracks.\n *\n * @return {HtmlTrackElementList}\n *         The current remote text track element list\n *\n * @method Player.prototype.remoteTextTrackEls\n */\n\nALL.names.forEach(function (name) {\n  const props = ALL[name];\n  Player.prototype[props.getterName] = function () {\n    if (this.tech_) {\n      return this.tech_[props.getterName]();\n    }\n\n    // if we have not yet loadTech_, we create {video,audio,text}Tracks_\n    // these will be passed to the tech during loading\n    this[props.privateName] = this[props.privateName] || new props.ListClass();\n    return this[props.privateName];\n  };\n});\n\n/**\n * Get or set the `Player`'s crossorigin option. For the HTML5 player, this\n * sets the `crossOrigin` property on the `<video>` tag to control the CORS\n * behavior.\n *\n * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}\n *\n * @param {string} [value]\n *        The value to set the `Player`'s crossorigin to. If an argument is\n *        given, must be one of `anonymous` or `use-credentials`.\n *\n * @return {string|undefined}\n *         - The current crossorigin value of the `Player` when getting.\n *         - undefined when setting\n */\nPlayer.prototype.crossorigin = Player.prototype.crossOrigin;\n\n/**\n * Global enumeration of players.\n *\n * The keys are the player IDs and the values are either the {@link Player}\n * instance or `null` for disposed players.\n *\n * @type {Object}\n */\nPlayer.players = {};\nconst navigator = window$1.navigator;\n\n/*\n * Player instance options, surfaced using options\n * options = Player.prototype.options_\n * Make changes in options, not here.\n *\n * @type {Object}\n * @private\n */\nPlayer.prototype.options_ = {\n  // Default order of fallback technology\n  techOrder: Tech.defaultTechOrder_,\n  html5: {},\n  // enable sourceset by default\n  enableSourceset: true,\n  // default inactivity timeout\n  inactivityTimeout: 2000,\n  // default playback rates\n  playbackRates: [],\n  // Add playback rate selection by adding rates\n  // 'playbackRates': [0.5, 1, 1.5, 2],\n  liveui: false,\n  // Included control sets\n  children: ['mediaLoader', 'posterImage', 'titleBar', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'liveTracker', 'controlBar', 'errorDisplay', 'textTrackSettings', 'resizeManager'],\n  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',\n  // locales and their language translations\n  languages: {},\n  // Default message to show when a video cannot be played.\n  notSupportedMessage: 'No compatible source was found for this media.',\n  normalizeAutoplay: false,\n  fullscreen: {\n    options: {\n      navigationUI: 'hide'\n    }\n  },\n  breakpoints: {},\n  responsive: false,\n  audioOnlyMode: false,\n  audioPosterMode: false\n};\n[\n/**\n * Returns whether or not the player is in the \"ended\" state.\n *\n * @return {Boolean} True if the player is in the ended state, false if not.\n * @method Player#ended\n */\n'ended',\n/**\n * Returns whether or not the player is in the \"seeking\" state.\n *\n * @return {Boolean} True if the player is in the seeking state, false if not.\n * @method Player#seeking\n */\n'seeking',\n/**\n * Returns the TimeRanges of the media that are currently available\n * for seeking to.\n *\n * @return {TimeRanges} the seekable intervals of the media timeline\n * @method Player#seekable\n */\n'seekable',\n/**\n * Returns the current state of network activity for the element, from\n * the codes in the list below.\n * - NETWORK_EMPTY (numeric value 0)\n *   The element has not yet been initialised. All attributes are in\n *   their initial states.\n * - NETWORK_IDLE (numeric value 1)\n *   The element's resource selection algorithm is active and has\n *   selected a resource, but it is not actually using the network at\n *   this time.\n * - NETWORK_LOADING (numeric value 2)\n *   The user agent is actively trying to download data.\n * - NETWORK_NO_SOURCE (numeric value 3)\n *   The element's resource selection algorithm is active, but it has\n *   not yet found a resource to use.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states\n * @return {number} the current network activity state\n * @method Player#networkState\n */\n'networkState',\n/**\n * Returns a value that expresses the current state of the element\n * with respect to rendering the current playback position, from the\n * codes in the list below.\n * - HAVE_NOTHING (numeric value 0)\n *   No information regarding the media resource is available.\n * - HAVE_METADATA (numeric value 1)\n *   Enough of the resource has been obtained that the duration of the\n *   resource is available.\n * - HAVE_CURRENT_DATA (numeric value 2)\n *   Data for the immediate current playback position is available.\n * - HAVE_FUTURE_DATA (numeric value 3)\n *   Data for the immediate current playback position is available, as\n *   well as enough data for the user agent to advance the current\n *   playback position in the direction of playback.\n * - HAVE_ENOUGH_DATA (numeric value 4)\n *   The user agent estimates that enough data is available for\n *   playback to proceed uninterrupted.\n *\n * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate\n * @return {number} the current playback rendering state\n * @method Player#readyState\n */\n'readyState'].forEach(function (fn) {\n  Player.prototype[fn] = function () {\n    return this.techGet_(fn);\n  };\n});\nTECH_EVENTS_RETRIGGER.forEach(function (event) {\n  Player.prototype[`handleTech${toTitleCase$1(event)}_`] = function () {\n    return this.trigger(event);\n  };\n});\n\n/**\n * Fired when the player has initial duration and dimension information\n *\n * @event Player#loadedmetadata\n * @type {Event}\n */\n\n/**\n * Fired when the player has downloaded data at the current playback position\n *\n * @event Player#loadeddata\n * @type {Event}\n */\n\n/**\n * Fired when the current playback position has changed *\n * During playback this is fired every 15-250 milliseconds, depending on the\n * playback technology in use.\n *\n * @event Player#timeupdate\n * @type {Event}\n */\n\n/**\n * Fired when the volume changes\n *\n * @event Player#volumechange\n * @type {Event}\n */\n\n/**\n * Reports whether or not a player has a plugin available.\n *\n * This does not report whether or not the plugin has ever been initialized\n * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.\n *\n * @method Player#hasPlugin\n * @param  {string}  name\n *         The name of a plugin.\n *\n * @return {boolean}\n *         Whether or not this player has the requested plugin available.\n */\n\n/**\n * Reports whether or not a player is using a plugin by name.\n *\n * For basic plugins, this only reports whether the plugin has _ever_ been\n * initialized on this player.\n *\n * @method Player#usingPlugin\n * @param  {string} name\n *         The name of a plugin.\n *\n * @return {boolean}\n *         Whether or not this player is using the requested plugin.\n */\n\nComponent$1.registerComponent('Player', Player);\n\n/**\n * @file plugin.js\n */\n\n/**\n * The base plugin name.\n *\n * @private\n * @constant\n * @type {string}\n */\nconst BASE_PLUGIN_NAME = 'plugin';\n\n/**\n * The key on which a player's active plugins cache is stored.\n *\n * @private\n * @constant\n * @type     {string}\n */\nconst PLUGIN_CACHE_KEY = 'activePlugins_';\n\n/**\n * Stores registered plugins in a private space.\n *\n * @private\n * @type    {Object}\n */\nconst pluginStorage = {};\n\n/**\n * Reports whether or not a plugin has been registered.\n *\n * @private\n * @param   {string} name\n *          The name of a plugin.\n *\n * @return {boolean}\n *          Whether or not the plugin has been registered.\n */\nconst pluginExists = name => pluginStorage.hasOwnProperty(name);\n\n/**\n * Get a single registered plugin by name.\n *\n * @private\n * @param   {string} name\n *          The name of a plugin.\n *\n * @return {typeof Plugin|Function|undefined}\n *          The plugin (or undefined).\n */\nconst getPlugin = name => pluginExists(name) ? pluginStorage[name] : undefined;\n\n/**\n * Marks a plugin as \"active\" on a player.\n *\n * Also, ensures that the player has an object for tracking active plugins.\n *\n * @private\n * @param   {Player} player\n *          A Video.js player instance.\n *\n * @param   {string} name\n *          The name of a plugin.\n */\nconst markPluginAsActive = (player, name) => {\n  player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};\n  player[PLUGIN_CACHE_KEY][name] = true;\n};\n\n/**\n * Triggers a pair of plugin setup events.\n *\n * @private\n * @param  {Player} player\n *         A Video.js player instance.\n *\n * @param  {Plugin~PluginEventHash} hash\n *         A plugin event hash.\n *\n * @param  {boolean} [before]\n *         If true, prefixes the event name with \"before\". In other words,\n *         use this to trigger \"beforepluginsetup\" instead of \"pluginsetup\".\n */\nconst triggerSetupEvent = (player, hash, before) => {\n  const eventName = (before ? 'before' : '') + 'pluginsetup';\n  player.trigger(eventName, hash);\n  player.trigger(eventName + ':' + hash.name, hash);\n};\n\n/**\n * Takes a basic plugin function and returns a wrapper function which marks\n * on the player that the plugin has been activated.\n *\n * @private\n * @param   {string} name\n *          The name of the plugin.\n *\n * @param   {Function} plugin\n *          The basic plugin.\n *\n * @return {Function}\n *          A wrapper function for the given plugin.\n */\nconst createBasicPlugin = function (name, plugin) {\n  const basicPluginWrapper = function () {\n    // We trigger the \"beforepluginsetup\" and \"pluginsetup\" events on the player\n    // regardless, but we want the hash to be consistent with the hash provided\n    // for advanced plugins.\n    //\n    // The only potentially counter-intuitive thing here is the `instance` in\n    // the \"pluginsetup\" event is the value returned by the `plugin` function.\n    triggerSetupEvent(this, {\n      name,\n      plugin,\n      instance: null\n    }, true);\n    const instance = plugin.apply(this, arguments);\n    markPluginAsActive(this, name);\n    triggerSetupEvent(this, {\n      name,\n      plugin,\n      instance\n    });\n    return instance;\n  };\n  Object.keys(plugin).forEach(function (prop) {\n    basicPluginWrapper[prop] = plugin[prop];\n  });\n  return basicPluginWrapper;\n};\n\n/**\n * Takes a plugin sub-class and returns a factory function for generating\n * instances of it.\n *\n * This factory function will replace itself with an instance of the requested\n * sub-class of Plugin.\n *\n * @private\n * @param   {string} name\n *          The name of the plugin.\n *\n * @param   {Plugin} PluginSubClass\n *          The advanced plugin.\n *\n * @return {Function}\n */\nconst createPluginFactory = (name, PluginSubClass) => {\n  // Add a `name` property to the plugin prototype so that each plugin can\n  // refer to itself by name.\n  PluginSubClass.prototype.name = name;\n  return function (...args) {\n    triggerSetupEvent(this, {\n      name,\n      plugin: PluginSubClass,\n      instance: null\n    }, true);\n    const instance = new PluginSubClass(...[this, ...args]);\n\n    // The plugin is replaced by a function that returns the current instance.\n    this[name] = () => instance;\n    triggerSetupEvent(this, instance.getEventHash());\n    return instance;\n  };\n};\n\n/**\n * Parent class for all advanced plugins.\n *\n * @mixes   module:evented~EventedMixin\n * @mixes   module:stateful~StatefulMixin\n * @fires   Player#beforepluginsetup\n * @fires   Player#beforepluginsetup:$name\n * @fires   Player#pluginsetup\n * @fires   Player#pluginsetup:$name\n * @listens Player#dispose\n * @throws  {Error}\n *          If attempting to instantiate the base {@link Plugin} class\n *          directly instead of via a sub-class.\n */\nclass Plugin {\n  /**\n   * Creates an instance of this class.\n   *\n   * Sub-classes should call `super` to ensure plugins are properly initialized.\n   *\n   * @param {Player} player\n   *        A Video.js player instance.\n   */\n  constructor(player) {\n    if (this.constructor === Plugin) {\n      throw new Error('Plugin must be sub-classed; not directly instantiated.');\n    }\n    this.player = player;\n    if (!this.log) {\n      this.log = this.player.log.createLogger(this.name);\n    }\n\n    // Make this object evented, but remove the added `trigger` method so we\n    // use the prototype version instead.\n    evented(this);\n    delete this.trigger;\n    stateful(this, this.constructor.defaultState);\n    markPluginAsActive(player, this.name);\n\n    // Auto-bind the dispose method so we can use it as a listener and unbind\n    // it later easily.\n    this.dispose = this.dispose.bind(this);\n\n    // If the player is disposed, dispose the plugin.\n    player.on('dispose', this.dispose);\n  }\n\n  /**\n   * Get the version of the plugin that was set on <pluginName>.VERSION\n   */\n  version() {\n    return this.constructor.VERSION;\n  }\n\n  /**\n   * Each event triggered by plugins includes a hash of additional data with\n   * conventional properties.\n   *\n   * This returns that object or mutates an existing hash.\n   *\n   * @param   {Object} [hash={}]\n   *          An object to be used as event an event hash.\n   *\n   * @return {Plugin~PluginEventHash}\n   *          An event hash object with provided properties mixed-in.\n   */\n  getEventHash(hash = {}) {\n    hash.name = this.name;\n    hash.plugin = this.constructor;\n    hash.instance = this;\n    return hash;\n  }\n\n  /**\n   * Triggers an event on the plugin object and overrides\n   * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.\n   *\n   * @param   {string|Object} event\n   *          An event type or an object with a type property.\n   *\n   * @param   {Object} [hash={}]\n   *          Additional data hash to merge with a\n   *          {@link Plugin~PluginEventHash|PluginEventHash}.\n   *\n   * @return {boolean}\n   *          Whether or not default was prevented.\n   */\n  trigger(event, hash = {}) {\n    return trigger(this.eventBusEl_, event, this.getEventHash(hash));\n  }\n\n  /**\n   * Handles \"statechanged\" events on the plugin. No-op by default, override by\n   * subclassing.\n   *\n   * @abstract\n   * @param    {Event} e\n   *           An event object provided by a \"statechanged\" event.\n   *\n   * @param    {Object} e.changes\n   *           An object describing changes that occurred with the \"statechanged\"\n   *           event.\n   */\n  handleStateChanged(e) {}\n\n  /**\n   * Disposes a plugin.\n   *\n   * Subclasses can override this if they want, but for the sake of safety,\n   * it's probably best to subscribe the \"dispose\" event.\n   *\n   * @fires Plugin#dispose\n   */\n  dispose() {\n    const {\n      name,\n      player\n    } = this;\n\n    /**\n     * Signals that a advanced plugin is about to be disposed.\n     *\n     * @event Plugin#dispose\n     * @type  {Event}\n     */\n    this.trigger('dispose');\n    this.off();\n    player.off('dispose', this.dispose);\n\n    // Eliminate any possible sources of leaking memory by clearing up\n    // references between the player and the plugin instance and nulling out\n    // the plugin's state and replacing methods with a function that throws.\n    player[PLUGIN_CACHE_KEY][name] = false;\n    this.player = this.state = null;\n\n    // Finally, replace the plugin name on the player with a new factory\n    // function, so that the plugin is ready to be set up again.\n    player[name] = createPluginFactory(name, pluginStorage[name]);\n  }\n\n  /**\n   * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).\n   *\n   * @param   {string|Function} plugin\n   *          If a string, matches the name of a plugin. If a function, will be\n   *          tested directly.\n   *\n   * @return {boolean}\n   *          Whether or not a plugin is a basic plugin.\n   */\n  static isBasic(plugin) {\n    const p = typeof plugin === 'string' ? getPlugin(plugin) : plugin;\n    return typeof p === 'function' && !Plugin.prototype.isPrototypeOf(p.prototype);\n  }\n\n  /**\n   * Register a Video.js plugin.\n   *\n   * @param   {string} name\n   *          The name of the plugin to be registered. Must be a string and\n   *          must not match an existing plugin or a method on the `Player`\n   *          prototype.\n   *\n   * @param   {typeof Plugin|Function} plugin\n   *          A sub-class of `Plugin` or a function for basic plugins.\n   *\n   * @return {typeof Plugin|Function}\n   *          For advanced plugins, a factory function for that plugin. For\n   *          basic plugins, a wrapper function that initializes the plugin.\n   */\n  static registerPlugin(name, plugin) {\n    if (typeof name !== 'string') {\n      throw new Error(`Illegal plugin name, \"${name}\", must be a string, was ${typeof name}.`);\n    }\n    if (pluginExists(name)) {\n      log$1.warn(`A plugin named \"${name}\" already exists. You may want to avoid re-registering plugins!`);\n    } else if (Player.prototype.hasOwnProperty(name)) {\n      throw new Error(`Illegal plugin name, \"${name}\", cannot share a name with an existing player method!`);\n    }\n    if (typeof plugin !== 'function') {\n      throw new Error(`Illegal plugin for \"${name}\", must be a function, was ${typeof plugin}.`);\n    }\n    pluginStorage[name] = plugin;\n\n    // Add a player prototype method for all sub-classed plugins (but not for\n    // the base Plugin class).\n    if (name !== BASE_PLUGIN_NAME) {\n      if (Plugin.isBasic(plugin)) {\n        Player.prototype[name] = createBasicPlugin(name, plugin);\n      } else {\n        Player.prototype[name] = createPluginFactory(name, plugin);\n      }\n    }\n    return plugin;\n  }\n\n  /**\n   * De-register a Video.js plugin.\n   *\n   * @param  {string} name\n   *         The name of the plugin to be de-registered. Must be a string that\n   *         matches an existing plugin.\n   *\n   * @throws {Error}\n   *         If an attempt is made to de-register the base plugin.\n   */\n  static deregisterPlugin(name) {\n    if (name === BASE_PLUGIN_NAME) {\n      throw new Error('Cannot de-register base plugin.');\n    }\n    if (pluginExists(name)) {\n      delete pluginStorage[name];\n      delete Player.prototype[name];\n    }\n  }\n\n  /**\n   * Gets an object containing multiple Video.js plugins.\n   *\n   * @param   {Array} [names]\n   *          If provided, should be an array of plugin names. Defaults to _all_\n   *          plugin names.\n   *\n   * @return {Object|undefined}\n   *          An object containing plugin(s) associated with their name(s) or\n   *          `undefined` if no matching plugins exist).\n   */\n  static getPlugins(names = Object.keys(pluginStorage)) {\n    let result;\n    names.forEach(name => {\n      const plugin = getPlugin(name);\n      if (plugin) {\n        result = result || {};\n        result[name] = plugin;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Gets a plugin's version, if available\n   *\n   * @param   {string} name\n   *          The name of a plugin.\n   *\n   * @return {string}\n   *          The plugin's version or an empty string.\n   */\n  static getPluginVersion(name) {\n    const plugin = getPlugin(name);\n    return plugin && plugin.VERSION || '';\n  }\n}\n\n/**\n * Gets a plugin by name if it exists.\n *\n * @static\n * @method   getPlugin\n * @memberOf Plugin\n * @param    {string} name\n *           The name of a plugin.\n *\n * @returns  {typeof Plugin|Function|undefined}\n *           The plugin (or `undefined`).\n */\nPlugin.getPlugin = getPlugin;\n\n/**\n * The name of the base plugin class as it is registered.\n *\n * @type {string}\n */\nPlugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;\nPlugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);\n\n/**\n * Documented in player.js\n *\n * @ignore\n */\nPlayer.prototype.usingPlugin = function (name) {\n  return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;\n};\n\n/**\n * Documented in player.js\n *\n * @ignore\n */\nPlayer.prototype.hasPlugin = function (name) {\n  return !!pluginExists(name);\n};\n\n/**\n * Signals that a plugin is about to be set up on a player.\n *\n * @event    Player#beforepluginsetup\n * @type     {Plugin~PluginEventHash}\n */\n\n/**\n * Signals that a plugin is about to be set up on a player - by name. The name\n * is the name of the plugin.\n *\n * @event    Player#beforepluginsetup:$name\n * @type     {Plugin~PluginEventHash}\n */\n\n/**\n * Signals that a plugin has just been set up on a player.\n *\n * @event    Player#pluginsetup\n * @type     {Plugin~PluginEventHash}\n */\n\n/**\n * Signals that a plugin has just been set up on a player - by name. The name\n * is the name of the plugin.\n *\n * @event    Player#pluginsetup:$name\n * @type     {Plugin~PluginEventHash}\n */\n\n/**\n * @typedef  {Object} Plugin~PluginEventHash\n *\n * @property {string} instance\n *           For basic plugins, the return value of the plugin function. For\n *           advanced plugins, the plugin instance on which the event is fired.\n *\n * @property {string} name\n *           The name of the plugin.\n *\n * @property {string} plugin\n *           For basic plugins, the plugin function. For advanced plugins, the\n *           plugin class/constructor.\n */\n\n/**\n * @file deprecate.js\n * @module deprecate\n */\n\n/**\n * Decorate a function with a deprecation message the first time it is called.\n *\n * @param  {string}   message\n *         A deprecation message to log the first time the returned function\n *         is called.\n *\n * @param  {Function} fn\n *         The function to be deprecated.\n *\n * @return {Function}\n *         A wrapper function that will log a deprecation warning the first\n *         time it is called. The return value will be the return value of\n *         the wrapped function.\n */\nfunction deprecate(message, fn) {\n  let warned = false;\n  return function (...args) {\n    if (!warned) {\n      log$1.warn(message);\n    }\n    warned = true;\n    return fn.apply(this, args);\n  };\n}\n\n/**\n * Internal function used to mark a function as deprecated in the next major\n * version with consistent messaging.\n *\n * @param  {number}   major   The major version where it will be removed\n * @param  {string}   oldName The old function name\n * @param  {string}   newName The new function name\n * @param  {Function} fn      The function to deprecate\n * @return {Function}         The decorated function\n */\nfunction deprecateForMajor(major, oldName, newName, fn) {\n  return deprecate(`${oldName} is deprecated and will be removed in ${major}.0; please use ${newName} instead.`, fn);\n}\n\n/**\n * @file video.js\n * @module videojs\n */\n\n/**\n * Normalize an `id` value by trimming off a leading `#`\n *\n * @private\n * @param   {string} id\n *          A string, maybe with a leading `#`.\n *\n * @return {string}\n *          The string, without any leading `#`.\n */\nconst normalizeId = id => id.indexOf('#') === 0 ? id.slice(1) : id;\n\n/**\n * A callback that is called when a component is ready. Does not have any\n * parameters and any callback value will be ignored. See: {@link Component~ReadyCallback}\n *\n * @callback ReadyCallback\n */\n\n/**\n * The `videojs()` function doubles as the main function for users to create a\n * {@link Player} instance as well as the main library namespace.\n *\n * It can also be used as a getter for a pre-existing {@link Player} instance.\n * However, we _strongly_ recommend using `videojs.getPlayer()` for this\n * purpose because it avoids any potential for unintended initialization.\n *\n * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)\n * of our JSDoc template, we cannot properly document this as both a function\n * and a namespace, so its function signature is documented here.\n *\n * #### Arguments\n * ##### id\n * string|Element, **required**\n *\n * Video element or video element ID.\n *\n * ##### options\n * Object, optional\n *\n * Options object for providing settings.\n * See: [Options Guide](https://docs.videojs.com/tutorial-options.html).\n *\n * ##### ready\n * {@link Component~ReadyCallback}, optional\n *\n * A function to be called when the {@link Player} and {@link Tech} are ready.\n *\n * #### Return Value\n *\n * The `videojs()` function returns a {@link Player} instance.\n *\n * @namespace\n *\n * @borrows AudioTrack as AudioTrack\n * @borrows Component.getComponent as getComponent\n * @borrows module:events.on as on\n * @borrows module:events.one as one\n * @borrows module:events.off as off\n * @borrows module:events.trigger as trigger\n * @borrows EventTarget as EventTarget\n * @borrows module:middleware.use as use\n * @borrows Player.players as players\n * @borrows Plugin.registerPlugin as registerPlugin\n * @borrows Plugin.deregisterPlugin as deregisterPlugin\n * @borrows Plugin.getPlugins as getPlugins\n * @borrows Plugin.getPlugin as getPlugin\n * @borrows Plugin.getPluginVersion as getPluginVersion\n * @borrows Tech.getTech as getTech\n * @borrows Tech.registerTech as registerTech\n * @borrows TextTrack as TextTrack\n * @borrows VideoTrack as VideoTrack\n *\n * @param  {string|Element} id\n *         Video element or video element ID.\n *\n * @param  {Object} [options]\n *         Options object for providing settings.\n *         See: [Options Guide](https://docs.videojs.com/tutorial-options.html).\n *\n * @param  {ReadyCallback} [ready]\n *         A function to be called when the {@link Player} and {@link Tech} are\n *         ready.\n *\n * @return {Player}\n *         The `videojs()` function returns a {@link Player|Player} instance.\n */\nfunction videojs(id, options, ready) {\n  let player = videojs.getPlayer(id);\n  if (player) {\n    if (options) {\n      log$1.warn(`Player \"${id}\" is already initialised. Options will not be applied.`);\n    }\n    if (ready) {\n      player.ready(ready);\n    }\n    return player;\n  }\n  const el = typeof id === 'string' ? $('#' + normalizeId(id)) : id;\n  if (!isEl(el)) {\n    throw new TypeError('The element or ID supplied is not valid. (videojs)');\n  }\n\n  // document.body.contains(el) will only check if el is contained within that one document.\n  // This causes problems for elements in iframes.\n  // Instead, use the element's ownerDocument instead of the global document.\n  // This will make sure that the element is indeed in the dom of that document.\n  // Additionally, check that the document in question has a default view.\n  // If the document is no longer attached to the dom, the defaultView of the document will be null.\n  if (!el.ownerDocument.defaultView || !el.ownerDocument.body.contains(el)) {\n    log$1.warn('The element supplied is not included in the DOM');\n  }\n  options = options || {};\n\n  // Store a copy of the el before modification, if it is to be restored in destroy()\n  // If div ingest, store the parent div\n  if (options.restoreEl === true) {\n    options.restoreEl = (el.parentNode && el.parentNode.hasAttribute('data-vjs-player') ? el.parentNode : el).cloneNode(true);\n  }\n  hooks('beforesetup').forEach(hookFunction => {\n    const opts = hookFunction(el, merge$1(options));\n    if (!isObject(opts) || Array.isArray(opts)) {\n      log$1.error('please return an object in beforesetup hooks');\n      return;\n    }\n    options = merge$1(options, opts);\n  });\n\n  // We get the current \"Player\" component here in case an integration has\n  // replaced it with a custom player.\n  const PlayerComponent = Component$1.getComponent('Player');\n  player = new PlayerComponent(el, options, ready);\n  hooks('setup').forEach(hookFunction => hookFunction(player));\n  return player;\n}\nvideojs.hooks_ = hooks_;\nvideojs.hooks = hooks;\nvideojs.hook = hook;\nvideojs.hookOnce = hookOnce;\nvideojs.removeHook = removeHook;\n\n// Add default styles\nif (window$1.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {\n  let style = $('.vjs-styles-defaults');\n  if (!style) {\n    style = createStyleElement('vjs-styles-defaults');\n    const head = $('head');\n    if (head) {\n      head.insertBefore(style, head.firstChild);\n    }\n    setTextContent(style, `\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid:not(.vjs-audio-only-mode) {\n        padding-top: 56.25%\n      }\n    `);\n  }\n}\n\n// Run Auto-load players\n// You have to wait at least once in case this script is loaded after your\n// video in the DOM (weird behavior only with minified version)\nautoSetupTimeout(1, videojs);\n\n/**\n * Current Video.js version. Follows [semantic versioning](https://semver.org/).\n *\n * @type {string}\n */\nvideojs.VERSION = version$6;\n\n/**\n * The global options object. These are the settings that take effect\n * if no overrides are specified when the player is created.\n *\n * @type {Object}\n */\nvideojs.options = Player.prototype.options_;\n\n/**\n * Get an object with the currently created players, keyed by player ID\n *\n * @return {Object}\n *         The created players\n */\nvideojs.getPlayers = () => Player.players;\n\n/**\n * Get a single player based on an ID or DOM element.\n *\n * This is useful if you want to check if an element or ID has an associated\n * Video.js player, but not create one if it doesn't.\n *\n * @param   {string|Element} id\n *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -\n *          or a string matching the `id` of such an element.\n *\n * @return {Player|undefined}\n *          A player instance or `undefined` if there is no player instance\n *          matching the argument.\n */\nvideojs.getPlayer = id => {\n  const players = Player.players;\n  let tag;\n  if (typeof id === 'string') {\n    const nId = normalizeId(id);\n    const player = players[nId];\n    if (player) {\n      return player;\n    }\n    tag = $('#' + nId);\n  } else {\n    tag = id;\n  }\n  if (isEl(tag)) {\n    const {\n      player,\n      playerId\n    } = tag;\n\n    // Element may have a `player` property referring to an already created\n    // player instance. If so, return that.\n    if (player || players[playerId]) {\n      return player || players[playerId];\n    }\n  }\n};\n\n/**\n * Returns an array of all current players.\n *\n * @return {Array}\n *         An array of all players. The array will be in the order that\n *         `Object.keys` provides, which could potentially vary between\n *         JavaScript engines.\n *\n */\nvideojs.getAllPlayers = () =>\n// Disposed players leave a key with a `null` value, so we need to make sure\n// we filter those out.\nObject.keys(Player.players).map(k => Player.players[k]).filter(Boolean);\nvideojs.players = Player.players;\nvideojs.getComponent = Component$1.getComponent;\n\n/**\n * Register a component so it can referred to by name. Used when adding to other\n * components, either through addChild `component.addChild('myComponent')` or through\n * default children options  `{ children: ['myComponent'] }`.\n *\n * > NOTE: You could also just initialize the component before adding.\n * `component.addChild(new MyComponent());`\n *\n * @param {string} name\n *        The class name of the component\n *\n * @param {Component} comp\n *        The component class\n *\n * @return {Component}\n *         The newly registered component\n */\nvideojs.registerComponent = (name, comp) => {\n  if (Tech.isTech(comp)) {\n    log$1.warn(`The ${name} tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)`);\n  }\n  Component$1.registerComponent.call(Component$1, name, comp);\n};\nvideojs.getTech = Tech.getTech;\nvideojs.registerTech = Tech.registerTech;\nvideojs.use = use;\n\n/**\n * An object that can be returned by a middleware to signify\n * that the middleware is being terminated.\n *\n * @type {object}\n * @property {object} middleware.TERMINATOR\n */\nObject.defineProperty(videojs, 'middleware', {\n  value: {},\n  writeable: false,\n  enumerable: true\n});\nObject.defineProperty(videojs.middleware, 'TERMINATOR', {\n  value: TERMINATOR,\n  writeable: false,\n  enumerable: true\n});\n\n/**\n * A reference to the {@link module:browser|browser utility module} as an object.\n *\n * @type {Object}\n * @see  {@link module:browser|browser}\n */\nvideojs.browser = browser;\n\n/**\n * A reference to the {@link module:obj|obj utility module} as an object.\n *\n * @type {Object}\n * @see  {@link module:obj|obj}\n */\nvideojs.obj = Obj;\n\n/**\n * Deprecated reference to the {@link module:obj.merge|merge function}\n *\n * @type {Function}\n * @see {@link module:obj.merge|merge}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.obj.merge instead.\n */\nvideojs.mergeOptions = deprecateForMajor(9, 'videojs.mergeOptions', 'videojs.obj.merge', merge$1);\n\n/**\n * Deprecated reference to the {@link module:obj.defineLazyProperty|defineLazyProperty function}\n *\n * @type {Function}\n * @see {@link module:obj.defineLazyProperty|defineLazyProperty}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.obj.defineLazyProperty instead.\n */\nvideojs.defineLazyProperty = deprecateForMajor(9, 'videojs.defineLazyProperty', 'videojs.obj.defineLazyProperty', defineLazyProperty);\n\n/**\n * Deprecated reference to the {@link module:fn.bind_|fn.bind_ function}\n *\n * @type {Function}\n * @see {@link module:fn.bind_|fn.bind_}\n * @deprecated Deprecated and will be removed in 9.0. Please use native Function.prototype.bind instead.\n */\nvideojs.bind = deprecateForMajor(9, 'videojs.bind', 'native Function.prototype.bind', bind_);\nvideojs.registerPlugin = Plugin.registerPlugin;\nvideojs.deregisterPlugin = Plugin.deregisterPlugin;\n\n/**\n * Deprecated method to register a plugin with Video.js\n *\n * @deprecated Deprecated and will be removed in 9.0. Use videojs.registerPlugin() instead.\n *\n * @param {string} name\n *        The plugin name\n *\n * @param {Plugin|Function} plugin\n *         The plugin sub-class or function\n */\nvideojs.plugin = (name, plugin) => {\n  log$1.warn('videojs.plugin() is deprecated; use videojs.registerPlugin() instead');\n  return Plugin.registerPlugin(name, plugin);\n};\nvideojs.getPlugins = Plugin.getPlugins;\nvideojs.getPlugin = Plugin.getPlugin;\nvideojs.getPluginVersion = Plugin.getPluginVersion;\n\n/**\n * Adding languages so that they're available to all players.\n * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`\n *\n * @param {string} code\n *        The language code or dictionary property\n *\n * @param {Object} data\n *        The data values to be translated\n *\n * @return {Object}\n *         The resulting language dictionary object\n */\nvideojs.addLanguage = function (code, data) {\n  code = ('' + code).toLowerCase();\n  videojs.options.languages = merge$1(videojs.options.languages, {\n    [code]: data\n  });\n  return videojs.options.languages[code];\n};\n\n/**\n * A reference to the {@link module:log|log utility module} as an object.\n *\n * @type {Function}\n * @see  {@link module:log|log}\n */\nvideojs.log = log$1;\nvideojs.createLogger = createLogger;\n\n/**\n * A reference to the {@link module:time|time utility module} as an object.\n *\n * @type {Object}\n * @see {@link module:time|time}\n */\nvideojs.time = Time;\n\n/**\n * Deprecated reference to the {@link module:time.createTimeRanges|createTimeRanges function}\n *\n * @type {Function}\n * @see {@link module:time.createTimeRanges|createTimeRanges}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.createTimeRanges instead.\n */\nvideojs.createTimeRange = deprecateForMajor(9, 'videojs.createTimeRange', 'videojs.time.createTimeRanges', createTimeRanges$1);\n\n/**\n * Deprecated reference to the {@link module:time.createTimeRanges|createTimeRanges function}\n *\n * @type {Function}\n * @see {@link module:time.createTimeRanges|createTimeRanges}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.createTimeRanges instead.\n */\nvideojs.createTimeRanges = deprecateForMajor(9, 'videojs.createTimeRanges', 'videojs.time.createTimeRanges', createTimeRanges$1);\n\n/**\n * Deprecated reference to the {@link module:time.formatTime|formatTime function}\n *\n * @type {Function}\n * @see {@link module:time.formatTime|formatTime}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.format instead.\n */\nvideojs.formatTime = deprecateForMajor(9, 'videojs.formatTime', 'videojs.time.formatTime', formatTime);\n\n/**\n * Deprecated reference to the {@link module:time.setFormatTime|setFormatTime function}\n *\n * @type {Function}\n * @see {@link module:time.setFormatTime|setFormatTime}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.setFormat instead.\n */\nvideojs.setFormatTime = deprecateForMajor(9, 'videojs.setFormatTime', 'videojs.time.setFormatTime', setFormatTime);\n\n/**\n * Deprecated reference to the {@link module:time.resetFormatTime|resetFormatTime function}\n *\n * @type {Function}\n * @see {@link module:time.resetFormatTime|resetFormatTime}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.resetFormat instead.\n */\nvideojs.resetFormatTime = deprecateForMajor(9, 'videojs.resetFormatTime', 'videojs.time.resetFormatTime', resetFormatTime);\n\n/**\n * Deprecated reference to the {@link module:url.parseUrl|Url.parseUrl function}\n *\n * @type {Function}\n * @see {@link module:url.parseUrl|parseUrl}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.url.parseUrl instead.\n */\nvideojs.parseUrl = deprecateForMajor(9, 'videojs.parseUrl', 'videojs.url.parseUrl', parseUrl);\n\n/**\n * Deprecated reference to the {@link module:url.isCrossOrigin|Url.isCrossOrigin function}\n *\n * @type {Function}\n * @see {@link module:url.isCrossOrigin|isCrossOrigin}\n * @deprecated Deprecated and will be removed in 9.0. Please use videojs.url.isCrossOrigin instead.\n */\nvideojs.isCrossOrigin = deprecateForMajor(9, 'videojs.isCrossOrigin', 'videojs.url.isCrossOrigin', isCrossOrigin);\nvideojs.EventTarget = EventTarget$2;\nvideojs.any = any;\nvideojs.on = on;\nvideojs.one = one;\nvideojs.off = off;\nvideojs.trigger = trigger;\n\n/**\n * A cross-browser XMLHttpRequest wrapper.\n *\n * @function\n * @param    {Object} options\n *           Settings for the request.\n *\n * @return   {XMLHttpRequest|XDomainRequest}\n *           The request object.\n *\n * @see      https://github.com/Raynos/xhr\n */\nvideojs.xhr = XHR;\nvideojs.TextTrack = TextTrack;\nvideojs.AudioTrack = AudioTrack;\nvideojs.VideoTrack = VideoTrack;\n['isEl', 'isTextNode', 'createEl', 'hasClass', 'addClass', 'removeClass', 'toggleClass', 'setAttributes', 'getAttributes', 'emptyEl', 'appendContent', 'insertContent'].forEach(k => {\n  videojs[k] = function () {\n    log$1.warn(`videojs.${k}() is deprecated; use videojs.dom.${k}() instead`);\n    return Dom[k].apply(null, arguments);\n  };\n});\nvideojs.computedStyle = deprecateForMajor(9, 'videojs.computedStyle', 'videojs.dom.computedStyle', computedStyle);\n\n/**\n * A reference to the {@link module:dom|DOM utility module} as an object.\n *\n * @type {Object}\n * @see {@link module:dom|dom}\n */\nvideojs.dom = Dom;\n\n/**\n * A reference to the {@link module:fn|fn utility module} as an object.\n *\n * @type {Object}\n * @see {@link module:fn|fn}\n */\nvideojs.fn = Fn;\n\n/**\n * A reference to the {@link module:num|num utility module} as an object.\n *\n * @type {Object}\n * @see {@link module:num|num}\n */\nvideojs.num = Num;\n\n/**\n * A reference to the {@link module:str|str utility module} as an object.\n *\n * @type {Object}\n * @see {@link module:str|str}\n */\nvideojs.str = Str;\n\n/**\n * A reference to the {@link module:url|URL utility module} as an object.\n *\n * @type {Object}\n * @see {@link module:url|url}\n */\nvideojs.url = Url;\n\n/*! @name videojs-contrib-quality-levels @version 3.0.0 @license Apache-2.0 */\n\n/**\n * A single QualityLevel.\n *\n * interface QualityLevel {\n *   readonly attribute DOMString id;\n *            attribute DOMString label;\n *   readonly attribute long width;\n *   readonly attribute long height;\n *   readonly attribute long bitrate;\n *            attribute boolean enabled;\n * };\n *\n * @class QualityLevel\n */\nclass QualityLevel {\n  /**\n   * Creates a QualityLevel\n   *\n   * @param {Representation|Object} representation The representation of the quality level\n   * @param {string}   representation.id        Unique id of the QualityLevel\n   * @param {number=}  representation.width     Resolution width of the QualityLevel\n   * @param {number=}  representation.height    Resolution height of the QualityLevel\n   * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n   * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n   */\n  constructor(representation) {\n    let level = this; // eslint-disable-line\n\n    level.id = representation.id;\n    level.label = level.id;\n    level.width = representation.width;\n    level.height = representation.height;\n    level.bitrate = representation.bandwidth;\n    level.frameRate = representation.frameRate;\n    level.enabled_ = representation.enabled;\n    Object.defineProperty(level, 'enabled', {\n      /**\n       * Get whether the QualityLevel is enabled.\n       *\n       * @return {boolean} True if the QualityLevel is enabled.\n       */\n      get() {\n        return level.enabled_();\n      },\n      /**\n       * Enable or disable the QualityLevel.\n       *\n       * @param {boolean} enable true to enable QualityLevel, false to disable.\n       */\n      set(enable) {\n        level.enabled_(enable);\n      }\n    });\n    return level;\n  }\n}\n\n/**\n * A list of QualityLevels.\n *\n * interface QualityLevelList : EventTarget {\n *   getter QualityLevel (unsigned long index);\n *   readonly attribute unsigned long length;\n *   readonly attribute long selectedIndex;\n *\n *   void addQualityLevel(QualityLevel qualityLevel)\n *   void removeQualityLevel(QualityLevel remove)\n *   QualityLevel? getQualityLevelById(DOMString id);\n *\n *   attribute EventHandler onchange;\n *   attribute EventHandler onaddqualitylevel;\n *   attribute EventHandler onremovequalitylevel;\n * };\n *\n * @extends videojs.EventTarget\n * @class QualityLevelList\n */\n\nclass QualityLevelList extends videojs.EventTarget {\n  constructor() {\n    super();\n    let list = this; // eslint-disable-line\n\n    list.levels_ = [];\n    list.selectedIndex_ = -1;\n    /**\n     * Get the index of the currently selected QualityLevel.\n     *\n     * @returns {number} The index of the selected QualityLevel. -1 if none selected.\n     * @readonly\n     */\n\n    Object.defineProperty(list, 'selectedIndex', {\n      get() {\n        return list.selectedIndex_;\n      }\n    });\n    /**\n     * Get the length of the list of QualityLevels.\n     *\n     * @returns {number} The length of the list.\n     * @readonly\n     */\n\n    Object.defineProperty(list, 'length', {\n      get() {\n        return list.levels_.length;\n      }\n    });\n    return list;\n  }\n  /**\n   * Adds a quality level to the list.\n   *\n   * @param {Representation|Object} representation The representation of the quality level\n   * @param {string}   representation.id        Unique id of the QualityLevel\n   * @param {number=}  representation.width     Resolution width of the QualityLevel\n   * @param {number=}  representation.height    Resolution height of the QualityLevel\n   * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n   * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n   * @return {QualityLevel} the QualityLevel added to the list\n   * @method addQualityLevel\n   */\n\n  addQualityLevel(representation) {\n    let qualityLevel = this.getQualityLevelById(representation.id); // Do not add duplicate quality levels\n\n    if (qualityLevel) {\n      return qualityLevel;\n    }\n    const index = this.levels_.length;\n    qualityLevel = new QualityLevel(representation);\n    if (!('' + index in this)) {\n      Object.defineProperty(this, index, {\n        get() {\n          return this.levels_[index];\n        }\n      });\n    }\n    this.levels_.push(qualityLevel);\n    this.trigger({\n      qualityLevel,\n      type: 'addqualitylevel'\n    });\n    return qualityLevel;\n  }\n  /**\n   * Removes a quality level from the list.\n   *\n   * @param {QualityLevel} remove QualityLevel to remove to the list.\n   * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed\n   * @method removeQualityLevel\n   */\n\n  removeQualityLevel(qualityLevel) {\n    let removed = null;\n    for (let i = 0, l = this.length; i < l; i++) {\n      if (this[i] === qualityLevel) {\n        removed = this.levels_.splice(i, 1)[0];\n        if (this.selectedIndex_ === i) {\n          this.selectedIndex_ = -1;\n        } else if (this.selectedIndex_ > i) {\n          this.selectedIndex_--;\n        }\n        break;\n      }\n    }\n    if (removed) {\n      this.trigger({\n        qualityLevel,\n        type: 'removequalitylevel'\n      });\n    }\n    return removed;\n  }\n  /**\n   * Searches for a QualityLevel with the given id.\n   *\n   * @param {string} id The id of the QualityLevel to find.\n   * @return {QualityLevel|null} The QualityLevel with id, or null if not found.\n   * @method getQualityLevelById\n   */\n\n  getQualityLevelById(id) {\n    for (let i = 0, l = this.length; i < l; i++) {\n      const level = this[i];\n      if (level.id === id) {\n        return level;\n      }\n    }\n    return null;\n  }\n  /**\n   * Resets the list of QualityLevels to empty\n   *\n   * @method dispose\n   */\n\n  dispose() {\n    this.selectedIndex_ = -1;\n    this.levels_.length = 0;\n  }\n}\n/**\n * change - The selected QualityLevel has changed.\n * addqualitylevel - A QualityLevel has been added to the QualityLevelList.\n * removequalitylevel - A QualityLevel has been removed from the QualityLevelList.\n */\n\nQualityLevelList.prototype.allowedEvents_ = {\n  change: 'change',\n  addqualitylevel: 'addqualitylevel',\n  removequalitylevel: 'removequalitylevel'\n}; // emulate attribute EventHandler support to allow for feature detection\n\nfor (const event in QualityLevelList.prototype.allowedEvents_) {\n  QualityLevelList.prototype['on' + event] = null;\n}\nvar version$5 = \"3.0.0\";\nconst registerPlugin = videojs.registerPlugin || videojs.plugin;\n/**\n * Initialization function for the qualityLevels plugin. Sets up the QualityLevelList and\n * event handlers.\n *\n * @param {Player} player Player object.\n * @param {Object} options Plugin options object.\n * @function initPlugin\n */\n\nconst initPlugin$1 = function (player, options) {\n  const originalPluginFn = player.qualityLevels;\n  const qualityLevelList = new QualityLevelList();\n  const disposeHandler = function () {\n    qualityLevelList.dispose();\n    player.qualityLevels = originalPluginFn;\n    player.off('dispose', disposeHandler);\n  };\n  player.on('dispose', disposeHandler);\n  player.qualityLevels = () => qualityLevelList;\n  player.qualityLevels.VERSION = version$5;\n  return qualityLevelList;\n};\n/**\n * A video.js plugin.\n *\n * In the plugin function, the value of `this` is a video.js `Player`\n * instance. You cannot rely on the player being in a \"ready\" state here,\n * depending on how the plugin is invoked. This may or may not be important\n * to you; if not, remove the wait for \"ready\"!\n *\n * @param {Object} options Plugin options object\n * @function qualityLevels\n */\n\nconst qualityLevels = function (options) {\n  return initPlugin$1(this, videojs.mergeOptions({}, options));\n}; // Register the plugin with video.js.\n\nregisterPlugin('qualityLevels', qualityLevels); // Include the version number.\n\nqualityLevels.VERSION = version$5;\n\n/*! @name @videojs/http-streaming @version 3.0.2 @license Apache-2.0 */\n\n/**\n * @file resolve-url.js - Handling how URLs are resolved and manipulated\n */\nconst resolveUrl = _resolveUrl;\n/**\n * If the xhr request was redirected, return the responseURL, otherwise,\n * return the original url.\n *\n * @api private\n *\n * @param  {string} url - an url being requested\n * @param  {XMLHttpRequest} req - xhr request result\n *\n * @return {string}\n */\n\nconst resolveManifestRedirect = (url, req) => {\n  // To understand how the responseURL below is set and generated:\n  // - https://fetch.spec.whatwg.org/#concept-response-url\n  // - https://fetch.spec.whatwg.org/#atomic-http-redirect-handling\n  if (req && req.responseURL && url !== req.responseURL) {\n    return req.responseURL;\n  }\n  return url;\n};\nconst logger = source => {\n  if (videojs.log.debug) {\n    return videojs.log.debug.bind(videojs, 'VHS:', `${source} >`);\n  }\n  return function () {};\n};\n\n/**\n * Provides a compatibility layer between Video.js 7 and 8 API changes for VHS.\n */\n/**\n * Delegates to videojs.obj.merge (Video.js 8) or\n * videojs.mergeOptions (Video.js 7).\n */\n\nfunction merge(...args) {\n  const context = videojs.obj || videojs;\n  const fn = context.merge || context.mergeOptions;\n  return fn.apply(context, args);\n}\n/**\n * Delegates to videojs.time.createTimeRanges (Video.js 8) or\n * videojs.createTimeRanges (Video.js 7).\n */\n\nfunction createTimeRanges(...args) {\n  const context = videojs.time || videojs;\n  const fn = context.createTimeRanges || context.createTimeRanges;\n  return fn.apply(context, args);\n}\n\n/**\n * ranges\n *\n * Utilities for working with TimeRanges.\n *\n */\n\nconst TIME_FUDGE_FACTOR = 1 / 30; // Comparisons between time values such as current time and the end of the buffered range\n// can be misleading because of precision differences or when the current media has poorly\n// aligned audio and video, which can cause values to be slightly off from what you would\n// expect. This value is what we consider to be safe to use in such comparisons to account\n// for these scenarios.\n\nconst SAFE_TIME_DELTA = TIME_FUDGE_FACTOR * 3;\nconst filterRanges = function (timeRanges, predicate) {\n  const results = [];\n  let i;\n  if (timeRanges && timeRanges.length) {\n    // Search for ranges that match the predicate\n    for (i = 0; i < timeRanges.length; i++) {\n      if (predicate(timeRanges.start(i), timeRanges.end(i))) {\n        results.push([timeRanges.start(i), timeRanges.end(i)]);\n      }\n    }\n  }\n  return createTimeRanges(results);\n};\n/**\n * Attempts to find the buffered TimeRange that contains the specified\n * time.\n *\n * @param {TimeRanges} buffered - the TimeRanges object to query\n * @param {number} time  - the time to filter on.\n * @return {TimeRanges} a new TimeRanges object\n */\n\nconst findRange = function (buffered, time) {\n  return filterRanges(buffered, function (start, end) {\n    return start - SAFE_TIME_DELTA <= time && end + SAFE_TIME_DELTA >= time;\n  });\n};\n/**\n * Returns the TimeRanges that begin later than the specified time.\n *\n * @param {TimeRanges} timeRanges - the TimeRanges object to query\n * @param {number} time - the time to filter on.\n * @return {TimeRanges} a new TimeRanges object.\n */\n\nconst findNextRange = function (timeRanges, time) {\n  return filterRanges(timeRanges, function (start) {\n    return start - TIME_FUDGE_FACTOR >= time;\n  });\n};\n/**\n * Returns gaps within a list of TimeRanges\n *\n * @param {TimeRanges} buffered - the TimeRanges object\n * @return {TimeRanges} a TimeRanges object of gaps\n */\n\nconst findGaps = function (buffered) {\n  if (buffered.length < 2) {\n    return createTimeRanges();\n  }\n  const ranges = [];\n  for (let i = 1; i < buffered.length; i++) {\n    const start = buffered.end(i - 1);\n    const end = buffered.start(i);\n    ranges.push([start, end]);\n  }\n  return createTimeRanges(ranges);\n};\n/**\n * Calculate the intersection of two TimeRanges\n *\n * @param {TimeRanges} bufferA\n * @param {TimeRanges} bufferB\n * @return {TimeRanges} The interesection of `bufferA` with `bufferB`\n */\n\nconst bufferIntersection = function (bufferA, bufferB) {\n  let start = null;\n  let end = null;\n  let arity = 0;\n  const extents = [];\n  const ranges = [];\n  if (!bufferA || !bufferA.length || !bufferB || !bufferB.length) {\n    return createTimeRanges();\n  } // Handle the case where we have both buffers and create an\n  // intersection of the two\n\n  let count = bufferA.length; // A) Gather up all start and end times\n\n  while (count--) {\n    extents.push({\n      time: bufferA.start(count),\n      type: 'start'\n    });\n    extents.push({\n      time: bufferA.end(count),\n      type: 'end'\n    });\n  }\n  count = bufferB.length;\n  while (count--) {\n    extents.push({\n      time: bufferB.start(count),\n      type: 'start'\n    });\n    extents.push({\n      time: bufferB.end(count),\n      type: 'end'\n    });\n  } // B) Sort them by time\n\n  extents.sort(function (a, b) {\n    return a.time - b.time;\n  }); // C) Go along one by one incrementing arity for start and decrementing\n  //    arity for ends\n\n  for (count = 0; count < extents.length; count++) {\n    if (extents[count].type === 'start') {\n      arity++; // D) If arity is ever incremented to 2 we are entering an\n      //    overlapping range\n\n      if (arity === 2) {\n        start = extents[count].time;\n      }\n    } else if (extents[count].type === 'end') {\n      arity--; // E) If arity is ever decremented to 1 we leaving an\n      //    overlapping range\n\n      if (arity === 1) {\n        end = extents[count].time;\n      }\n    } // F) Record overlapping ranges\n\n    if (start !== null && end !== null) {\n      ranges.push([start, end]);\n      start = null;\n      end = null;\n    }\n  }\n  return createTimeRanges(ranges);\n};\n/**\n * Gets a human readable string for a TimeRange\n *\n * @param {TimeRange} range\n * @return {string} a human readable string\n */\n\nconst printableRange = range => {\n  const strArr = [];\n  if (!range || !range.length) {\n    return '';\n  }\n  for (let i = 0; i < range.length; i++) {\n    strArr.push(range.start(i) + ' => ' + range.end(i));\n  }\n  return strArr.join(', ');\n};\n/**\n * Calculates the amount of time left in seconds until the player hits the end of the\n * buffer and causes a rebuffer\n *\n * @param {TimeRange} buffered\n *        The state of the buffer\n * @param {Numnber} currentTime\n *        The current time of the player\n * @param {number} playbackRate\n *        The current playback rate of the player. Defaults to 1.\n * @return {number}\n *         Time until the player has to start rebuffering in seconds.\n * @function timeUntilRebuffer\n */\n\nconst timeUntilRebuffer = function (buffered, currentTime, playbackRate = 1) {\n  const bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;\n  return (bufferedEnd - currentTime) / playbackRate;\n};\n/**\n * Converts a TimeRanges object into an array representation\n *\n * @param {TimeRanges} timeRanges\n * @return {Array}\n */\n\nconst timeRangesToArray = timeRanges => {\n  const timeRangesList = [];\n  for (let i = 0; i < timeRanges.length; i++) {\n    timeRangesList.push({\n      start: timeRanges.start(i),\n      end: timeRanges.end(i)\n    });\n  }\n  return timeRangesList;\n};\n/**\n * Determines if two time range objects are different.\n *\n * @param {TimeRange} a\n *        the first time range object to check\n *\n * @param {TimeRange} b\n *        the second time range object to check\n *\n * @return {Boolean}\n *         Whether the time range objects differ\n */\n\nconst isRangeDifferent = function (a, b) {\n  // same object\n  if (a === b) {\n    return false;\n  } // one or the other is undefined\n\n  if (!a && b || !b && a) {\n    return true;\n  } // length is different\n\n  if (a.length !== b.length) {\n    return true;\n  } // see if any start/end pair is different\n\n  for (let i = 0; i < a.length; i++) {\n    if (a.start(i) !== b.start(i) || a.end(i) !== b.end(i)) {\n      return true;\n    }\n  } // if the length and every pair is the same\n  // this is the same time range\n\n  return false;\n};\nconst lastBufferedEnd = function (a) {\n  if (!a || !a.length || !a.end) {\n    return;\n  }\n  return a.end(a.length - 1);\n};\n/**\n * A utility function to add up the amount of time in a timeRange\n * after a specified startTime.\n * ie:[[0, 10], [20, 40], [50, 60]] with a startTime 0\n *     would return 40 as there are 40s seconds after 0 in the timeRange\n *\n * @param {TimeRange} range\n *        The range to check against\n * @param {number} startTime\n *        The time in the time range that you should start counting from\n *\n * @return {number}\n *          The number of seconds in the buffer passed the specified time.\n */\n\nconst timeAheadOf = function (range, startTime) {\n  let time = 0;\n  if (!range || !range.length) {\n    return time;\n  }\n  for (let i = 0; i < range.length; i++) {\n    const start = range.start(i);\n    const end = range.end(i); // startTime is after this range entirely\n\n    if (startTime > end) {\n      continue;\n    } // startTime is within this range\n\n    if (startTime > start && startTime <= end) {\n      time += end - startTime;\n      continue;\n    } // startTime is before this range.\n\n    time += end - start;\n  }\n  return time;\n};\n\n/**\n * @file playlist.js\n *\n * Playlist related utilities.\n */\n/**\n * Get the duration of a segment, with special cases for\n * llhls segments that do not have a duration yet.\n *\n * @param {Object} playlist\n *        the playlist that the segment belongs to.\n * @param {Object} segment\n *        the segment to get a duration for.\n *\n * @return {number}\n *          the segment duration\n */\n\nconst segmentDurationWithParts = (playlist, segment) => {\n  // if this isn't a preload segment\n  // then we will have a segment duration that is accurate.\n  if (!segment.preload) {\n    return segment.duration;\n  } // otherwise we have to add up parts and preload hints\n  // to get an up to date duration.\n\n  let result = 0;\n  (segment.parts || []).forEach(function (p) {\n    result += p.duration;\n  }); // for preload hints we have to use partTargetDuration\n  // as they won't even have a duration yet.\n\n  (segment.preloadHints || []).forEach(function (p) {\n    if (p.type === 'PART') {\n      result += playlist.partTargetDuration;\n    }\n  });\n  return result;\n};\n/**\n * A function to get a combined list of parts and segments with durations\n * and indexes.\n *\n * @param {Playlist} playlist the playlist to get the list for.\n *\n * @return {Array} The part/segment list.\n */\n\nconst getPartsAndSegments = playlist => (playlist.segments || []).reduce((acc, segment, si) => {\n  if (segment.parts) {\n    segment.parts.forEach(function (part, pi) {\n      acc.push({\n        duration: part.duration,\n        segmentIndex: si,\n        partIndex: pi,\n        part,\n        segment\n      });\n    });\n  } else {\n    acc.push({\n      duration: segment.duration,\n      segmentIndex: si,\n      partIndex: null,\n      segment,\n      part: null\n    });\n  }\n  return acc;\n}, []);\nconst getLastParts = media => {\n  const lastSegment = media.segments && media.segments.length && media.segments[media.segments.length - 1];\n  return lastSegment && lastSegment.parts || [];\n};\nconst getKnownPartCount = ({\n  preloadSegment\n}) => {\n  if (!preloadSegment) {\n    return;\n  }\n  const {\n    parts,\n    preloadHints\n  } = preloadSegment;\n  let partCount = (preloadHints || []).reduce((count, hint) => count + (hint.type === 'PART' ? 1 : 0), 0);\n  partCount += parts && parts.length ? parts.length : 0;\n  return partCount;\n};\n/**\n * Get the number of seconds to delay from the end of a\n * live playlist.\n *\n * @param {Playlist} main the main playlist\n * @param {Playlist} media the media playlist\n * @return {number} the hold back in seconds.\n */\n\nconst liveEdgeDelay = (main, media) => {\n  if (media.endList) {\n    return 0;\n  } // dash suggestedPresentationDelay trumps everything\n\n  if (main && main.suggestedPresentationDelay) {\n    return main.suggestedPresentationDelay;\n  }\n  const hasParts = getLastParts(media).length > 0; // look for \"part\" delays from ll-hls first\n\n  if (hasParts && media.serverControl && media.serverControl.partHoldBack) {\n    return media.serverControl.partHoldBack;\n  } else if (hasParts && media.partTargetDuration) {\n    return media.partTargetDuration * 3; // finally look for full segment delays\n  } else if (media.serverControl && media.serverControl.holdBack) {\n    return media.serverControl.holdBack;\n  } else if (media.targetDuration) {\n    return media.targetDuration * 3;\n  }\n  return 0;\n};\n/**\n * walk backward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {Number} endSequence the mediaSequence to stop walking on\n */\n\nconst backwardDuration = function (playlist, endSequence) {\n  let result = 0;\n  let i = endSequence - playlist.mediaSequence; // if a start time is available for segment immediately following\n  // the interval, use it\n\n  let segment = playlist.segments[i]; // Walk backward until we find the latest segment with timeline\n  // information that is earlier than endSequence\n\n  if (segment) {\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start,\n        precise: true\n      };\n    }\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - segment.duration,\n        precise: true\n      };\n    }\n  }\n  while (i--) {\n    segment = playlist.segments[i];\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: result + segment.end,\n        precise: true\n      };\n    }\n    result += segmentDurationWithParts(playlist, segment);\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: result + segment.start,\n        precise: true\n      };\n    }\n  }\n  return {\n    result,\n    precise: false\n  };\n};\n/**\n * walk forward until we find a duration we can use\n * or return a failure\n *\n * @param {Playlist} playlist the playlist to walk through\n * @param {number} endSequence the mediaSequence to stop walking on\n */\n\nconst forwardDuration = function (playlist, endSequence) {\n  let result = 0;\n  let segment;\n  let i = endSequence - playlist.mediaSequence; // Walk forward until we find the earliest segment with timeline\n  // information\n\n  for (; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i];\n    if (typeof segment.start !== 'undefined') {\n      return {\n        result: segment.start - result,\n        precise: true\n      };\n    }\n    result += segmentDurationWithParts(playlist, segment);\n    if (typeof segment.end !== 'undefined') {\n      return {\n        result: segment.end - result,\n        precise: true\n      };\n    }\n  } // indicate we didn't find a useful duration estimate\n\n  return {\n    result: -1,\n    precise: false\n  };\n};\n/**\n  * Calculate the media duration from the segments associated with a\n  * playlist. The duration of a subinterval of the available segments\n  * may be calculated by specifying an end index.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {number=} endSequence an exclusive upper boundary\n  * for the playlist.  Defaults to playlist length.\n  * @param {number} expired the amount of time that has dropped\n  * off the front of the playlist in a live scenario\n  * @return {number} the duration between the first available segment\n  * and end index.\n  */\n\nconst intervalDuration = function (playlist, endSequence, expired) {\n  if (typeof endSequence === 'undefined') {\n    endSequence = playlist.mediaSequence + playlist.segments.length;\n  }\n  if (endSequence < playlist.mediaSequence) {\n    return 0;\n  } // do a backward walk to estimate the duration\n\n  const backward = backwardDuration(playlist, endSequence);\n  if (backward.precise) {\n    // if we were able to base our duration estimate on timing\n    // information provided directly from the Media Source, return\n    // it\n    return backward.result;\n  } // walk forward to see if a precise duration estimate can be made\n  // that way\n\n  const forward = forwardDuration(playlist, endSequence);\n  if (forward.precise) {\n    // we found a segment that has been buffered and so it's\n    // position is known precisely\n    return forward.result;\n  } // return the less-precise, playlist-based duration estimate\n\n  return backward.result + expired;\n};\n/**\n  * Calculates the duration of a playlist. If a start and end index\n  * are specified, the duration will be for the subset of the media\n  * timeline between those two indices. The total duration for live\n  * playlists is always Infinity.\n  *\n  * @param {Object} playlist a media playlist object\n  * @param {number=} endSequence an exclusive upper\n  * boundary for the playlist. Defaults to the playlist media\n  * sequence number plus its length.\n  * @param {number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @return {number} the duration between the start index and end\n  * index.\n  */\n\nconst duration = function (playlist, endSequence, expired) {\n  if (!playlist) {\n    return 0;\n  }\n  if (typeof expired !== 'number') {\n    expired = 0;\n  } // if a slice of the total duration is not requested, use\n  // playlist-level duration indicators when they're present\n\n  if (typeof endSequence === 'undefined') {\n    // if present, use the duration specified in the playlist\n    if (playlist.totalDuration) {\n      return playlist.totalDuration;\n    } // duration should be Infinity for live playlists\n\n    if (!playlist.endList) {\n      return window$1.Infinity;\n    }\n  } // calculate the total duration based on the segment durations\n\n  return intervalDuration(playlist, endSequence, expired);\n};\n/**\n  * Calculate the time between two indexes in the current playlist\n  * neight the start- nor the end-index need to be within the current\n  * playlist in which case, the targetDuration of the playlist is used\n  * to approximate the durations of the segments\n  *\n  * @param {Array} options.durationList list to iterate over for durations.\n  * @param {number} options.defaultDuration duration to use for elements before or after the durationList\n  * @param {number} options.startIndex partsAndSegments index to start\n  * @param {number} options.endIndex partsAndSegments index to end.\n  * @return {number} the number of seconds between startIndex and endIndex\n  */\n\nconst sumDurations = function ({\n  defaultDuration,\n  durationList,\n  startIndex,\n  endIndex\n}) {\n  let durations = 0;\n  if (startIndex > endIndex) {\n    [startIndex, endIndex] = [endIndex, startIndex];\n  }\n  if (startIndex < 0) {\n    for (let i = startIndex; i < Math.min(0, endIndex); i++) {\n      durations += defaultDuration;\n    }\n    startIndex = 0;\n  }\n  for (let i = startIndex; i < endIndex; i++) {\n    durations += durationList[i].duration;\n  }\n  return durations;\n};\n/**\n * Calculates the playlist end time\n *\n * @param {Object} playlist a media playlist object\n * @param {number=} expired the amount of time that has\n *                  dropped off the front of the playlist in a live scenario\n * @param {boolean|false} useSafeLiveEnd a boolean value indicating whether or not the\n *                        playlist end calculation should consider the safe live end\n *                        (truncate the playlist end by three segments). This is normally\n *                        used for calculating the end of the playlist's seekable range.\n *                        This takes into account the value of liveEdgePadding.\n *                        Setting liveEdgePadding to 0 is equivalent to setting this to false.\n * @param {number} liveEdgePadding a number indicating how far from the end of the playlist we should be in seconds.\n *                 If this is provided, it is used in the safe live end calculation.\n *                 Setting useSafeLiveEnd=false or liveEdgePadding=0 are equivalent.\n *                 Corresponds to suggestedPresentationDelay in DASH manifests.\n * @return {number} the end time of playlist\n * @function playlistEnd\n */\n\nconst playlistEnd = function (playlist, expired, useSafeLiveEnd, liveEdgePadding) {\n  if (!playlist || !playlist.segments) {\n    return null;\n  }\n  if (playlist.endList) {\n    return duration(playlist);\n  }\n  if (expired === null) {\n    return null;\n  }\n  expired = expired || 0;\n  let lastSegmentEndTime = intervalDuration(playlist, playlist.mediaSequence + playlist.segments.length, expired);\n  if (useSafeLiveEnd) {\n    liveEdgePadding = typeof liveEdgePadding === 'number' ? liveEdgePadding : liveEdgeDelay(null, playlist);\n    lastSegmentEndTime -= liveEdgePadding;\n  } // don't return a time less than zero\n\n  return Math.max(0, lastSegmentEndTime);\n};\n/**\n  * Calculates the interval of time that is currently seekable in a\n  * playlist. The returned time ranges are relative to the earliest\n  * moment in the specified playlist that is still available. A full\n  * seekable implementation for live streams would need to offset\n  * these values by the duration of content that has expired from the\n  * stream.\n  *\n  * @param {Object} playlist a media playlist object\n  * dropped off the front of the playlist in a live scenario\n  * @param {number=} expired the amount of time that has\n  * dropped off the front of the playlist in a live scenario\n  * @param {number} liveEdgePadding how far from the end of the playlist we should be in seconds.\n  *        Corresponds to suggestedPresentationDelay in DASH manifests.\n  * @return {TimeRanges} the periods of time that are valid targets\n  * for seeking\n  */\n\nconst seekable = function (playlist, expired, liveEdgePadding) {\n  const useSafeLiveEnd = true;\n  const seekableStart = expired || 0;\n  const seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd, liveEdgePadding);\n  if (seekableEnd === null) {\n    return createTimeRanges();\n  }\n  return createTimeRanges(seekableStart, seekableEnd);\n};\n/**\n * Determine the index and estimated starting time of the segment that\n * contains a specified playback position in a media playlist.\n *\n * @param {Object} options.playlist the media playlist to query\n * @param {number} options.currentTime The number of seconds since the earliest\n * possible position to determine the containing segment for\n * @param {number} options.startTime the time when the segment/part starts\n * @param {number} options.startingSegmentIndex the segment index to start looking at.\n * @param {number?} [options.startingPartIndex] the part index to look at within the segment.\n *\n * @return {Object} an object with partIndex, segmentIndex, and startTime.\n */\n\nconst getMediaInfoForTime = function ({\n  playlist,\n  currentTime,\n  startingSegmentIndex,\n  startingPartIndex,\n  startTime,\n  exactManifestTimings\n}) {\n  let time = currentTime - startTime;\n  const partsAndSegments = getPartsAndSegments(playlist);\n  let startIndex = 0;\n  for (let i = 0; i < partsAndSegments.length; i++) {\n    const partAndSegment = partsAndSegments[i];\n    if (startingSegmentIndex !== partAndSegment.segmentIndex) {\n      continue;\n    } // skip this if part index does not match.\n\n    if (typeof startingPartIndex === 'number' && typeof partAndSegment.partIndex === 'number' && startingPartIndex !== partAndSegment.partIndex) {\n      continue;\n    }\n    startIndex = i;\n    break;\n  }\n  if (time < 0) {\n    // Walk backward from startIndex in the playlist, adding durations\n    // until we find a segment that contains `time` and return it\n    if (startIndex > 0) {\n      for (let i = startIndex - 1; i >= 0; i--) {\n        const partAndSegment = partsAndSegments[i];\n        time += partAndSegment.duration;\n        if (exactManifestTimings) {\n          if (time < 0) {\n            continue;\n          }\n        } else if (time + TIME_FUDGE_FACTOR <= 0) {\n          continue;\n        }\n        return {\n          partIndex: partAndSegment.partIndex,\n          segmentIndex: partAndSegment.segmentIndex,\n          startTime: startTime - sumDurations({\n            defaultDuration: playlist.targetDuration,\n            durationList: partsAndSegments,\n            startIndex,\n            endIndex: i\n          })\n        };\n      }\n    } // We were unable to find a good segment within the playlist\n    // so select the first segment\n\n    return {\n      partIndex: partsAndSegments[0] && partsAndSegments[0].partIndex || null,\n      segmentIndex: partsAndSegments[0] && partsAndSegments[0].segmentIndex || 0,\n      startTime: currentTime\n    };\n  } // When startIndex is negative, we first walk forward to first segment\n  // adding target durations. If we \"run out of time\" before getting to\n  // the first segment, return the first segment\n\n  if (startIndex < 0) {\n    for (let i = startIndex; i < 0; i++) {\n      time -= playlist.targetDuration;\n      if (time < 0) {\n        return {\n          partIndex: partsAndSegments[0] && partsAndSegments[0].partIndex || null,\n          segmentIndex: partsAndSegments[0] && partsAndSegments[0].segmentIndex || 0,\n          startTime: currentTime\n        };\n      }\n    }\n    startIndex = 0;\n  } // Walk forward from startIndex in the playlist, subtracting durations\n  // until we find a segment that contains `time` and return it\n\n  for (let i = startIndex; i < partsAndSegments.length; i++) {\n    const partAndSegment = partsAndSegments[i];\n    time -= partAndSegment.duration;\n    if (exactManifestTimings) {\n      if (time > 0) {\n        continue;\n      }\n    } else if (time - TIME_FUDGE_FACTOR >= 0) {\n      continue;\n    }\n    return {\n      partIndex: partAndSegment.partIndex,\n      segmentIndex: partAndSegment.segmentIndex,\n      startTime: startTime + sumDurations({\n        defaultDuration: playlist.targetDuration,\n        durationList: partsAndSegments,\n        startIndex,\n        endIndex: i\n      })\n    };\n  } // We are out of possible candidates so load the last one...\n\n  return {\n    segmentIndex: partsAndSegments[partsAndSegments.length - 1].segmentIndex,\n    partIndex: partsAndSegments[partsAndSegments.length - 1].partIndex,\n    startTime: currentTime\n  };\n};\n/**\n * Check whether the playlist is excluded or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is excluded or not\n * @function isExcluded\n */\n\nconst isExcluded = function (playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil > Date.now();\n};\n/**\n * Check whether the playlist is compatible with current playback configuration or has\n * been excluded permanently for being incompatible.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is incompatible or not\n * @function isIncompatible\n */\n\nconst isIncompatible = function (playlist) {\n  return playlist.excludeUntil && playlist.excludeUntil === Infinity;\n};\n/**\n * Check whether the playlist is enabled or not.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is enabled or not\n * @function isEnabled\n */\n\nconst isEnabled = function (playlist) {\n  const excluded = isExcluded(playlist);\n  return !playlist.disabled && !excluded;\n};\n/**\n * Check whether the playlist has been manually disabled through the representations api.\n *\n * @param {Object} playlist the media playlist object\n * @return {boolean} whether the playlist is disabled manually or not\n * @function isDisabled\n */\n\nconst isDisabled = function (playlist) {\n  return playlist.disabled;\n};\n/**\n * Returns whether the current playlist is an AES encrypted HLS stream\n *\n * @return {boolean} true if it's an AES encrypted HLS stream\n */\n\nconst isAes = function (media) {\n  for (let i = 0; i < media.segments.length; i++) {\n    if (media.segments[i].key) {\n      return true;\n    }\n  }\n  return false;\n};\n/**\n * Checks if the playlist has a value for the specified attribute\n *\n * @param {string} attr\n *        Attribute to check for\n * @param {Object} playlist\n *        The media playlist object\n * @return {boolean}\n *         Whether the playlist contains a value for the attribute or not\n * @function hasAttribute\n */\n\nconst hasAttribute = function (attr, playlist) {\n  return playlist.attributes && playlist.attributes[attr];\n};\n/**\n * Estimates the time required to complete a segment download from the specified playlist\n *\n * @param {number} segmentDuration\n *        Duration of requested segment\n * @param {number} bandwidth\n *        Current measured bandwidth of the player\n * @param {Object} playlist\n *        The media playlist object\n * @param {number=} bytesReceived\n *        Number of bytes already received for the request. Defaults to 0\n * @return {number|NaN}\n *         The estimated time to request the segment. NaN if bandwidth information for\n *         the given playlist is unavailable\n * @function estimateSegmentRequestTime\n */\n\nconst estimateSegmentRequestTime = function (segmentDuration, bandwidth, playlist, bytesReceived = 0) {\n  if (!hasAttribute('BANDWIDTH', playlist)) {\n    return NaN;\n  }\n  const size = segmentDuration * playlist.attributes.BANDWIDTH;\n  return (size - bytesReceived * 8) / bandwidth;\n};\n/*\n * Returns whether the current playlist is the lowest rendition\n *\n * @return {Boolean} true if on lowest rendition\n */\n\nconst isLowestEnabledRendition = (main, media) => {\n  if (main.playlists.length === 1) {\n    return true;\n  }\n  const currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;\n  return main.playlists.filter(playlist => {\n    if (!isEnabled(playlist)) {\n      return false;\n    }\n    return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;\n  }).length === 0;\n};\nconst playlistMatch = (a, b) => {\n  // both playlits are null\n  // or only one playlist is non-null\n  // no match\n  if (!a && !b || !a && b || a && !b) {\n    return false;\n  } // playlist objects are the same, match\n\n  if (a === b) {\n    return true;\n  } // first try to use id as it should be the most\n  // accurate\n\n  if (a.id && b.id && a.id === b.id) {\n    return true;\n  } // next try to use reslovedUri as it should be the\n  // second most accurate.\n\n  if (a.resolvedUri && b.resolvedUri && a.resolvedUri === b.resolvedUri) {\n    return true;\n  } // finally try to use uri as it should be accurate\n  // but might miss a few cases for relative uris\n\n  if (a.uri && b.uri && a.uri === b.uri) {\n    return true;\n  }\n  return false;\n};\nconst someAudioVariant = function (main, callback) {\n  const AUDIO = main && main.mediaGroups && main.mediaGroups.AUDIO || {};\n  let found = false;\n  for (const groupName in AUDIO) {\n    for (const label in AUDIO[groupName]) {\n      found = callback(AUDIO[groupName][label]);\n      if (found) {\n        break;\n      }\n    }\n    if (found) {\n      break;\n    }\n  }\n  return !!found;\n};\nconst isAudioOnly = main => {\n  // we are audio only if we have no main playlists but do\n  // have media group playlists.\n  if (!main || !main.playlists || !main.playlists.length) {\n    // without audio variants or playlists this\n    // is not an audio only main.\n    const found = someAudioVariant(main, variant => variant.playlists && variant.playlists.length || variant.uri);\n    return found;\n  } // if every playlist has only an audio codec it is audio only\n\n  for (let i = 0; i < main.playlists.length; i++) {\n    const playlist = main.playlists[i];\n    const CODECS = playlist.attributes && playlist.attributes.CODECS; // all codecs are audio, this is an audio playlist.\n\n    if (CODECS && CODECS.split(',').every(c => isAudioCodec(c))) {\n      continue;\n    } // playlist is in an audio group it is audio only\n\n    const found = someAudioVariant(main, variant => playlistMatch(playlist, variant));\n    if (found) {\n      continue;\n    } // if we make it here this playlist isn't audio and we\n    // are not audio only\n\n    return false;\n  } // if we make it past every playlist without returning, then\n  // this is an audio only playlist.\n\n  return true;\n}; // exports\n\nvar Playlist = {\n  liveEdgeDelay,\n  duration,\n  seekable,\n  getMediaInfoForTime,\n  isEnabled,\n  isDisabled,\n  isExcluded,\n  isIncompatible,\n  playlistEnd,\n  isAes,\n  hasAttribute,\n  estimateSegmentRequestTime,\n  isLowestEnabledRendition,\n  isAudioOnly,\n  playlistMatch,\n  segmentDurationWithParts\n};\nconst {\n  log\n} = videojs;\nconst createPlaylistID = (index, uri) => {\n  return `${index}-${uri}`;\n}; // default function for creating a group id\n\nconst groupID = (type, group, label) => {\n  return `placeholder-uri-${type}-${group}-${label}`;\n};\n/**\n * Parses a given m3u8 playlist\n *\n * @param {Function} [onwarn]\n *        a function to call when the parser triggers a warning event.\n * @param {Function} [oninfo]\n *        a function to call when the parser triggers an info event.\n * @param {string} manifestString\n *        The downloaded manifest string\n * @param {Object[]} [customTagParsers]\n *        An array of custom tag parsers for the m3u8-parser instance\n * @param {Object[]} [customTagMappers]\n *        An array of custom tag mappers for the m3u8-parser instance\n * @param {boolean} [llhls]\n *        Whether to keep ll-hls features in the manifest after parsing.\n * @return {Object}\n *         The manifest object\n */\n\nconst parseManifest = ({\n  onwarn,\n  oninfo,\n  manifestString,\n  customTagParsers = [],\n  customTagMappers = [],\n  llhls\n}) => {\n  const parser = new Parser();\n  if (onwarn) {\n    parser.on('warn', onwarn);\n  }\n  if (oninfo) {\n    parser.on('info', oninfo);\n  }\n  customTagParsers.forEach(customParser => parser.addParser(customParser));\n  customTagMappers.forEach(mapper => parser.addTagMapper(mapper));\n  parser.push(manifestString);\n  parser.end();\n  const manifest = parser.manifest; // remove llhls features from the parsed manifest\n  // if we don't want llhls support.\n\n  if (!llhls) {\n    ['preloadSegment', 'skip', 'serverControl', 'renditionReports', 'partInf', 'partTargetDuration'].forEach(function (k) {\n      if (manifest.hasOwnProperty(k)) {\n        delete manifest[k];\n      }\n    });\n    if (manifest.segments) {\n      manifest.segments.forEach(function (segment) {\n        ['parts', 'preloadHints'].forEach(function (k) {\n          if (segment.hasOwnProperty(k)) {\n            delete segment[k];\n          }\n        });\n      });\n    }\n  }\n  if (!manifest.targetDuration) {\n    let targetDuration = 10;\n    if (manifest.segments && manifest.segments.length) {\n      targetDuration = manifest.segments.reduce((acc, s) => Math.max(acc, s.duration), 0);\n    }\n    if (onwarn) {\n      onwarn(`manifest has no targetDuration defaulting to ${targetDuration}`);\n    }\n    manifest.targetDuration = targetDuration;\n  }\n  const parts = getLastParts(manifest);\n  if (parts.length && !manifest.partTargetDuration) {\n    const partTargetDuration = parts.reduce((acc, p) => Math.max(acc, p.duration), 0);\n    if (onwarn) {\n      onwarn(`manifest has no partTargetDuration defaulting to ${partTargetDuration}`);\n      log.error('LL-HLS manifest has parts but lacks required #EXT-X-PART-INF:PART-TARGET value. See https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-09#section-4.4.3.7. Playback is not guaranteed.');\n    }\n    manifest.partTargetDuration = partTargetDuration;\n  }\n  return manifest;\n};\n/**\n * Loops through all supported media groups in main and calls the provided\n * callback for each group\n *\n * @param {Object} main\n *        The parsed main manifest object\n * @param {Function} callback\n *        Callback to call for each media group\n */\n\nconst forEachMediaGroup = (main, callback) => {\n  if (!main.mediaGroups) {\n    return;\n  }\n  ['AUDIO', 'SUBTITLES'].forEach(mediaType => {\n    if (!main.mediaGroups[mediaType]) {\n      return;\n    }\n    for (const groupKey in main.mediaGroups[mediaType]) {\n      for (const labelKey in main.mediaGroups[mediaType][groupKey]) {\n        const mediaProperties = main.mediaGroups[mediaType][groupKey][labelKey];\n        callback(mediaProperties, mediaType, groupKey, labelKey);\n      }\n    }\n  });\n};\n/**\n * Adds properties and attributes to the playlist to keep consistent functionality for\n * playlists throughout VHS.\n *\n * @param {Object} config\n *        Arguments object\n * @param {Object} config.playlist\n *        The media playlist\n * @param {string} [config.uri]\n *        The uri to the media playlist (if media playlist is not from within a main\n *        playlist)\n * @param {string} id\n *        ID to use for the playlist\n */\n\nconst setupMediaPlaylist = ({\n  playlist,\n  uri,\n  id\n}) => {\n  playlist.id = id;\n  playlist.playlistErrors_ = 0;\n  if (uri) {\n    // For media playlists, m3u8-parser does not have access to a URI, as HLS media\n    // playlists do not contain their own source URI, but one is needed for consistency in\n    // VHS.\n    playlist.uri = uri;\n  } // For HLS main playlists, even though certain attributes MUST be defined, the\n  // stream may still be played without them.\n  // For HLS media playlists, m3u8-parser does not attach an attributes object to the\n  // manifest.\n  //\n  // To avoid undefined reference errors through the project, and make the code easier\n  // to write/read, add an empty attributes object for these cases.\n\n  playlist.attributes = playlist.attributes || {};\n};\n/**\n * Adds ID, resolvedUri, and attributes properties to each playlist of the main, where\n * necessary. In addition, creates playlist IDs for each playlist and adds playlist ID to\n * playlist references to the playlists array.\n *\n * @param {Object} main\n *        The main playlist\n */\n\nconst setupMediaPlaylists = main => {\n  let i = main.playlists.length;\n  while (i--) {\n    const playlist = main.playlists[i];\n    setupMediaPlaylist({\n      playlist,\n      id: createPlaylistID(i, playlist.uri)\n    });\n    playlist.resolvedUri = resolveUrl(main.uri, playlist.uri);\n    main.playlists[playlist.id] = playlist; // URI reference added for backwards compatibility\n\n    main.playlists[playlist.uri] = playlist; // Although the spec states an #EXT-X-STREAM-INF tag MUST have a BANDWIDTH attribute,\n    // the stream can be played without it. Although an attributes property may have been\n    // added to the playlist to prevent undefined references, issue a warning to fix the\n    // manifest.\n\n    if (!playlist.attributes.BANDWIDTH) {\n      log.warn('Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.');\n    }\n  }\n};\n/**\n * Adds resolvedUri properties to each media group.\n *\n * @param {Object} main\n *        The main playlist\n */\n\nconst resolveMediaGroupUris = main => {\n  forEachMediaGroup(main, properties => {\n    if (properties.uri) {\n      properties.resolvedUri = resolveUrl(main.uri, properties.uri);\n    }\n  });\n};\n/**\n * Creates a main playlist wrapper to insert a sole media playlist into.\n *\n * @param {Object} media\n *        Media playlist\n * @param {string} uri\n *        The media URI\n *\n * @return {Object}\n *         main playlist\n */\n\nconst mainForMedia = (media, uri) => {\n  const id = createPlaylistID(0, uri);\n  const main = {\n    mediaGroups: {\n      'AUDIO': {},\n      'VIDEO': {},\n      'CLOSED-CAPTIONS': {},\n      'SUBTITLES': {}\n    },\n    uri: window$1.location.href,\n    resolvedUri: window$1.location.href,\n    playlists: [{\n      uri,\n      id,\n      resolvedUri: uri,\n      // m3u8-parser does not attach an attributes property to media playlists so make\n      // sure that the property is attached to avoid undefined reference errors\n      attributes: {}\n    }]\n  }; // set up ID reference\n\n  main.playlists[id] = main.playlists[0]; // URI reference added for backwards compatibility\n\n  main.playlists[uri] = main.playlists[0];\n  return main;\n};\n/**\n * Does an in-place update of the main manifest to add updated playlist URI references\n * as well as other properties needed by VHS that aren't included by the parser.\n *\n * @param {Object} main\n *        main manifest object\n * @param {string} uri\n *        The source URI\n * @param {function} createGroupID\n *        A function to determine how to create the groupID for mediaGroups\n */\n\nconst addPropertiesToMain = (main, uri, createGroupID = groupID) => {\n  main.uri = uri;\n  for (let i = 0; i < main.playlists.length; i++) {\n    if (!main.playlists[i].uri) {\n      // Set up phony URIs for the playlists since playlists are referenced by their URIs\n      // throughout VHS, but some formats (e.g., DASH) don't have external URIs\n      // TODO: consider adding dummy URIs in mpd-parser\n      const phonyUri = `placeholder-uri-${i}`;\n      main.playlists[i].uri = phonyUri;\n    }\n  }\n  const audioOnlyMain = isAudioOnly(main);\n  forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey) => {\n    // add a playlist array under properties\n    if (!properties.playlists || !properties.playlists.length) {\n      // If the manifest is audio only and this media group does not have a uri, check\n      // if the media group is located in the main list of playlists. If it is, don't add\n      // placeholder properties as it shouldn't be considered an alternate audio track.\n      if (audioOnlyMain && mediaType === 'AUDIO' && !properties.uri) {\n        for (let i = 0; i < main.playlists.length; i++) {\n          const p = main.playlists[i];\n          if (p.attributes && p.attributes.AUDIO && p.attributes.AUDIO === groupKey) {\n            return;\n          }\n        }\n      }\n      properties.playlists = [_extends({}, properties)];\n    }\n    properties.playlists.forEach(function (p, i) {\n      const groupId = createGroupID(mediaType, groupKey, labelKey, p);\n      const id = createPlaylistID(i, groupId);\n      if (p.uri) {\n        p.resolvedUri = p.resolvedUri || resolveUrl(main.uri, p.uri);\n      } else {\n        // DEPRECATED, this has been added to prevent a breaking change.\n        // previously we only ever had a single media group playlist, so\n        // we mark the first playlist uri without prepending the index as we used to\n        // ideally we would do all of the playlists the same way.\n        p.uri = i === 0 ? groupId : id; // don't resolve a placeholder uri to an absolute url, just use\n        // the placeholder again\n\n        p.resolvedUri = p.uri;\n      }\n      p.id = p.id || id; // add an empty attributes object, all playlists are\n      // expected to have this.\n\n      p.attributes = p.attributes || {}; // setup ID and URI references (URI for backwards compatibility)\n\n      main.playlists[p.id] = p;\n      main.playlists[p.uri] = p;\n    });\n  });\n  setupMediaPlaylists(main);\n  resolveMediaGroupUris(main);\n};\n\n/**\n * @file playlist-loader.js\n *\n * A state machine that manages the loading, caching, and updating of\n * M3U8 playlists.\n *\n */\nconst {\n  EventTarget: EventTarget$1\n} = videojs;\nconst addLLHLSQueryDirectives = (uri, media) => {\n  if (media.endList || !media.serverControl) {\n    return uri;\n  }\n  const parameters = {};\n  if (media.serverControl.canBlockReload) {\n    const {\n      preloadSegment\n    } = media; // next msn is a zero based value, length is not.\n\n    let nextMSN = media.mediaSequence + media.segments.length; // If preload segment has parts then it is likely\n    // that we are going to request a part of that preload segment.\n    // the logic below is used to determine that.\n\n    if (preloadSegment) {\n      const parts = preloadSegment.parts || []; // _HLS_part is a zero based index\n\n      const nextPart = getKnownPartCount(media) - 1; // if nextPart is > -1 and not equal to just the\n      // length of parts, then we know we had part preload hints\n      // and we need to add the _HLS_part= query\n\n      if (nextPart > -1 && nextPart !== parts.length - 1) {\n        // add existing parts to our preload hints\n        // eslint-disable-next-line\n        parameters._HLS_part = nextPart;\n      } // this if statement makes sure that we request the msn\n      // of the preload segment if:\n      // 1. the preload segment had parts (and was not yet a full segment)\n      //    but was added to our segments array\n      // 2. the preload segment had preload hints for parts that are not in\n      //    the manifest yet.\n      // in all other cases we want the segment after the preload segment\n      // which will be given by using media.segments.length because it is 1 based\n      // rather than 0 based.\n\n      if (nextPart > -1 || parts.length) {\n        nextMSN--;\n      }\n    } // add _HLS_msn= in front of any _HLS_part query\n    // eslint-disable-next-line\n\n    parameters._HLS_msn = nextMSN;\n  }\n  if (media.serverControl && media.serverControl.canSkipUntil) {\n    // add _HLS_skip= infront of all other queries.\n    // eslint-disable-next-line\n    parameters._HLS_skip = media.serverControl.canSkipDateranges ? 'v2' : 'YES';\n  }\n  if (Object.keys(parameters).length) {\n    const parsedUri = new window$1.URL(uri);\n    ['_HLS_skip', '_HLS_msn', '_HLS_part'].forEach(function (name) {\n      if (!parameters.hasOwnProperty(name)) {\n        return;\n      }\n      parsedUri.searchParams.set(name, parameters[name]);\n    });\n    uri = parsedUri.toString();\n  }\n  return uri;\n};\n/**\n * Returns a new segment object with properties and\n * the parts array merged.\n *\n * @param {Object} a the old segment\n * @param {Object} b the new segment\n *\n * @return {Object} the merged segment\n */\n\nconst updateSegment = (a, b) => {\n  if (!a) {\n    return b;\n  }\n  const result = merge(a, b); // if only the old segment has preload hints\n  // and the new one does not, remove preload hints.\n\n  if (a.preloadHints && !b.preloadHints) {\n    delete result.preloadHints;\n  } // if only the old segment has parts\n  // then the parts are no longer valid\n\n  if (a.parts && !b.parts) {\n    delete result.parts; // if both segments have parts\n    // copy part propeties from the old segment\n    // to the new one.\n  } else if (a.parts && b.parts) {\n    for (let i = 0; i < b.parts.length; i++) {\n      if (a.parts && a.parts[i]) {\n        result.parts[i] = merge(a.parts[i], b.parts[i]);\n      }\n    }\n  } // set skipped to false for segments that have\n  // have had information merged from the old segment.\n\n  if (!a.skipped && b.skipped) {\n    result.skipped = false;\n  } // set preload to false for segments that have\n  // had information added in the new segment.\n\n  if (a.preload && !b.preload) {\n    result.preload = false;\n  }\n  return result;\n};\n/**\n * Returns a new array of segments that is the result of merging\n * properties from an older list of segments onto an updated\n * list. No properties on the updated playlist will be ovewritten.\n *\n * @param {Array} original the outdated list of segments\n * @param {Array} update the updated list of segments\n * @param {number=} offset the index of the first update\n * segment in the original segment list. For non-live playlists,\n * this should always be zero and does not need to be\n * specified. For live playlists, it should be the difference\n * between the media sequence numbers in the original and updated\n * playlists.\n * @return {Array} a list of merged segment objects\n */\n\nconst updateSegments = (original, update, offset) => {\n  const oldSegments = original.slice();\n  const newSegments = update.slice();\n  offset = offset || 0;\n  const result = [];\n  let currentMap;\n  for (let newIndex = 0; newIndex < newSegments.length; newIndex++) {\n    const oldSegment = oldSegments[newIndex + offset];\n    const newSegment = newSegments[newIndex];\n    if (oldSegment) {\n      currentMap = oldSegment.map || currentMap;\n      result.push(updateSegment(oldSegment, newSegment));\n    } else {\n      // carry over map to new segment if it is missing\n      if (currentMap && !newSegment.map) {\n        newSegment.map = currentMap;\n      }\n      result.push(newSegment);\n    }\n  }\n  return result;\n};\nconst resolveSegmentUris = (segment, baseUri) => {\n  // preloadSegment will not have a uri at all\n  // as the segment isn't actually in the manifest yet, only parts\n  if (!segment.resolvedUri && segment.uri) {\n    segment.resolvedUri = resolveUrl(baseUri, segment.uri);\n  }\n  if (segment.key && !segment.key.resolvedUri) {\n    segment.key.resolvedUri = resolveUrl(baseUri, segment.key.uri);\n  }\n  if (segment.map && !segment.map.resolvedUri) {\n    segment.map.resolvedUri = resolveUrl(baseUri, segment.map.uri);\n  }\n  if (segment.map && segment.map.key && !segment.map.key.resolvedUri) {\n    segment.map.key.resolvedUri = resolveUrl(baseUri, segment.map.key.uri);\n  }\n  if (segment.parts && segment.parts.length) {\n    segment.parts.forEach(p => {\n      if (p.resolvedUri) {\n        return;\n      }\n      p.resolvedUri = resolveUrl(baseUri, p.uri);\n    });\n  }\n  if (segment.preloadHints && segment.preloadHints.length) {\n    segment.preloadHints.forEach(p => {\n      if (p.resolvedUri) {\n        return;\n      }\n      p.resolvedUri = resolveUrl(baseUri, p.uri);\n    });\n  }\n};\nconst getAllSegments = function (media) {\n  const segments = media.segments || [];\n  const preloadSegment = media.preloadSegment; // a preloadSegment with only preloadHints is not currently\n  // a usable segment, only include a preloadSegment that has\n  // parts.\n\n  if (preloadSegment && preloadSegment.parts && preloadSegment.parts.length) {\n    // if preloadHints has a MAP that means that the\n    // init segment is going to change. We cannot use any of the parts\n    // from this preload segment.\n    if (preloadSegment.preloadHints) {\n      for (let i = 0; i < preloadSegment.preloadHints.length; i++) {\n        if (preloadSegment.preloadHints[i].type === 'MAP') {\n          return segments;\n        }\n      }\n    } // set the duration for our preload segment to target duration.\n\n    preloadSegment.duration = media.targetDuration;\n    preloadSegment.preload = true;\n    segments.push(preloadSegment);\n  }\n  return segments;\n}; // consider the playlist unchanged if the playlist object is the same or\n// the number of segments is equal, the media sequence number is unchanged,\n// and this playlist hasn't become the end of the playlist\n\nconst isPlaylistUnchanged = (a, b) => a === b || a.segments && b.segments && a.segments.length === b.segments.length && a.endList === b.endList && a.mediaSequence === b.mediaSequence && a.preloadSegment === b.preloadSegment;\n/**\n  * Returns a new main playlist that is the result of merging an\n  * updated media playlist into the original version. If the\n  * updated media playlist does not match any of the playlist\n  * entries in the original main playlist, null is returned.\n  *\n  * @param {Object} main a parsed main M3U8 object\n  * @param {Object} media a parsed media M3U8 object\n  * @return {Object} a new object that represents the original\n  * main playlist with the updated media playlist merged in, or\n  * null if the merge produced no change.\n  */\n\nconst updateMain$1 = (main, newMedia, unchangedCheck = isPlaylistUnchanged) => {\n  const result = merge(main, {});\n  const oldMedia = result.playlists[newMedia.id];\n  if (!oldMedia) {\n    return null;\n  }\n  if (unchangedCheck(oldMedia, newMedia)) {\n    return null;\n  }\n  newMedia.segments = getAllSegments(newMedia);\n  const mergedPlaylist = merge(oldMedia, newMedia); // always use the new media's preload segment\n\n  if (mergedPlaylist.preloadSegment && !newMedia.preloadSegment) {\n    delete mergedPlaylist.preloadSegment;\n  } // if the update could overlap existing segment information, merge the two segment lists\n\n  if (oldMedia.segments) {\n    if (newMedia.skip) {\n      newMedia.segments = newMedia.segments || []; // add back in objects for skipped segments, so that we merge\n      // old properties into the new segments\n\n      for (let i = 0; i < newMedia.skip.skippedSegments; i++) {\n        newMedia.segments.unshift({\n          skipped: true\n        });\n      }\n    }\n    mergedPlaylist.segments = updateSegments(oldMedia.segments, newMedia.segments, newMedia.mediaSequence - oldMedia.mediaSequence);\n  } // resolve any segment URIs to prevent us from having to do it later\n\n  mergedPlaylist.segments.forEach(segment => {\n    resolveSegmentUris(segment, mergedPlaylist.resolvedUri);\n  }); // TODO Right now in the playlists array there are two references to each playlist, one\n  // that is referenced by index, and one by URI. The index reference may no longer be\n  // necessary.\n\n  for (let i = 0; i < result.playlists.length; i++) {\n    if (result.playlists[i].id === newMedia.id) {\n      result.playlists[i] = mergedPlaylist;\n    }\n  }\n  result.playlists[newMedia.id] = mergedPlaylist; // URI reference added for backwards compatibility\n\n  result.playlists[newMedia.uri] = mergedPlaylist; // update media group playlist references.\n\n  forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey) => {\n    if (!properties.playlists) {\n      return;\n    }\n    for (let i = 0; i < properties.playlists.length; i++) {\n      if (newMedia.id === properties.playlists[i].id) {\n        properties.playlists[i] = mergedPlaylist;\n      }\n    }\n  });\n  return result;\n};\n/**\n * Calculates the time to wait before refreshing a live playlist\n *\n * @param {Object} media\n *        The current media\n * @param {boolean} update\n *        True if there were any updates from the last refresh, false otherwise\n * @return {number}\n *         The time in ms to wait before refreshing the live playlist\n */\n\nconst refreshDelay = (media, update) => {\n  const segments = media.segments || [];\n  const lastSegment = segments[segments.length - 1];\n  const lastPart = lastSegment && lastSegment.parts && lastSegment.parts[lastSegment.parts.length - 1];\n  const lastDuration = lastPart && lastPart.duration || lastSegment && lastSegment.duration;\n  if (update && lastDuration) {\n    return lastDuration * 1000;\n  } // if the playlist is unchanged since the last reload or last segment duration\n  // cannot be determined, try again after half the target duration\n\n  return (media.partTargetDuration || media.targetDuration || 10) * 500;\n};\n/**\n * Load a playlist from a remote location\n *\n * @class PlaylistLoader\n * @extends Stream\n * @param {string|Object} src url or object of manifest\n * @param {boolean} withCredentials the withCredentials xhr option\n * @class\n */\n\nclass PlaylistLoader extends EventTarget$1 {\n  constructor(src, vhs, options = {}) {\n    super();\n    if (!src) {\n      throw new Error('A non-empty playlist URL or object is required');\n    }\n    this.logger_ = logger('PlaylistLoader');\n    const {\n      withCredentials = false\n    } = options;\n    this.src = src;\n    this.vhs_ = vhs;\n    this.withCredentials = withCredentials;\n    const vhsOptions = vhs.options_;\n    this.customTagParsers = vhsOptions && vhsOptions.customTagParsers || [];\n    this.customTagMappers = vhsOptions && vhsOptions.customTagMappers || [];\n    this.llhls = vhsOptions && vhsOptions.llhls; // initialize the loader state\n\n    this.state = 'HAVE_NOTHING'; // live playlist staleness timeout\n\n    this.handleMediaupdatetimeout_ = this.handleMediaupdatetimeout_.bind(this);\n    this.on('mediaupdatetimeout', this.handleMediaupdatetimeout_);\n  }\n  handleMediaupdatetimeout_() {\n    if (this.state !== 'HAVE_METADATA') {\n      // only refresh the media playlist if no other activity is going on\n      return;\n    }\n    const media = this.media();\n    let uri = resolveUrl(this.main.uri, media.uri);\n    if (this.llhls) {\n      uri = addLLHLSQueryDirectives(uri, media);\n    }\n    this.state = 'HAVE_CURRENT_METADATA';\n    this.request = this.vhs_.xhr({\n      uri,\n      withCredentials: this.withCredentials\n    }, (error, req) => {\n      // disposed\n      if (!this.request) {\n        return;\n      }\n      if (error) {\n        return this.playlistRequestError(this.request, this.media(), 'HAVE_METADATA');\n      }\n      this.haveMetadata({\n        playlistString: this.request.responseText,\n        url: this.media().uri,\n        id: this.media().id\n      });\n    });\n  }\n  playlistRequestError(xhr, playlist, startingState) {\n    const {\n      uri,\n      id\n    } = playlist; // any in-flight request is now finished\n\n    this.request = null;\n    if (startingState) {\n      this.state = startingState;\n    }\n    this.error = {\n      playlist: this.main.playlists[id],\n      status: xhr.status,\n      message: `HLS playlist request error at URL: ${uri}.`,\n      responseText: xhr.responseText,\n      code: xhr.status >= 500 ? 4 : 2\n    };\n    this.trigger('error');\n  }\n  parseManifest_({\n    url,\n    manifestString\n  }) {\n    return parseManifest({\n      onwarn: ({\n        message\n      }) => this.logger_(`m3u8-parser warn for ${url}: ${message}`),\n      oninfo: ({\n        message\n      }) => this.logger_(`m3u8-parser info for ${url}: ${message}`),\n      manifestString,\n      customTagParsers: this.customTagParsers,\n      customTagMappers: this.customTagMappers,\n      llhls: this.llhls\n    });\n  }\n  /**\n   * Update the playlist loader's state in response to a new or updated playlist.\n   *\n   * @param {string} [playlistString]\n   *        Playlist string (if playlistObject is not provided)\n   * @param {Object} [playlistObject]\n   *        Playlist object (if playlistString is not provided)\n   * @param {string} url\n   *        URL of playlist\n   * @param {string} id\n   *        ID to use for playlist\n   */\n\n  haveMetadata({\n    playlistString,\n    playlistObject,\n    url,\n    id\n  }) {\n    // any in-flight request is now finished\n    this.request = null;\n    this.state = 'HAVE_METADATA';\n    const playlist = playlistObject || this.parseManifest_({\n      url,\n      manifestString: playlistString\n    });\n    playlist.lastRequest = Date.now();\n    setupMediaPlaylist({\n      playlist,\n      uri: url,\n      id\n    }); // merge this playlist into the main manifest\n\n    const update = updateMain$1(this.main, playlist);\n    this.targetDuration = playlist.partTargetDuration || playlist.targetDuration;\n    this.pendingMedia_ = null;\n    if (update) {\n      this.main = update;\n      this.media_ = this.main.playlists[id];\n    } else {\n      this.trigger('playlistunchanged');\n    }\n    this.updateMediaUpdateTimeout_(refreshDelay(this.media(), !!update));\n    this.trigger('loadedplaylist');\n  }\n  /**\n    * Abort any outstanding work and clean up.\n    */\n\n  dispose() {\n    this.trigger('dispose');\n    this.stopRequest();\n    window$1.clearTimeout(this.mediaUpdateTimeout);\n    window$1.clearTimeout(this.finalRenditionTimeout);\n    this.off();\n  }\n  stopRequest() {\n    if (this.request) {\n      const oldRequest = this.request;\n      this.request = null;\n      oldRequest.onreadystatechange = null;\n      oldRequest.abort();\n    }\n  }\n  /**\n    * When called without any arguments, returns the currently\n    * active media playlist. When called with a single argument,\n    * triggers the playlist loader to asynchronously switch to the\n    * specified media playlist. Calling this method while the\n    * loader is in the HAVE_NOTHING causes an error to be emitted\n    * but otherwise has no effect.\n    *\n    * @param {Object=} playlist the parsed media playlist\n    * object to switch to\n    * @param {boolean=} shouldDelay whether we should delay the request by half target duration\n    *\n    * @return {Playlist} the current loaded media\n    */\n\n  media(playlist, shouldDelay) {\n    // getter\n    if (!playlist) {\n      return this.media_;\n    } // setter\n\n    if (this.state === 'HAVE_NOTHING') {\n      throw new Error('Cannot switch media playlist from ' + this.state);\n    } // find the playlist object if the target playlist has been\n    // specified by URI\n\n    if (typeof playlist === 'string') {\n      if (!this.main.playlists[playlist]) {\n        throw new Error('Unknown playlist URI: ' + playlist);\n      }\n      playlist = this.main.playlists[playlist];\n    }\n    window$1.clearTimeout(this.finalRenditionTimeout);\n    if (shouldDelay) {\n      const delay = (playlist.partTargetDuration || playlist.targetDuration) / 2 * 1000 || 5 * 1000;\n      this.finalRenditionTimeout = window$1.setTimeout(this.media.bind(this, playlist, false), delay);\n      return;\n    }\n    const startingState = this.state;\n    const mediaChange = !this.media_ || playlist.id !== this.media_.id;\n    const mainPlaylistRef = this.main.playlists[playlist.id]; // switch to fully loaded playlists immediately\n\n    if (mainPlaylistRef && mainPlaylistRef.endList ||\n    // handle the case of a playlist object (e.g., if using vhs-json with a resolved\n    // media playlist or, for the case of demuxed audio, a resolved audio media group)\n    playlist.endList && playlist.segments.length) {\n      // abort outstanding playlist requests\n      if (this.request) {\n        this.request.onreadystatechange = null;\n        this.request.abort();\n        this.request = null;\n      }\n      this.state = 'HAVE_METADATA';\n      this.media_ = playlist; // trigger media change if the active media has been updated\n\n      if (mediaChange) {\n        this.trigger('mediachanging');\n        if (startingState === 'HAVE_MAIN_MANIFEST') {\n          // The initial playlist was a main manifest, and the first media selected was\n          // also provided (in the form of a resolved playlist object) as part of the\n          // source object (rather than just a URL). Therefore, since the media playlist\n          // doesn't need to be requested, loadedmetadata won't trigger as part of the\n          // normal flow, and needs an explicit trigger here.\n          this.trigger('loadedmetadata');\n        } else {\n          this.trigger('mediachange');\n        }\n      }\n      return;\n    } // We update/set the timeout here so that live playlists\n    // that are not a media change will \"start\" the loader as expected.\n    // We expect that this function will start the media update timeout\n    // cycle again. This also prevents a playlist switch failure from\n    // causing us to stall during live.\n\n    this.updateMediaUpdateTimeout_(refreshDelay(playlist, true)); // switching to the active playlist is a no-op\n\n    if (!mediaChange) {\n      return;\n    }\n    this.state = 'SWITCHING_MEDIA'; // there is already an outstanding playlist request\n\n    if (this.request) {\n      if (playlist.resolvedUri === this.request.url) {\n        // requesting to switch to the same playlist multiple times\n        // has no effect after the first\n        return;\n      }\n      this.request.onreadystatechange = null;\n      this.request.abort();\n      this.request = null;\n    } // request the new playlist\n\n    if (this.media_) {\n      this.trigger('mediachanging');\n    }\n    this.pendingMedia_ = playlist;\n    this.request = this.vhs_.xhr({\n      uri: playlist.resolvedUri,\n      withCredentials: this.withCredentials\n    }, (error, req) => {\n      // disposed\n      if (!this.request) {\n        return;\n      }\n      playlist.lastRequest = Date.now();\n      playlist.resolvedUri = resolveManifestRedirect(playlist.resolvedUri, req);\n      if (error) {\n        return this.playlistRequestError(this.request, playlist, startingState);\n      }\n      this.haveMetadata({\n        playlistString: req.responseText,\n        url: playlist.uri,\n        id: playlist.id\n      }); // fire loadedmetadata the first time a media playlist is loaded\n\n      if (startingState === 'HAVE_MAIN_MANIFEST') {\n        this.trigger('loadedmetadata');\n      } else {\n        this.trigger('mediachange');\n      }\n    });\n  }\n  /**\n   * pause loading of the playlist\n   */\n\n  pause() {\n    if (this.mediaUpdateTimeout) {\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      this.mediaUpdateTimeout = null;\n    }\n    this.stopRequest();\n    if (this.state === 'HAVE_NOTHING') {\n      // If we pause the loader before any data has been retrieved, its as if we never\n      // started, so reset to an unstarted state.\n      this.started = false;\n    } // Need to restore state now that no activity is happening\n\n    if (this.state === 'SWITCHING_MEDIA') {\n      // if the loader was in the process of switching media, it should either return to\n      // HAVE_MAIN_MANIFEST or HAVE_METADATA depending on if the loader has loaded a media\n      // playlist yet. This is determined by the existence of loader.media_\n      if (this.media_) {\n        this.state = 'HAVE_METADATA';\n      } else {\n        this.state = 'HAVE_MAIN_MANIFEST';\n      }\n    } else if (this.state === 'HAVE_CURRENT_METADATA') {\n      this.state = 'HAVE_METADATA';\n    }\n  }\n  /**\n   * start loading of the playlist\n   */\n\n  load(shouldDelay) {\n    if (this.mediaUpdateTimeout) {\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      this.mediaUpdateTimeout = null;\n    }\n    const media = this.media();\n    if (shouldDelay) {\n      const delay = media ? (media.partTargetDuration || media.targetDuration) / 2 * 1000 : 5 * 1000;\n      this.mediaUpdateTimeout = window$1.setTimeout(() => {\n        this.mediaUpdateTimeout = null;\n        this.load();\n      }, delay);\n      return;\n    }\n    if (!this.started) {\n      this.start();\n      return;\n    }\n    if (media && !media.endList) {\n      this.trigger('mediaupdatetimeout');\n    } else {\n      this.trigger('loadedplaylist');\n    }\n  }\n  updateMediaUpdateTimeout_(delay) {\n    if (this.mediaUpdateTimeout) {\n      window$1.clearTimeout(this.mediaUpdateTimeout);\n      this.mediaUpdateTimeout = null;\n    } // we only have use mediaupdatetimeout for live playlists.\n\n    if (!this.media() || this.media().endList) {\n      return;\n    }\n    this.mediaUpdateTimeout = window$1.setTimeout(() => {\n      this.mediaUpdateTimeout = null;\n      this.trigger('mediaupdatetimeout');\n      this.updateMediaUpdateTimeout_(delay);\n    }, delay);\n  }\n  /**\n   * start loading of the playlist\n   */\n\n  start() {\n    this.started = true;\n    if (typeof this.src === 'object') {\n      // in the case of an entirely constructed manifest object (meaning there's no actual\n      // manifest on a server), default the uri to the page's href\n      if (!this.src.uri) {\n        this.src.uri = window$1.location.href;\n      } // resolvedUri is added on internally after the initial request. Since there's no\n      // request for pre-resolved manifests, add on resolvedUri here.\n\n      this.src.resolvedUri = this.src.uri; // Since a manifest object was passed in as the source (instead of a URL), the first\n      // request can be skipped (since the top level of the manifest, at a minimum, is\n      // already available as a parsed manifest object). However, if the manifest object\n      // represents a main playlist, some media playlists may need to be resolved before\n      // the starting segment list is available. Therefore, go directly to setup of the\n      // initial playlist, and let the normal flow continue from there.\n      //\n      // Note that the call to setup is asynchronous, as other sections of VHS may assume\n      // that the first request is asynchronous.\n\n      setTimeout(() => {\n        this.setupInitialPlaylist(this.src);\n      }, 0);\n      return;\n    } // request the specified URL\n\n    this.request = this.vhs_.xhr({\n      uri: this.src,\n      withCredentials: this.withCredentials\n    }, (error, req) => {\n      // disposed\n      if (!this.request) {\n        return;\n      } // clear the loader's request reference\n\n      this.request = null;\n      if (error) {\n        this.error = {\n          status: req.status,\n          message: `HLS playlist request error at URL: ${this.src}.`,\n          responseText: req.responseText,\n          // MEDIA_ERR_NETWORK\n          code: 2\n        };\n        if (this.state === 'HAVE_NOTHING') {\n          this.started = false;\n        }\n        return this.trigger('error');\n      }\n      this.src = resolveManifestRedirect(this.src, req);\n      const manifest = this.parseManifest_({\n        manifestString: req.responseText,\n        url: this.src\n      });\n      this.setupInitialPlaylist(manifest);\n    });\n  }\n  srcUri() {\n    return typeof this.src === 'string' ? this.src : this.src.uri;\n  }\n  /**\n   * Given a manifest object that's either a main or media playlist, trigger the proper\n   * events and set the state of the playlist loader.\n   *\n   * If the manifest object represents a main playlist, `loadedplaylist` will be\n   * triggered to allow listeners to select a playlist. If none is selected, the loader\n   * will default to the first one in the playlists array.\n   *\n   * If the manifest object represents a media playlist, `loadedplaylist` will be\n   * triggered followed by `loadedmetadata`, as the only available playlist is loaded.\n   *\n   * In the case of a media playlist, a main playlist object wrapper with one playlist\n   * will be created so that all logic can handle playlists in the same fashion (as an\n   * assumed manifest object schema).\n   *\n   * @param {Object} manifest\n   *        The parsed manifest object\n   */\n\n  setupInitialPlaylist(manifest) {\n    this.state = 'HAVE_MAIN_MANIFEST';\n    if (manifest.playlists) {\n      this.main = manifest;\n      addPropertiesToMain(this.main, this.srcUri()); // If the initial main playlist has playlists wtih segments already resolved,\n      // then resolve URIs in advance, as they are usually done after a playlist request,\n      // which may not happen if the playlist is resolved.\n\n      manifest.playlists.forEach(playlist => {\n        playlist.segments = getAllSegments(playlist);\n        playlist.segments.forEach(segment => {\n          resolveSegmentUris(segment, playlist.resolvedUri);\n        });\n      });\n      this.trigger('loadedplaylist');\n      if (!this.request) {\n        // no media playlist was specifically selected so start\n        // from the first listed one\n        this.media(this.main.playlists[0]);\n      }\n      return;\n    } // In order to support media playlists passed in as vhs-json, the case where the uri\n    // is not provided as part of the manifest should be considered, and an appropriate\n    // default used.\n\n    const uri = this.srcUri() || window$1.location.href;\n    this.main = mainForMedia(manifest, uri);\n    this.haveMetadata({\n      playlistObject: manifest,\n      url: uri,\n      id: this.main.playlists[0].id\n    });\n    this.trigger('loadedmetadata');\n  }\n}\n\n/**\n * @file xhr.js\n */\nconst {\n  xhr: videojsXHR\n} = videojs;\nconst callbackWrapper = function (request, error, response, callback) {\n  const reqResponse = request.responseType === 'arraybuffer' ? request.response : request.responseText;\n  if (!error && reqResponse) {\n    request.responseTime = Date.now();\n    request.roundTripTime = request.responseTime - request.requestTime;\n    request.bytesReceived = reqResponse.byteLength || reqResponse.length;\n    if (!request.bandwidth) {\n      request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1000);\n    }\n  }\n  if (response.headers) {\n    request.responseHeaders = response.headers;\n  } // videojs.xhr now uses a specific code on the error\n  // object to signal that a request has timed out instead\n  // of setting a boolean on the request object\n\n  if (error && error.code === 'ETIMEDOUT') {\n    request.timedout = true;\n  } // videojs.xhr no longer considers status codes outside of 200 and 0\n  // (for file uris) to be errors, but the old XHR did, so emulate that\n  // behavior. Status 206 may be used in response to byterange requests.\n\n  if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {\n    error = new Error('XHR Failed with a response of: ' + (request && (reqResponse || request.responseText)));\n  }\n  callback(error, request);\n};\nconst xhrFactory = function () {\n  const xhr = function XhrFunction(options, callback) {\n    // Add a default timeout\n    options = merge({\n      timeout: 45e3\n    }, options); // Allow an optional user-specified function to modify the option\n    // object before we construct the xhr request\n\n    const beforeRequest = XhrFunction.beforeRequest || videojs.Vhs.xhr.beforeRequest;\n    if (beforeRequest && typeof beforeRequest === 'function') {\n      const newOptions = beforeRequest(options);\n      if (newOptions) {\n        options = newOptions;\n      }\n    } // Use the standard videojs.xhr() method unless `videojs.Vhs.xhr` has been overriden\n    // TODO: switch back to videojs.Vhs.xhr.name === 'XhrFunction' when we drop IE11\n\n    const xhrMethod = videojs.Vhs.xhr.original === true ? videojsXHR : videojs.Vhs.xhr;\n    const request = xhrMethod(options, function (error, response) {\n      return callbackWrapper(request, error, response, callback);\n    });\n    const originalAbort = request.abort;\n    request.abort = function () {\n      request.aborted = true;\n      return originalAbort.apply(request, arguments);\n    };\n    request.uri = options.uri;\n    request.requestTime = Date.now();\n    return request;\n  };\n  xhr.original = true;\n  return xhr;\n};\n/**\n * Turns segment byterange into a string suitable for use in\n * HTTP Range requests\n *\n * @param {Object} byterange - an object with two values defining the start and end\n *                             of a byte-range\n */\n\nconst byterangeStr = function (byterange) {\n  // `byterangeEnd` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  let byterangeEnd;\n  const byterangeStart = byterange.offset;\n  if (typeof byterange.offset === 'bigint' || typeof byterange.length === 'bigint') {\n    byterangeEnd = window$1.BigInt(byterange.offset) + window$1.BigInt(byterange.length) - window$1.BigInt(1);\n  } else {\n    byterangeEnd = byterange.offset + byterange.length - 1;\n  }\n  return 'bytes=' + byterangeStart + '-' + byterangeEnd;\n};\n/**\n * Defines headers for use in the xhr request for a particular segment.\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n */\n\nconst segmentXhrHeaders = function (segment) {\n  const headers = {};\n  if (segment.byterange) {\n    headers.Range = byterangeStr(segment.byterange);\n  }\n  return headers;\n};\n\n/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {number} i the iterator on the range to convert\n * @return {string} the range in string format\n */\n\nconst textRange = function (range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n/**\n * format a number as hex string\n *\n * @param {number} e The number\n * @param {number} i the iterator\n * @return {string} the hex formatted number as a string\n */\n\nconst formatHexString = function (e, i) {\n  const value = e.toString(16);\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\nconst formatAsciiString = function (e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n  return '.';\n};\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\n\nconst createTransferableMessage = function (message) {\n  const transferable = {};\n  Object.keys(message).forEach(key => {\n    const value = message[key];\n    if (isArrayBufferView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n  return transferable;\n};\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n *\n * @param {Object} initSegment\n *        the init segment object.\n *\n * @return {string} the generated init segment id\n */\n\nconst initSegmentId = function (initSegment) {\n  const byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n/**\n * Returns a unique string identifier for a media segment key.\n *\n * @param {Object} key the encryption key\n * @return {string} the unique id for the media segment key.\n */\n\nconst segmentKeyId = function (key) {\n  return key.resolvedUri;\n};\n/**\n * utils to help dump binary data to the console\n *\n * @param {Array|TypedArray} data\n *        data to dump to a string\n *\n * @return {string} the data as a hex string.\n */\n\nconst hexDump = data => {\n  const bytes = Array.prototype.slice.call(data);\n  const step = 16;\n  let result = '';\n  let hex;\n  let ascii;\n  for (let j = 0; j < bytes.length / step; j++) {\n    hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n    ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n    result += hex + ' ' + ascii + '\\n';\n  }\n  return result;\n};\nconst tagDump = ({\n  bytes\n}) => hexDump(bytes);\nconst textRanges = ranges => {\n  let result = '';\n  let i;\n  for (i = 0; i < ranges.length; i++) {\n    result += textRange(ranges, i) + ' ';\n  }\n  return result;\n};\nvar utils = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId,\n  segmentKeyId: segmentKeyId,\n  hexDump: hexDump,\n  tagDump: tagDump,\n  textRanges: textRanges\n});\n\n// TODO handle fmp4 case where the timing info is accurate and doesn't involve transmux\n// 25% was arbitrarily chosen, and may need to be refined over time.\n\nconst SEGMENT_END_FUDGE_PERCENT = 0.25;\n/**\n * Converts a player time (any time that can be gotten/set from player.currentTime(),\n * e.g., any time within player.seekable().start(0) to player.seekable().end(0)) to a\n * program time (any time referencing the real world (e.g., EXT-X-PROGRAM-DATE-TIME)).\n *\n * The containing segment is required as the EXT-X-PROGRAM-DATE-TIME serves as an \"anchor\n * point\" (a point where we have a mapping from program time to player time, with player\n * time being the post transmux start of the segment).\n *\n * For more details, see [this doc](../../docs/program-time-from-player-time.md).\n *\n * @param {number} playerTime the player time\n * @param {Object} segment the segment which contains the player time\n * @return {Date} program time\n */\n\nconst playerTimeToProgramTime = (playerTime, segment) => {\n  if (!segment.dateTimeObject) {\n    // Can't convert without an \"anchor point\" for the program time (i.e., a time that can\n    // be used to map the start of a segment with a real world time).\n    return null;\n  }\n  const transmuxerPrependedSeconds = segment.videoTimingInfo.transmuxerPrependedSeconds;\n  const transmuxedStart = segment.videoTimingInfo.transmuxedPresentationStart; // get the start of the content from before old content is prepended\n\n  const startOfSegment = transmuxedStart + transmuxerPrependedSeconds;\n  const offsetFromSegmentStart = playerTime - startOfSegment;\n  return new Date(segment.dateTimeObject.getTime() + offsetFromSegmentStart * 1000);\n};\nconst originalSegmentVideoDuration = videoTimingInfo => {\n  return videoTimingInfo.transmuxedPresentationEnd - videoTimingInfo.transmuxedPresentationStart - videoTimingInfo.transmuxerPrependedSeconds;\n};\n/**\n * Finds a segment that contains the time requested given as an ISO-8601 string. The\n * returned segment might be an estimate or an accurate match.\n *\n * @param {string} programTime The ISO-8601 programTime to find a match for\n * @param {Object} playlist A playlist object to search within\n */\n\nconst findSegmentForProgramTime = (programTime, playlist) => {\n  // Assumptions:\n  //  - verifyProgramDateTimeTags has already been run\n  //  - live streams have been started\n  let dateTimeObject;\n  try {\n    dateTimeObject = new Date(programTime);\n  } catch (e) {\n    return null;\n  }\n  if (!playlist || !playlist.segments || playlist.segments.length === 0) {\n    return null;\n  }\n  let segment = playlist.segments[0];\n  if (dateTimeObject < segment.dateTimeObject) {\n    // Requested time is before stream start.\n    return null;\n  }\n  for (let i = 0; i < playlist.segments.length - 1; i++) {\n    segment = playlist.segments[i];\n    const nextSegmentStart = playlist.segments[i + 1].dateTimeObject;\n    if (dateTimeObject < nextSegmentStart) {\n      break;\n    }\n  }\n  const lastSegment = playlist.segments[playlist.segments.length - 1];\n  const lastSegmentStart = lastSegment.dateTimeObject;\n  const lastSegmentDuration = lastSegment.videoTimingInfo ? originalSegmentVideoDuration(lastSegment.videoTimingInfo) : lastSegment.duration + lastSegment.duration * SEGMENT_END_FUDGE_PERCENT;\n  const lastSegmentEnd = new Date(lastSegmentStart.getTime() + lastSegmentDuration * 1000);\n  if (dateTimeObject > lastSegmentEnd) {\n    // Beyond the end of the stream, or our best guess of the end of the stream.\n    return null;\n  }\n  if (dateTimeObject > lastSegmentStart) {\n    segment = lastSegment;\n  }\n  return {\n    segment,\n    estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : Playlist.duration(playlist, playlist.mediaSequence + playlist.segments.indexOf(segment)),\n    // Although, given that all segments have accurate date time objects, the segment\n    // selected should be accurate, unless the video has been transmuxed at some point\n    // (determined by the presence of the videoTimingInfo object), the segment's \"player\n    // time\" (the start time in the player) can't be considered accurate.\n    type: segment.videoTimingInfo ? 'accurate' : 'estimate'\n  };\n};\n/**\n * Finds a segment that contains the given player time(in seconds).\n *\n * @param {number} time The player time to find a match for\n * @param {Object} playlist A playlist object to search within\n */\n\nconst findSegmentForPlayerTime = (time, playlist) => {\n  // Assumptions:\n  // - there will always be a segment.duration\n  // - we can start from zero\n  // - segments are in time order\n  if (!playlist || !playlist.segments || playlist.segments.length === 0) {\n    return null;\n  }\n  let segmentEnd = 0;\n  let segment;\n  for (let i = 0; i < playlist.segments.length; i++) {\n    segment = playlist.segments[i]; // videoTimingInfo is set after the segment is downloaded and transmuxed, and\n    // should contain the most accurate values we have for the segment's player times.\n    //\n    // Use the accurate transmuxedPresentationEnd value if it is available, otherwise fall\n    // back to an estimate based on the manifest derived (inaccurate) segment.duration, to\n    // calculate an end value.\n\n    segmentEnd = segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationEnd : segmentEnd + segment.duration;\n    if (time <= segmentEnd) {\n      break;\n    }\n  }\n  const lastSegment = playlist.segments[playlist.segments.length - 1];\n  if (lastSegment.videoTimingInfo && lastSegment.videoTimingInfo.transmuxedPresentationEnd < time) {\n    // The time requested is beyond the stream end.\n    return null;\n  }\n  if (time > segmentEnd) {\n    // The time is within or beyond the last segment.\n    //\n    // Check to see if the time is beyond a reasonable guess of the end of the stream.\n    if (time > segmentEnd + lastSegment.duration * SEGMENT_END_FUDGE_PERCENT) {\n      // Technically, because the duration value is only an estimate, the time may still\n      // exist in the last segment, however, there isn't enough information to make even\n      // a reasonable estimate.\n      return null;\n    }\n    segment = lastSegment;\n  }\n  return {\n    segment,\n    estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : segmentEnd - segment.duration,\n    // Because videoTimingInfo is only set after transmux, it is the only way to get\n    // accurate timing values.\n    type: segment.videoTimingInfo ? 'accurate' : 'estimate'\n  };\n};\n/**\n * Gives the offset of the comparisonTimestamp from the programTime timestamp in seconds.\n * If the offset returned is positive, the programTime occurs after the\n * comparisonTimestamp.\n * If the offset is negative, the programTime occurs before the comparisonTimestamp.\n *\n * @param {string} comparisonTimeStamp An ISO-8601 timestamp to compare against\n * @param {string} programTime The programTime as an ISO-8601 string\n * @return {number} offset\n */\n\nconst getOffsetFromTimestamp = (comparisonTimeStamp, programTime) => {\n  let segmentDateTime;\n  let programDateTime;\n  try {\n    segmentDateTime = new Date(comparisonTimeStamp);\n    programDateTime = new Date(programTime);\n  } catch (e) {// TODO handle error\n  }\n  const segmentTimeEpoch = segmentDateTime.getTime();\n  const programTimeEpoch = programDateTime.getTime();\n  return (programTimeEpoch - segmentTimeEpoch) / 1000;\n};\n/**\n * Checks that all segments in this playlist have programDateTime tags.\n *\n * @param {Object} playlist A playlist object\n */\n\nconst verifyProgramDateTimeTags = playlist => {\n  if (!playlist.segments || playlist.segments.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < playlist.segments.length; i++) {\n    const segment = playlist.segments[i];\n    if (!segment.dateTimeObject) {\n      return false;\n    }\n  }\n  return true;\n};\n/**\n * Returns the programTime of the media given a playlist and a playerTime.\n * The playlist must have programDateTime tags for a programDateTime tag to be returned.\n * If the segments containing the time requested have not been buffered yet, an estimate\n * may be returned to the callback.\n *\n * @param {Object} args\n * @param {Object} args.playlist A playlist object to search within\n * @param {number} time A playerTime in seconds\n * @param {Function} callback(err, programTime)\n * @return {string} err.message A detailed error message\n * @return {Object} programTime\n * @return {number} programTime.mediaSeconds The streamTime in seconds\n * @return {string} programTime.programDateTime The programTime as an ISO-8601 String\n */\n\nconst getProgramTime = ({\n  playlist,\n  time = undefined,\n  callback\n}) => {\n  if (!callback) {\n    throw new Error('getProgramTime: callback must be provided');\n  }\n  if (!playlist || time === undefined) {\n    return callback({\n      message: 'getProgramTime: playlist and time must be provided'\n    });\n  }\n  const matchedSegment = findSegmentForPlayerTime(time, playlist);\n  if (!matchedSegment) {\n    return callback({\n      message: 'valid programTime was not found'\n    });\n  }\n  if (matchedSegment.type === 'estimate') {\n    return callback({\n      message: 'Accurate programTime could not be determined.' + ' Please seek to e.seekTime and try again',\n      seekTime: matchedSegment.estimatedStart\n    });\n  }\n  const programTimeObject = {\n    mediaSeconds: time\n  };\n  const programTime = playerTimeToProgramTime(time, matchedSegment.segment);\n  if (programTime) {\n    programTimeObject.programDateTime = programTime.toISOString();\n  }\n  return callback(null, programTimeObject);\n};\n/**\n * Seeks in the player to a time that matches the given programTime ISO-8601 string.\n *\n * @param {Object} args\n * @param {string} args.programTime A programTime to seek to as an ISO-8601 String\n * @param {Object} args.playlist A playlist to look within\n * @param {number} args.retryCount The number of times to try for an accurate seek. Default is 2.\n * @param {Function} args.seekTo A method to perform a seek\n * @param {boolean} args.pauseAfterSeek Whether to end in a paused state after seeking. Default is true.\n * @param {Object} args.tech The tech to seek on\n * @param {Function} args.callback(err, newTime) A callback to return the new time to\n * @return {string} err.message A detailed error message\n * @return {number} newTime The exact time that was seeked to in seconds\n */\n\nconst seekToProgramTime = ({\n  programTime,\n  playlist,\n  retryCount = 2,\n  seekTo,\n  pauseAfterSeek = true,\n  tech,\n  callback\n}) => {\n  if (!callback) {\n    throw new Error('seekToProgramTime: callback must be provided');\n  }\n  if (typeof programTime === 'undefined' || !playlist || !seekTo) {\n    return callback({\n      message: 'seekToProgramTime: programTime, seekTo and playlist must be provided'\n    });\n  }\n  if (!playlist.endList && !tech.hasStarted_) {\n    return callback({\n      message: 'player must be playing a live stream to start buffering'\n    });\n  }\n  if (!verifyProgramDateTimeTags(playlist)) {\n    return callback({\n      message: 'programDateTime tags must be provided in the manifest ' + playlist.resolvedUri\n    });\n  }\n  const matchedSegment = findSegmentForProgramTime(programTime, playlist); // no match\n\n  if (!matchedSegment) {\n    return callback({\n      message: `${programTime} was not found in the stream`\n    });\n  }\n  const segment = matchedSegment.segment;\n  const mediaOffset = getOffsetFromTimestamp(segment.dateTimeObject, programTime);\n  if (matchedSegment.type === 'estimate') {\n    // we've run out of retries\n    if (retryCount === 0) {\n      return callback({\n        message: `${programTime} is not buffered yet. Try again`\n      });\n    }\n    seekTo(matchedSegment.estimatedStart + mediaOffset);\n    tech.one('seeked', () => {\n      seekToProgramTime({\n        programTime,\n        playlist,\n        retryCount: retryCount - 1,\n        seekTo,\n        pauseAfterSeek,\n        tech,\n        callback\n      });\n    });\n    return;\n  } // Since the segment.start value is determined from the buffered end or ending time\n  // of the prior segment, the seekToTime doesn't need to account for any transmuxer\n  // modifications.\n\n  const seekToTime = segment.start + mediaOffset;\n  const seekedCallback = () => {\n    return callback(null, tech.currentTime());\n  }; // listen for seeked event\n\n  tech.one('seeked', seekedCallback); // pause before seeking as video.js will restore this state\n\n  if (pauseAfterSeek) {\n    tech.pause();\n  }\n  seekTo(seekToTime);\n};\n\n// which will only happen if the request is complete.\n\nconst callbackOnCompleted = (request, cb) => {\n  if (request.readyState === 4) {\n    return cb();\n  }\n  return;\n};\nconst containerRequest = (uri, xhr, cb) => {\n  let bytes = [];\n  let id3Offset;\n  let finished = false;\n  const endRequestAndCallback = function (err, req, type, _bytes) {\n    req.abort();\n    finished = true;\n    return cb(err, req, type, _bytes);\n  };\n  const progressListener = function (error, request) {\n    if (finished) {\n      return;\n    }\n    if (error) {\n      return endRequestAndCallback(error, request, '', bytes);\n    } // grap the new part of content that was just downloaded\n\n    const newPart = request.responseText.substring(bytes && bytes.byteLength || 0, request.responseText.length); // add that onto bytes\n\n    bytes = concatTypedArrays(bytes, stringToBytes(newPart, true));\n    id3Offset = id3Offset || getId3Offset(bytes); // we need at least 10 bytes to determine a type\n    // or we need at least two bytes after an id3Offset\n\n    if (bytes.length < 10 || id3Offset && bytes.length < id3Offset + 2) {\n      return callbackOnCompleted(request, () => endRequestAndCallback(error, request, '', bytes));\n    }\n    const type = detectContainerForBytes(bytes); // if this looks like a ts segment but we don't have enough data\n    // to see the second sync byte, wait until we have enough data\n    // before declaring it ts\n\n    if (type === 'ts' && bytes.length < 188) {\n      return callbackOnCompleted(request, () => endRequestAndCallback(error, request, '', bytes));\n    } // this may be an unsynced ts segment\n    // wait for 376 bytes before detecting no container\n\n    if (!type && bytes.length < 376) {\n      return callbackOnCompleted(request, () => endRequestAndCallback(error, request, '', bytes));\n    }\n    return endRequestAndCallback(null, request, type, bytes);\n  };\n  const options = {\n    uri,\n    beforeSend(request) {\n      // this forces the browser to pass the bytes to us unprocessed\n      request.overrideMimeType('text/plain; charset=x-user-defined');\n      request.addEventListener('progress', function ({\n        total,\n        loaded\n      }) {\n        return callbackWrapper(request, null, {\n          statusCode: request.status\n        }, progressListener);\n      });\n    }\n  };\n  const request = xhr(options, function (error, response) {\n    return callbackWrapper(request, error, response, progressListener);\n  });\n  return request;\n};\nconst {\n  EventTarget\n} = videojs;\nconst dashPlaylistUnchanged = function (a, b) {\n  if (!isPlaylistUnchanged(a, b)) {\n    return false;\n  } // for dash the above check will often return true in scenarios where\n  // the playlist actually has changed because mediaSequence isn't a\n  // dash thing, and we often set it to 1. So if the playlists have the same amount\n  // of segments we return true.\n  // So for dash we need to make sure that the underlying segments are different.\n  // if sidx changed then the playlists are different.\n\n  if (a.sidx && b.sidx && (a.sidx.offset !== b.sidx.offset || a.sidx.length !== b.sidx.length)) {\n    return false;\n  } else if (!a.sidx && b.sidx || a.sidx && !b.sidx) {\n    return false;\n  } // one or the other does not have segments\n  // there was a change.\n\n  if (a.segments && !b.segments || !a.segments && b.segments) {\n    return false;\n  } // neither has segments nothing changed\n\n  if (!a.segments && !b.segments) {\n    return true;\n  } // check segments themselves\n\n  for (let i = 0; i < a.segments.length; i++) {\n    const aSegment = a.segments[i];\n    const bSegment = b.segments[i]; // if uris are different between segments there was a change\n\n    if (aSegment.uri !== bSegment.uri) {\n      return false;\n    } // neither segment has a byterange, there will be no byterange change.\n\n    if (!aSegment.byterange && !bSegment.byterange) {\n      continue;\n    }\n    const aByterange = aSegment.byterange;\n    const bByterange = bSegment.byterange; // if byterange only exists on one of the segments, there was a change.\n\n    if (aByterange && !bByterange || !aByterange && bByterange) {\n      return false;\n    } // if both segments have byterange with different offsets, there was a change.\n\n    if (aByterange.offset !== bByterange.offset || aByterange.length !== bByterange.length) {\n      return false;\n    }\n  } // if everything was the same with segments, this is the same playlist.\n\n  return true;\n};\n/**\n * Use the representation IDs from the mpd object to create groupIDs, the NAME is set to mandatory representation\n * ID in the parser. This allows for continuous playout across periods with the same representation IDs\n * (continuous periods as defined in DASH-IF 3.2.12). This is assumed in the mpd-parser as well. If we want to support\n * periods without continuous playback this function may need modification as well as the parser.\n */\n\nconst dashGroupId = (type, group, label, playlist) => {\n  // If the manifest somehow does not have an ID (non-dash compliant), use the label.\n  const playlistId = playlist.attributes.NAME || label;\n  return `placeholder-uri-${type}-${group}-${playlistId}`;\n};\n/**\n * Parses the main XML string and updates playlist URI references.\n *\n * @param {Object} config\n *        Object of arguments\n * @param {string} config.mainXml\n *        The mpd XML\n * @param {string} config.srcUrl\n *        The mpd URL\n * @param {Date} config.clientOffset\n *         A time difference between server and client\n * @param {Object} config.sidxMapping\n *        SIDX mappings for moof/mdat URIs and byte ranges\n * @return {Object}\n *         The parsed mpd manifest object\n */\n\nconst parseMainXml = ({\n  mainXml,\n  srcUrl,\n  clientOffset,\n  sidxMapping,\n  previousManifest\n}) => {\n  const manifest = parse(mainXml, {\n    manifestUri: srcUrl,\n    clientOffset,\n    sidxMapping,\n    previousManifest\n  });\n  addPropertiesToMain(manifest, srcUrl, dashGroupId);\n  return manifest;\n};\n/**\n * Removes any mediaGroup labels that no longer exist in the newMain\n *\n * @param {Object} update\n *         The previous mpd object being updated\n * @param {Object} newMain\n *         The new mpd object\n */\n\nconst removeOldMediaGroupLabels = (update, newMain) => {\n  forEachMediaGroup(update, (properties, type, group, label) => {\n    if (!(label in newMain.mediaGroups[type][group])) {\n      delete update.mediaGroups[type][group][label];\n    }\n  });\n};\n/**\n * Returns a new main manifest that is the result of merging an updated main manifest\n * into the original version.\n *\n * @param {Object} oldMain\n *        The old parsed mpd object\n * @param {Object} newMain\n *        The updated parsed mpd object\n * @return {Object}\n *         A new object representing the original main manifest with the updated media\n *         playlists merged in\n */\n\nconst updateMain = (oldMain, newMain, sidxMapping) => {\n  let noChanges = true;\n  let update = merge(oldMain, {\n    // These are top level properties that can be updated\n    duration: newMain.duration,\n    minimumUpdatePeriod: newMain.minimumUpdatePeriod,\n    timelineStarts: newMain.timelineStarts\n  }); // First update the playlists in playlist list\n\n  for (let i = 0; i < newMain.playlists.length; i++) {\n    const playlist = newMain.playlists[i];\n    if (playlist.sidx) {\n      const sidxKey = generateSidxKey(playlist.sidx); // add sidx segments to the playlist if we have all the sidx info already\n\n      if (sidxMapping && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx) {\n        addSidxSegmentsToPlaylist(playlist, sidxMapping[sidxKey].sidx, playlist.sidx.resolvedUri);\n      }\n    }\n    const playlistUpdate = updateMain$1(update, playlist, dashPlaylistUnchanged);\n    if (playlistUpdate) {\n      update = playlistUpdate;\n      noChanges = false;\n    }\n  } // Then update media group playlists\n\n  forEachMediaGroup(newMain, (properties, type, group, label) => {\n    if (properties.playlists && properties.playlists.length) {\n      const id = properties.playlists[0].id;\n      const playlistUpdate = updateMain$1(update, properties.playlists[0], dashPlaylistUnchanged);\n      if (playlistUpdate) {\n        update = playlistUpdate; // add new mediaGroup label if it doesn't exist and assign the new mediaGroup.\n\n        if (!(label in update.mediaGroups[type][group])) {\n          update.mediaGroups[type][group][label] = properties;\n        } // update the playlist reference within media groups\n\n        update.mediaGroups[type][group][label].playlists[0] = update.playlists[id];\n        noChanges = false;\n      }\n    }\n  }); // remove mediaGroup labels and references that no longer exist in the newMain\n\n  removeOldMediaGroupLabels(update, newMain);\n  if (newMain.minimumUpdatePeriod !== oldMain.minimumUpdatePeriod) {\n    noChanges = false;\n  }\n  if (noChanges) {\n    return null;\n  }\n  return update;\n}; // SIDX should be equivalent if the URI and byteranges of the SIDX match.\n// If the SIDXs have maps, the two maps should match,\n// both `a` and `b` missing SIDXs is considered matching.\n// If `a` or `b` but not both have a map, they aren't matching.\n\nconst equivalentSidx = (a, b) => {\n  const neitherMap = Boolean(!a.map && !b.map);\n  const equivalentMap = neitherMap || Boolean(a.map && b.map && a.map.byterange.offset === b.map.byterange.offset && a.map.byterange.length === b.map.byterange.length);\n  return equivalentMap && a.uri === b.uri && a.byterange.offset === b.byterange.offset && a.byterange.length === b.byterange.length;\n}; // exported for testing\n\nconst compareSidxEntry = (playlists, oldSidxMapping) => {\n  const newSidxMapping = {};\n  for (const id in playlists) {\n    const playlist = playlists[id];\n    const currentSidxInfo = playlist.sidx;\n    if (currentSidxInfo) {\n      const key = generateSidxKey(currentSidxInfo);\n      if (!oldSidxMapping[key]) {\n        break;\n      }\n      const savedSidxInfo = oldSidxMapping[key].sidxInfo;\n      if (equivalentSidx(savedSidxInfo, currentSidxInfo)) {\n        newSidxMapping[key] = oldSidxMapping[key];\n      }\n    }\n  }\n  return newSidxMapping;\n};\n/**\n *  A function that filters out changed items as they need to be requested separately.\n *\n *  The method is exported for testing\n *\n *  @param {Object} main the parsed mpd XML returned via mpd-parser\n *  @param {Object} oldSidxMapping the SIDX to compare against\n */\n\nconst filterChangedSidxMappings = (main, oldSidxMapping) => {\n  const videoSidx = compareSidxEntry(main.playlists, oldSidxMapping);\n  let mediaGroupSidx = videoSidx;\n  forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey) => {\n    if (properties.playlists && properties.playlists.length) {\n      const playlists = properties.playlists;\n      mediaGroupSidx = merge(mediaGroupSidx, compareSidxEntry(playlists, oldSidxMapping));\n    }\n  });\n  return mediaGroupSidx;\n};\nclass DashPlaylistLoader extends EventTarget {\n  // DashPlaylistLoader must accept either a src url or a playlist because subsequent\n  // playlist loader setups from media groups will expect to be able to pass a playlist\n  // (since there aren't external URLs to media playlists with DASH)\n  constructor(srcUrlOrPlaylist, vhs, options = {}, mainPlaylistLoader) {\n    super();\n    this.mainPlaylistLoader_ = mainPlaylistLoader || this;\n    if (!mainPlaylistLoader) {\n      this.isMain_ = true;\n    }\n    const {\n      withCredentials = false\n    } = options;\n    this.vhs_ = vhs;\n    this.withCredentials = withCredentials;\n    if (!srcUrlOrPlaylist) {\n      throw new Error('A non-empty playlist URL or object is required');\n    } // event naming?\n\n    this.on('minimumUpdatePeriod', () => {\n      this.refreshXml_();\n    }); // live playlist staleness timeout\n\n    this.on('mediaupdatetimeout', () => {\n      this.refreshMedia_(this.media().id);\n    });\n    this.state = 'HAVE_NOTHING';\n    this.loadedPlaylists_ = {};\n    this.logger_ = logger('DashPlaylistLoader'); // initialize the loader state\n    // The mainPlaylistLoader will be created with a string\n\n    if (this.isMain_) {\n      this.mainPlaylistLoader_.srcUrl = srcUrlOrPlaylist; // TODO: reset sidxMapping between period changes\n      // once multi-period is refactored\n\n      this.mainPlaylistLoader_.sidxMapping_ = {};\n    } else {\n      this.childPlaylist_ = srcUrlOrPlaylist;\n    }\n  }\n  requestErrored_(err, request, startingState) {\n    // disposed\n    if (!this.request) {\n      return true;\n    } // pending request is cleared\n\n    this.request = null;\n    if (err) {\n      // use the provided error object or create one\n      // based on the request/response\n      this.error = typeof err === 'object' && !(err instanceof Error) ? err : {\n        status: request.status,\n        message: 'DASH request error at URL: ' + request.uri,\n        response: request.response,\n        // MEDIA_ERR_NETWORK\n        code: 2\n      };\n      if (startingState) {\n        this.state = startingState;\n      }\n      this.trigger('error');\n      return true;\n    }\n  }\n  /**\n   * Verify that the container of the sidx segment can be parsed\n   * and if it can, get and parse that segment.\n   */\n\n  addSidxSegments_(playlist, startingState, cb) {\n    const sidxKey = playlist.sidx && generateSidxKey(playlist.sidx); // playlist lacks sidx or sidx segments were added to this playlist already.\n\n    if (!playlist.sidx || !sidxKey || this.mainPlaylistLoader_.sidxMapping_[sidxKey]) {\n      // keep this function async\n      this.mediaRequest_ = window$1.setTimeout(() => cb(false), 0);\n      return;\n    } // resolve the segment URL relative to the playlist\n\n    const uri = resolveManifestRedirect(playlist.sidx.resolvedUri);\n    const fin = (err, request) => {\n      if (this.requestErrored_(err, request, startingState)) {\n        return;\n      }\n      const sidxMapping = this.mainPlaylistLoader_.sidxMapping_;\n      let sidx;\n      try {\n        sidx = parseSidx(toUint8(request.response).subarray(8));\n      } catch (e) {\n        // sidx parsing failed.\n        this.requestErrored_(e, request, startingState);\n        return;\n      }\n      sidxMapping[sidxKey] = {\n        sidxInfo: playlist.sidx,\n        sidx\n      };\n      addSidxSegmentsToPlaylist(playlist, sidx, playlist.sidx.resolvedUri);\n      return cb(true);\n    };\n    this.request = containerRequest(uri, this.vhs_.xhr, (err, request, container, bytes) => {\n      if (err) {\n        return fin(err, request);\n      }\n      if (!container || container !== 'mp4') {\n        return fin({\n          status: request.status,\n          message: `Unsupported ${container || 'unknown'} container type for sidx segment at URL: ${uri}`,\n          // response is just bytes in this case\n          // but we really don't want to return that.\n          response: '',\n          playlist,\n          internal: true,\n          playlistExclusionDuration: Infinity,\n          // MEDIA_ERR_NETWORK\n          code: 2\n        }, request);\n      } // if we already downloaded the sidx bytes in the container request, use them\n\n      const {\n        offset,\n        length\n      } = playlist.sidx.byterange;\n      if (bytes.length >= length + offset) {\n        return fin(err, {\n          response: bytes.subarray(offset, offset + length),\n          status: request.status,\n          uri: request.uri\n        });\n      } // otherwise request sidx bytes\n\n      this.request = this.vhs_.xhr({\n        uri,\n        responseType: 'arraybuffer',\n        headers: segmentXhrHeaders({\n          byterange: playlist.sidx.byterange\n        })\n      }, fin);\n    });\n  }\n  dispose() {\n    this.trigger('dispose');\n    this.stopRequest();\n    this.loadedPlaylists_ = {};\n    window$1.clearTimeout(this.minimumUpdatePeriodTimeout_);\n    window$1.clearTimeout(this.mediaRequest_);\n    window$1.clearTimeout(this.mediaUpdateTimeout);\n    this.mediaUpdateTimeout = null;\n    this.mediaRequest_ = null;\n    this.minimumUpdatePeriodTimeout_ = null;\n    if (this.mainPlaylistLoader_.createMupOnMedia_) {\n      this.off('loadedmetadata', this.mainPlaylistLoader_.createMupOnMedia_);\n      this.mainPlaylistLoader_.createMupOnMedia_ = null;\n    }\n    this.off();\n  }\n  hasPendingRequest() {\n    return this.request || this.mediaRequest_;\n  }\n  stopRequest() {\n    if (this.request) {\n      const oldRequest = this.request;\n      this.request = null;\n      oldRequest.onreadystatechange = null;\n      oldRequest.abort();\n    }\n  }\n  media(playlist) {\n    // getter\n    if (!playlist) {\n      return this.media_;\n    } // setter\n\n    if (this.state === 'HAVE_NOTHING') {\n      throw new Error('Cannot switch media playlist from ' + this.state);\n    }\n    const startingState = this.state; // find the playlist object if the target playlist has been specified by URI\n\n    if (typeof playlist === 'string') {\n      if (!this.mainPlaylistLoader_.main.playlists[playlist]) {\n        throw new Error('Unknown playlist URI: ' + playlist);\n      }\n      playlist = this.mainPlaylistLoader_.main.playlists[playlist];\n    }\n    const mediaChange = !this.media_ || playlist.id !== this.media_.id; // switch to previously loaded playlists immediately\n\n    if (mediaChange && this.loadedPlaylists_[playlist.id] && this.loadedPlaylists_[playlist.id].endList) {\n      this.state = 'HAVE_METADATA';\n      this.media_ = playlist; // trigger media change if the active media has been updated\n\n      if (mediaChange) {\n        this.trigger('mediachanging');\n        this.trigger('mediachange');\n      }\n      return;\n    } // switching to the active playlist is a no-op\n\n    if (!mediaChange) {\n      return;\n    } // switching from an already loaded playlist\n\n    if (this.media_) {\n      this.trigger('mediachanging');\n    }\n    this.addSidxSegments_(playlist, startingState, sidxChanged => {\n      // everything is ready just continue to haveMetadata\n      this.haveMetadata({\n        startingState,\n        playlist\n      });\n    });\n  }\n  haveMetadata({\n    startingState,\n    playlist\n  }) {\n    this.state = 'HAVE_METADATA';\n    this.loadedPlaylists_[playlist.id] = playlist;\n    this.mediaRequest_ = null; // This will trigger loadedplaylist\n\n    this.refreshMedia_(playlist.id); // fire loadedmetadata the first time a media playlist is loaded\n    // to resolve setup of media groups\n\n    if (startingState === 'HAVE_MAIN_MANIFEST') {\n      this.trigger('loadedmetadata');\n    } else {\n      // trigger media change if the active media has been updated\n      this.trigger('mediachange');\n    }\n  }\n  pause() {\n    if (this.mainPlaylistLoader_.createMupOnMedia_) {\n      this.off('loadedmetadata', this.mainPlaylistLoader_.createMupOnMedia_);\n      this.mainPlaylistLoader_.createMupOnMedia_ = null;\n    }\n    this.stopRequest();\n    window$1.clearTimeout(this.mediaUpdateTimeout);\n    this.mediaUpdateTimeout = null;\n    if (this.isMain_) {\n      window$1.clearTimeout(this.mainPlaylistLoader_.minimumUpdatePeriodTimeout_);\n      this.mainPlaylistLoader_.minimumUpdatePeriodTimeout_ = null;\n    }\n    if (this.state === 'HAVE_NOTHING') {\n      // If we pause the loader before any data has been retrieved, its as if we never\n      // started, so reset to an unstarted state.\n      this.started = false;\n    }\n  }\n  load(isFinalRendition) {\n    window$1.clearTimeout(this.mediaUpdateTimeout);\n    this.mediaUpdateTimeout = null;\n    const media = this.media();\n    if (isFinalRendition) {\n      const delay = media ? media.targetDuration / 2 * 1000 : 5 * 1000;\n      this.mediaUpdateTimeout = window$1.setTimeout(() => this.load(), delay);\n      return;\n    } // because the playlists are internal to the manifest, load should either load the\n    // main manifest, or do nothing but trigger an event\n\n    if (!this.started) {\n      this.start();\n      return;\n    }\n    if (media && !media.endList) {\n      // Check to see if this is the main loader and the MUP was cleared (this happens\n      // when the loader was paused). `media` should be set at this point since one is always\n      // set during `start()`.\n      if (this.isMain_ && !this.minimumUpdatePeriodTimeout_) {\n        // Trigger minimumUpdatePeriod to refresh the main manifest\n        this.trigger('minimumUpdatePeriod'); // Since there was no prior minimumUpdatePeriodTimeout it should be recreated\n\n        this.updateMinimumUpdatePeriodTimeout_();\n      }\n      this.trigger('mediaupdatetimeout');\n    } else {\n      this.trigger('loadedplaylist');\n    }\n  }\n  start() {\n    this.started = true; // We don't need to request the main manifest again\n    // Call this asynchronously to match the xhr request behavior below\n\n    if (!this.isMain_) {\n      this.mediaRequest_ = window$1.setTimeout(() => this.haveMain_(), 0);\n      return;\n    }\n    this.requestMain_((req, mainChanged) => {\n      this.haveMain_();\n      if (!this.hasPendingRequest() && !this.media_) {\n        this.media(this.mainPlaylistLoader_.main.playlists[0]);\n      }\n    });\n  }\n  requestMain_(cb) {\n    this.request = this.vhs_.xhr({\n      uri: this.mainPlaylistLoader_.srcUrl,\n      withCredentials: this.withCredentials\n    }, (error, req) => {\n      if (this.requestErrored_(error, req)) {\n        if (this.state === 'HAVE_NOTHING') {\n          this.started = false;\n        }\n        return;\n      }\n      const mainChanged = req.responseText !== this.mainPlaylistLoader_.mainXml_;\n      this.mainPlaylistLoader_.mainXml_ = req.responseText;\n      if (req.responseHeaders && req.responseHeaders.date) {\n        this.mainLoaded_ = Date.parse(req.responseHeaders.date);\n      } else {\n        this.mainLoaded_ = Date.now();\n      }\n      this.mainPlaylistLoader_.srcUrl = resolveManifestRedirect(this.mainPlaylistLoader_.srcUrl, req);\n      if (mainChanged) {\n        this.handleMain_();\n        this.syncClientServerClock_(() => {\n          return cb(req, mainChanged);\n        });\n        return;\n      }\n      return cb(req, mainChanged);\n    });\n  }\n  /**\n   * Parses the main xml for UTCTiming node to sync the client clock to the server\n   * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.\n   *\n   * @param {Function} done\n   *        Function to call when clock sync has completed\n   */\n\n  syncClientServerClock_(done) {\n    const utcTiming = parseUTCTiming(this.mainPlaylistLoader_.mainXml_); // No UTCTiming element found in the mpd. Use Date header from mpd request as the\n    // server clock\n\n    if (utcTiming === null) {\n      this.mainPlaylistLoader_.clientOffset_ = this.mainLoaded_ - Date.now();\n      return done();\n    }\n    if (utcTiming.method === 'DIRECT') {\n      this.mainPlaylistLoader_.clientOffset_ = utcTiming.value - Date.now();\n      return done();\n    }\n    this.request = this.vhs_.xhr({\n      uri: resolveUrl(this.mainPlaylistLoader_.srcUrl, utcTiming.value),\n      method: utcTiming.method,\n      withCredentials: this.withCredentials\n    }, (error, req) => {\n      // disposed\n      if (!this.request) {\n        return;\n      }\n      if (error) {\n        // sync request failed, fall back to using date header from mpd\n        // TODO: log warning\n        this.mainPlaylistLoader_.clientOffset_ = this.mainLoaded_ - Date.now();\n        return done();\n      }\n      let serverTime;\n      if (utcTiming.method === 'HEAD') {\n        if (!req.responseHeaders || !req.responseHeaders.date) {\n          // expected date header not preset, fall back to using date header from mpd\n          // TODO: log warning\n          serverTime = this.mainLoaded_;\n        } else {\n          serverTime = Date.parse(req.responseHeaders.date);\n        }\n      } else {\n        serverTime = Date.parse(req.responseText);\n      }\n      this.mainPlaylistLoader_.clientOffset_ = serverTime - Date.now();\n      done();\n    });\n  }\n  haveMain_() {\n    this.state = 'HAVE_MAIN_MANIFEST';\n    if (this.isMain_) {\n      // We have the main playlist at this point, so\n      // trigger this to allow PlaylistController\n      // to make an initial playlist selection\n      this.trigger('loadedplaylist');\n    } else if (!this.media_) {\n      // no media playlist was specifically selected so select\n      // the one the child playlist loader was created with\n      this.media(this.childPlaylist_);\n    }\n  }\n  handleMain_() {\n    // clear media request\n    this.mediaRequest_ = null;\n    const oldMain = this.mainPlaylistLoader_.main;\n    let newMain = parseMainXml({\n      mainXml: this.mainPlaylistLoader_.mainXml_,\n      srcUrl: this.mainPlaylistLoader_.srcUrl,\n      clientOffset: this.mainPlaylistLoader_.clientOffset_,\n      sidxMapping: this.mainPlaylistLoader_.sidxMapping_,\n      previousManifest: oldMain\n    }); // if we have an old main to compare the new main against\n\n    if (oldMain) {\n      newMain = updateMain(oldMain, newMain, this.mainPlaylistLoader_.sidxMapping_);\n    } // only update main if we have a new main\n\n    this.mainPlaylistLoader_.main = newMain ? newMain : oldMain;\n    const location = this.mainPlaylistLoader_.main.locations && this.mainPlaylistLoader_.main.locations[0];\n    if (location && location !== this.mainPlaylistLoader_.srcUrl) {\n      this.mainPlaylistLoader_.srcUrl = location;\n    }\n    if (!oldMain || newMain && newMain.minimumUpdatePeriod !== oldMain.minimumUpdatePeriod) {\n      this.updateMinimumUpdatePeriodTimeout_();\n    }\n    return Boolean(newMain);\n  }\n  updateMinimumUpdatePeriodTimeout_() {\n    const mpl = this.mainPlaylistLoader_; // cancel any pending creation of mup on media\n    // a new one will be added if needed.\n\n    if (mpl.createMupOnMedia_) {\n      mpl.off('loadedmetadata', mpl.createMupOnMedia_);\n      mpl.createMupOnMedia_ = null;\n    } // clear any pending timeouts\n\n    if (mpl.minimumUpdatePeriodTimeout_) {\n      window$1.clearTimeout(mpl.minimumUpdatePeriodTimeout_);\n      mpl.minimumUpdatePeriodTimeout_ = null;\n    }\n    let mup = mpl.main && mpl.main.minimumUpdatePeriod; // If the minimumUpdatePeriod has a value of 0, that indicates that the current\n    // MPD has no future validity, so a new one will need to be acquired when new\n    // media segments are to be made available. Thus, we use the target duration\n    // in this case\n\n    if (mup === 0) {\n      if (mpl.media()) {\n        mup = mpl.media().targetDuration * 1000;\n      } else {\n        mpl.createMupOnMedia_ = mpl.updateMinimumUpdatePeriodTimeout_;\n        mpl.one('loadedmetadata', mpl.createMupOnMedia_);\n      }\n    } // if minimumUpdatePeriod is invalid or <= zero, which\n    // can happen when a live video becomes VOD. skip timeout\n    // creation.\n\n    if (typeof mup !== 'number' || mup <= 0) {\n      if (mup < 0) {\n        this.logger_(`found invalid minimumUpdatePeriod of ${mup}, not setting a timeout`);\n      }\n      return;\n    }\n    this.createMUPTimeout_(mup);\n  }\n  createMUPTimeout_(mup) {\n    const mpl = this.mainPlaylistLoader_;\n    mpl.minimumUpdatePeriodTimeout_ = window$1.setTimeout(() => {\n      mpl.minimumUpdatePeriodTimeout_ = null;\n      mpl.trigger('minimumUpdatePeriod');\n      mpl.createMUPTimeout_(mup);\n    }, mup);\n  }\n  /**\n   * Sends request to refresh the main xml and updates the parsed main manifest\n   */\n\n  refreshXml_() {\n    this.requestMain_((req, mainChanged) => {\n      if (!mainChanged) {\n        return;\n      }\n      if (this.media_) {\n        this.media_ = this.mainPlaylistLoader_.main.playlists[this.media_.id];\n      } // This will filter out updated sidx info from the mapping\n\n      this.mainPlaylistLoader_.sidxMapping_ = filterChangedSidxMappings(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.sidxMapping_);\n      this.addSidxSegments_(this.media(), this.state, sidxChanged => {\n        // TODO: do we need to reload the current playlist?\n        this.refreshMedia_(this.media().id);\n      });\n    });\n  }\n  /**\n   * Refreshes the media playlist by re-parsing the main xml and updating playlist\n   * references. If this is an alternate loader, the updated parsed manifest is retrieved\n   * from the main loader.\n   */\n\n  refreshMedia_(mediaID) {\n    if (!mediaID) {\n      throw new Error('refreshMedia_ must take a media id');\n    } // for main we have to reparse the main xml\n    // to re-create segments based on current timing values\n    // which may change media. We only skip updating the main manifest\n    // if this is the first time this.media_ is being set.\n    // as main was just parsed in that case.\n\n    if (this.media_ && this.isMain_) {\n      this.handleMain_();\n    }\n    const playlists = this.mainPlaylistLoader_.main.playlists;\n    const mediaChanged = !this.media_ || this.media_ !== playlists[mediaID];\n    if (mediaChanged) {\n      this.media_ = playlists[mediaID];\n    } else {\n      this.trigger('playlistunchanged');\n    }\n    if (!this.mediaUpdateTimeout) {\n      const createMediaUpdateTimeout = () => {\n        if (this.media().endList) {\n          return;\n        }\n        this.mediaUpdateTimeout = window$1.setTimeout(() => {\n          this.trigger('mediaupdatetimeout');\n          createMediaUpdateTimeout();\n        }, refreshDelay(this.media(), Boolean(mediaChanged)));\n      };\n      createMediaUpdateTimeout();\n    }\n    this.trigger('loadedplaylist');\n  }\n}\nvar Config = {\n  GOAL_BUFFER_LENGTH: 30,\n  MAX_GOAL_BUFFER_LENGTH: 60,\n  BACK_BUFFER_LENGTH: 30,\n  GOAL_BUFFER_LENGTH_RATE: 1,\n  // 0.5 MB/s\n  INITIAL_BANDWIDTH: 4194304,\n  // A fudge factor to apply to advertised playlist bitrates to account for\n  // temporary flucations in client bandwidth\n  BANDWIDTH_VARIANCE: 1.2,\n  // How much of the buffer must be filled before we consider upswitching\n  BUFFER_LOW_WATER_LINE: 0,\n  MAX_BUFFER_LOW_WATER_LINE: 30,\n  // TODO: Remove this when experimentalBufferBasedABR is removed\n  EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE: 16,\n  BUFFER_LOW_WATER_LINE_RATE: 1,\n  // If the buffer is greater than the high water line, we won't switch down\n  BUFFER_HIGH_WATER_LINE: 30\n};\nconst stringToArrayBuffer = string => {\n  const view = new Uint8Array(new ArrayBuffer(string.length));\n  for (let i = 0; i < string.length; i++) {\n    view[i] = string.charCodeAt(i);\n  }\n  return view.buffer;\n};\n\n/* global Blob, BlobBuilder, Worker */\n// unify worker interface\nconst browserWorkerPolyFill = function (workerObj) {\n  // node only supports on/off\n  workerObj.on = workerObj.addEventListener;\n  workerObj.off = workerObj.removeEventListener;\n  return workerObj;\n};\nconst createObjectURL = function (str) {\n  try {\n    return URL.createObjectURL(new Blob([str], {\n      type: 'application/javascript'\n    }));\n  } catch (e) {\n    const blob = new BlobBuilder();\n    blob.append(str);\n    return URL.createObjectURL(blob.getBlob());\n  }\n};\nconst factory = function (code) {\n  return function () {\n    const objectUrl = createObjectURL(code);\n    const worker = browserWorkerPolyFill(new Worker(objectUrl));\n    worker.objURL = objectUrl;\n    const terminate = worker.terminate;\n    worker.on = worker.addEventListener;\n    worker.off = worker.removeEventListener;\n    worker.terminate = function () {\n      URL.revokeObjectURL(objectUrl);\n      return terminate.call(this);\n    };\n    return worker;\n  };\n};\nconst transform = function (code) {\n  return `var browserWorkerPolyFill = ${browserWorkerPolyFill.toString()};\\n` + 'browserWorkerPolyFill(self);\\n' + code;\n};\nconst getWorkerString = function (fn) {\n  return fn.toString().replace(/^function.+?{/, '').slice(0, -1);\n};\n\n/* rollup-plugin-worker-factory start for worker!/Users/ddashkevich/projects/http-streaming/src/transmuxer-worker.js */\nconst workerCode$1 = transform(getWorkerString(function () {\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * A lightweight readable stream implemention that handles event dispatching.\n   * Objects that inherit from streams should call init in their constructors.\n   */\n\n  var Stream$8 = function () {\n    this.init = function () {\n      var listeners = {};\n      /**\n       * Add a listener for a specified event type.\n       * @param type {string} the event name\n       * @param listener {function} the callback to be invoked when an event of\n       * the specified type occurs\n       */\n\n      this.on = function (type, listener) {\n        if (!listeners[type]) {\n          listeners[type] = [];\n        }\n        listeners[type] = listeners[type].concat(listener);\n      };\n      /**\n       * Remove a listener for a specified event type.\n       * @param type {string} the event name\n       * @param listener {function} a function previously registered for this\n       * type of event through `on`\n       */\n\n      this.off = function (type, listener) {\n        var index;\n        if (!listeners[type]) {\n          return false;\n        }\n        index = listeners[type].indexOf(listener);\n        listeners[type] = listeners[type].slice();\n        listeners[type].splice(index, 1);\n        return index > -1;\n      };\n      /**\n       * Trigger an event of the specified type on this stream. Any additional\n       * arguments to this function are passed as parameters to event listeners.\n       * @param type {string} the event name\n       */\n\n      this.trigger = function (type) {\n        var callbacks, i, length, args;\n        callbacks = listeners[type];\n        if (!callbacks) {\n          return;\n        } // Slicing the arguments on every invocation of this method\n        // can add a significant amount of overhead. Avoid the\n        // intermediate object creation for the common case of a\n        // single callback argument\n\n        if (arguments.length === 2) {\n          length = callbacks.length;\n          for (i = 0; i < length; ++i) {\n            callbacks[i].call(this, arguments[1]);\n          }\n        } else {\n          args = [];\n          i = arguments.length;\n          for (i = 1; i < arguments.length; ++i) {\n            args.push(arguments[i]);\n          }\n          length = callbacks.length;\n          for (i = 0; i < length; ++i) {\n            callbacks[i].apply(this, args);\n          }\n        }\n      };\n      /**\n       * Destroys the stream and cleans up.\n       */\n\n      this.dispose = function () {\n        listeners = {};\n      };\n    };\n  };\n  /**\n   * Forwards all `data` events on this stream to the destination stream. The\n   * destination stream should provide a method `push` to receive the data\n   * events as they arrive.\n   * @param destination {stream} the stream that will receive all `data` events\n   * @param autoFlush {boolean} if false, we will not call `flush` on the destination\n   *                            when the current stream emits a 'done' event\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n   */\n\n  Stream$8.prototype.pipe = function (destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n    this.on('done', function (flushSource) {\n      destination.flush(flushSource);\n    });\n    this.on('partialdone', function (flushSource) {\n      destination.partialFlush(flushSource);\n    });\n    this.on('endedtimeline', function (flushSource) {\n      destination.endTimeline(flushSource);\n    });\n    this.on('reset', function (flushSource) {\n      destination.reset(flushSource);\n    });\n    return destination;\n  }; // Default stream functions that are expected to be overridden to perform\n  // actual work. These are provided by the prototype as a sort of no-op\n  // implementation so that we don't have to check for their existence in the\n  // `pipe` function above.\n\n  Stream$8.prototype.push = function (data) {\n    this.trigger('data', data);\n  };\n  Stream$8.prototype.flush = function (flushSource) {\n    this.trigger('done', flushSource);\n  };\n  Stream$8.prototype.partialFlush = function (flushSource) {\n    this.trigger('partialdone', flushSource);\n  };\n  Stream$8.prototype.endTimeline = function (flushSource) {\n    this.trigger('endedtimeline', flushSource);\n  };\n  Stream$8.prototype.reset = function (flushSource) {\n    this.trigger('reset', flushSource);\n  };\n  var stream = Stream$8;\n  var MAX_UINT32$1 = Math.pow(2, 32);\n  var getUint64$3 = function (uint8) {\n    var dv = new DataView(uint8.buffer, uint8.byteOffset, uint8.byteLength);\n    var value;\n    if (dv.getBigUint64) {\n      value = dv.getBigUint64(0);\n      if (value < Number.MAX_SAFE_INTEGER) {\n        return Number(value);\n      }\n      return value;\n    }\n    return dv.getUint32(0) * MAX_UINT32$1 + dv.getUint32(4);\n  };\n  var numbers = {\n    getUint64: getUint64$3,\n    MAX_UINT32: MAX_UINT32$1\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Functions that generate fragmented MP4s suitable for use with Media\n   * Source Extensions.\n   */\n\n  var MAX_UINT32 = numbers.MAX_UINT32;\n  var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun$1, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS; // pre-calculate constants\n\n  (function () {\n    var i;\n    types = {\n      avc1: [],\n      // codingname\n      avcC: [],\n      btrt: [],\n      dinf: [],\n      dref: [],\n      esds: [],\n      ftyp: [],\n      hdlr: [],\n      mdat: [],\n      mdhd: [],\n      mdia: [],\n      mfhd: [],\n      minf: [],\n      moof: [],\n      moov: [],\n      mp4a: [],\n      // codingname\n      mvex: [],\n      mvhd: [],\n      pasp: [],\n      sdtp: [],\n      smhd: [],\n      stbl: [],\n      stco: [],\n      stsc: [],\n      stsd: [],\n      stsz: [],\n      stts: [],\n      styp: [],\n      tfdt: [],\n      tfhd: [],\n      traf: [],\n      trak: [],\n      trun: [],\n      trex: [],\n      tkhd: [],\n      vmhd: []\n    }; // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we\n    // don't throw an error\n\n    if (typeof Uint8Array === 'undefined') {\n      return;\n    }\n    for (i in types) {\n      if (types.hasOwnProperty(i)) {\n        types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];\n      }\n    }\n    MAJOR_BRAND = new Uint8Array(['i'.charCodeAt(0), 's'.charCodeAt(0), 'o'.charCodeAt(0), 'm'.charCodeAt(0)]);\n    AVC1_BRAND = new Uint8Array(['a'.charCodeAt(0), 'v'.charCodeAt(0), 'c'.charCodeAt(0), '1'.charCodeAt(0)]);\n    MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);\n    VIDEO_HDLR = new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00, 0x00, 0x00,\n    // pre_defined\n    0x76, 0x69, 0x64, 0x65,\n    // handler_type: 'vide'\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n    ]);\n\n    AUDIO_HDLR = new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00, 0x00, 0x00,\n    // pre_defined\n    0x73, 0x6f, 0x75, 0x6e,\n    // handler_type: 'soun'\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n    ]);\n\n    HDLR_TYPES = {\n      video: VIDEO_HDLR,\n      audio: AUDIO_HDLR\n    };\n    DREF = new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00, 0x00, 0x01,\n    // entry_count\n    0x00, 0x00, 0x00, 0x0c,\n    // entry_size\n    0x75, 0x72, 0x6c, 0x20,\n    // 'url' type\n    0x00,\n    // version 0\n    0x00, 0x00, 0x01 // entry_flags\n    ]);\n\n    SMHD = new Uint8Array([0x00,\n    // version\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00,\n    // balance, 0 means centered\n    0x00, 0x00 // reserved\n    ]);\n\n    STCO = new Uint8Array([0x00,\n    // version\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00, 0x00, 0x00 // entry_count\n    ]);\n\n    STSC = STCO;\n    STSZ = new Uint8Array([0x00,\n    // version\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00, 0x00, 0x00,\n    // sample_size\n    0x00, 0x00, 0x00, 0x00 // sample_count\n    ]);\n\n    STTS = STCO;\n    VMHD = new Uint8Array([0x00,\n    // version\n    0x00, 0x00, 0x01,\n    // flags\n    0x00, 0x00,\n    // graphicsmode\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor\n    ]);\n  })();\n\n  box = function (type) {\n    var payload = [],\n      size = 0,\n      i,\n      result,\n      view;\n    for (i = 1; i < arguments.length; i++) {\n      payload.push(arguments[i]);\n    }\n    i = payload.length; // calculate the total size we need to allocate\n\n    while (i--) {\n      size += payload[i].byteLength;\n    }\n    result = new Uint8Array(size + 8);\n    view = new DataView(result.buffer, result.byteOffset, result.byteLength);\n    view.setUint32(0, result.byteLength);\n    result.set(type, 4); // copy the payload into the result\n\n    for (i = 0, size = 8; i < payload.length; i++) {\n      result.set(payload[i], size);\n      size += payload[i].byteLength;\n    }\n    return result;\n  };\n  dinf = function () {\n    return box(types.dinf, box(types.dref, DREF));\n  };\n  esds = function (track) {\n    return box(types.esds, new Uint8Array([0x00,\n    // version\n    0x00, 0x00, 0x00,\n    // flags\n    // ES_Descriptor\n    0x03,\n    // tag, ES_DescrTag\n    0x19,\n    // length\n    0x00, 0x00,\n    // ES_ID\n    0x00,\n    // streamDependenceFlag, URL_flag, reserved, streamPriority\n    // DecoderConfigDescriptor\n    0x04,\n    // tag, DecoderConfigDescrTag\n    0x11,\n    // length\n    0x40,\n    // object type\n    0x15,\n    // streamType\n    0x00, 0x06, 0x00,\n    // bufferSizeDB\n    0x00, 0x00, 0xda, 0xc0,\n    // maxBitrate\n    0x00, 0x00, 0xda, 0xc0,\n    // avgBitrate\n    // DecoderSpecificInfo\n    0x05,\n    // tag, DecoderSpecificInfoTag\n    0x02,\n    // length\n    // ISO/IEC 14496-3, AudioSpecificConfig\n    // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35\n    track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1, track.samplingfrequencyindex << 7 | track.channelcount << 3, 0x06, 0x01, 0x02 // GASpecificConfig\n    ]));\n  };\n\n  ftyp = function () {\n    return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);\n  };\n  hdlr = function (type) {\n    return box(types.hdlr, HDLR_TYPES[type]);\n  };\n  mdat = function (data) {\n    return box(types.mdat, data);\n  };\n  mdhd = function (track) {\n    var result = new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00, 0x00, 0x02,\n    // creation_time\n    0x00, 0x00, 0x00, 0x03,\n    // modification_time\n    0x00, 0x01, 0x5f, 0x90,\n    // timescale, 90,000 \"ticks\" per second\n    track.duration >>> 24 & 0xFF, track.duration >>> 16 & 0xFF, track.duration >>> 8 & 0xFF, track.duration & 0xFF,\n    // duration\n    0x55, 0xc4,\n    // 'und' language (undetermined)\n    0x00, 0x00]); // Use the sample rate from the track metadata, when it is\n    // defined. The sample rate can be parsed out of an ADTS header, for\n    // instance.\n\n    if (track.samplerate) {\n      result[12] = track.samplerate >>> 24 & 0xFF;\n      result[13] = track.samplerate >>> 16 & 0xFF;\n      result[14] = track.samplerate >>> 8 & 0xFF;\n      result[15] = track.samplerate & 0xFF;\n    }\n    return box(types.mdhd, result);\n  };\n  mdia = function (track) {\n    return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));\n  };\n  mfhd = function (sequenceNumber) {\n    return box(types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00,\n    // flags\n    (sequenceNumber & 0xFF000000) >> 24, (sequenceNumber & 0xFF0000) >> 16, (sequenceNumber & 0xFF00) >> 8, sequenceNumber & 0xFF // sequence_number\n    ]));\n  };\n\n  minf = function (track) {\n    return box(types.minf, track.type === 'video' ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));\n  };\n  moof = function (sequenceNumber, tracks) {\n    var trackFragments = [],\n      i = tracks.length; // build traf boxes for each track fragment\n\n    while (i--) {\n      trackFragments[i] = traf(tracks[i]);\n    }\n    return box.apply(null, [types.moof, mfhd(sequenceNumber)].concat(trackFragments));\n  };\n  /**\n   * Returns a movie box.\n   * @param tracks {array} the tracks associated with this movie\n   * @see ISO/IEC 14496-12:2012(E), section 8.2.1\n   */\n\n  moov = function (tracks) {\n    var i = tracks.length,\n      boxes = [];\n    while (i--) {\n      boxes[i] = trak(tracks[i]);\n    }\n    return box.apply(null, [types.moov, mvhd(0xffffffff)].concat(boxes).concat(mvex(tracks)));\n  };\n  mvex = function (tracks) {\n    var i = tracks.length,\n      boxes = [];\n    while (i--) {\n      boxes[i] = trex(tracks[i]);\n    }\n    return box.apply(null, [types.mvex].concat(boxes));\n  };\n  mvhd = function (duration) {\n    var bytes = new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x00,\n    // flags\n    0x00, 0x00, 0x00, 0x01,\n    // creation_time\n    0x00, 0x00, 0x00, 0x02,\n    // modification_time\n    0x00, 0x01, 0x5f, 0x90,\n    // timescale, 90,000 \"ticks\" per second\n    (duration & 0xFF000000) >> 24, (duration & 0xFF0000) >> 16, (duration & 0xFF00) >> 8, duration & 0xFF,\n    // duration\n    0x00, 0x01, 0x00, 0x00,\n    // 1.0 rate\n    0x01, 0x00,\n    // 1.0 volume\n    0x00, 0x00,\n    // reserved\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,\n    // transformation: unity matrix\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // pre_defined\n    0xff, 0xff, 0xff, 0xff // next_track_ID\n    ]);\n\n    return box(types.mvhd, bytes);\n  };\n  sdtp = function (track) {\n    var samples = track.samples || [],\n      bytes = new Uint8Array(4 + samples.length),\n      flags,\n      i; // leave the full box header (4 bytes) all zero\n    // write the sample table\n\n    for (i = 0; i < samples.length; i++) {\n      flags = samples[i].flags;\n      bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\n    }\n    return box(types.sdtp, bytes);\n  };\n  stbl = function (track) {\n    return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));\n  };\n  (function () {\n    var videoSample, audioSample;\n    stsd = function (track) {\n      return box(types.stsd, new Uint8Array([0x00,\n      // version 0\n      0x00, 0x00, 0x00,\n      // flags\n      0x00, 0x00, 0x00, 0x01]), track.type === 'video' ? videoSample(track) : audioSample(track));\n    };\n    videoSample = function (track) {\n      var sps = track.sps || [],\n        pps = track.pps || [],\n        sequenceParameterSets = [],\n        pictureParameterSets = [],\n        i,\n        avc1Box; // assemble the SPSs\n\n      for (i = 0; i < sps.length; i++) {\n        sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);\n        sequenceParameterSets.push(sps[i].byteLength & 0xFF); // sequenceParameterSetLength\n\n        sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS\n      } // assemble the PPSs\n\n      for (i = 0; i < pps.length; i++) {\n        pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);\n        pictureParameterSets.push(pps[i].byteLength & 0xFF);\n        pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));\n      }\n      avc1Box = [types.avc1, new Uint8Array([0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x01,\n      // data_reference_index\n      0x00, 0x00,\n      // pre_defined\n      0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // pre_defined\n      (track.width & 0xff00) >> 8, track.width & 0xff,\n      // width\n      (track.height & 0xff00) >> 8, track.height & 0xff,\n      // height\n      0x00, 0x48, 0x00, 0x00,\n      // horizresolution\n      0x00, 0x48, 0x00, 0x00,\n      // vertresolution\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x01,\n      // frame_count\n      0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x6a, 0x73, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2d, 0x68, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // compressorname\n      0x00, 0x18,\n      // depth = 24\n      0x11, 0x11 // pre_defined = -1\n      ]), box(types.avcC, new Uint8Array([0x01,\n      // configurationVersion\n      track.profileIdc,\n      // AVCProfileIndication\n      track.profileCompatibility,\n      // profile_compatibility\n      track.levelIdc,\n      // AVCLevelIndication\n      0xff // lengthSizeMinusOne, hard-coded to 4 bytes\n      ].concat([sps.length],\n      // numOfSequenceParameterSets\n      sequenceParameterSets,\n      // \"SPS\"\n      [pps.length],\n      // numOfPictureParameterSets\n      pictureParameterSets // \"PPS\"\n      ))), box(types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80,\n      // bufferSizeDB\n      0x00, 0x2d, 0xc6, 0xc0,\n      // maxBitrate\n      0x00, 0x2d, 0xc6, 0xc0 // avgBitrate\n      ]))];\n\n      if (track.sarRatio) {\n        var hSpacing = track.sarRatio[0],\n          vSpacing = track.sarRatio[1];\n        avc1Box.push(box(types.pasp, new Uint8Array([(hSpacing & 0xFF000000) >> 24, (hSpacing & 0xFF0000) >> 16, (hSpacing & 0xFF00) >> 8, hSpacing & 0xFF, (vSpacing & 0xFF000000) >> 24, (vSpacing & 0xFF0000) >> 16, (vSpacing & 0xFF00) >> 8, vSpacing & 0xFF])));\n      }\n      return box.apply(null, avc1Box);\n    };\n    audioSample = function (track) {\n      return box(types.mp4a, new Uint8Array([\n      // SampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x01,\n      // data_reference_index\n      // AudioSampleEntry, ISO/IEC 14496-12\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      0x00, 0x00, 0x00, 0x00,\n      // reserved\n      (track.channelcount & 0xff00) >> 8, track.channelcount & 0xff,\n      // channelcount\n      (track.samplesize & 0xff00) >> 8, track.samplesize & 0xff,\n      // samplesize\n      0x00, 0x00,\n      // pre_defined\n      0x00, 0x00,\n      // reserved\n      (track.samplerate & 0xff00) >> 8, track.samplerate & 0xff, 0x00, 0x00 // samplerate, 16.16\n      // MP4AudioSampleEntry, ISO/IEC 14496-14\n      ]), esds(track));\n    };\n  })();\n  tkhd = function (track) {\n    var result = new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x07,\n    // flags\n    0x00, 0x00, 0x00, 0x00,\n    // creation_time\n    0x00, 0x00, 0x00, 0x00,\n    // modification_time\n    (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF,\n    // track_ID\n    0x00, 0x00, 0x00, 0x00,\n    // reserved\n    (track.duration & 0xFF000000) >> 24, (track.duration & 0xFF0000) >> 16, (track.duration & 0xFF00) >> 8, track.duration & 0xFF,\n    // duration\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // reserved\n    0x00, 0x00,\n    // layer\n    0x00, 0x00,\n    // alternate_group\n    0x01, 0x00,\n    // non-audio track volume\n    0x00, 0x00,\n    // reserved\n    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,\n    // transformation: unity matrix\n    (track.width & 0xFF00) >> 8, track.width & 0xFF, 0x00, 0x00,\n    // width\n    (track.height & 0xFF00) >> 8, track.height & 0xFF, 0x00, 0x00 // height\n    ]);\n\n    return box(types.tkhd, result);\n  };\n  /**\n   * Generate a track fragment (traf) box. A traf box collects metadata\n   * about tracks in a movie fragment (moof) box.\n   */\n\n  traf = function (track) {\n    var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;\n    trackFragmentHeader = box(types.tfhd, new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x3a,\n    // flags\n    (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF,\n    // track_ID\n    0x00, 0x00, 0x00, 0x01,\n    // sample_description_index\n    0x00, 0x00, 0x00, 0x00,\n    // default_sample_duration\n    0x00, 0x00, 0x00, 0x00,\n    // default_sample_size\n    0x00, 0x00, 0x00, 0x00 // default_sample_flags\n    ]));\n\n    upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / MAX_UINT32);\n    lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % MAX_UINT32);\n    trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([0x01,\n    // version 1\n    0x00, 0x00, 0x00,\n    // flags\n    // baseMediaDecodeTime\n    upperWordBaseMediaDecodeTime >>> 24 & 0xFF, upperWordBaseMediaDecodeTime >>> 16 & 0xFF, upperWordBaseMediaDecodeTime >>> 8 & 0xFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >>> 24 & 0xFF, lowerWordBaseMediaDecodeTime >>> 16 & 0xFF, lowerWordBaseMediaDecodeTime >>> 8 & 0xFF, lowerWordBaseMediaDecodeTime & 0xFF])); // the data offset specifies the number of bytes from the start of\n    // the containing moof to the first payload byte of the associated\n    // mdat\n\n    dataOffset = 32 +\n    // tfhd\n    20 +\n    // tfdt\n    8 +\n    // traf header\n    16 +\n    // mfhd\n    8 +\n    // moof header\n    8; // mdat header\n    // audio tracks require less metadata\n\n    if (track.type === 'audio') {\n      trackFragmentRun = trun$1(track, dataOffset);\n      return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);\n    } // video tracks should contain an independent and disposable samples\n    // box (sdtp)\n    // generate one and adjust offsets to match\n\n    sampleDependencyTable = sdtp(track);\n    trackFragmentRun = trun$1(track, sampleDependencyTable.length + dataOffset);\n    return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);\n  };\n  /**\n   * Generate a track box.\n   * @param track {object} a track definition\n   * @return {Uint8Array} the track box\n   */\n\n  trak = function (track) {\n    track.duration = track.duration || 0xffffffff;\n    return box(types.trak, tkhd(track), mdia(track));\n  };\n  trex = function (track) {\n    var result = new Uint8Array([0x00,\n    // version 0\n    0x00, 0x00, 0x00,\n    // flags\n    (track.id & 0xFF000000) >> 24, (track.id & 0xFF0000) >> 16, (track.id & 0xFF00) >> 8, track.id & 0xFF,\n    // track_ID\n    0x00, 0x00, 0x00, 0x01,\n    // default_sample_description_index\n    0x00, 0x00, 0x00, 0x00,\n    // default_sample_duration\n    0x00, 0x00, 0x00, 0x00,\n    // default_sample_size\n    0x00, 0x01, 0x00, 0x01 // default_sample_flags\n    ]); // the last two bytes of default_sample_flags is the sample\n    // degradation priority, a hint about the importance of this sample\n    // relative to others. Lower the degradation priority for all sample\n    // types other than video.\n\n    if (track.type !== 'video') {\n      result[result.length - 1] = 0x00;\n    }\n    return box(types.trex, result);\n  };\n  (function () {\n    var audioTrun, videoTrun, trunHeader; // This method assumes all samples are uniform. That is, if a\n    // duration is present for the first sample, it will be present for\n    // all subsequent samples.\n    // see ISO/IEC 14496-12:2012, Section 8.8.8.1\n\n    trunHeader = function (samples, offset) {\n      var durationPresent = 0,\n        sizePresent = 0,\n        flagsPresent = 0,\n        compositionTimeOffset = 0; // trun flag constants\n\n      if (samples.length) {\n        if (samples[0].duration !== undefined) {\n          durationPresent = 0x1;\n        }\n        if (samples[0].size !== undefined) {\n          sizePresent = 0x2;\n        }\n        if (samples[0].flags !== undefined) {\n          flagsPresent = 0x4;\n        }\n        if (samples[0].compositionTimeOffset !== undefined) {\n          compositionTimeOffset = 0x8;\n        }\n      }\n      return [0x00,\n      // version 0\n      0x00, durationPresent | sizePresent | flagsPresent | compositionTimeOffset, 0x01,\n      // flags\n      (samples.length & 0xFF000000) >>> 24, (samples.length & 0xFF0000) >>> 16, (samples.length & 0xFF00) >>> 8, samples.length & 0xFF,\n      // sample_count\n      (offset & 0xFF000000) >>> 24, (offset & 0xFF0000) >>> 16, (offset & 0xFF00) >>> 8, offset & 0xFF // data_offset\n      ];\n    };\n\n    videoTrun = function (track, offset) {\n      var bytesOffest, bytes, header, samples, sample, i;\n      samples = track.samples || [];\n      offset += 8 + 12 + 16 * samples.length;\n      header = trunHeader(samples, offset);\n      bytes = new Uint8Array(header.length + samples.length * 16);\n      bytes.set(header);\n      bytesOffest = header.length;\n      for (i = 0; i < samples.length; i++) {\n        sample = samples[i];\n        bytes[bytesOffest++] = (sample.duration & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.duration & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.duration & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.duration & 0xFF; // sample_duration\n\n        bytes[bytesOffest++] = (sample.size & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.size & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.size & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.size & 0xFF; // sample_size\n\n        bytes[bytesOffest++] = sample.flags.isLeading << 2 | sample.flags.dependsOn;\n        bytes[bytesOffest++] = sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample;\n        bytes[bytesOffest++] = sample.flags.degradationPriority & 0xF0 << 8;\n        bytes[bytesOffest++] = sample.flags.degradationPriority & 0x0F; // sample_flags\n\n        bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.compositionTimeOffset & 0xFF; // sample_composition_time_offset\n      }\n\n      return box(types.trun, bytes);\n    };\n    audioTrun = function (track, offset) {\n      var bytes, bytesOffest, header, samples, sample, i;\n      samples = track.samples || [];\n      offset += 8 + 12 + 8 * samples.length;\n      header = trunHeader(samples, offset);\n      bytes = new Uint8Array(header.length + samples.length * 8);\n      bytes.set(header);\n      bytesOffest = header.length;\n      for (i = 0; i < samples.length; i++) {\n        sample = samples[i];\n        bytes[bytesOffest++] = (sample.duration & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.duration & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.duration & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.duration & 0xFF; // sample_duration\n\n        bytes[bytesOffest++] = (sample.size & 0xFF000000) >>> 24;\n        bytes[bytesOffest++] = (sample.size & 0xFF0000) >>> 16;\n        bytes[bytesOffest++] = (sample.size & 0xFF00) >>> 8;\n        bytes[bytesOffest++] = sample.size & 0xFF; // sample_size\n      }\n\n      return box(types.trun, bytes);\n    };\n    trun$1 = function (track, offset) {\n      if (track.type === 'audio') {\n        return audioTrun(track, offset);\n      }\n      return videoTrun(track, offset);\n    };\n  })();\n  var mp4Generator = {\n    ftyp: ftyp,\n    mdat: mdat,\n    moof: moof,\n    moov: moov,\n    initSegment: function (tracks) {\n      var fileType = ftyp(),\n        movie = moov(tracks),\n        result;\n      result = new Uint8Array(fileType.byteLength + movie.byteLength);\n      result.set(fileType);\n      result.set(movie, fileType.byteLength);\n      return result;\n    }\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n  // composed of the nal units that make up that frame\n  // Also keep track of cummulative data about the frame from the nal units such\n  // as the frame duration, starting pts, etc.\n\n  var groupNalsIntoFrames = function (nalUnits) {\n    var i,\n      currentNal,\n      currentFrame = [],\n      frames = []; // TODO added for LHLS, make sure this is OK\n\n    frames.byteLength = 0;\n    frames.nalCount = 0;\n    frames.duration = 0;\n    currentFrame.byteLength = 0;\n    for (i = 0; i < nalUnits.length; i++) {\n      currentNal = nalUnits[i]; // Split on 'aud'-type nal units\n\n      if (currentNal.nalUnitType === 'access_unit_delimiter_rbsp') {\n        // Since the very first nal unit is expected to be an AUD\n        // only push to the frames array when currentFrame is not empty\n        if (currentFrame.length) {\n          currentFrame.duration = currentNal.dts - currentFrame.dts; // TODO added for LHLS, make sure this is OK\n\n          frames.byteLength += currentFrame.byteLength;\n          frames.nalCount += currentFrame.length;\n          frames.duration += currentFrame.duration;\n          frames.push(currentFrame);\n        }\n        currentFrame = [currentNal];\n        currentFrame.byteLength = currentNal.data.byteLength;\n        currentFrame.pts = currentNal.pts;\n        currentFrame.dts = currentNal.dts;\n      } else {\n        // Specifically flag key frames for ease of use later\n        if (currentNal.nalUnitType === 'slice_layer_without_partitioning_rbsp_idr') {\n          currentFrame.keyFrame = true;\n        }\n        currentFrame.duration = currentNal.dts - currentFrame.dts;\n        currentFrame.byteLength += currentNal.data.byteLength;\n        currentFrame.push(currentNal);\n      }\n    } // For the last frame, use the duration of the previous frame if we\n    // have nothing better to go on\n\n    if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) {\n      currentFrame.duration = frames[frames.length - 1].duration;\n    } // Push the final frame\n    // TODO added for LHLS, make sure this is OK\n\n    frames.byteLength += currentFrame.byteLength;\n    frames.nalCount += currentFrame.length;\n    frames.duration += currentFrame.duration;\n    frames.push(currentFrame);\n    return frames;\n  }; // Convert an array of frames into an array of Gop with each Gop being composed\n  // of the frames that make up that Gop\n  // Also keep track of cummulative data about the Gop from the frames such as the\n  // Gop duration, starting pts, etc.\n\n  var groupFramesIntoGops = function (frames) {\n    var i,\n      currentFrame,\n      currentGop = [],\n      gops = []; // We must pre-set some of the values on the Gop since we\n    // keep running totals of these values\n\n    currentGop.byteLength = 0;\n    currentGop.nalCount = 0;\n    currentGop.duration = 0;\n    currentGop.pts = frames[0].pts;\n    currentGop.dts = frames[0].dts; // store some metadata about all the Gops\n\n    gops.byteLength = 0;\n    gops.nalCount = 0;\n    gops.duration = 0;\n    gops.pts = frames[0].pts;\n    gops.dts = frames[0].dts;\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      if (currentFrame.keyFrame) {\n        // Since the very first frame is expected to be an keyframe\n        // only push to the gops array when currentGop is not empty\n        if (currentGop.length) {\n          gops.push(currentGop);\n          gops.byteLength += currentGop.byteLength;\n          gops.nalCount += currentGop.nalCount;\n          gops.duration += currentGop.duration;\n        }\n        currentGop = [currentFrame];\n        currentGop.nalCount = currentFrame.length;\n        currentGop.byteLength = currentFrame.byteLength;\n        currentGop.pts = currentFrame.pts;\n        currentGop.dts = currentFrame.dts;\n        currentGop.duration = currentFrame.duration;\n      } else {\n        currentGop.duration += currentFrame.duration;\n        currentGop.nalCount += currentFrame.length;\n        currentGop.byteLength += currentFrame.byteLength;\n        currentGop.push(currentFrame);\n      }\n    }\n    if (gops.length && currentGop.duration <= 0) {\n      currentGop.duration = gops[gops.length - 1].duration;\n    }\n    gops.byteLength += currentGop.byteLength;\n    gops.nalCount += currentGop.nalCount;\n    gops.duration += currentGop.duration; // push the final Gop\n\n    gops.push(currentGop);\n    return gops;\n  };\n  /*\n   * Search for the first keyframe in the GOPs and throw away all frames\n   * until that keyframe. Then extend the duration of the pulled keyframe\n   * and pull the PTS and DTS of the keyframe so that it covers the time\n   * range of the frames that were disposed.\n   *\n   * @param {Array} gops video GOPs\n   * @returns {Array} modified video GOPs\n   */\n\n  var extendFirstKeyFrame = function (gops) {\n    var currentGop;\n    if (!gops[0][0].keyFrame && gops.length > 1) {\n      // Remove the first GOP\n      currentGop = gops.shift();\n      gops.byteLength -= currentGop.byteLength;\n      gops.nalCount -= currentGop.nalCount; // Extend the first frame of what is now the\n      // first gop to cover the time period of the\n      // frames we just removed\n\n      gops[0][0].dts = currentGop.dts;\n      gops[0][0].pts = currentGop.pts;\n      gops[0][0].duration += currentGop.duration;\n    }\n    return gops;\n  };\n  /**\n   * Default sample object\n   * see ISO/IEC 14496-12:2012, section 8.6.4.3\n   */\n\n  var createDefaultSample = function () {\n    return {\n      size: 0,\n      flags: {\n        isLeading: 0,\n        dependsOn: 1,\n        isDependedOn: 0,\n        hasRedundancy: 0,\n        degradationPriority: 0,\n        isNonSyncSample: 1\n      }\n    };\n  };\n  /*\n   * Collates information from a video frame into an object for eventual\n   * entry into an MP4 sample table.\n   *\n   * @param {Object} frame the video frame\n   * @param {Number} dataOffset the byte offset to position the sample\n   * @return {Object} object containing sample table info for a frame\n   */\n\n  var sampleForFrame = function (frame, dataOffset) {\n    var sample = createDefaultSample();\n    sample.dataOffset = dataOffset;\n    sample.compositionTimeOffset = frame.pts - frame.dts;\n    sample.duration = frame.duration;\n    sample.size = 4 * frame.length; // Space for nal unit size\n\n    sample.size += frame.byteLength;\n    if (frame.keyFrame) {\n      sample.flags.dependsOn = 2;\n      sample.flags.isNonSyncSample = 0;\n    }\n    return sample;\n  }; // generate the track's sample table from an array of gops\n\n  var generateSampleTable$1 = function (gops, baseDataOffset) {\n    var h,\n      i,\n      sample,\n      currentGop,\n      currentFrame,\n      dataOffset = baseDataOffset || 0,\n      samples = [];\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h];\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i];\n        sample = sampleForFrame(currentFrame, dataOffset);\n        dataOffset += sample.size;\n        samples.push(sample);\n      }\n    }\n    return samples;\n  }; // generate the track's raw mdat data from an array of gops\n\n  var concatenateNalData = function (gops) {\n    var h,\n      i,\n      j,\n      currentGop,\n      currentFrame,\n      currentNal,\n      dataOffset = 0,\n      nalsByteLength = gops.byteLength,\n      numberOfNals = gops.nalCount,\n      totalByteLength = nalsByteLength + 4 * numberOfNals,\n      data = new Uint8Array(totalByteLength),\n      view = new DataView(data.buffer); // For each Gop..\n\n    for (h = 0; h < gops.length; h++) {\n      currentGop = gops[h]; // For each Frame..\n\n      for (i = 0; i < currentGop.length; i++) {\n        currentFrame = currentGop[i]; // For each NAL..\n\n        for (j = 0; j < currentFrame.length; j++) {\n          currentNal = currentFrame[j];\n          view.setUint32(dataOffset, currentNal.data.byteLength);\n          dataOffset += 4;\n          data.set(currentNal.data, dataOffset);\n          dataOffset += currentNal.data.byteLength;\n        }\n      }\n    }\n    return data;\n  }; // generate the track's sample table from a frame\n\n  var generateSampleTableForFrame = function (frame, baseDataOffset) {\n    var sample,\n      dataOffset = baseDataOffset || 0,\n      samples = [];\n    sample = sampleForFrame(frame, dataOffset);\n    samples.push(sample);\n    return samples;\n  }; // generate the track's raw mdat data from a frame\n\n  var concatenateNalDataForFrame = function (frame) {\n    var i,\n      currentNal,\n      dataOffset = 0,\n      nalsByteLength = frame.byteLength,\n      numberOfNals = frame.length,\n      totalByteLength = nalsByteLength + 4 * numberOfNals,\n      data = new Uint8Array(totalByteLength),\n      view = new DataView(data.buffer); // For each NAL..\n\n    for (i = 0; i < frame.length; i++) {\n      currentNal = frame[i];\n      view.setUint32(dataOffset, currentNal.data.byteLength);\n      dataOffset += 4;\n      data.set(currentNal.data, dataOffset);\n      dataOffset += currentNal.data.byteLength;\n    }\n    return data;\n  };\n  var frameUtils$1 = {\n    groupNalsIntoFrames: groupNalsIntoFrames,\n    groupFramesIntoGops: groupFramesIntoGops,\n    extendFirstKeyFrame: extendFirstKeyFrame,\n    generateSampleTable: generateSampleTable$1,\n    concatenateNalData: concatenateNalData,\n    generateSampleTableForFrame: generateSampleTableForFrame,\n    concatenateNalDataForFrame: concatenateNalDataForFrame\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var highPrefix = [33, 16, 5, 32, 164, 27];\n  var lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];\n  var zeroFill = function (count) {\n    var a = [];\n    while (count--) {\n      a.push(0);\n    }\n    return a;\n  };\n  var makeTable = function (metaTable) {\n    return Object.keys(metaTable).reduce(function (obj, key) {\n      obj[key] = new Uint8Array(metaTable[key].reduce(function (arr, part) {\n        return arr.concat(part);\n      }, []));\n      return obj;\n    }, {});\n  };\n  var silence;\n  var silence_1 = function () {\n    if (!silence) {\n      // Frames-of-silence to use for filling in missing AAC frames\n      var coneOfSilence = {\n        96000: [highPrefix, [227, 64], zeroFill(154), [56]],\n        88200: [highPrefix, [231], zeroFill(170), [56]],\n        64000: [highPrefix, [248, 192], zeroFill(240), [56]],\n        48000: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],\n        44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],\n        32000: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],\n        24000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],\n        16000: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],\n        12000: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],\n        11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],\n        8000: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]\n      };\n      silence = makeTable(coneOfSilence);\n    }\n    return silence;\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var ONE_SECOND_IN_TS$4 = 90000,\n    // 90kHz clock\n    secondsToVideoTs,\n    secondsToAudioTs,\n    videoTsToSeconds,\n    audioTsToSeconds,\n    audioTsToVideoTs,\n    videoTsToAudioTs,\n    metadataTsToSeconds;\n  secondsToVideoTs = function (seconds) {\n    return seconds * ONE_SECOND_IN_TS$4;\n  };\n  secondsToAudioTs = function (seconds, sampleRate) {\n    return seconds * sampleRate;\n  };\n  videoTsToSeconds = function (timestamp) {\n    return timestamp / ONE_SECOND_IN_TS$4;\n  };\n  audioTsToSeconds = function (timestamp, sampleRate) {\n    return timestamp / sampleRate;\n  };\n  audioTsToVideoTs = function (timestamp, sampleRate) {\n    return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));\n  };\n  videoTsToAudioTs = function (timestamp, sampleRate) {\n    return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);\n  };\n  /**\n   * Adjust ID3 tag or caption timing information by the timeline pts values\n   * (if keepOriginalTimestamps is false) and convert to seconds\n   */\n\n  metadataTsToSeconds = function (timestamp, timelineStartPts, keepOriginalTimestamps) {\n    return videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);\n  };\n  var clock$2 = {\n    ONE_SECOND_IN_TS: ONE_SECOND_IN_TS$4,\n    secondsToVideoTs: secondsToVideoTs,\n    secondsToAudioTs: secondsToAudioTs,\n    videoTsToSeconds: videoTsToSeconds,\n    audioTsToSeconds: audioTsToSeconds,\n    audioTsToVideoTs: audioTsToVideoTs,\n    videoTsToAudioTs: videoTsToAudioTs,\n    metadataTsToSeconds: metadataTsToSeconds\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var coneOfSilence = silence_1;\n  var clock$1 = clock$2;\n  /**\n   * Sum the `byteLength` properties of the data in each AAC frame\n   */\n\n  var sumFrameByteLengths = function (array) {\n    var i,\n      currentObj,\n      sum = 0; // sum the byteLength's all each nal unit in the frame\n\n    for (i = 0; i < array.length; i++) {\n      currentObj = array[i];\n      sum += currentObj.data.byteLength;\n    }\n    return sum;\n  }; // Possibly pad (prefix) the audio track with silence if appending this track\n  // would lead to the introduction of a gap in the audio buffer\n\n  var prefixWithSilence = function (track, frames, audioAppendStartTs, videoBaseMediaDecodeTime) {\n    var baseMediaDecodeTimeTs,\n      frameDuration = 0,\n      audioGapDuration = 0,\n      audioFillFrameCount = 0,\n      audioFillDuration = 0,\n      silentFrame,\n      i,\n      firstFrame;\n    if (!frames.length) {\n      return;\n    }\n    baseMediaDecodeTimeTs = clock$1.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate); // determine frame clock duration based on sample rate, round up to avoid overfills\n\n    frameDuration = Math.ceil(clock$1.ONE_SECOND_IN_TS / (track.samplerate / 1024));\n    if (audioAppendStartTs && videoBaseMediaDecodeTime) {\n      // insert the shortest possible amount (audio gap or audio to video gap)\n      audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime); // number of full frames in the audio gap\n\n      audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);\n      audioFillDuration = audioFillFrameCount * frameDuration;\n    } // don't attempt to fill gaps smaller than a single frame or larger\n    // than a half second\n\n    if (audioFillFrameCount < 1 || audioFillDuration > clock$1.ONE_SECOND_IN_TS / 2) {\n      return;\n    }\n    silentFrame = coneOfSilence()[track.samplerate];\n    if (!silentFrame) {\n      // we don't have a silent frame pregenerated for the sample rate, so use a frame\n      // from the content instead\n      silentFrame = frames[0].data;\n    }\n    for (i = 0; i < audioFillFrameCount; i++) {\n      firstFrame = frames[0];\n      frames.splice(0, 0, {\n        data: silentFrame,\n        dts: firstFrame.dts - frameDuration,\n        pts: firstFrame.pts - frameDuration\n      });\n    }\n    track.baseMediaDecodeTime -= Math.floor(clock$1.videoTsToAudioTs(audioFillDuration, track.samplerate));\n    return audioFillDuration;\n  }; // If the audio segment extends before the earliest allowed dts\n  // value, remove AAC frames until starts at or after the earliest\n  // allowed DTS so that we don't end up with a negative baseMedia-\n  // DecodeTime for the audio track\n\n  var trimAdtsFramesByEarliestDts = function (adtsFrames, track, earliestAllowedDts) {\n    if (track.minSegmentDts >= earliestAllowedDts) {\n      return adtsFrames;\n    } // We will need to recalculate the earliest segment Dts\n\n    track.minSegmentDts = Infinity;\n    return adtsFrames.filter(function (currentFrame) {\n      // If this is an allowed frame, keep it and record it's Dts\n      if (currentFrame.dts >= earliestAllowedDts) {\n        track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);\n        track.minSegmentPts = track.minSegmentDts;\n        return true;\n      } // Otherwise, discard it\n\n      return false;\n    });\n  }; // generate the track's raw mdat data from an array of frames\n\n  var generateSampleTable = function (frames) {\n    var i,\n      currentFrame,\n      samples = [];\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      samples.push({\n        size: currentFrame.data.byteLength,\n        duration: 1024 // For AAC audio, all samples contain 1024 samples\n      });\n    }\n\n    return samples;\n  }; // generate the track's sample table from an array of frames\n\n  var concatenateFrameData = function (frames) {\n    var i,\n      currentFrame,\n      dataOffset = 0,\n      data = new Uint8Array(sumFrameByteLengths(frames));\n    for (i = 0; i < frames.length; i++) {\n      currentFrame = frames[i];\n      data.set(currentFrame.data, dataOffset);\n      dataOffset += currentFrame.data.byteLength;\n    }\n    return data;\n  };\n  var audioFrameUtils$1 = {\n    prefixWithSilence: prefixWithSilence,\n    trimAdtsFramesByEarliestDts: trimAdtsFramesByEarliestDts,\n    generateSampleTable: generateSampleTable,\n    concatenateFrameData: concatenateFrameData\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var ONE_SECOND_IN_TS$3 = clock$2.ONE_SECOND_IN_TS;\n  /**\n   * Store information about the start and end of the track and the\n   * duration for each frame/sample we process in order to calculate\n   * the baseMediaDecodeTime\n   */\n\n  var collectDtsInfo = function (track, data) {\n    if (typeof data.pts === 'number') {\n      if (track.timelineStartInfo.pts === undefined) {\n        track.timelineStartInfo.pts = data.pts;\n      }\n      if (track.minSegmentPts === undefined) {\n        track.minSegmentPts = data.pts;\n      } else {\n        track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);\n      }\n      if (track.maxSegmentPts === undefined) {\n        track.maxSegmentPts = data.pts;\n      } else {\n        track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);\n      }\n    }\n    if (typeof data.dts === 'number') {\n      if (track.timelineStartInfo.dts === undefined) {\n        track.timelineStartInfo.dts = data.dts;\n      }\n      if (track.minSegmentDts === undefined) {\n        track.minSegmentDts = data.dts;\n      } else {\n        track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);\n      }\n      if (track.maxSegmentDts === undefined) {\n        track.maxSegmentDts = data.dts;\n      } else {\n        track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);\n      }\n    }\n  };\n  /**\n   * Clear values used to calculate the baseMediaDecodeTime between\n   * tracks\n   */\n\n  var clearDtsInfo = function (track) {\n    delete track.minSegmentDts;\n    delete track.maxSegmentDts;\n    delete track.minSegmentPts;\n    delete track.maxSegmentPts;\n  };\n  /**\n   * Calculate the track's baseMediaDecodeTime based on the earliest\n   * DTS the transmuxer has ever seen and the minimum DTS for the\n   * current track\n   * @param track {object} track metadata configuration\n   * @param keepOriginalTimestamps {boolean} If true, keep the timestamps\n   *        in the source; false to adjust the first segment to start at 0.\n   */\n\n  var calculateTrackBaseMediaDecodeTime = function (track, keepOriginalTimestamps) {\n    var baseMediaDecodeTime,\n      scale,\n      minSegmentDts = track.minSegmentDts; // Optionally adjust the time so the first segment starts at zero.\n\n    if (!keepOriginalTimestamps) {\n      minSegmentDts -= track.timelineStartInfo.dts;\n    } // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where\n    // we want the start of the first segment to be placed\n\n    baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime; // Add to that the distance this segment is from the very first\n\n    baseMediaDecodeTime += minSegmentDts; // baseMediaDecodeTime must not become negative\n\n    baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);\n    if (track.type === 'audio') {\n      // Audio has a different clock equal to the sampling_rate so we need to\n      // scale the PTS values into the clock rate of the track\n      scale = track.samplerate / ONE_SECOND_IN_TS$3;\n      baseMediaDecodeTime *= scale;\n      baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);\n    }\n    return baseMediaDecodeTime;\n  };\n  var trackDecodeInfo$1 = {\n    clearDtsInfo: clearDtsInfo,\n    calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,\n    collectDtsInfo: collectDtsInfo\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Reads in-band caption information from a video elementary\n   * stream. Captions must follow the CEA-708 standard for injection\n   * into an MPEG-2 transport streams.\n   * @see https://en.wikipedia.org/wiki/CEA-708\n   * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n   */\n  // payload type field to indicate how they are to be\n  // interpreted. CEAS-708 caption content is always transmitted with\n  // payload type 0x04.\n\n  var USER_DATA_REGISTERED_ITU_T_T35 = 4,\n    RBSP_TRAILING_BITS = 128;\n  /**\n    * Parse a supplemental enhancement information (SEI) NAL unit.\n    * Stops parsing once a message of type ITU T T35 has been found.\n    *\n    * @param bytes {Uint8Array} the bytes of a SEI NAL unit\n    * @return {object} the parsed SEI payload\n    * @see Rec. ITU-T H.264, 7.3.2.3.1\n    */\n\n  var parseSei = function (bytes) {\n    var i = 0,\n      result = {\n        payloadType: -1,\n        payloadSize: 0\n      },\n      payloadType = 0,\n      payloadSize = 0; // go through the sei_rbsp parsing each each individual sei_message\n\n    while (i < bytes.byteLength) {\n      // stop once we have hit the end of the sei_rbsp\n      if (bytes[i] === RBSP_TRAILING_BITS) {\n        break;\n      } // Parse payload type\n\n      while (bytes[i] === 0xFF) {\n        payloadType += 255;\n        i++;\n      }\n      payloadType += bytes[i++]; // Parse payload size\n\n      while (bytes[i] === 0xFF) {\n        payloadSize += 255;\n        i++;\n      }\n      payloadSize += bytes[i++]; // this sei_message is a 608/708 caption so save it and break\n      // there can only ever be one caption message in a frame's sei\n\n      if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {\n        var userIdentifier = String.fromCharCode(bytes[i + 3], bytes[i + 4], bytes[i + 5], bytes[i + 6]);\n        if (userIdentifier === 'GA94') {\n          result.payloadType = payloadType;\n          result.payloadSize = payloadSize;\n          result.payload = bytes.subarray(i, i + payloadSize);\n          break;\n        } else {\n          result.payload = void 0;\n        }\n      } // skip the payload and parse the next message\n\n      i += payloadSize;\n      payloadType = 0;\n      payloadSize = 0;\n    }\n    return result;\n  }; // see ANSI/SCTE 128-1 (2013), section 8.1\n\n  var parseUserData = function (sei) {\n    // itu_t_t35_contry_code must be 181 (United States) for\n    // captions\n    if (sei.payload[0] !== 181) {\n      return null;\n    } // itu_t_t35_provider_code should be 49 (ATSC) for captions\n\n    if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) {\n      return null;\n    } // the user_identifier should be \"GA94\" to indicate ATSC1 data\n\n    if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== 'GA94') {\n      return null;\n    } // finally, user_data_type_code should be 0x03 for caption data\n\n    if (sei.payload[7] !== 0x03) {\n      return null;\n    } // return the user_data_type_structure and strip the trailing\n    // marker bits\n\n    return sei.payload.subarray(8, sei.payload.length - 1);\n  }; // see CEA-708-D, section 4.4\n\n  var parseCaptionPackets = function (pts, userData) {\n    var results = [],\n      i,\n      count,\n      offset,\n      data; // if this is just filler, return immediately\n\n    if (!(userData[0] & 0x40)) {\n      return results;\n    } // parse out the cc_data_1 and cc_data_2 fields\n\n    count = userData[0] & 0x1f;\n    for (i = 0; i < count; i++) {\n      offset = i * 3;\n      data = {\n        type: userData[offset + 2] & 0x03,\n        pts: pts\n      }; // capture cc data when cc_valid is 1\n\n      if (userData[offset + 2] & 0x04) {\n        data.ccData = userData[offset + 3] << 8 | userData[offset + 4];\n        results.push(data);\n      }\n    }\n    return results;\n  };\n  var discardEmulationPreventionBytes$1 = function (data) {\n    var length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength,\n      newData; // Find all `Emulation Prevention Bytes`\n\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    } // If no Emulation Prevention Bytes were found just return the original\n    // array\n\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    } // Create a new array to hold the NAL unit data\n\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++; // Remove this position index\n\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n    return newData;\n  }; // exports\n\n  var captionPacketParser = {\n    parseSei: parseSei,\n    parseUserData: parseUserData,\n    parseCaptionPackets: parseCaptionPackets,\n    discardEmulationPreventionBytes: discardEmulationPreventionBytes$1,\n    USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Reads in-band caption information from a video elementary\n   * stream. Captions must follow the CEA-708 standard for injection\n   * into an MPEG-2 transport streams.\n   * @see https://en.wikipedia.org/wiki/CEA-708\n   * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf\n   */\n  // Link To Transport\n  // -----------------\n\n  var Stream$7 = stream;\n  var cea708Parser = captionPacketParser;\n  var CaptionStream$2 = function (options) {\n    options = options || {};\n    CaptionStream$2.prototype.init.call(this); // parse708captions flag, default to true\n\n    this.parse708captions_ = typeof options.parse708captions === 'boolean' ? options.parse708captions : true;\n    this.captionPackets_ = [];\n    this.ccStreams_ = [new Cea608Stream(0, 0),\n    // eslint-disable-line no-use-before-define\n    new Cea608Stream(0, 1),\n    // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 0),\n    // eslint-disable-line no-use-before-define\n    new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define\n    ];\n\n    if (this.parse708captions_) {\n      this.cc708Stream_ = new Cea708Stream({\n        captionServices: options.captionServices\n      }); // eslint-disable-line no-use-before-define\n    }\n\n    this.reset(); // forward data and done events from CCs to this CaptionStream\n\n    this.ccStreams_.forEach(function (cc) {\n      cc.on('data', this.trigger.bind(this, 'data'));\n      cc.on('partialdone', this.trigger.bind(this, 'partialdone'));\n      cc.on('done', this.trigger.bind(this, 'done'));\n    }, this);\n    if (this.parse708captions_) {\n      this.cc708Stream_.on('data', this.trigger.bind(this, 'data'));\n      this.cc708Stream_.on('partialdone', this.trigger.bind(this, 'partialdone'));\n      this.cc708Stream_.on('done', this.trigger.bind(this, 'done'));\n    }\n  };\n  CaptionStream$2.prototype = new Stream$7();\n  CaptionStream$2.prototype.push = function (event) {\n    var sei, userData, newCaptionPackets; // only examine SEI NALs\n\n    if (event.nalUnitType !== 'sei_rbsp') {\n      return;\n    } // parse the sei\n\n    sei = cea708Parser.parseSei(event.escapedRBSP); // no payload data, skip\n\n    if (!sei.payload) {\n      return;\n    } // ignore everything but user_data_registered_itu_t_t35\n\n    if (sei.payloadType !== cea708Parser.USER_DATA_REGISTERED_ITU_T_T35) {\n      return;\n    } // parse out the user data payload\n\n    userData = cea708Parser.parseUserData(sei); // ignore unrecognized userData\n\n    if (!userData) {\n      return;\n    } // Sometimes, the same segment # will be downloaded twice. To stop the\n    // caption data from being processed twice, we track the latest dts we've\n    // received and ignore everything with a dts before that. However, since\n    // data for a specific dts can be split across packets on either side of\n    // a segment boundary, we need to make sure we *don't* ignore the packets\n    // from the *next* segment that have dts === this.latestDts_. By constantly\n    // tracking the number of packets received with dts === this.latestDts_, we\n    // know how many should be ignored once we start receiving duplicates.\n\n    if (event.dts < this.latestDts_) {\n      // We've started getting older data, so set the flag.\n      this.ignoreNextEqualDts_ = true;\n      return;\n    } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {\n      this.numSameDts_--;\n      if (!this.numSameDts_) {\n        // We've received the last duplicate packet, time to start processing again\n        this.ignoreNextEqualDts_ = false;\n      }\n      return;\n    } // parse out CC data packets and save them for later\n\n    newCaptionPackets = cea708Parser.parseCaptionPackets(event.pts, userData);\n    this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);\n    if (this.latestDts_ !== event.dts) {\n      this.numSameDts_ = 0;\n    }\n    this.numSameDts_++;\n    this.latestDts_ = event.dts;\n  };\n  CaptionStream$2.prototype.flushCCStreams = function (flushType) {\n    this.ccStreams_.forEach(function (cc) {\n      return flushType === 'flush' ? cc.flush() : cc.partialFlush();\n    }, this);\n  };\n  CaptionStream$2.prototype.flushStream = function (flushType) {\n    // make sure we actually parsed captions before proceeding\n    if (!this.captionPackets_.length) {\n      this.flushCCStreams(flushType);\n      return;\n    } // In Chrome, the Array#sort function is not stable so add a\n    // presortIndex that we can use to ensure we get a stable-sort\n\n    this.captionPackets_.forEach(function (elem, idx) {\n      elem.presortIndex = idx;\n    }); // sort caption byte-pairs based on their PTS values\n\n    this.captionPackets_.sort(function (a, b) {\n      if (a.pts === b.pts) {\n        return a.presortIndex - b.presortIndex;\n      }\n      return a.pts - b.pts;\n    });\n    this.captionPackets_.forEach(function (packet) {\n      if (packet.type < 2) {\n        // Dispatch packet to the right Cea608Stream\n        this.dispatchCea608Packet(packet);\n      } else {\n        // Dispatch packet to the Cea708Stream\n        this.dispatchCea708Packet(packet);\n      }\n    }, this);\n    this.captionPackets_.length = 0;\n    this.flushCCStreams(flushType);\n  };\n  CaptionStream$2.prototype.flush = function () {\n    return this.flushStream('flush');\n  }; // Only called if handling partial data\n\n  CaptionStream$2.prototype.partialFlush = function () {\n    return this.flushStream('partialFlush');\n  };\n  CaptionStream$2.prototype.reset = function () {\n    this.latestDts_ = null;\n    this.ignoreNextEqualDts_ = false;\n    this.numSameDts_ = 0;\n    this.activeCea608Channel_ = [null, null];\n    this.ccStreams_.forEach(function (ccStream) {\n      ccStream.reset();\n    });\n  }; // From the CEA-608 spec:\n\n  /*\n   * When XDS sub-packets are interleaved with other services, the end of each sub-packet shall be followed\n   * by a control pair to change to a different service. When any of the control codes from 0x10 to 0x1F is\n   * used to begin a control code pair, it indicates the return to captioning or Text data. The control code pair\n   * and subsequent data should then be processed according to the FCC rules. It may be necessary for the\n   * line 21 data encoder to automatically insert a control code pair (i.e. RCL, RU2, RU3, RU4, RDC, or RTD)\n   * to switch to captioning or Text.\n  */\n  // With that in mind, we ignore any data between an XDS control code and a\n  // subsequent closed-captioning control code.\n\n  CaptionStream$2.prototype.dispatchCea608Packet = function (packet) {\n    // NOTE: packet.type is the CEA608 field\n    if (this.setsTextOrXDSActive(packet)) {\n      this.activeCea608Channel_[packet.type] = null;\n    } else if (this.setsChannel1Active(packet)) {\n      this.activeCea608Channel_[packet.type] = 0;\n    } else if (this.setsChannel2Active(packet)) {\n      this.activeCea608Channel_[packet.type] = 1;\n    }\n    if (this.activeCea608Channel_[packet.type] === null) {\n      // If we haven't received anything to set the active channel, or the\n      // packets are Text/XDS data, discard the data; we don't want jumbled\n      // captions\n      return;\n    }\n    this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);\n  };\n  CaptionStream$2.prototype.setsChannel1Active = function (packet) {\n    return (packet.ccData & 0x7800) === 0x1000;\n  };\n  CaptionStream$2.prototype.setsChannel2Active = function (packet) {\n    return (packet.ccData & 0x7800) === 0x1800;\n  };\n  CaptionStream$2.prototype.setsTextOrXDSActive = function (packet) {\n    return (packet.ccData & 0x7100) === 0x0100 || (packet.ccData & 0x78fe) === 0x102a || (packet.ccData & 0x78fe) === 0x182a;\n  };\n  CaptionStream$2.prototype.dispatchCea708Packet = function (packet) {\n    if (this.parse708captions_) {\n      this.cc708Stream_.push(packet);\n    }\n  }; // ----------------------\n  // Session to Application\n  // ----------------------\n  // This hash maps special and extended character codes to their\n  // proper Unicode equivalent. The first one-byte key is just a\n  // non-standard character code. The two-byte keys that follow are\n  // the extended CEA708 character codes, along with the preceding\n  // 0x10 extended character byte to distinguish these codes from\n  // non-extended character codes. Every CEA708 character code that\n  // is not in this object maps directly to a standard unicode\n  // character code.\n  // The transparent space and non-breaking transparent space are\n  // technically not fully supported since there is no code to\n  // make them transparent, so they have normal non-transparent\n  // stand-ins.\n  // The special closed caption (CC) character isn't a standard\n  // unicode character, so a fairly similar unicode character was\n  // chosen in it's place.\n\n  var CHARACTER_TRANSLATION_708 = {\n    0x7f: 0x266a,\n    // ♪\n    0x1020: 0x20,\n    // Transparent Space\n    0x1021: 0xa0,\n    // Nob-breaking Transparent Space\n    0x1025: 0x2026,\n    // …\n    0x102a: 0x0160,\n    // Š\n    0x102c: 0x0152,\n    // Œ\n    0x1030: 0x2588,\n    // █\n    0x1031: 0x2018,\n    // ‘\n    0x1032: 0x2019,\n    // ’\n    0x1033: 0x201c,\n    // “\n    0x1034: 0x201d,\n    // ”\n    0x1035: 0x2022,\n    // •\n    0x1039: 0x2122,\n    // ™\n    0x103a: 0x0161,\n    // š\n    0x103c: 0x0153,\n    // œ\n    0x103d: 0x2120,\n    // ℠\n    0x103f: 0x0178,\n    // Ÿ\n    0x1076: 0x215b,\n    // ⅛\n    0x1077: 0x215c,\n    // ⅜\n    0x1078: 0x215d,\n    // ⅝\n    0x1079: 0x215e,\n    // ⅞\n    0x107a: 0x23d0,\n    // ⏐\n    0x107b: 0x23a4,\n    // ⎤\n    0x107c: 0x23a3,\n    // ⎣\n    0x107d: 0x23af,\n    // ⎯\n    0x107e: 0x23a6,\n    // ⎦\n    0x107f: 0x23a1,\n    // ⎡\n    0x10a0: 0x3138 // ㄸ (CC char)\n  };\n\n  var get708CharFromCode = function (code) {\n    var newCode = CHARACTER_TRANSLATION_708[code] || code;\n    if (code & 0x1000 && code === newCode) {\n      // Invalid extended code\n      return '';\n    }\n    return String.fromCharCode(newCode);\n  };\n  var within708TextBlock = function (b) {\n    return 0x20 <= b && b <= 0x7f || 0xa0 <= b && b <= 0xff;\n  };\n  var Cea708Window = function (windowNum) {\n    this.windowNum = windowNum;\n    this.reset();\n  };\n  Cea708Window.prototype.reset = function () {\n    this.clearText();\n    this.pendingNewLine = false;\n    this.winAttr = {};\n    this.penAttr = {};\n    this.penLoc = {};\n    this.penColor = {}; // These default values are arbitrary,\n    // defineWindow will usually override them\n\n    this.visible = 0;\n    this.rowLock = 0;\n    this.columnLock = 0;\n    this.priority = 0;\n    this.relativePositioning = 0;\n    this.anchorVertical = 0;\n    this.anchorHorizontal = 0;\n    this.anchorPoint = 0;\n    this.rowCount = 1;\n    this.virtualRowCount = this.rowCount + 1;\n    this.columnCount = 41;\n    this.windowStyle = 0;\n    this.penStyle = 0;\n  };\n  Cea708Window.prototype.getText = function () {\n    return this.rows.join('\\n');\n  };\n  Cea708Window.prototype.clearText = function () {\n    this.rows = [''];\n    this.rowIdx = 0;\n  };\n  Cea708Window.prototype.newLine = function (pts) {\n    if (this.rows.length >= this.virtualRowCount && typeof this.beforeRowOverflow === 'function') {\n      this.beforeRowOverflow(pts);\n    }\n    if (this.rows.length > 0) {\n      this.rows.push('');\n      this.rowIdx++;\n    } // Show all virtual rows since there's no visible scrolling\n\n    while (this.rows.length > this.virtualRowCount) {\n      this.rows.shift();\n      this.rowIdx--;\n    }\n  };\n  Cea708Window.prototype.isEmpty = function () {\n    if (this.rows.length === 0) {\n      return true;\n    } else if (this.rows.length === 1) {\n      return this.rows[0] === '';\n    }\n    return false;\n  };\n  Cea708Window.prototype.addText = function (text) {\n    this.rows[this.rowIdx] += text;\n  };\n  Cea708Window.prototype.backspace = function () {\n    if (!this.isEmpty()) {\n      var row = this.rows[this.rowIdx];\n      this.rows[this.rowIdx] = row.substr(0, row.length - 1);\n    }\n  };\n  var Cea708Service = function (serviceNum, encoding, stream) {\n    this.serviceNum = serviceNum;\n    this.text = '';\n    this.currentWindow = new Cea708Window(-1);\n    this.windows = [];\n    this.stream = stream; // Try to setup a TextDecoder if an `encoding` value was provided\n\n    if (typeof encoding === 'string') {\n      this.createTextDecoder(encoding);\n    }\n  };\n  /**\n   * Initialize service windows\n   * Must be run before service use\n   *\n   * @param  {Integer}  pts               PTS value\n   * @param  {Function} beforeRowOverflow Function to execute before row overflow of a window\n   */\n\n  Cea708Service.prototype.init = function (pts, beforeRowOverflow) {\n    this.startPts = pts;\n    for (var win = 0; win < 8; win++) {\n      this.windows[win] = new Cea708Window(win);\n      if (typeof beforeRowOverflow === 'function') {\n        this.windows[win].beforeRowOverflow = beforeRowOverflow;\n      }\n    }\n  };\n  /**\n   * Set current window of service to be affected by commands\n   *\n   * @param  {Integer} windowNum Window number\n   */\n\n  Cea708Service.prototype.setCurrentWindow = function (windowNum) {\n    this.currentWindow = this.windows[windowNum];\n  };\n  /**\n   * Try to create a TextDecoder if it is natively supported\n   */\n\n  Cea708Service.prototype.createTextDecoder = function (encoding) {\n    if (typeof TextDecoder === 'undefined') {\n      this.stream.trigger('log', {\n        level: 'warn',\n        message: 'The `encoding` option is unsupported without TextDecoder support'\n      });\n    } else {\n      try {\n        this.textDecoder_ = new TextDecoder(encoding);\n      } catch (error) {\n        this.stream.trigger('log', {\n          level: 'warn',\n          message: 'TextDecoder could not be created with ' + encoding + ' encoding. ' + error\n        });\n      }\n    }\n  };\n  var Cea708Stream = function (options) {\n    options = options || {};\n    Cea708Stream.prototype.init.call(this);\n    var self = this;\n    var captionServices = options.captionServices || {};\n    var captionServiceEncodings = {};\n    var serviceProps; // Get service encodings from captionServices option block\n\n    Object.keys(captionServices).forEach(serviceName => {\n      serviceProps = captionServices[serviceName];\n      if (/^SERVICE/.test(serviceName)) {\n        captionServiceEncodings[serviceName] = serviceProps.encoding;\n      }\n    });\n    this.serviceEncodings = captionServiceEncodings;\n    this.current708Packet = null;\n    this.services = {};\n    this.push = function (packet) {\n      if (packet.type === 3) {\n        // 708 packet start\n        self.new708Packet();\n        self.add708Bytes(packet);\n      } else {\n        if (self.current708Packet === null) {\n          // This should only happen at the start of a file if there's no packet start.\n          self.new708Packet();\n        }\n        self.add708Bytes(packet);\n      }\n    };\n  };\n  Cea708Stream.prototype = new Stream$7();\n  /**\n   * Push current 708 packet, create new 708 packet.\n   */\n\n  Cea708Stream.prototype.new708Packet = function () {\n    if (this.current708Packet !== null) {\n      this.push708Packet();\n    }\n    this.current708Packet = {\n      data: [],\n      ptsVals: []\n    };\n  };\n  /**\n   * Add pts and both bytes from packet into current 708 packet.\n   */\n\n  Cea708Stream.prototype.add708Bytes = function (packet) {\n    var data = packet.ccData;\n    var byte0 = data >>> 8;\n    var byte1 = data & 0xff; // I would just keep a list of packets instead of bytes, but it isn't clear in the spec\n    // that service blocks will always line up with byte pairs.\n\n    this.current708Packet.ptsVals.push(packet.pts);\n    this.current708Packet.data.push(byte0);\n    this.current708Packet.data.push(byte1);\n  };\n  /**\n   * Parse completed 708 packet into service blocks and push each service block.\n   */\n\n  Cea708Stream.prototype.push708Packet = function () {\n    var packet708 = this.current708Packet;\n    var packetData = packet708.data;\n    var serviceNum = null;\n    var blockSize = null;\n    var i = 0;\n    var b = packetData[i++];\n    packet708.seq = b >> 6;\n    packet708.sizeCode = b & 0x3f; // 0b00111111;\n\n    for (; i < packetData.length; i++) {\n      b = packetData[i++];\n      serviceNum = b >> 5;\n      blockSize = b & 0x1f; // 0b00011111\n\n      if (serviceNum === 7 && blockSize > 0) {\n        // Extended service num\n        b = packetData[i++];\n        serviceNum = b;\n      }\n      this.pushServiceBlock(serviceNum, i, blockSize);\n      if (blockSize > 0) {\n        i += blockSize - 1;\n      }\n    }\n  };\n  /**\n   * Parse service block, execute commands, read text.\n   *\n   * Note: While many of these commands serve important purposes,\n   * many others just parse out the parameters or attributes, but\n   * nothing is done with them because this is not a full and complete\n   * implementation of the entire 708 spec.\n   *\n   * @param  {Integer} serviceNum Service number\n   * @param  {Integer} start      Start index of the 708 packet data\n   * @param  {Integer} size       Block size\n   */\n\n  Cea708Stream.prototype.pushServiceBlock = function (serviceNum, start, size) {\n    var b;\n    var i = start;\n    var packetData = this.current708Packet.data;\n    var service = this.services[serviceNum];\n    if (!service) {\n      service = this.initService(serviceNum, i);\n    }\n    for (; i < start + size && i < packetData.length; i++) {\n      b = packetData[i];\n      if (within708TextBlock(b)) {\n        i = this.handleText(i, service);\n      } else if (b === 0x18) {\n        i = this.multiByteCharacter(i, service);\n      } else if (b === 0x10) {\n        i = this.extendedCommands(i, service);\n      } else if (0x80 <= b && b <= 0x87) {\n        i = this.setCurrentWindow(i, service);\n      } else if (0x98 <= b && b <= 0x9f) {\n        i = this.defineWindow(i, service);\n      } else if (b === 0x88) {\n        i = this.clearWindows(i, service);\n      } else if (b === 0x8c) {\n        i = this.deleteWindows(i, service);\n      } else if (b === 0x89) {\n        i = this.displayWindows(i, service);\n      } else if (b === 0x8a) {\n        i = this.hideWindows(i, service);\n      } else if (b === 0x8b) {\n        i = this.toggleWindows(i, service);\n      } else if (b === 0x97) {\n        i = this.setWindowAttributes(i, service);\n      } else if (b === 0x90) {\n        i = this.setPenAttributes(i, service);\n      } else if (b === 0x91) {\n        i = this.setPenColor(i, service);\n      } else if (b === 0x92) {\n        i = this.setPenLocation(i, service);\n      } else if (b === 0x8f) {\n        service = this.reset(i, service);\n      } else if (b === 0x08) {\n        // BS: Backspace\n        service.currentWindow.backspace();\n      } else if (b === 0x0c) {\n        // FF: Form feed\n        service.currentWindow.clearText();\n      } else if (b === 0x0d) {\n        // CR: Carriage return\n        service.currentWindow.pendingNewLine = true;\n      } else if (b === 0x0e) {\n        // HCR: Horizontal carriage return\n        service.currentWindow.clearText();\n      } else if (b === 0x8d) {\n        // DLY: Delay, nothing to do\n        i++;\n      } else ;\n    }\n  };\n  /**\n   * Execute an extended command\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.extendedCommands = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    if (within708TextBlock(b)) {\n      i = this.handleText(i, service, {\n        isExtended: true\n      });\n    }\n    return i;\n  };\n  /**\n   * Get PTS value of a given byte index\n   *\n   * @param  {Integer} byteIndex  Index of the byte\n   * @return {Integer}            PTS\n   */\n\n  Cea708Stream.prototype.getPts = function (byteIndex) {\n    // There's 1 pts value per 2 bytes\n    return this.current708Packet.ptsVals[Math.floor(byteIndex / 2)];\n  };\n  /**\n   * Initializes a service\n   *\n   * @param  {Integer} serviceNum Service number\n   * @return {Service}            Initialized service object\n   */\n\n  Cea708Stream.prototype.initService = function (serviceNum, i) {\n    var serviceName = 'SERVICE' + serviceNum;\n    var self = this;\n    var serviceName;\n    var encoding;\n    if (serviceName in this.serviceEncodings) {\n      encoding = this.serviceEncodings[serviceName];\n    }\n    this.services[serviceNum] = new Cea708Service(serviceNum, encoding, self);\n    this.services[serviceNum].init(this.getPts(i), function (pts) {\n      self.flushDisplayed(pts, self.services[serviceNum]);\n    });\n    return this.services[serviceNum];\n  };\n  /**\n   * Execute text writing to current window\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.handleText = function (i, service, options) {\n    var isExtended = options && options.isExtended;\n    var isMultiByte = options && options.isMultiByte;\n    var packetData = this.current708Packet.data;\n    var extended = isExtended ? 0x1000 : 0x0000;\n    var currentByte = packetData[i];\n    var nextByte = packetData[i + 1];\n    var win = service.currentWindow;\n    var char;\n    var charCodeArray; // Use the TextDecoder if one was created for this service\n\n    if (service.textDecoder_ && !isExtended) {\n      if (isMultiByte) {\n        charCodeArray = [currentByte, nextByte];\n        i++;\n      } else {\n        charCodeArray = [currentByte];\n      }\n      char = service.textDecoder_.decode(new Uint8Array(charCodeArray));\n    } else {\n      char = get708CharFromCode(extended | currentByte);\n    }\n    if (win.pendingNewLine && !win.isEmpty()) {\n      win.newLine(this.getPts(i));\n    }\n    win.pendingNewLine = false;\n    win.addText(char);\n    return i;\n  };\n  /**\n   * Handle decoding of multibyte character\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.multiByteCharacter = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var firstByte = packetData[i + 1];\n    var secondByte = packetData[i + 2];\n    if (within708TextBlock(firstByte) && within708TextBlock(secondByte)) {\n      i = this.handleText(++i, service, {\n        isMultiByte: true\n      });\n    }\n    return i;\n  };\n  /**\n   * Parse and execute the CW# command.\n   *\n   * Set the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.setCurrentWindow = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var windowNum = b & 0x07;\n    service.setCurrentWindow(windowNum);\n    return i;\n  };\n  /**\n   * Parse and execute the DF# command.\n   *\n   * Define a window and set it as the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.defineWindow = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var windowNum = b & 0x07;\n    service.setCurrentWindow(windowNum);\n    var win = service.currentWindow;\n    b = packetData[++i];\n    win.visible = (b & 0x20) >> 5; // v\n\n    win.rowLock = (b & 0x10) >> 4; // rl\n\n    win.columnLock = (b & 0x08) >> 3; // cl\n\n    win.priority = b & 0x07; // p\n\n    b = packetData[++i];\n    win.relativePositioning = (b & 0x80) >> 7; // rp\n\n    win.anchorVertical = b & 0x7f; // av\n\n    b = packetData[++i];\n    win.anchorHorizontal = b; // ah\n\n    b = packetData[++i];\n    win.anchorPoint = (b & 0xf0) >> 4; // ap\n\n    win.rowCount = b & 0x0f; // rc\n\n    b = packetData[++i];\n    win.columnCount = b & 0x3f; // cc\n\n    b = packetData[++i];\n    win.windowStyle = (b & 0x38) >> 3; // ws\n\n    win.penStyle = b & 0x07; // ps\n    // The spec says there are (rowCount+1) \"virtual rows\"\n\n    win.virtualRowCount = win.rowCount + 1;\n    return i;\n  };\n  /**\n   * Parse and execute the SWA command.\n   *\n   * Set attributes of the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.setWindowAttributes = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var winAttr = service.currentWindow.winAttr;\n    b = packetData[++i];\n    winAttr.fillOpacity = (b & 0xc0) >> 6; // fo\n\n    winAttr.fillRed = (b & 0x30) >> 4; // fr\n\n    winAttr.fillGreen = (b & 0x0c) >> 2; // fg\n\n    winAttr.fillBlue = b & 0x03; // fb\n\n    b = packetData[++i];\n    winAttr.borderType = (b & 0xc0) >> 6; // bt\n\n    winAttr.borderRed = (b & 0x30) >> 4; // br\n\n    winAttr.borderGreen = (b & 0x0c) >> 2; // bg\n\n    winAttr.borderBlue = b & 0x03; // bb\n\n    b = packetData[++i];\n    winAttr.borderType += (b & 0x80) >> 5; // bt\n\n    winAttr.wordWrap = (b & 0x40) >> 6; // ww\n\n    winAttr.printDirection = (b & 0x30) >> 4; // pd\n\n    winAttr.scrollDirection = (b & 0x0c) >> 2; // sd\n\n    winAttr.justify = b & 0x03; // j\n\n    b = packetData[++i];\n    winAttr.effectSpeed = (b & 0xf0) >> 4; // es\n\n    winAttr.effectDirection = (b & 0x0c) >> 2; // ed\n\n    winAttr.displayEffect = b & 0x03; // de\n\n    return i;\n  };\n  /**\n   * Gather text from all displayed windows and push a caption to output.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   */\n\n  Cea708Stream.prototype.flushDisplayed = function (pts, service) {\n    var displayedText = []; // TODO: Positioning not supported, displaying multiple windows will not necessarily\n    // display text in the correct order, but sample files so far have not shown any issue.\n\n    for (var winId = 0; winId < 8; winId++) {\n      if (service.windows[winId].visible && !service.windows[winId].isEmpty()) {\n        displayedText.push(service.windows[winId].getText());\n      }\n    }\n    service.endPts = pts;\n    service.text = displayedText.join('\\n\\n');\n    this.pushCaption(service);\n    service.startPts = pts;\n  };\n  /**\n   * Push a caption to output if the caption contains text.\n   *\n   * @param  {Service} service  The service object to be affected\n   */\n\n  Cea708Stream.prototype.pushCaption = function (service) {\n    if (service.text !== '') {\n      this.trigger('data', {\n        startPts: service.startPts,\n        endPts: service.endPts,\n        text: service.text,\n        stream: 'cc708_' + service.serviceNum\n      });\n      service.text = '';\n      service.startPts = service.endPts;\n    }\n  };\n  /**\n   * Parse and execute the DSW command.\n   *\n   * Set visible property of windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.displayWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].visible = 1;\n      }\n    }\n    return i;\n  };\n  /**\n   * Parse and execute the HDW command.\n   *\n   * Set visible property of windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.hideWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].visible = 0;\n      }\n    }\n    return i;\n  };\n  /**\n   * Parse and execute the TGW command.\n   *\n   * Set visible property of windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.toggleWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].visible ^= 1;\n      }\n    }\n    return i;\n  };\n  /**\n   * Parse and execute the CLW command.\n   *\n   * Clear text of windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.clearWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].clearText();\n      }\n    }\n    return i;\n  };\n  /**\n   * Parse and execute the DLW command.\n   *\n   * Re-initialize windows based on the parsed bitmask.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.deleteWindows = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[++i];\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n    for (var winId = 0; winId < 8; winId++) {\n      if (b & 0x01 << winId) {\n        service.windows[winId].reset();\n      }\n    }\n    return i;\n  };\n  /**\n   * Parse and execute the SPA command.\n   *\n   * Set pen attributes of the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.setPenAttributes = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var penAttr = service.currentWindow.penAttr;\n    b = packetData[++i];\n    penAttr.textTag = (b & 0xf0) >> 4; // tt\n\n    penAttr.offset = (b & 0x0c) >> 2; // o\n\n    penAttr.penSize = b & 0x03; // s\n\n    b = packetData[++i];\n    penAttr.italics = (b & 0x80) >> 7; // i\n\n    penAttr.underline = (b & 0x40) >> 6; // u\n\n    penAttr.edgeType = (b & 0x38) >> 3; // et\n\n    penAttr.fontStyle = b & 0x07; // fs\n\n    return i;\n  };\n  /**\n   * Parse and execute the SPC command.\n   *\n   * Set pen color of the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.setPenColor = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var penColor = service.currentWindow.penColor;\n    b = packetData[++i];\n    penColor.fgOpacity = (b & 0xc0) >> 6; // fo\n\n    penColor.fgRed = (b & 0x30) >> 4; // fr\n\n    penColor.fgGreen = (b & 0x0c) >> 2; // fg\n\n    penColor.fgBlue = b & 0x03; // fb\n\n    b = packetData[++i];\n    penColor.bgOpacity = (b & 0xc0) >> 6; // bo\n\n    penColor.bgRed = (b & 0x30) >> 4; // br\n\n    penColor.bgGreen = (b & 0x0c) >> 2; // bg\n\n    penColor.bgBlue = b & 0x03; // bb\n\n    b = packetData[++i];\n    penColor.edgeRed = (b & 0x30) >> 4; // er\n\n    penColor.edgeGreen = (b & 0x0c) >> 2; // eg\n\n    penColor.edgeBlue = b & 0x03; // eb\n\n    return i;\n  };\n  /**\n   * Parse and execute the SPL command.\n   *\n   * Set pen location of the current window.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Integer}          New index after parsing\n   */\n\n  Cea708Stream.prototype.setPenLocation = function (i, service) {\n    var packetData = this.current708Packet.data;\n    var b = packetData[i];\n    var penLoc = service.currentWindow.penLoc; // Positioning isn't really supported at the moment, so this essentially just inserts a linebreak\n\n    service.currentWindow.pendingNewLine = true;\n    b = packetData[++i];\n    penLoc.row = b & 0x0f; // r\n\n    b = packetData[++i];\n    penLoc.column = b & 0x3f; // c\n\n    return i;\n  };\n  /**\n   * Execute the RST command.\n   *\n   * Reset service to a clean slate. Re-initialize.\n   *\n   * @param  {Integer} i        Current index in the 708 packet\n   * @param  {Service} service  The service object to be affected\n   * @return {Service}          Re-initialized service\n   */\n\n  Cea708Stream.prototype.reset = function (i, service) {\n    var pts = this.getPts(i);\n    this.flushDisplayed(pts, service);\n    return this.initService(service.serviceNum, i);\n  }; // This hash maps non-ASCII, special, and extended character codes to their\n  // proper Unicode equivalent. The first keys that are only a single byte\n  // are the non-standard ASCII characters, which simply map the CEA608 byte\n  // to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608\n  // character codes, but have their MSB bitmasked with 0x03 so that a lookup\n  // can be performed regardless of the field and data channel on which the\n  // character code was received.\n\n  var CHARACTER_TRANSLATION = {\n    0x2a: 0xe1,\n    // á\n    0x5c: 0xe9,\n    // é\n    0x5e: 0xed,\n    // í\n    0x5f: 0xf3,\n    // ó\n    0x60: 0xfa,\n    // ú\n    0x7b: 0xe7,\n    // ç\n    0x7c: 0xf7,\n    // ÷\n    0x7d: 0xd1,\n    // Ñ\n    0x7e: 0xf1,\n    // ñ\n    0x7f: 0x2588,\n    // █\n    0x0130: 0xae,\n    // ®\n    0x0131: 0xb0,\n    // °\n    0x0132: 0xbd,\n    // ½\n    0x0133: 0xbf,\n    // ¿\n    0x0134: 0x2122,\n    // ™\n    0x0135: 0xa2,\n    // ¢\n    0x0136: 0xa3,\n    // £\n    0x0137: 0x266a,\n    // ♪\n    0x0138: 0xe0,\n    // à\n    0x0139: 0xa0,\n    //\n    0x013a: 0xe8,\n    // è\n    0x013b: 0xe2,\n    // â\n    0x013c: 0xea,\n    // ê\n    0x013d: 0xee,\n    // î\n    0x013e: 0xf4,\n    // ô\n    0x013f: 0xfb,\n    // û\n    0x0220: 0xc1,\n    // Á\n    0x0221: 0xc9,\n    // É\n    0x0222: 0xd3,\n    // Ó\n    0x0223: 0xda,\n    // Ú\n    0x0224: 0xdc,\n    // Ü\n    0x0225: 0xfc,\n    // ü\n    0x0226: 0x2018,\n    // ‘\n    0x0227: 0xa1,\n    // ¡\n    0x0228: 0x2a,\n    // *\n    0x0229: 0x27,\n    // '\n    0x022a: 0x2014,\n    // —\n    0x022b: 0xa9,\n    // ©\n    0x022c: 0x2120,\n    // ℠\n    0x022d: 0x2022,\n    // •\n    0x022e: 0x201c,\n    // “\n    0x022f: 0x201d,\n    // ”\n    0x0230: 0xc0,\n    // À\n    0x0231: 0xc2,\n    // Â\n    0x0232: 0xc7,\n    // Ç\n    0x0233: 0xc8,\n    // È\n    0x0234: 0xca,\n    // Ê\n    0x0235: 0xcb,\n    // Ë\n    0x0236: 0xeb,\n    // ë\n    0x0237: 0xce,\n    // Î\n    0x0238: 0xcf,\n    // Ï\n    0x0239: 0xef,\n    // ï\n    0x023a: 0xd4,\n    // Ô\n    0x023b: 0xd9,\n    // Ù\n    0x023c: 0xf9,\n    // ù\n    0x023d: 0xdb,\n    // Û\n    0x023e: 0xab,\n    // «\n    0x023f: 0xbb,\n    // »\n    0x0320: 0xc3,\n    // Ã\n    0x0321: 0xe3,\n    // ã\n    0x0322: 0xcd,\n    // Í\n    0x0323: 0xcc,\n    // Ì\n    0x0324: 0xec,\n    // ì\n    0x0325: 0xd2,\n    // Ò\n    0x0326: 0xf2,\n    // ò\n    0x0327: 0xd5,\n    // Õ\n    0x0328: 0xf5,\n    // õ\n    0x0329: 0x7b,\n    // {\n    0x032a: 0x7d,\n    // }\n    0x032b: 0x5c,\n    // \\\n    0x032c: 0x5e,\n    // ^\n    0x032d: 0x5f,\n    // _\n    0x032e: 0x7c,\n    // |\n    0x032f: 0x7e,\n    // ~\n    0x0330: 0xc4,\n    // Ä\n    0x0331: 0xe4,\n    // ä\n    0x0332: 0xd6,\n    // Ö\n    0x0333: 0xf6,\n    // ö\n    0x0334: 0xdf,\n    // ß\n    0x0335: 0xa5,\n    // ¥\n    0x0336: 0xa4,\n    // ¤\n    0x0337: 0x2502,\n    // │\n    0x0338: 0xc5,\n    // Å\n    0x0339: 0xe5,\n    // å\n    0x033a: 0xd8,\n    // Ø\n    0x033b: 0xf8,\n    // ø\n    0x033c: 0x250c,\n    // ┌\n    0x033d: 0x2510,\n    // ┐\n    0x033e: 0x2514,\n    // └\n    0x033f: 0x2518 // ┘\n  };\n\n  var getCharFromCode = function (code) {\n    if (code === null) {\n      return '';\n    }\n    code = CHARACTER_TRANSLATION[code] || code;\n    return String.fromCharCode(code);\n  }; // the index of the last row in a CEA-608 display buffer\n\n  var BOTTOM_ROW = 14; // This array is used for mapping PACs -> row #, since there's no way of\n  // getting it through bit logic.\n\n  var ROWS = [0x1100, 0x1120, 0x1200, 0x1220, 0x1500, 0x1520, 0x1600, 0x1620, 0x1700, 0x1720, 0x1000, 0x1300, 0x1320, 0x1400, 0x1420]; // CEA-608 captions are rendered onto a 34x15 matrix of character\n  // cells. The \"bottom\" row is the last element in the outer array.\n\n  var createDisplayBuffer = function () {\n    var result = [],\n      i = BOTTOM_ROW + 1;\n    while (i--) {\n      result.push('');\n    }\n    return result;\n  };\n  var Cea608Stream = function (field, dataChannel) {\n    Cea608Stream.prototype.init.call(this);\n    this.field_ = field || 0;\n    this.dataChannel_ = dataChannel || 0;\n    this.name_ = 'CC' + ((this.field_ << 1 | this.dataChannel_) + 1);\n    this.setConstants();\n    this.reset();\n    this.push = function (packet) {\n      var data, swap, char0, char1, text; // remove the parity bits\n\n      data = packet.ccData & 0x7f7f; // ignore duplicate control codes; the spec demands they're sent twice\n\n      if (data === this.lastControlCode_) {\n        this.lastControlCode_ = null;\n        return;\n      } // Store control codes\n\n      if ((data & 0xf000) === 0x1000) {\n        this.lastControlCode_ = data;\n      } else if (data !== this.PADDING_) {\n        this.lastControlCode_ = null;\n      }\n      char0 = data >>> 8;\n      char1 = data & 0xff;\n      if (data === this.PADDING_) {\n        return;\n      } else if (data === this.RESUME_CAPTION_LOADING_) {\n        this.mode_ = 'popOn';\n      } else if (data === this.END_OF_CAPTION_) {\n        // If an EOC is received while in paint-on mode, the displayed caption\n        // text should be swapped to non-displayed memory as if it was a pop-on\n        // caption. Because of that, we should explicitly switch back to pop-on\n        // mode\n        this.mode_ = 'popOn';\n        this.clearFormatting(packet.pts); // if a caption was being displayed, it's gone now\n\n        this.flushDisplayed(packet.pts); // flip memory\n\n        swap = this.displayed_;\n        this.displayed_ = this.nonDisplayed_;\n        this.nonDisplayed_ = swap; // start measuring the time to display the caption\n\n        this.startPts_ = packet.pts;\n      } else if (data === this.ROLL_UP_2_ROWS_) {\n        this.rollUpRows_ = 2;\n        this.setRollUp(packet.pts);\n      } else if (data === this.ROLL_UP_3_ROWS_) {\n        this.rollUpRows_ = 3;\n        this.setRollUp(packet.pts);\n      } else if (data === this.ROLL_UP_4_ROWS_) {\n        this.rollUpRows_ = 4;\n        this.setRollUp(packet.pts);\n      } else if (data === this.CARRIAGE_RETURN_) {\n        this.clearFormatting(packet.pts);\n        this.flushDisplayed(packet.pts);\n        this.shiftRowsUp_();\n        this.startPts_ = packet.pts;\n      } else if (data === this.BACKSPACE_) {\n        if (this.mode_ === 'popOn') {\n          this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n        } else {\n          this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n        }\n      } else if (data === this.ERASE_DISPLAYED_MEMORY_) {\n        this.flushDisplayed(packet.pts);\n        this.displayed_ = createDisplayBuffer();\n      } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {\n        this.nonDisplayed_ = createDisplayBuffer();\n      } else if (data === this.RESUME_DIRECT_CAPTIONING_) {\n        if (this.mode_ !== 'paintOn') {\n          // NOTE: This should be removed when proper caption positioning is\n          // implemented\n          this.flushDisplayed(packet.pts);\n          this.displayed_ = createDisplayBuffer();\n        }\n        this.mode_ = 'paintOn';\n        this.startPts_ = packet.pts; // Append special characters to caption text\n      } else if (this.isSpecialCharacter(char0, char1)) {\n        // Bitmask char0 so that we can apply character transformations\n        // regardless of field and data channel.\n        // Then byte-shift to the left and OR with char1 so we can pass the\n        // entire character code to `getCharFromCode`.\n        char0 = (char0 & 0x03) << 8;\n        text = getCharFromCode(char0 | char1);\n        this[this.mode_](packet.pts, text);\n        this.column_++; // Append extended characters to caption text\n      } else if (this.isExtCharacter(char0, char1)) {\n        // Extended characters always follow their \"non-extended\" equivalents.\n        // IE if a \"è\" is desired, you'll always receive \"eè\"; non-compliant\n        // decoders are supposed to drop the \"è\", while compliant decoders\n        // backspace the \"e\" and insert \"è\".\n        // Delete the previous character\n        if (this.mode_ === 'popOn') {\n          this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);\n        } else {\n          this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);\n        } // Bitmask char0 so that we can apply character transformations\n        // regardless of field and data channel.\n        // Then byte-shift to the left and OR with char1 so we can pass the\n        // entire character code to `getCharFromCode`.\n\n        char0 = (char0 & 0x03) << 8;\n        text = getCharFromCode(char0 | char1);\n        this[this.mode_](packet.pts, text);\n        this.column_++; // Process mid-row codes\n      } else if (this.isMidRowCode(char0, char1)) {\n        // Attributes are not additive, so clear all formatting\n        this.clearFormatting(packet.pts); // According to the standard, mid-row codes\n        // should be replaced with spaces, so add one now\n\n        this[this.mode_](packet.pts, ' ');\n        this.column_++;\n        if ((char1 & 0xe) === 0xe) {\n          this.addFormatting(packet.pts, ['i']);\n        }\n        if ((char1 & 0x1) === 0x1) {\n          this.addFormatting(packet.pts, ['u']);\n        } // Detect offset control codes and adjust cursor\n      } else if (this.isOffsetControlCode(char0, char1)) {\n        // Cursor position is set by indent PAC (see below) in 4-column\n        // increments, with an additional offset code of 1-3 to reach any\n        // of the 32 columns specified by CEA-608. So all we need to do\n        // here is increment the column cursor by the given offset.\n        this.column_ += char1 & 0x03; // Detect PACs (Preamble Address Codes)\n      } else if (this.isPAC(char0, char1)) {\n        // There's no logic for PAC -> row mapping, so we have to just\n        // find the row code in an array and use its index :(\n        var row = ROWS.indexOf(data & 0x1f20); // Configure the caption window if we're in roll-up mode\n\n        if (this.mode_ === 'rollUp') {\n          // This implies that the base row is incorrectly set.\n          // As per the recommendation in CEA-608(Base Row Implementation), defer to the number\n          // of roll-up rows set.\n          if (row - this.rollUpRows_ + 1 < 0) {\n            row = this.rollUpRows_ - 1;\n          }\n          this.setRollUp(packet.pts, row);\n        }\n        if (row !== this.row_) {\n          // formatting is only persistent for current row\n          this.clearFormatting(packet.pts);\n          this.row_ = row;\n        } // All PACs can apply underline, so detect and apply\n        // (All odd-numbered second bytes set underline)\n\n        if (char1 & 0x1 && this.formatting_.indexOf('u') === -1) {\n          this.addFormatting(packet.pts, ['u']);\n        }\n        if ((data & 0x10) === 0x10) {\n          // We've got an indent level code. Each successive even number\n          // increments the column cursor by 4, so we can get the desired\n          // column position by bit-shifting to the right (to get n/2)\n          // and multiplying by 4.\n          this.column_ = ((data & 0xe) >> 1) * 4;\n        }\n        if (this.isColorPAC(char1)) {\n          // it's a color code, though we only support white, which\n          // can be either normal or italicized. white italics can be\n          // either 0x4e or 0x6e depending on the row, so we just\n          // bitwise-and with 0xe to see if italics should be turned on\n          if ((char1 & 0xe) === 0xe) {\n            this.addFormatting(packet.pts, ['i']);\n          }\n        } // We have a normal character in char0, and possibly one in char1\n      } else if (this.isNormalChar(char0)) {\n        if (char1 === 0x00) {\n          char1 = null;\n        }\n        text = getCharFromCode(char0);\n        text += getCharFromCode(char1);\n        this[this.mode_](packet.pts, text);\n        this.column_ += text.length;\n      } // finish data processing\n    };\n  };\n\n  Cea608Stream.prototype = new Stream$7(); // Trigger a cue point that captures the current state of the\n  // display buffer\n\n  Cea608Stream.prototype.flushDisplayed = function (pts) {\n    var content = this.displayed_ // remove spaces from the start and end of the string\n    .map(function (row, index) {\n      try {\n        return row.trim();\n      } catch (e) {\n        // Ordinarily, this shouldn't happen. However, caption\n        // parsing errors should not throw exceptions and\n        // break playback.\n        this.trigger('log', {\n          level: 'warn',\n          message: 'Skipping a malformed 608 caption at index ' + index + '.'\n        });\n        return '';\n      }\n    }, this) // combine all text rows to display in one cue\n    .join('\\n') // and remove blank rows from the start and end, but not the middle\n    .replace(/^\\n+|\\n+$/g, '');\n    if (content.length) {\n      this.trigger('data', {\n        startPts: this.startPts_,\n        endPts: pts,\n        text: content,\n        stream: this.name_\n      });\n    }\n  };\n  /**\n   * Zero out the data, used for startup and on seek\n   */\n\n  Cea608Stream.prototype.reset = function () {\n    this.mode_ = 'popOn'; // When in roll-up mode, the index of the last row that will\n    // actually display captions. If a caption is shifted to a row\n    // with a lower index than this, it is cleared from the display\n    // buffer\n\n    this.topRow_ = 0;\n    this.startPts_ = 0;\n    this.displayed_ = createDisplayBuffer();\n    this.nonDisplayed_ = createDisplayBuffer();\n    this.lastControlCode_ = null; // Track row and column for proper line-breaking and spacing\n\n    this.column_ = 0;\n    this.row_ = BOTTOM_ROW;\n    this.rollUpRows_ = 2; // This variable holds currently-applied formatting\n\n    this.formatting_ = [];\n  };\n  /**\n   * Sets up control code and related constants for this instance\n   */\n\n  Cea608Stream.prototype.setConstants = function () {\n    // The following attributes have these uses:\n    // ext_ :    char0 for mid-row codes, and the base for extended\n    //           chars (ext_+0, ext_+1, and ext_+2 are char0s for\n    //           extended codes)\n    // control_: char0 for control codes, except byte-shifted to the\n    //           left so that we can do this.control_ | CONTROL_CODE\n    // offset_:  char0 for tab offset codes\n    //\n    // It's also worth noting that control codes, and _only_ control codes,\n    // differ between field 1 and field2. Field 2 control codes are always\n    // their field 1 value plus 1. That's why there's the \"| field\" on the\n    // control value.\n    if (this.dataChannel_ === 0) {\n      this.BASE_ = 0x10;\n      this.EXT_ = 0x11;\n      this.CONTROL_ = (0x14 | this.field_) << 8;\n      this.OFFSET_ = 0x17;\n    } else if (this.dataChannel_ === 1) {\n      this.BASE_ = 0x18;\n      this.EXT_ = 0x19;\n      this.CONTROL_ = (0x1c | this.field_) << 8;\n      this.OFFSET_ = 0x1f;\n    } // Constants for the LSByte command codes recognized by Cea608Stream. This\n    // list is not exhaustive. For a more comprehensive listing and semantics see\n    // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf\n    // Padding\n\n    this.PADDING_ = 0x0000; // Pop-on Mode\n\n    this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;\n    this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f; // Roll-up Mode\n\n    this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;\n    this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;\n    this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;\n    this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d; // paint-on mode\n\n    this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29; // Erasure\n\n    this.BACKSPACE_ = this.CONTROL_ | 0x21;\n    this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;\n    this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;\n  };\n  /**\n   * Detects if the 2-byte packet data is a special character\n   *\n   * Special characters have a second byte in the range 0x30 to 0x3f,\n   * with the first byte being 0x11 (for data channel 1) or 0x19 (for\n   * data channel 2).\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are an special character\n   */\n\n  Cea608Stream.prototype.isSpecialCharacter = function (char0, char1) {\n    return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;\n  };\n  /**\n   * Detects if the 2-byte packet data is an extended character\n   *\n   * Extended characters have a second byte in the range 0x20 to 0x3f,\n   * with the first byte being 0x12 or 0x13 (for data channel 1) or\n   * 0x1a or 0x1b (for data channel 2).\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are an extended character\n   */\n\n  Cea608Stream.prototype.isExtCharacter = function (char0, char1) {\n    return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;\n  };\n  /**\n   * Detects if the 2-byte packet is a mid-row code\n   *\n   * Mid-row codes have a second byte in the range 0x20 to 0x2f, with\n   * the first byte being 0x11 (for data channel 1) or 0x19 (for data\n   * channel 2).\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are a mid-row code\n   */\n\n  Cea608Stream.prototype.isMidRowCode = function (char0, char1) {\n    return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;\n  };\n  /**\n   * Detects if the 2-byte packet is an offset control code\n   *\n   * Offset control codes have a second byte in the range 0x21 to 0x23,\n   * with the first byte being 0x17 (for data channel 1) or 0x1f (for\n   * data channel 2).\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are an offset control code\n   */\n\n  Cea608Stream.prototype.isOffsetControlCode = function (char0, char1) {\n    return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;\n  };\n  /**\n   * Detects if the 2-byte packet is a Preamble Address Code\n   *\n   * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)\n   * or 0x18 to 0x1f (for data channel 2), with the second byte in the\n   * range 0x40 to 0x7f.\n   *\n   * @param  {Integer} char0 The first byte\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the 2 bytes are a PAC\n   */\n\n  Cea608Stream.prototype.isPAC = function (char0, char1) {\n    return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;\n  };\n  /**\n   * Detects if a packet's second byte is in the range of a PAC color code\n   *\n   * PAC color codes have the second byte be in the range 0x40 to 0x4f, or\n   * 0x60 to 0x6f.\n   *\n   * @param  {Integer} char1 The second byte\n   * @return {Boolean}       Whether the byte is a color PAC\n   */\n\n  Cea608Stream.prototype.isColorPAC = function (char1) {\n    return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;\n  };\n  /**\n   * Detects if a single byte is in the range of a normal character\n   *\n   * Normal text bytes are in the range 0x20 to 0x7f.\n   *\n   * @param  {Integer} char  The byte\n   * @return {Boolean}       Whether the byte is a normal character\n   */\n\n  Cea608Stream.prototype.isNormalChar = function (char) {\n    return char >= 0x20 && char <= 0x7f;\n  };\n  /**\n   * Configures roll-up\n   *\n   * @param  {Integer} pts         Current PTS\n   * @param  {Integer} newBaseRow  Used by PACs to slide the current window to\n   *                               a new position\n   */\n\n  Cea608Stream.prototype.setRollUp = function (pts, newBaseRow) {\n    // Reset the base row to the bottom row when switching modes\n    if (this.mode_ !== 'rollUp') {\n      this.row_ = BOTTOM_ROW;\n      this.mode_ = 'rollUp'; // Spec says to wipe memories when switching to roll-up\n\n      this.flushDisplayed(pts);\n      this.nonDisplayed_ = createDisplayBuffer();\n      this.displayed_ = createDisplayBuffer();\n    }\n    if (newBaseRow !== undefined && newBaseRow !== this.row_) {\n      // move currently displayed captions (up or down) to the new base row\n      for (var i = 0; i < this.rollUpRows_; i++) {\n        this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];\n        this.displayed_[this.row_ - i] = '';\n      }\n    }\n    if (newBaseRow === undefined) {\n      newBaseRow = this.row_;\n    }\n    this.topRow_ = newBaseRow - this.rollUpRows_ + 1;\n  }; // Adds the opening HTML tag for the passed character to the caption text,\n  // and keeps track of it for later closing\n\n  Cea608Stream.prototype.addFormatting = function (pts, format) {\n    this.formatting_ = this.formatting_.concat(format);\n    var text = format.reduce(function (text, format) {\n      return text + '<' + format + '>';\n    }, '');\n    this[this.mode_](pts, text);\n  }; // Adds HTML closing tags for current formatting to caption text and\n  // clears remembered formatting\n\n  Cea608Stream.prototype.clearFormatting = function (pts) {\n    if (!this.formatting_.length) {\n      return;\n    }\n    var text = this.formatting_.reverse().reduce(function (text, format) {\n      return text + '</' + format + '>';\n    }, '');\n    this.formatting_ = [];\n    this[this.mode_](pts, text);\n  }; // Mode Implementations\n\n  Cea608Stream.prototype.popOn = function (pts, text) {\n    var baseRow = this.nonDisplayed_[this.row_]; // buffer characters\n\n    baseRow += text;\n    this.nonDisplayed_[this.row_] = baseRow;\n  };\n  Cea608Stream.prototype.rollUp = function (pts, text) {\n    var baseRow = this.displayed_[this.row_];\n    baseRow += text;\n    this.displayed_[this.row_] = baseRow;\n  };\n  Cea608Stream.prototype.shiftRowsUp_ = function () {\n    var i; // clear out inactive rows\n\n    for (i = 0; i < this.topRow_; i++) {\n      this.displayed_[i] = '';\n    }\n    for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {\n      this.displayed_[i] = '';\n    } // shift displayed rows up\n\n    for (i = this.topRow_; i < this.row_; i++) {\n      this.displayed_[i] = this.displayed_[i + 1];\n    } // clear out the bottom row\n\n    this.displayed_[this.row_] = '';\n  };\n  Cea608Stream.prototype.paintOn = function (pts, text) {\n    var baseRow = this.displayed_[this.row_];\n    baseRow += text;\n    this.displayed_[this.row_] = baseRow;\n  }; // exports\n\n  var captionStream = {\n    CaptionStream: CaptionStream$2,\n    Cea608Stream: Cea608Stream,\n    Cea708Stream: Cea708Stream\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var streamTypes = {\n    H264_STREAM_TYPE: 0x1B,\n    ADTS_STREAM_TYPE: 0x0F,\n    METADATA_STREAM_TYPE: 0x15\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Accepts program elementary stream (PES) data events and corrects\n   * decode and presentation time stamps to account for a rollover\n   * of the 33 bit value.\n   */\n\n  var Stream$6 = stream;\n  var MAX_TS = 8589934592;\n  var RO_THRESH = 4294967296;\n  var TYPE_SHARED = 'shared';\n  var handleRollover$1 = function (value, reference) {\n    var direction = 1;\n    if (value > reference) {\n      // If the current timestamp value is greater than our reference timestamp and we detect a\n      // timestamp rollover, this means the roll over is happening in the opposite direction.\n      // Example scenario: Enter a long stream/video just after a rollover occurred. The reference\n      // point will be set to a small number, e.g. 1. The user then seeks backwards over the\n      // rollover point. In loading this segment, the timestamp values will be very large,\n      // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust\n      // the time stamp to be `value - 2^33`.\n      direction = -1;\n    } // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will\n    // cause an incorrect adjustment.\n\n    while (Math.abs(reference - value) > RO_THRESH) {\n      value += direction * MAX_TS;\n    }\n    return value;\n  };\n  var TimestampRolloverStream$1 = function (type) {\n    var lastDTS, referenceDTS;\n    TimestampRolloverStream$1.prototype.init.call(this); // The \"shared\" type is used in cases where a stream will contain muxed\n    // video and audio. We could use `undefined` here, but having a string\n    // makes debugging a little clearer.\n\n    this.type_ = type || TYPE_SHARED;\n    this.push = function (data) {\n      // Any \"shared\" rollover streams will accept _all_ data. Otherwise,\n      // streams will only accept data that matches their type.\n      if (this.type_ !== TYPE_SHARED && data.type !== this.type_) {\n        return;\n      }\n      if (referenceDTS === undefined) {\n        referenceDTS = data.dts;\n      }\n      data.dts = handleRollover$1(data.dts, referenceDTS);\n      data.pts = handleRollover$1(data.pts, referenceDTS);\n      lastDTS = data.dts;\n      this.trigger('data', data);\n    };\n    this.flush = function () {\n      referenceDTS = lastDTS;\n      this.trigger('done');\n    };\n    this.endTimeline = function () {\n      this.flush();\n      this.trigger('endedtimeline');\n    };\n    this.discontinuity = function () {\n      referenceDTS = void 0;\n      lastDTS = void 0;\n    };\n    this.reset = function () {\n      this.discontinuity();\n      this.trigger('reset');\n    };\n  };\n  TimestampRolloverStream$1.prototype = new Stream$6();\n  var timestampRolloverStream = {\n    TimestampRolloverStream: TimestampRolloverStream$1,\n    handleRollover: handleRollover$1\n  }; // Once IE11 support is dropped, this function should be removed.\n\n  var typedArrayIndexOf$1 = (typedArray, element, fromIndex) => {\n    if (!typedArray) {\n      return -1;\n    }\n    var currentIndex = fromIndex;\n    for (; currentIndex < typedArray.length; currentIndex++) {\n      if (typedArray[currentIndex] === element) {\n        return currentIndex;\n      }\n    }\n    return -1;\n  };\n  var typedArray = {\n    typedArrayIndexOf: typedArrayIndexOf$1\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Tools for parsing ID3 frame data\n   * @see http://id3.org/id3v2.3.0\n   */\n\n  var typedArrayIndexOf = typedArray.typedArrayIndexOf,\n    // Frames that allow different types of text encoding contain a text\n    // encoding description byte [ID3v2.4.0 section 4.]\n    textEncodingDescriptionByte = {\n      Iso88591: 0x00,\n      // ISO-8859-1, terminated with \\0.\n      Utf16: 0x01,\n      // UTF-16 encoded Unicode BOM, terminated with \\0\\0\n      Utf16be: 0x02,\n      // UTF-16BE encoded Unicode, without BOM, terminated with \\0\\0\n      Utf8: 0x03 // UTF-8 encoded Unicode, terminated with \\0\n    },\n    // return a percent-encoded representation of the specified byte range\n    // @see http://en.wikipedia.org/wiki/Percent-encoding \n    percentEncode$1 = function (bytes, start, end) {\n      var i,\n        result = '';\n      for (i = start; i < end; i++) {\n        result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n      }\n      return result;\n    },\n    // return the string representation of the specified byte range,\n    // interpreted as UTf-8.\n    parseUtf8 = function (bytes, start, end) {\n      return decodeURIComponent(percentEncode$1(bytes, start, end));\n    },\n    // return the string representation of the specified byte range,\n    // interpreted as ISO-8859-1.\n    parseIso88591$1 = function (bytes, start, end) {\n      return unescape(percentEncode$1(bytes, start, end)); // jshint ignore:line\n    },\n    parseSyncSafeInteger$1 = function (data) {\n      return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\n    },\n    frameParsers = {\n      'APIC': function (frame) {\n        var i = 1,\n          mimeTypeEndIndex,\n          descriptionEndIndex,\n          LINK_MIME_TYPE = '-->';\n        if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\n          // ignore frames with unrecognized character encodings\n          return;\n        } // parsing fields [ID3v2.4.0 section 4.14.]\n\n        mimeTypeEndIndex = typedArrayIndexOf(frame.data, 0, i);\n        if (mimeTypeEndIndex < 0) {\n          // malformed frame\n          return;\n        } // parsing Mime type field (terminated with \\0)\n\n        frame.mimeType = parseIso88591$1(frame.data, i, mimeTypeEndIndex);\n        i = mimeTypeEndIndex + 1; // parsing 1-byte Picture Type field\n\n        frame.pictureType = frame.data[i];\n        i++;\n        descriptionEndIndex = typedArrayIndexOf(frame.data, 0, i);\n        if (descriptionEndIndex < 0) {\n          // malformed frame\n          return;\n        } // parsing Description field (terminated with \\0)\n\n        frame.description = parseUtf8(frame.data, i, descriptionEndIndex);\n        i = descriptionEndIndex + 1;\n        if (frame.mimeType === LINK_MIME_TYPE) {\n          // parsing Picture Data field as URL (always represented as ISO-8859-1 [ID3v2.4.0 section 4.])\n          frame.url = parseIso88591$1(frame.data, i, frame.data.length);\n        } else {\n          // parsing Picture Data field as binary data\n          frame.pictureData = frame.data.subarray(i, frame.data.length);\n        }\n      },\n      'T*': function (frame) {\n        if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\n          // ignore frames with unrecognized character encodings\n          return;\n        } // parse text field, do not include null terminator in the frame value\n        // frames that allow different types of encoding contain terminated text [ID3v2.4.0 section 4.]\n\n        frame.value = parseUtf8(frame.data, 1, frame.data.length).replace(/\\0*$/, ''); // text information frames supports multiple strings, stored as a terminator separated list [ID3v2.4.0 section 4.2.]\n\n        frame.values = frame.value.split('\\0');\n      },\n      'TXXX': function (frame) {\n        var descriptionEndIndex;\n        if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\n          // ignore frames with unrecognized character encodings\n          return;\n        }\n        descriptionEndIndex = typedArrayIndexOf(frame.data, 0, 1);\n        if (descriptionEndIndex === -1) {\n          return;\n        } // parse the text fields\n\n        frame.description = parseUtf8(frame.data, 1, descriptionEndIndex); // do not include the null terminator in the tag value\n        // frames that allow different types of encoding contain terminated text\n        // [ID3v2.4.0 section 4.]\n\n        frame.value = parseUtf8(frame.data, descriptionEndIndex + 1, frame.data.length).replace(/\\0*$/, '');\n        frame.data = frame.value;\n      },\n      'W*': function (frame) {\n        // parse URL field; URL fields are always represented as ISO-8859-1 [ID3v2.4.0 section 4.]\n        // if the value is followed by a string termination all the following information should be ignored [ID3v2.4.0 section 4.3]\n        frame.url = parseIso88591$1(frame.data, 0, frame.data.length).replace(/\\0.*$/, '');\n      },\n      'WXXX': function (frame) {\n        var descriptionEndIndex;\n        if (frame.data[0] !== textEncodingDescriptionByte.Utf8) {\n          // ignore frames with unrecognized character encodings\n          return;\n        }\n        descriptionEndIndex = typedArrayIndexOf(frame.data, 0, 1);\n        if (descriptionEndIndex === -1) {\n          return;\n        } // parse the description and URL fields\n\n        frame.description = parseUtf8(frame.data, 1, descriptionEndIndex); // URL fields are always represented as ISO-8859-1 [ID3v2.4.0 section 4.]\n        // if the value is followed by a string termination all the following information\n        // should be ignored [ID3v2.4.0 section 4.3]\n\n        frame.url = parseIso88591$1(frame.data, descriptionEndIndex + 1, frame.data.length).replace(/\\0.*$/, '');\n      },\n      'PRIV': function (frame) {\n        var i;\n        for (i = 0; i < frame.data.length; i++) {\n          if (frame.data[i] === 0) {\n            // parse the description and URL fields\n            frame.owner = parseIso88591$1(frame.data, 0, i);\n            break;\n          }\n        }\n        frame.privateData = frame.data.subarray(i + 1);\n        frame.data = frame.privateData;\n      }\n    };\n  var parseId3Frames$1 = function (data) {\n    var frameSize,\n      frameHeader,\n      frameStart = 10,\n      tagSize = 0,\n      frames = []; // If we don't have enough data for a header, 10 bytes, \n    // or 'ID3' in the first 3 bytes this is not a valid ID3 tag.\n\n    if (data.length < 10 || data[0] !== 'I'.charCodeAt(0) || data[1] !== 'D'.charCodeAt(0) || data[2] !== '3'.charCodeAt(0)) {\n      return;\n    } // the frame size is transmitted as a 28-bit integer in the\n    // last four bytes of the ID3 header.\n    // The most significant bit of each byte is dropped and the\n    // results concatenated to recover the actual value.\n\n    tagSize = parseSyncSafeInteger$1(data.subarray(6, 10)); // ID3 reports the tag size excluding the header but it's more\n    // convenient for our comparisons to include it\n\n    tagSize += 10; // check bit 6 of byte 5 for the extended header flag.\n\n    var hasExtendedHeader = data[5] & 0x40;\n    if (hasExtendedHeader) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n\n      frameStart += parseSyncSafeInteger$1(data.subarray(10, 14));\n      tagSize -= parseSyncSafeInteger$1(data.subarray(16, 20)); // clip any padding off the end\n    } // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger$1(data.subarray(frameStart + 4, frameStart + 8));\n      if (frameSize < 1) {\n        break;\n      }\n      frameHeader = String.fromCharCode(data[frameStart], data[frameStart + 1], data[frameStart + 2], data[frameStart + 3]);\n      var frame = {\n        id: frameHeader,\n        data: data.subarray(frameStart + 10, frameStart + frameSize + 10)\n      };\n      frame.key = frame.id; // parse frame values\n\n      if (frameParsers[frame.id]) {\n        // use frame specific parser\n        frameParsers[frame.id](frame);\n      } else if (frame.id[0] === 'T') {\n        // use text frame generic parser\n        frameParsers['T*'](frame);\n      } else if (frame.id[0] === 'W') {\n        // use URL link frame generic parser\n        frameParsers['W*'](frame);\n      }\n      frames.push(frame);\n      frameStart += 10; // advance past the frame header\n\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < tagSize);\n    return frames;\n  };\n  var parseId3 = {\n    parseId3Frames: parseId3Frames$1,\n    parseSyncSafeInteger: parseSyncSafeInteger$1,\n    frameParsers: frameParsers\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Accepts program elementary stream (PES) data events and parses out\n   * ID3 metadata from them, if present.\n   * @see http://id3.org/id3v2.3.0\n   */\n\n  var Stream$5 = stream,\n    StreamTypes$3 = streamTypes,\n    id3 = parseId3,\n    MetadataStream;\n  MetadataStream = function (options) {\n    var settings = {\n        // the bytes of the program-level descriptor field in MP2T\n        // see ISO/IEC 13818-1:2013 (E), section 2.6 \"Program and\n        // program element descriptors\"\n        descriptor: options && options.descriptor\n      },\n      // the total size in bytes of the ID3 tag being parsed\n      tagSize = 0,\n      // tag data that is not complete enough to be parsed\n      buffer = [],\n      // the total number of bytes currently in the buffer\n      bufferSize = 0,\n      i;\n    MetadataStream.prototype.init.call(this); // calculate the text track in-band metadata track dispatch type\n    // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track\n\n    this.dispatchType = StreamTypes$3.METADATA_STREAM_TYPE.toString(16);\n    if (settings.descriptor) {\n      for (i = 0; i < settings.descriptor.length; i++) {\n        this.dispatchType += ('00' + settings.descriptor[i].toString(16)).slice(-2);\n      }\n    }\n    this.push = function (chunk) {\n      var tag, frameStart, frameSize, frame, i, frameHeader;\n      if (chunk.type !== 'timed-metadata') {\n        return;\n      } // if data_alignment_indicator is set in the PES header,\n      // we must have the start of a new ID3 tag. Assume anything\n      // remaining in the buffer was malformed and throw it out\n\n      if (chunk.dataAlignmentIndicator) {\n        bufferSize = 0;\n        buffer.length = 0;\n      } // ignore events that don't look like ID3 data\n\n      if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== 'I'.charCodeAt(0) || chunk.data[1] !== 'D'.charCodeAt(0) || chunk.data[2] !== '3'.charCodeAt(0))) {\n        this.trigger('log', {\n          level: 'warn',\n          message: 'Skipping unrecognized metadata packet'\n        });\n        return;\n      } // add this chunk to the data we've collected so far\n\n      buffer.push(chunk);\n      bufferSize += chunk.data.byteLength; // grab the size of the entire frame from the ID3 header\n\n      if (buffer.length === 1) {\n        // the frame size is transmitted as a 28-bit integer in the\n        // last four bytes of the ID3 header.\n        // The most significant bit of each byte is dropped and the\n        // results concatenated to recover the actual value.\n        tagSize = id3.parseSyncSafeInteger(chunk.data.subarray(6, 10)); // ID3 reports the tag size excluding the header but it's more\n        // convenient for our comparisons to include it\n\n        tagSize += 10;\n      } // if the entire frame has not arrived, wait for more data\n\n      if (bufferSize < tagSize) {\n        return;\n      } // collect the entire frame so it can be parsed\n\n      tag = {\n        data: new Uint8Array(tagSize),\n        frames: [],\n        pts: buffer[0].pts,\n        dts: buffer[0].dts\n      };\n      for (i = 0; i < tagSize;) {\n        tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);\n        i += buffer[0].data.byteLength;\n        bufferSize -= buffer[0].data.byteLength;\n        buffer.shift();\n      } // find the start of the first frame and the end of the tag\n\n      frameStart = 10;\n      if (tag.data[5] & 0x40) {\n        // advance the frame start past the extended header\n        frameStart += 4; // header size field\n\n        frameStart += id3.parseSyncSafeInteger(tag.data.subarray(10, 14)); // clip any padding off the end\n\n        tagSize -= id3.parseSyncSafeInteger(tag.data.subarray(16, 20));\n      } // parse one or more ID3 frames\n      // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n\n      do {\n        // determine the number of bytes in this frame\n        frameSize = id3.parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));\n        if (frameSize < 1) {\n          this.trigger('log', {\n            level: 'warn',\n            message: 'Malformed ID3 frame encountered. Skipping remaining metadata parsing.'\n          }); // If the frame is malformed, don't parse any further frames but allow previous valid parsed frames\n          // to be sent along.\n\n          break;\n        }\n        frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);\n        frame = {\n          id: frameHeader,\n          data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)\n        };\n        frame.key = frame.id; // parse frame values\n\n        if (id3.frameParsers[frame.id]) {\n          // use frame specific parser\n          id3.frameParsers[frame.id](frame);\n        } else if (frame.id[0] === 'T') {\n          // use text frame generic parser\n          id3.frameParsers['T*'](frame);\n        } else if (frame.id[0] === 'W') {\n          // use URL link frame generic parser\n          id3.frameParsers['W*'](frame);\n        } // handle the special PRIV frame used to indicate the start\n        // time for raw AAC data\n\n        if (frame.owner === 'com.apple.streaming.transportStreamTimestamp') {\n          var d = frame.data,\n            size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\n          size *= 4;\n          size += d[7] & 0x03;\n          frame.timeStamp = size; // in raw AAC, all subsequent data will be timestamped based\n          // on the value of this frame\n          // we couldn't have known the appropriate pts and dts before\n          // parsing this ID3 tag so set those values now\n\n          if (tag.pts === undefined && tag.dts === undefined) {\n            tag.pts = frame.timeStamp;\n            tag.dts = frame.timeStamp;\n          }\n          this.trigger('timestamp', frame);\n        }\n        tag.frames.push(frame);\n        frameStart += 10; // advance past the frame header\n\n        frameStart += frameSize; // advance past the frame body\n      } while (frameStart < tagSize);\n      this.trigger('data', tag);\n    };\n  };\n  MetadataStream.prototype = new Stream$5();\n  var metadataStream = MetadataStream;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * A stream-based mp2t to mp4 converter. This utility can be used to\n   * deliver mp4s to a SourceBuffer on platforms that support native\n   * Media Source Extensions.\n   */\n\n  var Stream$4 = stream,\n    CaptionStream$1 = captionStream,\n    StreamTypes$2 = streamTypes,\n    TimestampRolloverStream = timestampRolloverStream.TimestampRolloverStream; // object types\n\n  var TransportPacketStream, TransportParseStream, ElementaryStream; // constants\n\n  var MP2T_PACKET_LENGTH$1 = 188,\n    // bytes\n    SYNC_BYTE$1 = 0x47;\n  /**\n   * Splits an incoming stream of binary data into MPEG-2 Transport\n   * Stream packets.\n   */\n\n  TransportPacketStream = function () {\n    var buffer = new Uint8Array(MP2T_PACKET_LENGTH$1),\n      bytesInBuffer = 0;\n    TransportPacketStream.prototype.init.call(this); // Deliver new bytes to the stream.\n\n    /**\n     * Split a stream of data into M2TS packets\n    **/\n\n    this.push = function (bytes) {\n      var startIndex = 0,\n        endIndex = MP2T_PACKET_LENGTH$1,\n        everything; // If there are bytes remaining from the last segment, prepend them to the\n      // bytes that were pushed in\n\n      if (bytesInBuffer) {\n        everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n        everything.set(buffer.subarray(0, bytesInBuffer));\n        everything.set(bytes, bytesInBuffer);\n        bytesInBuffer = 0;\n      } else {\n        everything = bytes;\n      } // While we have enough data for a packet\n\n      while (endIndex < everything.byteLength) {\n        // Look for a pair of start and end sync bytes in the data..\n        if (everything[startIndex] === SYNC_BYTE$1 && everything[endIndex] === SYNC_BYTE$1) {\n          // We found a packet so emit it and jump one whole packet forward in\n          // the stream\n          this.trigger('data', everything.subarray(startIndex, endIndex));\n          startIndex += MP2T_PACKET_LENGTH$1;\n          endIndex += MP2T_PACKET_LENGTH$1;\n          continue;\n        } // If we get here, we have somehow become de-synchronized and we need to step\n        // forward one byte at a time until we find a pair of sync bytes that denote\n        // a packet\n\n        startIndex++;\n        endIndex++;\n      } // If there was some data left over at the end of the segment that couldn't\n      // possibly be a whole packet, keep it because it might be the start of a packet\n      // that continues in the next segment\n\n      if (startIndex < everything.byteLength) {\n        buffer.set(everything.subarray(startIndex), 0);\n        bytesInBuffer = everything.byteLength - startIndex;\n      }\n    };\n    /**\n     * Passes identified M2TS packets to the TransportParseStream to be parsed\n    **/\n\n    this.flush = function () {\n      // If the buffer contains a whole packet when we are being flushed, emit it\n      // and empty the buffer. Otherwise hold onto the data because it may be\n      // important for decoding the next segment\n      if (bytesInBuffer === MP2T_PACKET_LENGTH$1 && buffer[0] === SYNC_BYTE$1) {\n        this.trigger('data', buffer);\n        bytesInBuffer = 0;\n      }\n      this.trigger('done');\n    };\n    this.endTimeline = function () {\n      this.flush();\n      this.trigger('endedtimeline');\n    };\n    this.reset = function () {\n      bytesInBuffer = 0;\n      this.trigger('reset');\n    };\n  };\n  TransportPacketStream.prototype = new Stream$4();\n  /**\n   * Accepts an MP2T TransportPacketStream and emits data events with parsed\n   * forms of the individual transport stream packets.\n   */\n\n  TransportParseStream = function () {\n    var parsePsi, parsePat, parsePmt, self;\n    TransportParseStream.prototype.init.call(this);\n    self = this;\n    this.packetsWaitingForPmt = [];\n    this.programMapTable = undefined;\n    parsePsi = function (payload, psi) {\n      var offset = 0; // PSI packets may be split into multiple sections and those\n      // sections may be split into multiple packets. If a PSI\n      // section starts in this packet, the payload_unit_start_indicator\n      // will be true and the first byte of the payload will indicate\n      // the offset from the current position to the start of the\n      // section.\n\n      if (psi.payloadUnitStartIndicator) {\n        offset += payload[offset] + 1;\n      }\n      if (psi.type === 'pat') {\n        parsePat(payload.subarray(offset), psi);\n      } else {\n        parsePmt(payload.subarray(offset), psi);\n      }\n    };\n    parsePat = function (payload, pat) {\n      pat.section_number = payload[7]; // eslint-disable-line camelcase\n\n      pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n      // skip the PSI header and parse the first PMT entry\n\n      self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n      pat.pmtPid = self.pmtPid;\n    };\n    /**\n     * Parse out the relevant fields of a Program Map Table (PMT).\n     * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n     * packet. The first byte in this array should be the table_id\n     * field.\n     * @param pmt {object} the object that should be decorated with\n     * fields parsed from the PMT.\n     */\n\n    parsePmt = function (payload, pmt) {\n      var sectionLength, tableEnd, programInfoLength, offset; // PMTs can be sent ahead of the time when they should actually\n      // take effect. We don't believe this should ever be the case\n      // for HLS but we'll ignore \"forward\" PMT declarations if we see\n      // them. Future PMT declarations have the current_next_indicator\n      // set to zero.\n\n      if (!(payload[5] & 0x01)) {\n        return;\n      } // overwrite any existing program map table\n\n      self.programMapTable = {\n        video: null,\n        audio: null,\n        'timed-metadata': {}\n      }; // the mapping table ends at the end of the current section\n\n      sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n      tableEnd = 3 + sectionLength - 4; // to determine where the table is, we have to figure out how\n      // long the program info descriptors are\n\n      programInfoLength = (payload[10] & 0x0f) << 8 | payload[11]; // advance the offset to the first entry in the mapping table\n\n      offset = 12 + programInfoLength;\n      while (offset < tableEnd) {\n        var streamType = payload[offset];\n        var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2]; // only map a single elementary_pid for audio and video stream types\n        // TODO: should this be done for metadata too? for now maintain behavior of\n        //       multiple metadata streams\n\n        if (streamType === StreamTypes$2.H264_STREAM_TYPE && self.programMapTable.video === null) {\n          self.programMapTable.video = pid;\n        } else if (streamType === StreamTypes$2.ADTS_STREAM_TYPE && self.programMapTable.audio === null) {\n          self.programMapTable.audio = pid;\n        } else if (streamType === StreamTypes$2.METADATA_STREAM_TYPE) {\n          // map pid to stream type for metadata streams\n          self.programMapTable['timed-metadata'][pid] = streamType;\n        } // move to the next table entry\n        // skip past the elementary stream descriptors, if present\n\n        offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n      } // record the map on the packet as well\n\n      pmt.programMapTable = self.programMapTable;\n    };\n    /**\n     * Deliver a new MP2T packet to the next stream in the pipeline.\n     */\n\n    this.push = function (packet) {\n      var result = {},\n        offset = 4;\n      result.payloadUnitStartIndicator = !!(packet[1] & 0x40); // pid is a 13-bit field starting at the last bit of packet[1]\n\n      result.pid = packet[1] & 0x1f;\n      result.pid <<= 8;\n      result.pid |= packet[2]; // if an adaption field is present, its length is specified by the\n      // fifth byte of the TS packet header. The adaptation field is\n      // used to add stuffing to PES packets that don't fill a complete\n      // TS packet, and to specify some forms of timing and control data\n      // that we do not currently use.\n\n      if ((packet[3] & 0x30) >>> 4 > 0x01) {\n        offset += packet[offset] + 1;\n      } // parse the rest of the packet based on the type\n\n      if (result.pid === 0) {\n        result.type = 'pat';\n        parsePsi(packet.subarray(offset), result);\n        this.trigger('data', result);\n      } else if (result.pid === this.pmtPid) {\n        result.type = 'pmt';\n        parsePsi(packet.subarray(offset), result);\n        this.trigger('data', result); // if there are any packets waiting for a PMT to be found, process them now\n\n        while (this.packetsWaitingForPmt.length) {\n          this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n        }\n      } else if (this.programMapTable === undefined) {\n        // When we have not seen a PMT yet, defer further processing of\n        // PES packets until one has been parsed\n        this.packetsWaitingForPmt.push([packet, offset, result]);\n      } else {\n        this.processPes_(packet, offset, result);\n      }\n    };\n    this.processPes_ = function (packet, offset, result) {\n      // set the appropriate stream type\n      if (result.pid === this.programMapTable.video) {\n        result.streamType = StreamTypes$2.H264_STREAM_TYPE;\n      } else if (result.pid === this.programMapTable.audio) {\n        result.streamType = StreamTypes$2.ADTS_STREAM_TYPE;\n      } else {\n        // if not video or audio, it is timed-metadata or unknown\n        // if unknown, streamType will be undefined\n        result.streamType = this.programMapTable['timed-metadata'][result.pid];\n      }\n      result.type = 'pes';\n      result.data = packet.subarray(offset);\n      this.trigger('data', result);\n    };\n  };\n  TransportParseStream.prototype = new Stream$4();\n  TransportParseStream.STREAM_TYPES = {\n    h264: 0x1b,\n    adts: 0x0f\n  };\n  /**\n   * Reconsistutes program elementary stream (PES) packets from parsed\n   * transport stream packets. That is, if you pipe an\n   * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n   * events will be events which capture the bytes for individual PES\n   * packets plus relevant metadata that has been extracted from the\n   * container.\n   */\n\n  ElementaryStream = function () {\n    var self = this,\n      segmentHadPmt = false,\n      // PES packet fragments\n      video = {\n        data: [],\n        size: 0\n      },\n      audio = {\n        data: [],\n        size: 0\n      },\n      timedMetadata = {\n        data: [],\n        size: 0\n      },\n      programMapTable,\n      parsePes = function (payload, pes) {\n        var ptsDtsFlags;\n        const startPrefix = payload[0] << 16 | payload[1] << 8 | payload[2]; // default to an empty array\n\n        pes.data = new Uint8Array(); // In certain live streams, the start of a TS fragment has ts packets\n        // that are frame data that is continuing from the previous fragment. This\n        // is to check that the pes data is the start of a new pes payload\n\n        if (startPrefix !== 1) {\n          return;\n        } // get the packet length, this will be 0 for video\n\n        pes.packetLength = 6 + (payload[4] << 8 | payload[5]); // find out if this packets starts a new keyframe\n\n        pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0; // PES packets may be annotated with a PTS value, or a PTS value\n        // and a DTS value. Determine what combination of values is\n        // available to work with.\n\n        ptsDtsFlags = payload[7]; // PTS and DTS are normally stored as a 33-bit number.  Javascript\n        // performs all bitwise operations on 32-bit integers but javascript\n        // supports a much greater range (52-bits) of integer using standard\n        // mathematical operations.\n        // We construct a 31-bit value using bitwise operators over the 31\n        // most significant bits and then multiply by 4 (equal to a left-shift\n        // of 2) before we add the final 2 least significant bits of the\n        // timestamp (equal to an OR.)\n\n        if (ptsDtsFlags & 0xC0) {\n          // the PTS and DTS are not written out directly. For information\n          // on how they are encoded, see\n          // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n          pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;\n          pes.pts *= 4; // Left shift by 2\n\n          pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n\n          pes.dts = pes.pts;\n          if (ptsDtsFlags & 0x40) {\n            pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;\n            pes.dts *= 4; // Left shift by 2\n\n            pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n          }\n        } // the data section starts immediately after the PES header.\n        // pes_header_data_length specifies the number of header bytes\n        // that follow the last byte of the field.\n\n        pes.data = payload.subarray(9 + payload[8]);\n      },\n      /**\n        * Pass completely parsed PES packets to the next stream in the pipeline\n       **/\n      flushStream = function (stream, type, forceFlush) {\n        var packetData = new Uint8Array(stream.size),\n          event = {\n            type: type\n          },\n          i = 0,\n          offset = 0,\n          packetFlushable = false,\n          fragment; // do nothing if there is not enough buffered data for a complete\n        // PES header\n\n        if (!stream.data.length || stream.size < 9) {\n          return;\n        }\n        event.trackId = stream.data[0].pid; // reassemble the packet\n\n        for (i = 0; i < stream.data.length; i++) {\n          fragment = stream.data[i];\n          packetData.set(fragment.data, offset);\n          offset += fragment.data.byteLength;\n        } // parse assembled packet's PES header\n\n        parsePes(packetData, event); // non-video PES packets MUST have a non-zero PES_packet_length\n        // check that there is enough stream data to fill the packet\n\n        packetFlushable = type === 'video' || event.packetLength <= stream.size; // flush pending packets if the conditions are right\n\n        if (forceFlush || packetFlushable) {\n          stream.size = 0;\n          stream.data.length = 0;\n        } // only emit packets that are complete. this is to avoid assembling\n        // incomplete PES packets due to poor segmentation\n\n        if (packetFlushable) {\n          self.trigger('data', event);\n        }\n      };\n    ElementaryStream.prototype.init.call(this);\n    /**\n     * Identifies M2TS packet types and parses PES packets using metadata\n     * parsed from the PMT\n     **/\n\n    this.push = function (data) {\n      ({\n        pat: function () {// we have to wait for the PMT to arrive as well before we\n          // have any meaningful metadata\n        },\n        pes: function () {\n          var stream, streamType;\n          switch (data.streamType) {\n            case StreamTypes$2.H264_STREAM_TYPE:\n              stream = video;\n              streamType = 'video';\n              break;\n            case StreamTypes$2.ADTS_STREAM_TYPE:\n              stream = audio;\n              streamType = 'audio';\n              break;\n            case StreamTypes$2.METADATA_STREAM_TYPE:\n              stream = timedMetadata;\n              streamType = 'timed-metadata';\n              break;\n            default:\n              // ignore unknown stream types\n              return;\n          } // if a new packet is starting, we can flush the completed\n          // packet\n\n          if (data.payloadUnitStartIndicator) {\n            flushStream(stream, streamType, true);\n          } // buffer this fragment until we are sure we've received the\n          // complete payload\n\n          stream.data.push(data);\n          stream.size += data.data.byteLength;\n        },\n        pmt: function () {\n          var event = {\n            type: 'metadata',\n            tracks: []\n          };\n          programMapTable = data.programMapTable; // translate audio and video streams to tracks\n\n          if (programMapTable.video !== null) {\n            event.tracks.push({\n              timelineStartInfo: {\n                baseMediaDecodeTime: 0\n              },\n              id: +programMapTable.video,\n              codec: 'avc',\n              type: 'video'\n            });\n          }\n          if (programMapTable.audio !== null) {\n            event.tracks.push({\n              timelineStartInfo: {\n                baseMediaDecodeTime: 0\n              },\n              id: +programMapTable.audio,\n              codec: 'adts',\n              type: 'audio'\n            });\n          }\n          segmentHadPmt = true;\n          self.trigger('data', event);\n        }\n      })[data.type]();\n    };\n    this.reset = function () {\n      video.size = 0;\n      video.data.length = 0;\n      audio.size = 0;\n      audio.data.length = 0;\n      this.trigger('reset');\n    };\n    /**\n     * Flush any remaining input. Video PES packets may be of variable\n     * length. Normally, the start of a new video packet can trigger the\n     * finalization of the previous packet. That is not possible if no\n     * more video is forthcoming, however. In that case, some other\n     * mechanism (like the end of the file) has to be employed. When it is\n     * clear that no additional data is forthcoming, calling this method\n     * will flush the buffered packets.\n     */\n\n    this.flushStreams_ = function () {\n      // !!THIS ORDER IS IMPORTANT!!\n      // video first then audio\n      flushStream(video, 'video');\n      flushStream(audio, 'audio');\n      flushStream(timedMetadata, 'timed-metadata');\n    };\n    this.flush = function () {\n      // if on flush we haven't had a pmt emitted\n      // and we have a pmt to emit. emit the pmt\n      // so that we trigger a trackinfo downstream.\n      if (!segmentHadPmt && programMapTable) {\n        var pmt = {\n          type: 'metadata',\n          tracks: []\n        }; // translate audio and video streams to tracks\n\n        if (programMapTable.video !== null) {\n          pmt.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.video,\n            codec: 'avc',\n            type: 'video'\n          });\n        }\n        if (programMapTable.audio !== null) {\n          pmt.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.audio,\n            codec: 'adts',\n            type: 'audio'\n          });\n        }\n        self.trigger('data', pmt);\n      }\n      segmentHadPmt = false;\n      this.flushStreams_();\n      this.trigger('done');\n    };\n  };\n  ElementaryStream.prototype = new Stream$4();\n  var m2ts$1 = {\n    PAT_PID: 0x0000,\n    MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH$1,\n    TransportPacketStream: TransportPacketStream,\n    TransportParseStream: TransportParseStream,\n    ElementaryStream: ElementaryStream,\n    TimestampRolloverStream: TimestampRolloverStream,\n    CaptionStream: CaptionStream$1.CaptionStream,\n    Cea608Stream: CaptionStream$1.Cea608Stream,\n    Cea708Stream: CaptionStream$1.Cea708Stream,\n    MetadataStream: metadataStream\n  };\n  for (var type in StreamTypes$2) {\n    if (StreamTypes$2.hasOwnProperty(type)) {\n      m2ts$1[type] = StreamTypes$2[type];\n    }\n  }\n  var m2ts_1 = m2ts$1;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var Stream$3 = stream;\n  var ONE_SECOND_IN_TS$2 = clock$2.ONE_SECOND_IN_TS;\n  var AdtsStream$1;\n  var ADTS_SAMPLING_FREQUENCIES$1 = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n  /*\n   * Accepts a ElementaryStream and emits data events with parsed\n   * AAC Audio Frames of the individual packets. Input audio in ADTS\n   * format is unpacked and re-emitted as AAC frames.\n   *\n   * @see http://wiki.multimedia.cx/index.php?title=ADTS\n   * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n   */\n\n  AdtsStream$1 = function (handlePartialSegments) {\n    var buffer,\n      frameNum = 0;\n    AdtsStream$1.prototype.init.call(this);\n    this.skipWarn_ = function (start, end) {\n      this.trigger('log', {\n        level: 'warn',\n        message: `adts skiping bytes ${start} to ${end} in frame ${frameNum} outside syncword`\n      });\n    };\n    this.push = function (packet) {\n      var i = 0,\n        frameLength,\n        protectionSkipBytes,\n        oldBuffer,\n        sampleCount,\n        adtsFrameDuration;\n      if (!handlePartialSegments) {\n        frameNum = 0;\n      }\n      if (packet.type !== 'audio') {\n        // ignore non-audio data\n        return;\n      } // Prepend any data in the buffer to the input data so that we can parse\n      // aac frames the cross a PES packet boundary\n\n      if (buffer && buffer.length) {\n        oldBuffer = buffer;\n        buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n        buffer.set(oldBuffer);\n        buffer.set(packet.data, oldBuffer.byteLength);\n      } else {\n        buffer = packet.data;\n      } // unpack any ADTS frames which have been fully received\n      // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n\n      var skip; // We use i + 7 here because we want to be able to parse the entire header.\n      // If we don't have enough bytes to do that, then we definitely won't have a full frame.\n\n      while (i + 7 < buffer.length) {\n        // Look for the start of an ADTS header..\n        if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n          if (typeof skip !== 'number') {\n            skip = i;\n          } // If a valid header was not found,  jump one forward and attempt to\n          // find a valid ADTS header starting at the next byte\n\n          i++;\n          continue;\n        }\n        if (typeof skip === 'number') {\n          this.skipWarn_(skip, i);\n          skip = null;\n        } // The protection skip bit tells us if we have 2 bytes of CRC data at the\n        // end of the ADTS header\n\n        protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2; // Frame length is a 13 bit integer starting 16 bits from the\n        // end of the sync sequence\n        // NOTE: frame length includes the size of the header\n\n        frameLength = (buffer[i + 3] & 0x03) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 0xe0) >> 5;\n        sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n        adtsFrameDuration = sampleCount * ONE_SECOND_IN_TS$2 / ADTS_SAMPLING_FREQUENCIES$1[(buffer[i + 2] & 0x3c) >>> 2]; // If we don't have enough data to actually finish this ADTS frame,\n        // then we have to wait for more data\n\n        if (buffer.byteLength - i < frameLength) {\n          break;\n        } // Otherwise, deliver the complete AAC frame\n\n        this.trigger('data', {\n          pts: packet.pts + frameNum * adtsFrameDuration,\n          dts: packet.dts + frameNum * adtsFrameDuration,\n          sampleCount: sampleCount,\n          audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,\n          channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 0xc0) >>> 6,\n          samplerate: ADTS_SAMPLING_FREQUENCIES$1[(buffer[i + 2] & 0x3c) >>> 2],\n          samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n          // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n          samplesize: 16,\n          // data is the frame without it's header\n          data: buffer.subarray(i + 7 + protectionSkipBytes, i + frameLength)\n        });\n        frameNum++;\n        i += frameLength;\n      }\n      if (typeof skip === 'number') {\n        this.skipWarn_(skip, i);\n        skip = null;\n      } // remove processed bytes from the buffer.\n\n      buffer = buffer.subarray(i);\n    };\n    this.flush = function () {\n      frameNum = 0;\n      this.trigger('done');\n    };\n    this.reset = function () {\n      buffer = void 0;\n      this.trigger('reset');\n    };\n    this.endTimeline = function () {\n      buffer = void 0;\n      this.trigger('endedtimeline');\n    };\n  };\n  AdtsStream$1.prototype = new Stream$3();\n  var adts = AdtsStream$1;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var ExpGolomb$1;\n  /**\n   * Parser for exponential Golomb codes, a variable-bitwidth number encoding\n   * scheme used by h264.\n   */\n\n  ExpGolomb$1 = function (workingData) {\n    var\n      // the number of bytes left to examine in workingData\n      workingBytesAvailable = workingData.byteLength,\n      // the current word being examined\n      workingWord = 0,\n      // :uint\n      // the number of bits left to examine in the current word\n      workingBitsAvailable = 0; // :uint;\n    // ():uint\n\n    this.length = function () {\n      return 8 * workingBytesAvailable;\n    }; // ():uint\n\n    this.bitsAvailable = function () {\n      return 8 * workingBytesAvailable + workingBitsAvailable;\n    }; // ():void\n\n    this.loadWord = function () {\n      var position = workingData.byteLength - workingBytesAvailable,\n        workingBytes = new Uint8Array(4),\n        availableBytes = Math.min(4, workingBytesAvailable);\n      if (availableBytes === 0) {\n        throw new Error('no bytes available');\n      }\n      workingBytes.set(workingData.subarray(position, position + availableBytes));\n      workingWord = new DataView(workingBytes.buffer).getUint32(0); // track the amount of workingData that has been processed\n\n      workingBitsAvailable = availableBytes * 8;\n      workingBytesAvailable -= availableBytes;\n    }; // (count:int):void\n\n    this.skipBits = function (count) {\n      var skipBytes; // :int\n\n      if (workingBitsAvailable > count) {\n        workingWord <<= count;\n        workingBitsAvailable -= count;\n      } else {\n        count -= workingBitsAvailable;\n        skipBytes = Math.floor(count / 8);\n        count -= skipBytes * 8;\n        workingBytesAvailable -= skipBytes;\n        this.loadWord();\n        workingWord <<= count;\n        workingBitsAvailable -= count;\n      }\n    }; // (size:int):uint\n\n    this.readBits = function (size) {\n      var bits = Math.min(workingBitsAvailable, size),\n        // :uint\n        valu = workingWord >>> 32 - bits; // :uint\n      // if size > 31, handle error\n\n      workingBitsAvailable -= bits;\n      if (workingBitsAvailable > 0) {\n        workingWord <<= bits;\n      } else if (workingBytesAvailable > 0) {\n        this.loadWord();\n      }\n      bits = size - bits;\n      if (bits > 0) {\n        return valu << bits | this.readBits(bits);\n      }\n      return valu;\n    }; // ():uint\n\n    this.skipLeadingZeros = function () {\n      var leadingZeroCount; // :uint\n\n      for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {\n        if ((workingWord & 0x80000000 >>> leadingZeroCount) !== 0) {\n          // the first bit of working word is 1\n          workingWord <<= leadingZeroCount;\n          workingBitsAvailable -= leadingZeroCount;\n          return leadingZeroCount;\n        }\n      } // we exhausted workingWord and still have not found a 1\n\n      this.loadWord();\n      return leadingZeroCount + this.skipLeadingZeros();\n    }; // ():void\n\n    this.skipUnsignedExpGolomb = function () {\n      this.skipBits(1 + this.skipLeadingZeros());\n    }; // ():void\n\n    this.skipExpGolomb = function () {\n      this.skipBits(1 + this.skipLeadingZeros());\n    }; // ():uint\n\n    this.readUnsignedExpGolomb = function () {\n      var clz = this.skipLeadingZeros(); // :uint\n\n      return this.readBits(clz + 1) - 1;\n    }; // ():int\n\n    this.readExpGolomb = function () {\n      var valu = this.readUnsignedExpGolomb(); // :int\n\n      if (0x01 & valu) {\n        // the number is odd if the low order bit is set\n        return 1 + valu >>> 1; // add 1 to make it even, and divide by 2\n      }\n\n      return -1 * (valu >>> 1); // divide by two then make it negative\n    }; // Some convenience functions\n    // :Boolean\n\n    this.readBoolean = function () {\n      return this.readBits(1) === 1;\n    }; // ():int\n\n    this.readUnsignedByte = function () {\n      return this.readBits(8);\n    };\n    this.loadWord();\n  };\n  var expGolomb = ExpGolomb$1;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var Stream$2 = stream;\n  var ExpGolomb = expGolomb;\n  var H264Stream$1, NalByteStream;\n  var PROFILES_WITH_OPTIONAL_SPS_DATA;\n  /**\n   * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n   */\n\n  NalByteStream = function () {\n    var syncPoint = 0,\n      i,\n      buffer;\n    NalByteStream.prototype.init.call(this);\n    /*\n     * Scans a byte stream and triggers a data event with the NAL units found.\n     * @param {Object} data Event received from H264Stream\n     * @param {Uint8Array} data.data The h264 byte stream to be scanned\n     *\n     * @see H264Stream.push\n     */\n\n    this.push = function (data) {\n      var swapBuffer;\n      if (!buffer) {\n        buffer = data.data;\n      } else {\n        swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n        swapBuffer.set(buffer);\n        swapBuffer.set(data.data, buffer.byteLength);\n        buffer = swapBuffer;\n      }\n      var len = buffer.byteLength; // Rec. ITU-T H.264, Annex B\n      // scan for NAL unit boundaries\n      // a match looks like this:\n      // 0 0 1 .. NAL .. 0 0 1\n      // ^ sync point        ^ i\n      // or this:\n      // 0 0 1 .. NAL .. 0 0 0\n      // ^ sync point        ^ i\n      // advance the sync point to a NAL start, if necessary\n\n      for (; syncPoint < len - 3; syncPoint++) {\n        if (buffer[syncPoint + 2] === 1) {\n          // the sync point is properly aligned\n          i = syncPoint + 5;\n          break;\n        }\n      }\n      while (i < len) {\n        // look at the current byte to determine if we've hit the end of\n        // a NAL unit boundary\n        switch (buffer[i]) {\n          case 0:\n            // skip past non-sync sequences\n            if (buffer[i - 1] !== 0) {\n              i += 2;\n              break;\n            } else if (buffer[i - 2] !== 0) {\n              i++;\n              break;\n            } // deliver the NAL unit if it isn't empty\n\n            if (syncPoint + 3 !== i - 2) {\n              this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n            } // drop trailing zeroes\n\n            do {\n              i++;\n            } while (buffer[i] !== 1 && i < len);\n            syncPoint = i - 2;\n            i += 3;\n            break;\n          case 1:\n            // skip past non-sync sequences\n            if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {\n              i += 3;\n              break;\n            } // deliver the NAL unit\n\n            this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n            syncPoint = i - 2;\n            i += 3;\n            break;\n          default:\n            // the current byte isn't a one or zero, so it cannot be part\n            // of a sync sequence\n            i += 3;\n            break;\n        }\n      } // filter out the NAL units that were delivered\n\n      buffer = buffer.subarray(syncPoint);\n      i -= syncPoint;\n      syncPoint = 0;\n    };\n    this.reset = function () {\n      buffer = null;\n      syncPoint = 0;\n      this.trigger('reset');\n    };\n    this.flush = function () {\n      // deliver the last buffered NAL unit\n      if (buffer && buffer.byteLength > 3) {\n        this.trigger('data', buffer.subarray(syncPoint + 3));\n      } // reset the stream state\n\n      buffer = null;\n      syncPoint = 0;\n      this.trigger('done');\n    };\n    this.endTimeline = function () {\n      this.flush();\n      this.trigger('endedtimeline');\n    };\n  };\n  NalByteStream.prototype = new Stream$2(); // values of profile_idc that indicate additional fields are included in the SPS\n  // see Recommendation ITU-T H.264 (4/2013),\n  // 7.3.2.1.1 Sequence parameter set data syntax\n\n  PROFILES_WITH_OPTIONAL_SPS_DATA = {\n    100: true,\n    110: true,\n    122: true,\n    244: true,\n    44: true,\n    83: true,\n    86: true,\n    118: true,\n    128: true,\n    // TODO: the three profiles below don't\n    // appear to have sps data in the specificiation anymore?\n    138: true,\n    139: true,\n    134: true\n  };\n  /**\n   * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n   * events.\n   */\n\n  H264Stream$1 = function () {\n    var nalByteStream = new NalByteStream(),\n      self,\n      trackId,\n      currentPts,\n      currentDts,\n      discardEmulationPreventionBytes,\n      readSequenceParameterSet,\n      skipScalingList;\n    H264Stream$1.prototype.init.call(this);\n    self = this;\n    /*\n     * Pushes a packet from a stream onto the NalByteStream\n     *\n     * @param {Object} packet - A packet received from a stream\n     * @param {Uint8Array} packet.data - The raw bytes of the packet\n     * @param {Number} packet.dts - Decode timestamp of the packet\n     * @param {Number} packet.pts - Presentation timestamp of the packet\n     * @param {Number} packet.trackId - The id of the h264 track this packet came from\n     * @param {('video'|'audio')} packet.type - The type of packet\n     *\n     */\n\n    this.push = function (packet) {\n      if (packet.type !== 'video') {\n        return;\n      }\n      trackId = packet.trackId;\n      currentPts = packet.pts;\n      currentDts = packet.dts;\n      nalByteStream.push(packet);\n    };\n    /*\n     * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps\n     * for the NALUs to the next stream component.\n     * Also, preprocess caption and sequence parameter NALUs.\n     *\n     * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`\n     * @see NalByteStream.push\n     */\n\n    nalByteStream.on('data', function (data) {\n      var event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data,\n        nalUnitTypeCode: data[0] & 0x1f\n      };\n      switch (event.nalUnitTypeCode) {\n        case 0x05:\n          event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n          break;\n        case 0x06:\n          event.nalUnitType = 'sei_rbsp';\n          event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n          break;\n        case 0x07:\n          event.nalUnitType = 'seq_parameter_set_rbsp';\n          event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n          event.config = readSequenceParameterSet(event.escapedRBSP);\n          break;\n        case 0x08:\n          event.nalUnitType = 'pic_parameter_set_rbsp';\n          break;\n        case 0x09:\n          event.nalUnitType = 'access_unit_delimiter_rbsp';\n          break;\n      } // This triggers data on the H264Stream\n\n      self.trigger('data', event);\n    });\n    nalByteStream.on('done', function () {\n      self.trigger('done');\n    });\n    nalByteStream.on('partialdone', function () {\n      self.trigger('partialdone');\n    });\n    nalByteStream.on('reset', function () {\n      self.trigger('reset');\n    });\n    nalByteStream.on('endedtimeline', function () {\n      self.trigger('endedtimeline');\n    });\n    this.flush = function () {\n      nalByteStream.flush();\n    };\n    this.partialFlush = function () {\n      nalByteStream.partialFlush();\n    };\n    this.reset = function () {\n      nalByteStream.reset();\n    };\n    this.endTimeline = function () {\n      nalByteStream.endTimeline();\n    };\n    /**\n     * Advance the ExpGolomb decoder past a scaling list. The scaling\n     * list is optionally transmitted as part of a sequence parameter\n     * set and is not relevant to transmuxing.\n     * @param count {number} the number of entries in this scaling list\n     * @param expGolombDecoder {object} an ExpGolomb pointed to the\n     * start of a scaling list\n     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n     */\n\n    skipScalingList = function (count, expGolombDecoder) {\n      var lastScale = 8,\n        nextScale = 8,\n        j,\n        deltaScale;\n      for (j = 0; j < count; j++) {\n        if (nextScale !== 0) {\n          deltaScale = expGolombDecoder.readExpGolomb();\n          nextScale = (lastScale + deltaScale + 256) % 256;\n        }\n        lastScale = nextScale === 0 ? lastScale : nextScale;\n      }\n    };\n    /**\n     * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n     * Sequence Payload\"\n     * @param data {Uint8Array} the bytes of a RBSP from a NAL\n     * unit\n     * @return {Uint8Array} the RBSP without any Emulation\n     * Prevention Bytes\n     */\n\n    discardEmulationPreventionBytes = function (data) {\n      var length = data.byteLength,\n        emulationPreventionBytesPositions = [],\n        i = 1,\n        newLength,\n        newData; // Find all `Emulation Prevention Bytes`\n\n      while (i < length - 2) {\n        if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n          emulationPreventionBytesPositions.push(i + 2);\n          i += 2;\n        } else {\n          i++;\n        }\n      } // If no Emulation Prevention Bytes were found just return the original\n      // array\n\n      if (emulationPreventionBytesPositions.length === 0) {\n        return data;\n      } // Create a new array to hold the NAL unit data\n\n      newLength = length - emulationPreventionBytesPositions.length;\n      newData = new Uint8Array(newLength);\n      var sourceIndex = 0;\n      for (i = 0; i < newLength; sourceIndex++, i++) {\n        if (sourceIndex === emulationPreventionBytesPositions[0]) {\n          // Skip this byte\n          sourceIndex++; // Remove this position index\n\n          emulationPreventionBytesPositions.shift();\n        }\n        newData[i] = data[sourceIndex];\n      }\n      return newData;\n    };\n    /**\n     * Read a sequence parameter set and return some interesting video\n     * properties. A sequence parameter set is the H264 metadata that\n     * describes the properties of upcoming video frames.\n     * @param data {Uint8Array} the bytes of a sequence parameter set\n     * @return {object} an object with configuration parsed from the\n     * sequence parameter set, including the dimensions of the\n     * associated video frames.\n     */\n\n    readSequenceParameterSet = function (data) {\n      var frameCropLeftOffset = 0,\n        frameCropRightOffset = 0,\n        frameCropTopOffset = 0,\n        frameCropBottomOffset = 0,\n        expGolombDecoder,\n        profileIdc,\n        levelIdc,\n        profileCompatibility,\n        chromaFormatIdc,\n        picOrderCntType,\n        numRefFramesInPicOrderCntCycle,\n        picWidthInMbsMinus1,\n        picHeightInMapUnitsMinus1,\n        frameMbsOnlyFlag,\n        scalingListCount,\n        sarRatio = [1, 1],\n        aspectRatioIdc,\n        i;\n      expGolombDecoder = new ExpGolomb(data);\n      profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n\n      profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n\n      levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n\n      expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n      // some profiles have more optional data we don't need\n\n      if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n        chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n        if (chromaFormatIdc === 3) {\n          expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n        }\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n\n        expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n\n        expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n\n        if (expGolombDecoder.readBoolean()) {\n          // seq_scaling_matrix_present_flag\n          scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n          for (i = 0; i < scalingListCount; i++) {\n            if (expGolombDecoder.readBoolean()) {\n              // seq_scaling_list_present_flag[ i ]\n              if (i < 6) {\n                skipScalingList(16, expGolombDecoder);\n              } else {\n                skipScalingList(64, expGolombDecoder);\n              }\n            }\n          }\n        }\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n\n      picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n      if (picOrderCntType === 0) {\n        expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n      } else if (picOrderCntType === 1) {\n        expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n\n        expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n\n        expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n\n        numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n        for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n          expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n        }\n      }\n\n      expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n\n      expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n      picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n      picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n      frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n      if (frameMbsOnlyFlag === 0) {\n        expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n      }\n\n      expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n\n      if (expGolombDecoder.readBoolean()) {\n        // frame_cropping_flag\n        frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n        frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n        frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n        frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n      }\n      if (expGolombDecoder.readBoolean()) {\n        // vui_parameters_present_flag\n        if (expGolombDecoder.readBoolean()) {\n          // aspect_ratio_info_present_flag\n          aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n          switch (aspectRatioIdc) {\n            case 1:\n              sarRatio = [1, 1];\n              break;\n            case 2:\n              sarRatio = [12, 11];\n              break;\n            case 3:\n              sarRatio = [10, 11];\n              break;\n            case 4:\n              sarRatio = [16, 11];\n              break;\n            case 5:\n              sarRatio = [40, 33];\n              break;\n            case 6:\n              sarRatio = [24, 11];\n              break;\n            case 7:\n              sarRatio = [20, 11];\n              break;\n            case 8:\n              sarRatio = [32, 11];\n              break;\n            case 9:\n              sarRatio = [80, 33];\n              break;\n            case 10:\n              sarRatio = [18, 11];\n              break;\n            case 11:\n              sarRatio = [15, 11];\n              break;\n            case 12:\n              sarRatio = [64, 33];\n              break;\n            case 13:\n              sarRatio = [160, 99];\n              break;\n            case 14:\n              sarRatio = [4, 3];\n              break;\n            case 15:\n              sarRatio = [3, 2];\n              break;\n            case 16:\n              sarRatio = [2, 1];\n              break;\n            case 255:\n              {\n                sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];\n                break;\n              }\n          }\n          if (sarRatio) {\n            sarRatio[0] / sarRatio[1];\n          }\n        }\n      }\n      return {\n        profileIdc: profileIdc,\n        levelIdc: levelIdc,\n        profileCompatibility: profileCompatibility,\n        width: (picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2,\n        height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2,\n        // sar is sample aspect ratio\n        sarRatio: sarRatio\n      };\n    };\n  };\n  H264Stream$1.prototype = new Stream$2();\n  var h264 = {\n    H264Stream: H264Stream$1,\n    NalByteStream: NalByteStream\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Utilities to detect basic properties and metadata about Aac data.\n   */\n\n  var ADTS_SAMPLING_FREQUENCIES = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n  var parseId3TagSize = function (header, byteIndex) {\n    var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9],\n      flags = header[byteIndex + 5],\n      footerPresent = (flags & 16) >> 4; // if we get a negative returnSize clamp it to 0\n\n    returnSize = returnSize >= 0 ? returnSize : 0;\n    if (footerPresent) {\n      return returnSize + 20;\n    }\n    return returnSize + 10;\n  };\n  var getId3Offset = function (data, offset) {\n    if (data.length - offset < 10 || data[offset] !== 'I'.charCodeAt(0) || data[offset + 1] !== 'D'.charCodeAt(0) || data[offset + 2] !== '3'.charCodeAt(0)) {\n      return offset;\n    }\n    offset += parseId3TagSize(data, offset);\n    return getId3Offset(data, offset);\n  }; // TODO: use vhs-utils\n\n  var isLikelyAacData$1 = function (data) {\n    var offset = getId3Offset(data, 0);\n    return data.length >= offset + 2 && (data[offset] & 0xFF) === 0xFF && (data[offset + 1] & 0xF0) === 0xF0 &&\n    // verify that the 2 layer bits are 0, aka this\n    // is not mp3 data but aac data.\n    (data[offset + 1] & 0x16) === 0x10;\n  };\n  var parseSyncSafeInteger = function (data) {\n    return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];\n  }; // return a percent-encoded representation of the specified byte range\n  // @see http://en.wikipedia.org/wiki/Percent-encoding\n\n  var percentEncode = function (bytes, start, end) {\n    var i,\n      result = '';\n    for (i = start; i < end; i++) {\n      result += '%' + ('00' + bytes[i].toString(16)).slice(-2);\n    }\n    return result;\n  }; // return the string representation of the specified byte range,\n  // interpreted as ISO-8859-1.\n\n  var parseIso88591 = function (bytes, start, end) {\n    return unescape(percentEncode(bytes, start, end)); // jshint ignore:line\n  };\n\n  var parseAdtsSize = function (header, byteIndex) {\n    var lowThree = (header[byteIndex + 5] & 0xE0) >> 5,\n      middle = header[byteIndex + 4] << 3,\n      highTwo = header[byteIndex + 3] & 0x3 << 11;\n    return highTwo | middle | lowThree;\n  };\n  var parseType$4 = function (header, byteIndex) {\n    if (header[byteIndex] === 'I'.charCodeAt(0) && header[byteIndex + 1] === 'D'.charCodeAt(0) && header[byteIndex + 2] === '3'.charCodeAt(0)) {\n      return 'timed-metadata';\n    } else if (header[byteIndex] & 0xff === 0xff && (header[byteIndex + 1] & 0xf0) === 0xf0) {\n      return 'audio';\n    }\n    return null;\n  };\n  var parseSampleRate = function (packet) {\n    var i = 0;\n    while (i + 5 < packet.length) {\n      if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {\n        // If a valid header was not found,  jump one forward and attempt to\n        // find a valid ADTS header starting at the next byte\n        i++;\n        continue;\n      }\n      return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 0x3c) >>> 2];\n    }\n    return null;\n  };\n  var parseAacTimestamp = function (packet) {\n    var frameStart, frameSize, frame, frameHeader; // find the start of the first frame and the end of the tag\n\n    frameStart = 10;\n    if (packet[5] & 0x40) {\n      // advance the frame start past the extended header\n      frameStart += 4; // header size field\n\n      frameStart += parseSyncSafeInteger(packet.subarray(10, 14));\n    } // parse one or more ID3 frames\n    // http://id3.org/id3v2.3.0#ID3v2_frame_overview\n\n    do {\n      // determine the number of bytes in this frame\n      frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));\n      if (frameSize < 1) {\n        return null;\n      }\n      frameHeader = String.fromCharCode(packet[frameStart], packet[frameStart + 1], packet[frameStart + 2], packet[frameStart + 3]);\n      if (frameHeader === 'PRIV') {\n        frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);\n        for (var i = 0; i < frame.byteLength; i++) {\n          if (frame[i] === 0) {\n            var owner = parseIso88591(frame, 0, i);\n            if (owner === 'com.apple.streaming.transportStreamTimestamp') {\n              var d = frame.subarray(i + 1);\n              var size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;\n              size *= 4;\n              size += d[7] & 0x03;\n              return size;\n            }\n            break;\n          }\n        }\n      }\n      frameStart += 10; // advance past the frame header\n\n      frameStart += frameSize; // advance past the frame body\n    } while (frameStart < packet.byteLength);\n    return null;\n  };\n  var utils = {\n    isLikelyAacData: isLikelyAacData$1,\n    parseId3TagSize: parseId3TagSize,\n    parseAdtsSize: parseAdtsSize,\n    parseType: parseType$4,\n    parseSampleRate: parseSampleRate,\n    parseAacTimestamp: parseAacTimestamp\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * A stream-based aac to mp4 converter. This utility can be used to\n   * deliver mp4s to a SourceBuffer on platforms that support native\n   * Media Source Extensions.\n   */\n\n  var Stream$1 = stream;\n  var aacUtils = utils; // Constants\n\n  var AacStream$1;\n  /**\n   * Splits an incoming stream of binary data into ADTS and ID3 Frames.\n   */\n\n  AacStream$1 = function () {\n    var everything = new Uint8Array(),\n      timeStamp = 0;\n    AacStream$1.prototype.init.call(this);\n    this.setTimestamp = function (timestamp) {\n      timeStamp = timestamp;\n    };\n    this.push = function (bytes) {\n      var frameSize = 0,\n        byteIndex = 0,\n        bytesLeft,\n        chunk,\n        packet,\n        tempLength; // If there are bytes remaining from the last segment, prepend them to the\n      // bytes that were pushed in\n\n      if (everything.length) {\n        tempLength = everything.length;\n        everything = new Uint8Array(bytes.byteLength + tempLength);\n        everything.set(everything.subarray(0, tempLength));\n        everything.set(bytes, tempLength);\n      } else {\n        everything = bytes;\n      }\n      while (everything.length - byteIndex >= 3) {\n        if (everything[byteIndex] === 'I'.charCodeAt(0) && everything[byteIndex + 1] === 'D'.charCodeAt(0) && everything[byteIndex + 2] === '3'.charCodeAt(0)) {\n          // Exit early because we don't have enough to parse\n          // the ID3 tag header\n          if (everything.length - byteIndex < 10) {\n            break;\n          } // check framesize\n\n          frameSize = aacUtils.parseId3TagSize(everything, byteIndex); // Exit early if we don't have enough in the buffer\n          // to emit a full packet\n          // Add to byteIndex to support multiple ID3 tags in sequence\n\n          if (byteIndex + frameSize > everything.length) {\n            break;\n          }\n          chunk = {\n            type: 'timed-metadata',\n            data: everything.subarray(byteIndex, byteIndex + frameSize)\n          };\n          this.trigger('data', chunk);\n          byteIndex += frameSize;\n          continue;\n        } else if ((everything[byteIndex] & 0xff) === 0xff && (everything[byteIndex + 1] & 0xf0) === 0xf0) {\n          // Exit early because we don't have enough to parse\n          // the ADTS frame header\n          if (everything.length - byteIndex < 7) {\n            break;\n          }\n          frameSize = aacUtils.parseAdtsSize(everything, byteIndex); // Exit early if we don't have enough in the buffer\n          // to emit a full packet\n\n          if (byteIndex + frameSize > everything.length) {\n            break;\n          }\n          packet = {\n            type: 'audio',\n            data: everything.subarray(byteIndex, byteIndex + frameSize),\n            pts: timeStamp,\n            dts: timeStamp\n          };\n          this.trigger('data', packet);\n          byteIndex += frameSize;\n          continue;\n        }\n        byteIndex++;\n      }\n      bytesLeft = everything.length - byteIndex;\n      if (bytesLeft > 0) {\n        everything = everything.subarray(byteIndex);\n      } else {\n        everything = new Uint8Array();\n      }\n    };\n    this.reset = function () {\n      everything = new Uint8Array();\n      this.trigger('reset');\n    };\n    this.endTimeline = function () {\n      everything = new Uint8Array();\n      this.trigger('endedtimeline');\n    };\n  };\n  AacStream$1.prototype = new Stream$1();\n  var aac = AacStream$1;\n  var AUDIO_PROPERTIES$1 = ['audioobjecttype', 'channelcount', 'samplerate', 'samplingfrequencyindex', 'samplesize'];\n  var audioProperties = AUDIO_PROPERTIES$1;\n  var VIDEO_PROPERTIES$1 = ['width', 'height', 'profileIdc', 'levelIdc', 'profileCompatibility', 'sarRatio'];\n  var videoProperties = VIDEO_PROPERTIES$1;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * A stream-based mp2t to mp4 converter. This utility can be used to\n   * deliver mp4s to a SourceBuffer on platforms that support native\n   * Media Source Extensions.\n   */\n\n  var Stream = stream;\n  var mp4 = mp4Generator;\n  var frameUtils = frameUtils$1;\n  var audioFrameUtils = audioFrameUtils$1;\n  var trackDecodeInfo = trackDecodeInfo$1;\n  var m2ts = m2ts_1;\n  var clock = clock$2;\n  var AdtsStream = adts;\n  var H264Stream = h264.H264Stream;\n  var AacStream = aac;\n  var isLikelyAacData = utils.isLikelyAacData;\n  var ONE_SECOND_IN_TS$1 = clock$2.ONE_SECOND_IN_TS;\n  var AUDIO_PROPERTIES = audioProperties;\n  var VIDEO_PROPERTIES = videoProperties; // object types\n\n  var VideoSegmentStream, AudioSegmentStream, Transmuxer, CoalesceStream;\n  var retriggerForStream = function (key, event) {\n    event.stream = key;\n    this.trigger('log', event);\n  };\n  var addPipelineLogRetriggers = function (transmuxer, pipeline) {\n    var keys = Object.keys(pipeline);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]; // skip non-stream keys and headOfPipeline\n      // which is just a duplicate\n\n      if (key === 'headOfPipeline' || !pipeline[key].on) {\n        continue;\n      }\n      pipeline[key].on('log', retriggerForStream.bind(transmuxer, key));\n    }\n  };\n  /**\n   * Compare two arrays (even typed) for same-ness\n   */\n\n  var arrayEquals = function (a, b) {\n    var i;\n    if (a.length !== b.length) {\n      return false;\n    } // compare the value of each element in the array\n\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  var generateSegmentTimingInfo = function (baseMediaDecodeTime, startDts, startPts, endDts, endPts, prependedContentDuration) {\n    var ptsOffsetFromDts = startPts - startDts,\n      decodeDuration = endDts - startDts,\n      presentationDuration = endPts - startPts; // The PTS and DTS values are based on the actual stream times from the segment,\n    // however, the player time values will reflect a start from the baseMediaDecodeTime.\n    // In order to provide relevant values for the player times, base timing info on the\n    // baseMediaDecodeTime and the DTS and PTS durations of the segment.\n\n    return {\n      start: {\n        dts: baseMediaDecodeTime,\n        pts: baseMediaDecodeTime + ptsOffsetFromDts\n      },\n      end: {\n        dts: baseMediaDecodeTime + decodeDuration,\n        pts: baseMediaDecodeTime + presentationDuration\n      },\n      prependedContentDuration: prependedContentDuration,\n      baseMediaDecodeTime: baseMediaDecodeTime\n    };\n  };\n  /**\n   * Constructs a single-track, ISO BMFF media segment from AAC data\n   * events. The output of this stream can be fed to a SourceBuffer\n   * configured with a suitable initialization segment.\n   * @param track {object} track metadata configuration\n   * @param options {object} transmuxer options object\n   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n   *        in the source; false to adjust the first segment to start at 0.\n   */\n\n  AudioSegmentStream = function (track, options) {\n    var adtsFrames = [],\n      sequenceNumber,\n      earliestAllowedDts = 0,\n      audioAppendStartTs = 0,\n      videoBaseMediaDecodeTime = Infinity;\n    options = options || {};\n    sequenceNumber = options.firstSequenceNumber || 0;\n    AudioSegmentStream.prototype.init.call(this);\n    this.push = function (data) {\n      trackDecodeInfo.collectDtsInfo(track, data);\n      if (track) {\n        AUDIO_PROPERTIES.forEach(function (prop) {\n          track[prop] = data[prop];\n        });\n      } // buffer audio data until end() is called\n\n      adtsFrames.push(data);\n    };\n    this.setEarliestDts = function (earliestDts) {\n      earliestAllowedDts = earliestDts;\n    };\n    this.setVideoBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n      videoBaseMediaDecodeTime = baseMediaDecodeTime;\n    };\n    this.setAudioAppendStart = function (timestamp) {\n      audioAppendStartTs = timestamp;\n    };\n    this.flush = function () {\n      var frames, moof, mdat, boxes, frameDuration, segmentDuration, videoClockCyclesOfSilencePrefixed; // return early if no audio data has been observed\n\n      if (adtsFrames.length === 0) {\n        this.trigger('done', 'AudioSegmentStream');\n        return;\n      }\n      frames = audioFrameUtils.trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts);\n      track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps); // amount of audio filled but the value is in video clock rather than audio clock\n\n      videoClockCyclesOfSilencePrefixed = audioFrameUtils.prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime); // we have to build the index from byte locations to\n      // samples (that is, adts frames) in the audio data\n\n      track.samples = audioFrameUtils.generateSampleTable(frames); // concatenate the audio data to constuct the mdat\n\n      mdat = mp4.mdat(audioFrameUtils.concatenateFrameData(frames));\n      adtsFrames = [];\n      moof = mp4.moof(sequenceNumber, [track]);\n      boxes = new Uint8Array(moof.byteLength + mdat.byteLength); // bump the sequence number for next time\n\n      sequenceNumber++;\n      boxes.set(moof);\n      boxes.set(mdat, moof.byteLength);\n      trackDecodeInfo.clearDtsInfo(track);\n      frameDuration = Math.ceil(ONE_SECOND_IN_TS$1 * 1024 / track.samplerate); // TODO this check was added to maintain backwards compatibility (particularly with\n      // tests) on adding the timingInfo event. However, it seems unlikely that there's a\n      // valid use-case where an init segment/data should be triggered without associated\n      // frames. Leaving for now, but should be looked into.\n\n      if (frames.length) {\n        segmentDuration = frames.length * frameDuration;\n        this.trigger('segmentTimingInfo', generateSegmentTimingInfo(\n        // The audio track's baseMediaDecodeTime is in audio clock cycles, but the\n        // frame info is in video clock cycles. Convert to match expectation of\n        // listeners (that all timestamps will be based on video clock cycles).\n        clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate),\n        // frame times are already in video clock, as is segment duration\n        frames[0].dts, frames[0].pts, frames[0].dts + segmentDuration, frames[0].pts + segmentDuration, videoClockCyclesOfSilencePrefixed || 0));\n        this.trigger('timingInfo', {\n          start: frames[0].pts,\n          end: frames[0].pts + segmentDuration\n        });\n      }\n      this.trigger('data', {\n        track: track,\n        boxes: boxes\n      });\n      this.trigger('done', 'AudioSegmentStream');\n    };\n    this.reset = function () {\n      trackDecodeInfo.clearDtsInfo(track);\n      adtsFrames = [];\n      this.trigger('reset');\n    };\n  };\n  AudioSegmentStream.prototype = new Stream();\n  /**\n   * Constructs a single-track, ISO BMFF media segment from H264 data\n   * events. The output of this stream can be fed to a SourceBuffer\n   * configured with a suitable initialization segment.\n   * @param track {object} track metadata configuration\n   * @param options {object} transmuxer options object\n   * @param options.alignGopsAtEnd {boolean} If true, start from the end of the\n   *        gopsToAlignWith list when attempting to align gop pts\n   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n   *        in the source; false to adjust the first segment to start at 0.\n   */\n\n  VideoSegmentStream = function (track, options) {\n    var sequenceNumber,\n      nalUnits = [],\n      gopsToAlignWith = [],\n      config,\n      pps;\n    options = options || {};\n    sequenceNumber = options.firstSequenceNumber || 0;\n    VideoSegmentStream.prototype.init.call(this);\n    delete track.minPTS;\n    this.gopCache_ = [];\n    /**\n      * Constructs a ISO BMFF segment given H264 nalUnits\n      * @param {Object} nalUnit A data event representing a nalUnit\n      * @param {String} nalUnit.nalUnitType\n      * @param {Object} nalUnit.config Properties for a mp4 track\n      * @param {Uint8Array} nalUnit.data The nalUnit bytes\n      * @see lib/codecs/h264.js\n     **/\n\n    this.push = function (nalUnit) {\n      trackDecodeInfo.collectDtsInfo(track, nalUnit); // record the track config\n\n      if (nalUnit.nalUnitType === 'seq_parameter_set_rbsp' && !config) {\n        config = nalUnit.config;\n        track.sps = [nalUnit.data];\n        VIDEO_PROPERTIES.forEach(function (prop) {\n          track[prop] = config[prop];\n        }, this);\n      }\n      if (nalUnit.nalUnitType === 'pic_parameter_set_rbsp' && !pps) {\n        pps = nalUnit.data;\n        track.pps = [nalUnit.data];\n      } // buffer video until flush() is called\n\n      nalUnits.push(nalUnit);\n    };\n    /**\n      * Pass constructed ISO BMFF track and boxes on to the\n      * next stream in the pipeline\n     **/\n\n    this.flush = function () {\n      var frames,\n        gopForFusion,\n        gops,\n        moof,\n        mdat,\n        boxes,\n        prependedContentDuration = 0,\n        firstGop,\n        lastGop; // Throw away nalUnits at the start of the byte stream until\n      // we find the first AUD\n\n      while (nalUnits.length) {\n        if (nalUnits[0].nalUnitType === 'access_unit_delimiter_rbsp') {\n          break;\n        }\n        nalUnits.shift();\n      } // Return early if no video data has been observed\n\n      if (nalUnits.length === 0) {\n        this.resetStream_();\n        this.trigger('done', 'VideoSegmentStream');\n        return;\n      } // Organize the raw nal-units into arrays that represent\n      // higher-level constructs such as frames and gops\n      // (group-of-pictures)\n\n      frames = frameUtils.groupNalsIntoFrames(nalUnits);\n      gops = frameUtils.groupFramesIntoGops(frames); // If the first frame of this fragment is not a keyframe we have\n      // a problem since MSE (on Chrome) requires a leading keyframe.\n      //\n      // We have two approaches to repairing this situation:\n      // 1) GOP-FUSION:\n      //    This is where we keep track of the GOPS (group-of-pictures)\n      //    from previous fragments and attempt to find one that we can\n      //    prepend to the current fragment in order to create a valid\n      //    fragment.\n      // 2) KEYFRAME-PULLING:\n      //    Here we search for the first keyframe in the fragment and\n      //    throw away all the frames between the start of the fragment\n      //    and that keyframe. We then extend the duration and pull the\n      //    PTS of the keyframe forward so that it covers the time range\n      //    of the frames that were disposed of.\n      //\n      // #1 is far prefereable over #2 which can cause \"stuttering\" but\n      // requires more things to be just right.\n\n      if (!gops[0][0].keyFrame) {\n        // Search for a gop for fusion from our gopCache\n        gopForFusion = this.getGopForFusion_(nalUnits[0], track);\n        if (gopForFusion) {\n          // in order to provide more accurate timing information about the segment, save\n          // the number of seconds prepended to the original segment due to GOP fusion\n          prependedContentDuration = gopForFusion.duration;\n          gops.unshift(gopForFusion); // Adjust Gops' metadata to account for the inclusion of the\n          // new gop at the beginning\n\n          gops.byteLength += gopForFusion.byteLength;\n          gops.nalCount += gopForFusion.nalCount;\n          gops.pts = gopForFusion.pts;\n          gops.dts = gopForFusion.dts;\n          gops.duration += gopForFusion.duration;\n        } else {\n          // If we didn't find a candidate gop fall back to keyframe-pulling\n          gops = frameUtils.extendFirstKeyFrame(gops);\n        }\n      } // Trim gops to align with gopsToAlignWith\n\n      if (gopsToAlignWith.length) {\n        var alignedGops;\n        if (options.alignGopsAtEnd) {\n          alignedGops = this.alignGopsAtEnd_(gops);\n        } else {\n          alignedGops = this.alignGopsAtStart_(gops);\n        }\n        if (!alignedGops) {\n          // save all the nals in the last GOP into the gop cache\n          this.gopCache_.unshift({\n            gop: gops.pop(),\n            pps: track.pps,\n            sps: track.sps\n          }); // Keep a maximum of 6 GOPs in the cache\n\n          this.gopCache_.length = Math.min(6, this.gopCache_.length); // Clear nalUnits\n\n          nalUnits = []; // return early no gops can be aligned with desired gopsToAlignWith\n\n          this.resetStream_();\n          this.trigger('done', 'VideoSegmentStream');\n          return;\n        } // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct\n        // when recalculated before sending off to CoalesceStream\n\n        trackDecodeInfo.clearDtsInfo(track);\n        gops = alignedGops;\n      }\n      trackDecodeInfo.collectDtsInfo(track, gops); // First, we have to build the index from byte locations to\n      // samples (that is, frames) in the video data\n\n      track.samples = frameUtils.generateSampleTable(gops); // Concatenate the video data and construct the mdat\n\n      mdat = mp4.mdat(frameUtils.concatenateNalData(gops));\n      track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);\n      this.trigger('processedGopsInfo', gops.map(function (gop) {\n        return {\n          pts: gop.pts,\n          dts: gop.dts,\n          byteLength: gop.byteLength\n        };\n      }));\n      firstGop = gops[0];\n      lastGop = gops[gops.length - 1];\n      this.trigger('segmentTimingInfo', generateSegmentTimingInfo(track.baseMediaDecodeTime, firstGop.dts, firstGop.pts, lastGop.dts + lastGop.duration, lastGop.pts + lastGop.duration, prependedContentDuration));\n      this.trigger('timingInfo', {\n        start: gops[0].pts,\n        end: gops[gops.length - 1].pts + gops[gops.length - 1].duration\n      }); // save all the nals in the last GOP into the gop cache\n\n      this.gopCache_.unshift({\n        gop: gops.pop(),\n        pps: track.pps,\n        sps: track.sps\n      }); // Keep a maximum of 6 GOPs in the cache\n\n      this.gopCache_.length = Math.min(6, this.gopCache_.length); // Clear nalUnits\n\n      nalUnits = [];\n      this.trigger('baseMediaDecodeTime', track.baseMediaDecodeTime);\n      this.trigger('timelineStartInfo', track.timelineStartInfo);\n      moof = mp4.moof(sequenceNumber, [track]); // it would be great to allocate this array up front instead of\n      // throwing away hundreds of media segment fragments\n\n      boxes = new Uint8Array(moof.byteLength + mdat.byteLength); // Bump the sequence number for next time\n\n      sequenceNumber++;\n      boxes.set(moof);\n      boxes.set(mdat, moof.byteLength);\n      this.trigger('data', {\n        track: track,\n        boxes: boxes\n      });\n      this.resetStream_(); // Continue with the flush process now\n\n      this.trigger('done', 'VideoSegmentStream');\n    };\n    this.reset = function () {\n      this.resetStream_();\n      nalUnits = [];\n      this.gopCache_.length = 0;\n      gopsToAlignWith.length = 0;\n      this.trigger('reset');\n    };\n    this.resetStream_ = function () {\n      trackDecodeInfo.clearDtsInfo(track); // reset config and pps because they may differ across segments\n      // for instance, when we are rendition switching\n\n      config = undefined;\n      pps = undefined;\n    }; // Search for a candidate Gop for gop-fusion from the gop cache and\n    // return it or return null if no good candidate was found\n\n    this.getGopForFusion_ = function (nalUnit) {\n      var halfSecond = 45000,\n        // Half-a-second in a 90khz clock\n        allowableOverlap = 10000,\n        // About 3 frames @ 30fps\n        nearestDistance = Infinity,\n        dtsDistance,\n        nearestGopObj,\n        currentGop,\n        currentGopObj,\n        i; // Search for the GOP nearest to the beginning of this nal unit\n\n      for (i = 0; i < this.gopCache_.length; i++) {\n        currentGopObj = this.gopCache_[i];\n        currentGop = currentGopObj.gop; // Reject Gops with different SPS or PPS\n\n        if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {\n          continue;\n        } // Reject Gops that would require a negative baseMediaDecodeTime\n\n        if (currentGop.dts < track.timelineStartInfo.dts) {\n          continue;\n        } // The distance between the end of the gop and the start of the nalUnit\n\n        dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration; // Only consider GOPS that start before the nal unit and end within\n        // a half-second of the nal unit\n\n        if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) {\n          // Always use the closest GOP we found if there is more than\n          // one candidate\n          if (!nearestGopObj || nearestDistance > dtsDistance) {\n            nearestGopObj = currentGopObj;\n            nearestDistance = dtsDistance;\n          }\n        }\n      }\n      if (nearestGopObj) {\n        return nearestGopObj.gop;\n      }\n      return null;\n    }; // trim gop list to the first gop found that has a matching pts with a gop in the list\n    // of gopsToAlignWith starting from the START of the list\n\n    this.alignGopsAtStart_ = function (gops) {\n      var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;\n      byteLength = gops.byteLength;\n      nalCount = gops.nalCount;\n      duration = gops.duration;\n      alignIndex = gopIndex = 0;\n      while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {\n        align = gopsToAlignWith[alignIndex];\n        gop = gops[gopIndex];\n        if (align.pts === gop.pts) {\n          break;\n        }\n        if (gop.pts > align.pts) {\n          // this current gop starts after the current gop we want to align on, so increment\n          // align index\n          alignIndex++;\n          continue;\n        } // current gop starts before the current gop we want to align on. so increment gop\n        // index\n\n        gopIndex++;\n        byteLength -= gop.byteLength;\n        nalCount -= gop.nalCount;\n        duration -= gop.duration;\n      }\n      if (gopIndex === 0) {\n        // no gops to trim\n        return gops;\n      }\n      if (gopIndex === gops.length) {\n        // all gops trimmed, skip appending all gops\n        return null;\n      }\n      alignedGops = gops.slice(gopIndex);\n      alignedGops.byteLength = byteLength;\n      alignedGops.duration = duration;\n      alignedGops.nalCount = nalCount;\n      alignedGops.pts = alignedGops[0].pts;\n      alignedGops.dts = alignedGops[0].dts;\n      return alignedGops;\n    }; // trim gop list to the first gop found that has a matching pts with a gop in the list\n    // of gopsToAlignWith starting from the END of the list\n\n    this.alignGopsAtEnd_ = function (gops) {\n      var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;\n      alignIndex = gopsToAlignWith.length - 1;\n      gopIndex = gops.length - 1;\n      alignEndIndex = null;\n      matchFound = false;\n      while (alignIndex >= 0 && gopIndex >= 0) {\n        align = gopsToAlignWith[alignIndex];\n        gop = gops[gopIndex];\n        if (align.pts === gop.pts) {\n          matchFound = true;\n          break;\n        }\n        if (align.pts > gop.pts) {\n          alignIndex--;\n          continue;\n        }\n        if (alignIndex === gopsToAlignWith.length - 1) {\n          // gop.pts is greater than the last alignment candidate. If no match is found\n          // by the end of this loop, we still want to append gops that come after this\n          // point\n          alignEndIndex = gopIndex;\n        }\n        gopIndex--;\n      }\n      if (!matchFound && alignEndIndex === null) {\n        return null;\n      }\n      var trimIndex;\n      if (matchFound) {\n        trimIndex = gopIndex;\n      } else {\n        trimIndex = alignEndIndex;\n      }\n      if (trimIndex === 0) {\n        return gops;\n      }\n      var alignedGops = gops.slice(trimIndex);\n      var metadata = alignedGops.reduce(function (total, gop) {\n        total.byteLength += gop.byteLength;\n        total.duration += gop.duration;\n        total.nalCount += gop.nalCount;\n        return total;\n      }, {\n        byteLength: 0,\n        duration: 0,\n        nalCount: 0\n      });\n      alignedGops.byteLength = metadata.byteLength;\n      alignedGops.duration = metadata.duration;\n      alignedGops.nalCount = metadata.nalCount;\n      alignedGops.pts = alignedGops[0].pts;\n      alignedGops.dts = alignedGops[0].dts;\n      return alignedGops;\n    };\n    this.alignGopsWith = function (newGopsToAlignWith) {\n      gopsToAlignWith = newGopsToAlignWith;\n    };\n  };\n  VideoSegmentStream.prototype = new Stream();\n  /**\n   * A Stream that can combine multiple streams (ie. audio & video)\n   * into a single output segment for MSE. Also supports audio-only\n   * and video-only streams.\n   * @param options {object} transmuxer options object\n   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps\n   *        in the source; false to adjust the first segment to start at media timeline start.\n   */\n\n  CoalesceStream = function (options, metadataStream) {\n    // Number of Tracks per output segment\n    // If greater than 1, we combine multiple\n    // tracks into a single segment\n    this.numberOfTracks = 0;\n    this.metadataStream = metadataStream;\n    options = options || {};\n    if (typeof options.remux !== 'undefined') {\n      this.remuxTracks = !!options.remux;\n    } else {\n      this.remuxTracks = true;\n    }\n    if (typeof options.keepOriginalTimestamps === 'boolean') {\n      this.keepOriginalTimestamps = options.keepOriginalTimestamps;\n    } else {\n      this.keepOriginalTimestamps = false;\n    }\n    this.pendingTracks = [];\n    this.videoTrack = null;\n    this.pendingBoxes = [];\n    this.pendingCaptions = [];\n    this.pendingMetadata = [];\n    this.pendingBytes = 0;\n    this.emittedTracks = 0;\n    CoalesceStream.prototype.init.call(this); // Take output from multiple\n\n    this.push = function (output) {\n      // buffer incoming captions until the associated video segment\n      // finishes\n      if (output.text) {\n        return this.pendingCaptions.push(output);\n      } // buffer incoming id3 tags until the final flush\n\n      if (output.frames) {\n        return this.pendingMetadata.push(output);\n      } // Add this track to the list of pending tracks and store\n      // important information required for the construction of\n      // the final segment\n\n      this.pendingTracks.push(output.track);\n      this.pendingBytes += output.boxes.byteLength; // TODO: is there an issue for this against chrome?\n      // We unshift audio and push video because\n      // as of Chrome 75 when switching from\n      // one init segment to another if the video\n      // mdat does not appear after the audio mdat\n      // only audio will play for the duration of our transmux.\n\n      if (output.track.type === 'video') {\n        this.videoTrack = output.track;\n        this.pendingBoxes.push(output.boxes);\n      }\n      if (output.track.type === 'audio') {\n        this.audioTrack = output.track;\n        this.pendingBoxes.unshift(output.boxes);\n      }\n    };\n  };\n  CoalesceStream.prototype = new Stream();\n  CoalesceStream.prototype.flush = function (flushSource) {\n    var offset = 0,\n      event = {\n        captions: [],\n        captionStreams: {},\n        metadata: [],\n        info: {}\n      },\n      caption,\n      id3,\n      initSegment,\n      timelineStartPts = 0,\n      i;\n    if (this.pendingTracks.length < this.numberOfTracks) {\n      if (flushSource !== 'VideoSegmentStream' && flushSource !== 'AudioSegmentStream') {\n        // Return because we haven't received a flush from a data-generating\n        // portion of the segment (meaning that we have only recieved meta-data\n        // or captions.)\n        return;\n      } else if (this.remuxTracks) {\n        // Return until we have enough tracks from the pipeline to remux (if we\n        // are remuxing audio and video into a single MP4)\n        return;\n      } else if (this.pendingTracks.length === 0) {\n        // In the case where we receive a flush without any data having been\n        // received we consider it an emitted track for the purposes of coalescing\n        // `done` events.\n        // We do this for the case where there is an audio and video track in the\n        // segment but no audio data. (seen in several playlists with alternate\n        // audio tracks and no audio present in the main TS segments.)\n        this.emittedTracks++;\n        if (this.emittedTracks >= this.numberOfTracks) {\n          this.trigger('done');\n          this.emittedTracks = 0;\n        }\n        return;\n      }\n    }\n    if (this.videoTrack) {\n      timelineStartPts = this.videoTrack.timelineStartInfo.pts;\n      VIDEO_PROPERTIES.forEach(function (prop) {\n        event.info[prop] = this.videoTrack[prop];\n      }, this);\n    } else if (this.audioTrack) {\n      timelineStartPts = this.audioTrack.timelineStartInfo.pts;\n      AUDIO_PROPERTIES.forEach(function (prop) {\n        event.info[prop] = this.audioTrack[prop];\n      }, this);\n    }\n    if (this.videoTrack || this.audioTrack) {\n      if (this.pendingTracks.length === 1) {\n        event.type = this.pendingTracks[0].type;\n      } else {\n        event.type = 'combined';\n      }\n      this.emittedTracks += this.pendingTracks.length;\n      initSegment = mp4.initSegment(this.pendingTracks); // Create a new typed array to hold the init segment\n\n      event.initSegment = new Uint8Array(initSegment.byteLength); // Create an init segment containing a moov\n      // and track definitions\n\n      event.initSegment.set(initSegment); // Create a new typed array to hold the moof+mdats\n\n      event.data = new Uint8Array(this.pendingBytes); // Append each moof+mdat (one per track) together\n\n      for (i = 0; i < this.pendingBoxes.length; i++) {\n        event.data.set(this.pendingBoxes[i], offset);\n        offset += this.pendingBoxes[i].byteLength;\n      } // Translate caption PTS times into second offsets to match the\n      // video timeline for the segment, and add track info\n\n      for (i = 0; i < this.pendingCaptions.length; i++) {\n        caption = this.pendingCaptions[i];\n        caption.startTime = clock.metadataTsToSeconds(caption.startPts, timelineStartPts, this.keepOriginalTimestamps);\n        caption.endTime = clock.metadataTsToSeconds(caption.endPts, timelineStartPts, this.keepOriginalTimestamps);\n        event.captionStreams[caption.stream] = true;\n        event.captions.push(caption);\n      } // Translate ID3 frame PTS times into second offsets to match the\n      // video timeline for the segment\n\n      for (i = 0; i < this.pendingMetadata.length; i++) {\n        id3 = this.pendingMetadata[i];\n        id3.cueTime = clock.metadataTsToSeconds(id3.pts, timelineStartPts, this.keepOriginalTimestamps);\n        event.metadata.push(id3);\n      } // We add this to every single emitted segment even though we only need\n      // it for the first\n\n      event.metadata.dispatchType = this.metadataStream.dispatchType; // Reset stream state\n\n      this.pendingTracks.length = 0;\n      this.videoTrack = null;\n      this.pendingBoxes.length = 0;\n      this.pendingCaptions.length = 0;\n      this.pendingBytes = 0;\n      this.pendingMetadata.length = 0; // Emit the built segment\n      // We include captions and ID3 tags for backwards compatibility,\n      // ideally we should send only video and audio in the data event\n\n      this.trigger('data', event); // Emit each caption to the outside world\n      // Ideally, this would happen immediately on parsing captions,\n      // but we need to ensure that video data is sent back first\n      // so that caption timing can be adjusted to match video timing\n\n      for (i = 0; i < event.captions.length; i++) {\n        caption = event.captions[i];\n        this.trigger('caption', caption);\n      } // Emit each id3 tag to the outside world\n      // Ideally, this would happen immediately on parsing the tag,\n      // but we need to ensure that video data is sent back first\n      // so that ID3 frame timing can be adjusted to match video timing\n\n      for (i = 0; i < event.metadata.length; i++) {\n        id3 = event.metadata[i];\n        this.trigger('id3Frame', id3);\n      }\n    } // Only emit `done` if all tracks have been flushed and emitted\n\n    if (this.emittedTracks >= this.numberOfTracks) {\n      this.trigger('done');\n      this.emittedTracks = 0;\n    }\n  };\n  CoalesceStream.prototype.setRemux = function (val) {\n    this.remuxTracks = val;\n  };\n  /**\n   * A Stream that expects MP2T binary data as input and produces\n   * corresponding media segments, suitable for use with Media Source\n   * Extension (MSE) implementations that support the ISO BMFF byte\n   * stream format, like Chrome.\n   */\n\n  Transmuxer = function (options) {\n    var self = this,\n      hasFlushed = true,\n      videoTrack,\n      audioTrack;\n    Transmuxer.prototype.init.call(this);\n    options = options || {};\n    this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;\n    this.transmuxPipeline_ = {};\n    this.setupAacPipeline = function () {\n      var pipeline = {};\n      this.transmuxPipeline_ = pipeline;\n      pipeline.type = 'aac';\n      pipeline.metadataStream = new m2ts.MetadataStream(); // set up the parsing pipeline\n\n      pipeline.aacStream = new AacStream();\n      pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream('audio');\n      pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream('timed-metadata');\n      pipeline.adtsStream = new AdtsStream();\n      pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n      pipeline.headOfPipeline = pipeline.aacStream;\n      pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);\n      pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);\n      pipeline.metadataStream.on('timestamp', function (frame) {\n        pipeline.aacStream.setTimestamp(frame.timeStamp);\n      });\n      pipeline.aacStream.on('data', function (data) {\n        if (data.type !== 'timed-metadata' && data.type !== 'audio' || pipeline.audioSegmentStream) {\n          return;\n        }\n        audioTrack = audioTrack || {\n          timelineStartInfo: {\n            baseMediaDecodeTime: self.baseMediaDecodeTime\n          },\n          codec: 'adts',\n          type: 'audio'\n        }; // hook up the audio segment stream to the first track with aac data\n\n        pipeline.coalesceStream.numberOfTracks++;\n        pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\n        pipeline.audioSegmentStream.on('log', self.getLogTrigger_('audioSegmentStream'));\n        pipeline.audioSegmentStream.on('timingInfo', self.trigger.bind(self, 'audioTimingInfo')); // Set up the final part of the audio pipeline\n\n        pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream); // emit pmt info\n\n        self.trigger('trackinfo', {\n          hasAudio: !!audioTrack,\n          hasVideo: !!videoTrack\n        });\n      }); // Re-emit any data coming from the coalesce stream to the outside world\n\n      pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data')); // Let the consumer know we have finished flushing the entire pipeline\n\n      pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      addPipelineLogRetriggers(this, pipeline);\n    };\n    this.setupTsPipeline = function () {\n      var pipeline = {};\n      this.transmuxPipeline_ = pipeline;\n      pipeline.type = 'ts';\n      pipeline.metadataStream = new m2ts.MetadataStream(); // set up the parsing pipeline\n\n      pipeline.packetStream = new m2ts.TransportPacketStream();\n      pipeline.parseStream = new m2ts.TransportParseStream();\n      pipeline.elementaryStream = new m2ts.ElementaryStream();\n      pipeline.timestampRolloverStream = new m2ts.TimestampRolloverStream();\n      pipeline.adtsStream = new AdtsStream();\n      pipeline.h264Stream = new H264Stream();\n      pipeline.captionStream = new m2ts.CaptionStream(options);\n      pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);\n      pipeline.headOfPipeline = pipeline.packetStream; // disassemble MPEG2-TS packets into elementary streams\n\n      pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream).pipe(pipeline.timestampRolloverStream); // !!THIS ORDER IS IMPORTANT!!\n      // demux the streams\n\n      pipeline.timestampRolloverStream.pipe(pipeline.h264Stream);\n      pipeline.timestampRolloverStream.pipe(pipeline.adtsStream);\n      pipeline.timestampRolloverStream.pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream); // Hook up CEA-608/708 caption stream\n\n      pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);\n      pipeline.elementaryStream.on('data', function (data) {\n        var i;\n        if (data.type === 'metadata') {\n          i = data.tracks.length; // scan the tracks listed in the metadata\n\n          while (i--) {\n            if (!videoTrack && data.tracks[i].type === 'video') {\n              videoTrack = data.tracks[i];\n              videoTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n            } else if (!audioTrack && data.tracks[i].type === 'audio') {\n              audioTrack = data.tracks[i];\n              audioTrack.timelineStartInfo.baseMediaDecodeTime = self.baseMediaDecodeTime;\n            }\n          } // hook up the video segment stream to the first track with h264 data\n\n          if (videoTrack && !pipeline.videoSegmentStream) {\n            pipeline.coalesceStream.numberOfTracks++;\n            pipeline.videoSegmentStream = new VideoSegmentStream(videoTrack, options);\n            pipeline.videoSegmentStream.on('log', self.getLogTrigger_('videoSegmentStream'));\n            pipeline.videoSegmentStream.on('timelineStartInfo', function (timelineStartInfo) {\n              // When video emits timelineStartInfo data after a flush, we forward that\n              // info to the AudioSegmentStream, if it exists, because video timeline\n              // data takes precedence.  Do not do this if keepOriginalTimestamps is set,\n              // because this is a particularly subtle form of timestamp alteration.\n              if (audioTrack && !options.keepOriginalTimestamps) {\n                audioTrack.timelineStartInfo = timelineStartInfo; // On the first segment we trim AAC frames that exist before the\n                // very earliest DTS we have seen in video because Chrome will\n                // interpret any video track with a baseMediaDecodeTime that is\n                // non-zero as a gap.\n\n                pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts - self.baseMediaDecodeTime);\n              }\n            });\n            pipeline.videoSegmentStream.on('processedGopsInfo', self.trigger.bind(self, 'gopInfo'));\n            pipeline.videoSegmentStream.on('segmentTimingInfo', self.trigger.bind(self, 'videoSegmentTimingInfo'));\n            pipeline.videoSegmentStream.on('baseMediaDecodeTime', function (baseMediaDecodeTime) {\n              if (audioTrack) {\n                pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);\n              }\n            });\n            pipeline.videoSegmentStream.on('timingInfo', self.trigger.bind(self, 'videoTimingInfo')); // Set up the final part of the video pipeline\n\n            pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);\n          }\n          if (audioTrack && !pipeline.audioSegmentStream) {\n            // hook up the audio segment stream to the first track with aac data\n            pipeline.coalesceStream.numberOfTracks++;\n            pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);\n            pipeline.audioSegmentStream.on('log', self.getLogTrigger_('audioSegmentStream'));\n            pipeline.audioSegmentStream.on('timingInfo', self.trigger.bind(self, 'audioTimingInfo'));\n            pipeline.audioSegmentStream.on('segmentTimingInfo', self.trigger.bind(self, 'audioSegmentTimingInfo')); // Set up the final part of the audio pipeline\n\n            pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);\n          } // emit pmt info\n\n          self.trigger('trackinfo', {\n            hasAudio: !!audioTrack,\n            hasVideo: !!videoTrack\n          });\n        }\n      }); // Re-emit any data coming from the coalesce stream to the outside world\n\n      pipeline.coalesceStream.on('data', this.trigger.bind(this, 'data'));\n      pipeline.coalesceStream.on('id3Frame', function (id3Frame) {\n        id3Frame.dispatchType = pipeline.metadataStream.dispatchType;\n        self.trigger('id3Frame', id3Frame);\n      });\n      pipeline.coalesceStream.on('caption', this.trigger.bind(this, 'caption')); // Let the consumer know we have finished flushing the entire pipeline\n\n      pipeline.coalesceStream.on('done', this.trigger.bind(this, 'done'));\n      addPipelineLogRetriggers(this, pipeline);\n    }; // hook up the segment streams once track metadata is delivered\n\n    this.setBaseMediaDecodeTime = function (baseMediaDecodeTime) {\n      var pipeline = this.transmuxPipeline_;\n      if (!options.keepOriginalTimestamps) {\n        this.baseMediaDecodeTime = baseMediaDecodeTime;\n      }\n      if (audioTrack) {\n        audioTrack.timelineStartInfo.dts = undefined;\n        audioTrack.timelineStartInfo.pts = undefined;\n        trackDecodeInfo.clearDtsInfo(audioTrack);\n        if (pipeline.audioTimestampRolloverStream) {\n          pipeline.audioTimestampRolloverStream.discontinuity();\n        }\n      }\n      if (videoTrack) {\n        if (pipeline.videoSegmentStream) {\n          pipeline.videoSegmentStream.gopCache_ = [];\n        }\n        videoTrack.timelineStartInfo.dts = undefined;\n        videoTrack.timelineStartInfo.pts = undefined;\n        trackDecodeInfo.clearDtsInfo(videoTrack);\n        pipeline.captionStream.reset();\n      }\n      if (pipeline.timestampRolloverStream) {\n        pipeline.timestampRolloverStream.discontinuity();\n      }\n    };\n    this.setAudioAppendStart = function (timestamp) {\n      if (audioTrack) {\n        this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);\n      }\n    };\n    this.setRemux = function (val) {\n      var pipeline = this.transmuxPipeline_;\n      options.remux = val;\n      if (pipeline && pipeline.coalesceStream) {\n        pipeline.coalesceStream.setRemux(val);\n      }\n    };\n    this.alignGopsWith = function (gopsToAlignWith) {\n      if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {\n        this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);\n      }\n    };\n    this.getLogTrigger_ = function (key) {\n      var self = this;\n      return function (event) {\n        event.stream = key;\n        self.trigger('log', event);\n      };\n    }; // feed incoming data to the front of the parsing pipeline\n\n    this.push = function (data) {\n      if (hasFlushed) {\n        var isAac = isLikelyAacData(data);\n        if (isAac && this.transmuxPipeline_.type !== 'aac') {\n          this.setupAacPipeline();\n        } else if (!isAac && this.transmuxPipeline_.type !== 'ts') {\n          this.setupTsPipeline();\n        }\n        hasFlushed = false;\n      }\n      this.transmuxPipeline_.headOfPipeline.push(data);\n    }; // flush any buffered data\n\n    this.flush = function () {\n      hasFlushed = true; // Start at the top of the pipeline and flush all pending work\n\n      this.transmuxPipeline_.headOfPipeline.flush();\n    };\n    this.endTimeline = function () {\n      this.transmuxPipeline_.headOfPipeline.endTimeline();\n    };\n    this.reset = function () {\n      if (this.transmuxPipeline_.headOfPipeline) {\n        this.transmuxPipeline_.headOfPipeline.reset();\n      }\n    }; // Caption data has to be reset when seeking outside buffered range\n\n    this.resetCaptions = function () {\n      if (this.transmuxPipeline_.captionStream) {\n        this.transmuxPipeline_.captionStream.reset();\n      }\n    };\n  };\n  Transmuxer.prototype = new Stream();\n  var transmuxer = {\n    Transmuxer: Transmuxer,\n    VideoSegmentStream: VideoSegmentStream,\n    AudioSegmentStream: AudioSegmentStream,\n    AUDIO_PROPERTIES: AUDIO_PROPERTIES,\n    VIDEO_PROPERTIES: VIDEO_PROPERTIES,\n    // exported for testing\n    generateSegmentTimingInfo: generateSegmentTimingInfo\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   */\n\n  var toUnsigned$3 = function (value) {\n    return value >>> 0;\n  };\n  var toHexString$1 = function (value) {\n    return ('00' + value.toString(16)).slice(-2);\n  };\n  var bin = {\n    toUnsigned: toUnsigned$3,\n    toHexString: toHexString$1\n  };\n  var parseType$3 = function (buffer) {\n    var result = '';\n    result += String.fromCharCode(buffer[0]);\n    result += String.fromCharCode(buffer[1]);\n    result += String.fromCharCode(buffer[2]);\n    result += String.fromCharCode(buffer[3]);\n    return result;\n  };\n  var parseType_1 = parseType$3;\n  var toUnsigned$2 = bin.toUnsigned;\n  var parseType$2 = parseType_1;\n  var findBox$2 = function (data, path) {\n    var results = [],\n      i,\n      size,\n      type,\n      end,\n      subresults;\n    if (!path.length) {\n      // short-circuit the search for empty paths\n      return null;\n    }\n    for (i = 0; i < data.byteLength;) {\n      size = toUnsigned$2(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);\n      type = parseType$2(data.subarray(i + 4, i + 8));\n      end = size > 1 ? i + size : data.byteLength;\n      if (type === path[0]) {\n        if (path.length === 1) {\n          // this is the end of the path and we've found the box we were\n          // looking for\n          results.push(data.subarray(i + 8, end));\n        } else {\n          // recursively search for the next box along the path\n          subresults = findBox$2(data.subarray(i + 8, end), path.slice(1));\n          if (subresults.length) {\n            results = results.concat(subresults);\n          }\n        }\n      }\n      i = end;\n    } // we've finished searching all of data\n\n    return results;\n  };\n  var findBox_1 = findBox$2;\n  var toUnsigned$1 = bin.toUnsigned;\n  var getUint64$2 = numbers.getUint64;\n  var tfdt = function (data) {\n    var result = {\n      version: data[0],\n      flags: new Uint8Array(data.subarray(1, 4))\n    };\n    if (result.version === 1) {\n      result.baseMediaDecodeTime = getUint64$2(data.subarray(4));\n    } else {\n      result.baseMediaDecodeTime = toUnsigned$1(data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]);\n    }\n    return result;\n  };\n  var parseTfdt$2 = tfdt;\n  var parseSampleFlags$1 = function (flags) {\n    return {\n      isLeading: (flags[0] & 0x0c) >>> 2,\n      dependsOn: flags[0] & 0x03,\n      isDependedOn: (flags[1] & 0xc0) >>> 6,\n      hasRedundancy: (flags[1] & 0x30) >>> 4,\n      paddingValue: (flags[1] & 0x0e) >>> 1,\n      isNonSyncSample: flags[1] & 0x01,\n      degradationPriority: flags[2] << 8 | flags[3]\n    };\n  };\n  var parseSampleFlags_1 = parseSampleFlags$1;\n  var parseSampleFlags = parseSampleFlags_1;\n  var trun = function (data) {\n    var result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        samples: []\n      },\n      view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n      // Flag interpretation\n      dataOffsetPresent = result.flags[2] & 0x01,\n      // compare with 2nd byte of 0x1\n      firstSampleFlagsPresent = result.flags[2] & 0x04,\n      // compare with 2nd byte of 0x4\n      sampleDurationPresent = result.flags[1] & 0x01,\n      // compare with 2nd byte of 0x100\n      sampleSizePresent = result.flags[1] & 0x02,\n      // compare with 2nd byte of 0x200\n      sampleFlagsPresent = result.flags[1] & 0x04,\n      // compare with 2nd byte of 0x400\n      sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08,\n      // compare with 2nd byte of 0x800\n      sampleCount = view.getUint32(4),\n      offset = 8,\n      sample;\n    if (dataOffsetPresent) {\n      // 32 bit signed integer\n      result.dataOffset = view.getInt32(offset);\n      offset += 4;\n    } // Overrides the flags for the first sample only. The order of\n    // optional values will be: duration, size, compositionTimeOffset\n\n    if (firstSampleFlagsPresent && sampleCount) {\n      sample = {\n        flags: parseSampleFlags(data.subarray(offset, offset + 4))\n      };\n      offset += 4;\n      if (sampleDurationPresent) {\n        sample.duration = view.getUint32(offset);\n        offset += 4;\n      }\n      if (sampleSizePresent) {\n        sample.size = view.getUint32(offset);\n        offset += 4;\n      }\n      if (sampleCompositionTimeOffsetPresent) {\n        if (result.version === 1) {\n          sample.compositionTimeOffset = view.getInt32(offset);\n        } else {\n          sample.compositionTimeOffset = view.getUint32(offset);\n        }\n        offset += 4;\n      }\n      result.samples.push(sample);\n      sampleCount--;\n    }\n    while (sampleCount--) {\n      sample = {};\n      if (sampleDurationPresent) {\n        sample.duration = view.getUint32(offset);\n        offset += 4;\n      }\n      if (sampleSizePresent) {\n        sample.size = view.getUint32(offset);\n        offset += 4;\n      }\n      if (sampleFlagsPresent) {\n        sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));\n        offset += 4;\n      }\n      if (sampleCompositionTimeOffsetPresent) {\n        if (result.version === 1) {\n          sample.compositionTimeOffset = view.getInt32(offset);\n        } else {\n          sample.compositionTimeOffset = view.getUint32(offset);\n        }\n        offset += 4;\n      }\n      result.samples.push(sample);\n    }\n    return result;\n  };\n  var parseTrun$2 = trun;\n  var tfhd = function (data) {\n    var view = new DataView(data.buffer, data.byteOffset, data.byteLength),\n      result = {\n        version: data[0],\n        flags: new Uint8Array(data.subarray(1, 4)),\n        trackId: view.getUint32(4)\n      },\n      baseDataOffsetPresent = result.flags[2] & 0x01,\n      sampleDescriptionIndexPresent = result.flags[2] & 0x02,\n      defaultSampleDurationPresent = result.flags[2] & 0x08,\n      defaultSampleSizePresent = result.flags[2] & 0x10,\n      defaultSampleFlagsPresent = result.flags[2] & 0x20,\n      durationIsEmpty = result.flags[0] & 0x010000,\n      defaultBaseIsMoof = result.flags[0] & 0x020000,\n      i;\n    i = 8;\n    if (baseDataOffsetPresent) {\n      i += 4; // truncate top 4 bytes\n      // FIXME: should we read the full 64 bits?\n\n      result.baseDataOffset = view.getUint32(12);\n      i += 4;\n    }\n    if (sampleDescriptionIndexPresent) {\n      result.sampleDescriptionIndex = view.getUint32(i);\n      i += 4;\n    }\n    if (defaultSampleDurationPresent) {\n      result.defaultSampleDuration = view.getUint32(i);\n      i += 4;\n    }\n    if (defaultSampleSizePresent) {\n      result.defaultSampleSize = view.getUint32(i);\n      i += 4;\n    }\n    if (defaultSampleFlagsPresent) {\n      result.defaultSampleFlags = view.getUint32(i);\n    }\n    if (durationIsEmpty) {\n      result.durationIsEmpty = true;\n    }\n    if (!baseDataOffsetPresent && defaultBaseIsMoof) {\n      result.baseDataOffsetIsMoof = true;\n    }\n    return result;\n  };\n  var parseTfhd$2 = tfhd;\n  var win;\n  if (typeof window !== \"undefined\") {\n    win = window;\n  } else if (typeof commonjsGlobal !== \"undefined\") {\n    win = commonjsGlobal;\n  } else if (typeof self !== \"undefined\") {\n    win = self;\n  } else {\n    win = {};\n  }\n  var window_1 = win;\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Reads in-band CEA-708 captions out of FMP4 segments.\n   * @see https://en.wikipedia.org/wiki/CEA-708\n   */\n\n  var discardEmulationPreventionBytes = captionPacketParser.discardEmulationPreventionBytes;\n  var CaptionStream = captionStream.CaptionStream;\n  var findBox$1 = findBox_1;\n  var parseTfdt$1 = parseTfdt$2;\n  var parseTrun$1 = parseTrun$2;\n  var parseTfhd$1 = parseTfhd$2;\n  var window$2 = window_1;\n  /**\n    * Maps an offset in the mdat to a sample based on the the size of the samples.\n    * Assumes that `parseSamples` has been called first.\n    *\n    * @param {Number} offset - The offset into the mdat\n    * @param {Object[]} samples - An array of samples, parsed using `parseSamples`\n    * @return {?Object} The matching sample, or null if no match was found.\n    *\n    * @see ISO-BMFF-12/2015, Section 8.8.8\n   **/\n\n  var mapToSample = function (offset, samples) {\n    var approximateOffset = offset;\n    for (var i = 0; i < samples.length; i++) {\n      var sample = samples[i];\n      if (approximateOffset < sample.size) {\n        return sample;\n      }\n      approximateOffset -= sample.size;\n    }\n    return null;\n  };\n  /**\n    * Finds SEI nal units contained in a Media Data Box.\n    * Assumes that `parseSamples` has been called first.\n    *\n    * @param {Uint8Array} avcStream - The bytes of the mdat\n    * @param {Object[]} samples - The samples parsed out by `parseSamples`\n    * @param {Number} trackId - The trackId of this video track\n    * @return {Object[]} seiNals - the parsed SEI NALUs found.\n    *   The contents of the seiNal should match what is expected by\n    *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)\n    *\n    * @see ISO-BMFF-12/2015, Section 8.1.1\n    * @see Rec. ITU-T H.264, 7.3.2.3.1\n   **/\n\n  var findSeiNals = function (avcStream, samples, trackId) {\n    var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength),\n      result = {\n        logs: [],\n        seiNals: []\n      },\n      seiNal,\n      i,\n      length,\n      lastMatchedSample;\n    for (i = 0; i + 4 < avcStream.length; i += length) {\n      length = avcView.getUint32(i);\n      i += 4; // Bail if this doesn't appear to be an H264 stream\n\n      if (length <= 0) {\n        continue;\n      }\n      switch (avcStream[i] & 0x1F) {\n        case 0x06:\n          var data = avcStream.subarray(i + 1, i + 1 + length);\n          var matchingSample = mapToSample(i, samples);\n          seiNal = {\n            nalUnitType: 'sei_rbsp',\n            size: length,\n            data: data,\n            escapedRBSP: discardEmulationPreventionBytes(data),\n            trackId: trackId\n          };\n          if (matchingSample) {\n            seiNal.pts = matchingSample.pts;\n            seiNal.dts = matchingSample.dts;\n            lastMatchedSample = matchingSample;\n          } else if (lastMatchedSample) {\n            // If a matching sample cannot be found, use the last\n            // sample's values as they should be as close as possible\n            seiNal.pts = lastMatchedSample.pts;\n            seiNal.dts = lastMatchedSample.dts;\n          } else {\n            result.logs.push({\n              level: 'warn',\n              message: 'We\\'ve encountered a nal unit without data at ' + i + ' for trackId ' + trackId + '. See mux.js#223.'\n            });\n            break;\n          }\n          result.seiNals.push(seiNal);\n          break;\n      }\n    }\n    return result;\n  };\n  /**\n    * Parses sample information out of Track Run Boxes and calculates\n    * the absolute presentation and decode timestamps of each sample.\n    *\n    * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed\n    * @param {Number|BigInt} baseMediaDecodeTime - base media decode time from tfdt\n        @see ISO-BMFF-12/2015, Section 8.8.12\n    * @param {Object} tfhd - The parsed Track Fragment Header\n    *   @see inspect.parseTfhd\n    * @return {Object[]} the parsed samples\n    *\n    * @see ISO-BMFF-12/2015, Section 8.8.8\n   **/\n\n  var parseSamples = function (truns, baseMediaDecodeTime, tfhd) {\n    var currentDts = baseMediaDecodeTime;\n    var defaultSampleDuration = tfhd.defaultSampleDuration || 0;\n    var defaultSampleSize = tfhd.defaultSampleSize || 0;\n    var trackId = tfhd.trackId;\n    var allSamples = [];\n    truns.forEach(function (trun) {\n      // Note: We currently do not parse the sample table as well\n      // as the trun. It's possible some sources will require this.\n      // moov > trak > mdia > minf > stbl\n      var trackRun = parseTrun$1(trun);\n      var samples = trackRun.samples;\n      samples.forEach(function (sample) {\n        if (sample.duration === undefined) {\n          sample.duration = defaultSampleDuration;\n        }\n        if (sample.size === undefined) {\n          sample.size = defaultSampleSize;\n        }\n        sample.trackId = trackId;\n        sample.dts = currentDts;\n        if (sample.compositionTimeOffset === undefined) {\n          sample.compositionTimeOffset = 0;\n        }\n        if (typeof currentDts === 'bigint') {\n          sample.pts = currentDts + window$2.BigInt(sample.compositionTimeOffset);\n          currentDts += window$2.BigInt(sample.duration);\n        } else {\n          sample.pts = currentDts + sample.compositionTimeOffset;\n          currentDts += sample.duration;\n        }\n      });\n      allSamples = allSamples.concat(samples);\n    });\n    return allSamples;\n  };\n  /**\n    * Parses out caption nals from an FMP4 segment's video tracks.\n    *\n    * @param {Uint8Array} segment - The bytes of a single segment\n    * @param {Number} videoTrackId - The trackId of a video track in the segment\n    * @return {Object.<Number, Object[]>} A mapping of video trackId to\n    *   a list of seiNals found in that track\n   **/\n\n  var parseCaptionNals = function (segment, videoTrackId) {\n    // To get the samples\n    var trafs = findBox$1(segment, ['moof', 'traf']); // To get SEI NAL units\n\n    var mdats = findBox$1(segment, ['mdat']);\n    var captionNals = {};\n    var mdatTrafPairs = []; // Pair up each traf with a mdat as moofs and mdats are in pairs\n\n    mdats.forEach(function (mdat, index) {\n      var matchingTraf = trafs[index];\n      mdatTrafPairs.push({\n        mdat: mdat,\n        traf: matchingTraf\n      });\n    });\n    mdatTrafPairs.forEach(function (pair) {\n      var mdat = pair.mdat;\n      var traf = pair.traf;\n      var tfhd = findBox$1(traf, ['tfhd']); // Exactly 1 tfhd per traf\n\n      var headerInfo = parseTfhd$1(tfhd[0]);\n      var trackId = headerInfo.trackId;\n      var tfdt = findBox$1(traf, ['tfdt']); // Either 0 or 1 tfdt per traf\n\n      var baseMediaDecodeTime = tfdt.length > 0 ? parseTfdt$1(tfdt[0]).baseMediaDecodeTime : 0;\n      var truns = findBox$1(traf, ['trun']);\n      var samples;\n      var result; // Only parse video data for the chosen video track\n\n      if (videoTrackId === trackId && truns.length > 0) {\n        samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);\n        result = findSeiNals(mdat, samples, trackId);\n        if (!captionNals[trackId]) {\n          captionNals[trackId] = {\n            seiNals: [],\n            logs: []\n          };\n        }\n        captionNals[trackId].seiNals = captionNals[trackId].seiNals.concat(result.seiNals);\n        captionNals[trackId].logs = captionNals[trackId].logs.concat(result.logs);\n      }\n    });\n    return captionNals;\n  };\n  /**\n    * Parses out inband captions from an MP4 container and returns\n    * caption objects that can be used by WebVTT and the TextTrack API.\n    * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue\n    * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack\n    * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first\n    *\n    * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n    * @param {Number} trackId - The id of the video track to parse\n    * @param {Number} timescale - The timescale for the video track from the init segment\n    *\n    * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks\n    * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds\n    * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds\n    * @return {String} parsedCaptions[].text - The visible content of the caption\n   **/\n\n  var parseEmbeddedCaptions = function (segment, trackId, timescale) {\n    var captionNals; // the ISO-BMFF spec says that trackId can't be zero, but there's some broken content out there\n\n    if (trackId === null) {\n      return null;\n    }\n    captionNals = parseCaptionNals(segment, trackId);\n    var trackNals = captionNals[trackId] || {};\n    return {\n      seiNals: trackNals.seiNals,\n      logs: trackNals.logs,\n      timescale: timescale\n    };\n  };\n  /**\n    * Converts SEI NALUs into captions that can be used by video.js\n   **/\n\n  var CaptionParser = function () {\n    var isInitialized = false;\n    var captionStream; // Stores segments seen before trackId and timescale are set\n\n    var segmentCache; // Stores video track ID of the track being parsed\n\n    var trackId; // Stores the timescale of the track being parsed\n\n    var timescale; // Stores captions parsed so far\n\n    var parsedCaptions; // Stores whether we are receiving partial data or not\n\n    var parsingPartial;\n    /**\n      * A method to indicate whether a CaptionParser has been initalized\n      * @returns {Boolean}\n     **/\n\n    this.isInitialized = function () {\n      return isInitialized;\n    };\n    /**\n      * Initializes the underlying CaptionStream, SEI NAL parsing\n      * and management, and caption collection\n     **/\n\n    this.init = function (options) {\n      captionStream = new CaptionStream();\n      isInitialized = true;\n      parsingPartial = options ? options.isPartial : false; // Collect dispatched captions\n\n      captionStream.on('data', function (event) {\n        // Convert to seconds in the source's timescale\n        event.startTime = event.startPts / timescale;\n        event.endTime = event.endPts / timescale;\n        parsedCaptions.captions.push(event);\n        parsedCaptions.captionStreams[event.stream] = true;\n      });\n      captionStream.on('log', function (log) {\n        parsedCaptions.logs.push(log);\n      });\n    };\n    /**\n      * Determines if a new video track will be selected\n      * or if the timescale changed\n      * @return {Boolean}\n     **/\n\n    this.isNewInit = function (videoTrackIds, timescales) {\n      if (videoTrackIds && videoTrackIds.length === 0 || timescales && typeof timescales === 'object' && Object.keys(timescales).length === 0) {\n        return false;\n      }\n      return trackId !== videoTrackIds[0] || timescale !== timescales[trackId];\n    };\n    /**\n      * Parses out SEI captions and interacts with underlying\n      * CaptionStream to return dispatched captions\n      *\n      * @param {Uint8Array} segment - The fmp4 segment containing embedded captions\n      * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment\n      * @param {Object.<Number, Number>} timescales - The timescales found in the init segment\n      * @see parseEmbeddedCaptions\n      * @see m2ts/caption-stream.js\n     **/\n\n    this.parse = function (segment, videoTrackIds, timescales) {\n      var parsedData;\n      if (!this.isInitialized()) {\n        return null; // This is not likely to be a video segment\n      } else if (!videoTrackIds || !timescales) {\n        return null;\n      } else if (this.isNewInit(videoTrackIds, timescales)) {\n        // Use the first video track only as there is no\n        // mechanism to switch to other video tracks\n        trackId = videoTrackIds[0];\n        timescale = timescales[trackId]; // If an init segment has not been seen yet, hold onto segment\n        // data until we have one.\n        // the ISO-BMFF spec says that trackId can't be zero, but there's some broken content out there\n      } else if (trackId === null || !timescale) {\n        segmentCache.push(segment);\n        return null;\n      } // Now that a timescale and trackId is set, parse cached segments\n\n      while (segmentCache.length > 0) {\n        var cachedSegment = segmentCache.shift();\n        this.parse(cachedSegment, videoTrackIds, timescales);\n      }\n      parsedData = parseEmbeddedCaptions(segment, trackId, timescale);\n      if (parsedData && parsedData.logs) {\n        parsedCaptions.logs = parsedCaptions.logs.concat(parsedData.logs);\n      }\n      if (parsedData === null || !parsedData.seiNals) {\n        if (parsedCaptions.logs.length) {\n          return {\n            logs: parsedCaptions.logs,\n            captions: [],\n            captionStreams: []\n          };\n        }\n        return null;\n      }\n      this.pushNals(parsedData.seiNals); // Force the parsed captions to be dispatched\n\n      this.flushStream();\n      return parsedCaptions;\n    };\n    /**\n      * Pushes SEI NALUs onto CaptionStream\n      * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`\n      * Assumes that `parseCaptionNals` has been called first\n      * @see m2ts/caption-stream.js\n      **/\n\n    this.pushNals = function (nals) {\n      if (!this.isInitialized() || !nals || nals.length === 0) {\n        return null;\n      }\n      nals.forEach(function (nal) {\n        captionStream.push(nal);\n      });\n    };\n    /**\n      * Flushes underlying CaptionStream to dispatch processed, displayable captions\n      * @see m2ts/caption-stream.js\n     **/\n\n    this.flushStream = function () {\n      if (!this.isInitialized()) {\n        return null;\n      }\n      if (!parsingPartial) {\n        captionStream.flush();\n      } else {\n        captionStream.partialFlush();\n      }\n    };\n    /**\n      * Reset caption buckets for new data\n     **/\n\n    this.clearParsedCaptions = function () {\n      parsedCaptions.captions = [];\n      parsedCaptions.captionStreams = {};\n      parsedCaptions.logs = [];\n    };\n    /**\n      * Resets underlying CaptionStream\n      * @see m2ts/caption-stream.js\n     **/\n\n    this.resetCaptionStream = function () {\n      if (!this.isInitialized()) {\n        return null;\n      }\n      captionStream.reset();\n    };\n    /**\n      * Convenience method to clear all captions flushed from the\n      * CaptionStream and still being parsed\n      * @see m2ts/caption-stream.js\n     **/\n\n    this.clearAllCaptions = function () {\n      this.clearParsedCaptions();\n      this.resetCaptionStream();\n    };\n    /**\n      * Reset caption parser\n     **/\n\n    this.reset = function () {\n      segmentCache = [];\n      trackId = null;\n      timescale = null;\n      if (!parsedCaptions) {\n        parsedCaptions = {\n          captions: [],\n          // CC1, CC2, CC3, CC4\n          captionStreams: {},\n          logs: []\n        };\n      } else {\n        this.clearParsedCaptions();\n      }\n      this.resetCaptionStream();\n    };\n    this.reset();\n  };\n  var captionParser = CaptionParser;\n  /**\n   * Returns the first string in the data array ending with a null char '\\0'\n   * @param {UInt8} data \n   * @returns the string with the null char\n   */\n\n  var uint8ToCString$1 = function (data) {\n    var index = 0;\n    var curChar = String.fromCharCode(data[index]);\n    var retString = '';\n    while (curChar !== '\\0') {\n      retString += curChar;\n      index++;\n      curChar = String.fromCharCode(data[index]);\n    } // Add nullChar\n\n    retString += curChar;\n    return retString;\n  };\n  var string = {\n    uint8ToCString: uint8ToCString$1\n  };\n  var uint8ToCString = string.uint8ToCString;\n  var getUint64$1 = numbers.getUint64;\n  /**\n   * Based on: ISO/IEC 23009 Section: 5.10.3.3\n   * References:\n   * https://dashif-documents.azurewebsites.net/Events/master/event.html#emsg-format\n   * https://aomediacodec.github.io/id3-emsg/\n   * \n   * Takes emsg box data as a uint8 array and returns a emsg box object\n   * @param {UInt8Array} boxData data from emsg box\n   * @returns A parsed emsg box object\n   */\n\n  var parseEmsgBox = function (boxData) {\n    // version + flags\n    var offset = 4;\n    var version = boxData[0];\n    var scheme_id_uri, value, timescale, presentation_time, presentation_time_delta, event_duration, id, message_data;\n    if (version === 0) {\n      scheme_id_uri = uint8ToCString(boxData.subarray(offset));\n      offset += scheme_id_uri.length;\n      value = uint8ToCString(boxData.subarray(offset));\n      offset += value.length;\n      var dv = new DataView(boxData.buffer);\n      timescale = dv.getUint32(offset);\n      offset += 4;\n      presentation_time_delta = dv.getUint32(offset);\n      offset += 4;\n      event_duration = dv.getUint32(offset);\n      offset += 4;\n      id = dv.getUint32(offset);\n      offset += 4;\n    } else if (version === 1) {\n      var dv = new DataView(boxData.buffer);\n      timescale = dv.getUint32(offset);\n      offset += 4;\n      presentation_time = getUint64$1(boxData.subarray(offset));\n      offset += 8;\n      event_duration = dv.getUint32(offset);\n      offset += 4;\n      id = dv.getUint32(offset);\n      offset += 4;\n      scheme_id_uri = uint8ToCString(boxData.subarray(offset));\n      offset += scheme_id_uri.length;\n      value = uint8ToCString(boxData.subarray(offset));\n      offset += value.length;\n    }\n    message_data = new Uint8Array(boxData.subarray(offset, boxData.byteLength));\n    var emsgBox = {\n      scheme_id_uri,\n      value,\n      // if timescale is undefined or 0 set to 1 \n      timescale: timescale ? timescale : 1,\n      presentation_time,\n      presentation_time_delta,\n      event_duration,\n      id,\n      message_data\n    };\n    return isValidEmsgBox(version, emsgBox) ? emsgBox : undefined;\n  };\n  /**\n   * Scales a presentation time or time delta with an offset with a provided timescale\n   * @param {number} presentationTime \n   * @param {number} timescale \n   * @param {number} timeDelta \n   * @param {number} offset \n   * @returns the scaled time as a number\n   */\n\n  var scaleTime = function (presentationTime, timescale, timeDelta, offset) {\n    return presentationTime || presentationTime === 0 ? presentationTime / timescale : offset + timeDelta / timescale;\n  };\n  /**\n   * Checks the emsg box data for validity based on the version\n   * @param {number} version of the emsg box to validate\n   * @param {Object} emsg the emsg data to validate\n   * @returns if the box is valid as a boolean\n   */\n\n  var isValidEmsgBox = function (version, emsg) {\n    var hasScheme = emsg.scheme_id_uri !== '\\0';\n    var isValidV0Box = version === 0 && isDefined(emsg.presentation_time_delta) && hasScheme;\n    var isValidV1Box = version === 1 && isDefined(emsg.presentation_time) && hasScheme; // Only valid versions of emsg are 0 and 1\n\n    return !(version > 1) && isValidV0Box || isValidV1Box;\n  }; // Utility function to check if an object is defined\n\n  var isDefined = function (data) {\n    return data !== undefined || data !== null;\n  };\n  var emsg$1 = {\n    parseEmsgBox: parseEmsgBox,\n    scaleTime: scaleTime\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Utilities to detect basic properties and metadata about MP4s.\n   */\n\n  var toUnsigned = bin.toUnsigned;\n  var toHexString = bin.toHexString;\n  var findBox = findBox_1;\n  var parseType$1 = parseType_1;\n  var emsg = emsg$1;\n  var parseTfhd = parseTfhd$2;\n  var parseTrun = parseTrun$2;\n  var parseTfdt = parseTfdt$2;\n  var getUint64 = numbers.getUint64;\n  var timescale, startTime, compositionStartTime, getVideoTrackIds, getTracks, getTimescaleFromMediaHeader, getEmsgID3;\n  var window$1 = window_1;\n  var parseId3Frames = parseId3.parseId3Frames;\n  /**\n   * Parses an MP4 initialization segment and extracts the timescale\n   * values for any declared tracks. Timescale values indicate the\n   * number of clock ticks per second to assume for time-based values\n   * elsewhere in the MP4.\n   *\n   * To determine the start time of an MP4, you need two pieces of\n   * information: the timescale unit and the earliest base media decode\n   * time. Multiple timescales can be specified within an MP4 but the\n   * base media decode time is always expressed in the timescale from\n   * the media header box for the track:\n   * ```\n   * moov > trak > mdia > mdhd.timescale\n   * ```\n   * @param init {Uint8Array} the bytes of the init segment\n   * @return {object} a hash of track ids to timescale values or null if\n   * the init segment is malformed.\n   */\n\n  timescale = function (init) {\n    var result = {},\n      traks = findBox(init, ['moov', 'trak']); // mdhd timescale\n\n    return traks.reduce(function (result, trak) {\n      var tkhd, version, index, id, mdhd;\n      tkhd = findBox(trak, ['tkhd'])[0];\n      if (!tkhd) {\n        return null;\n      }\n      version = tkhd[0];\n      index = version === 0 ? 12 : 20;\n      id = toUnsigned(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);\n      mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n      if (!mdhd) {\n        return null;\n      }\n      version = mdhd[0];\n      index = version === 0 ? 12 : 20;\n      result[id] = toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n      return result;\n    }, result);\n  };\n  /**\n   * Determine the base media decode start time, in seconds, for an MP4\n   * fragment. If multiple fragments are specified, the earliest time is\n   * returned.\n   *\n   * The base media decode time can be parsed from track fragment\n   * metadata:\n   * ```\n   * moof > traf > tfdt.baseMediaDecodeTime\n   * ```\n   * It requires the timescale value from the mdhd to interpret.\n   *\n   * @param timescale {object} a hash of track ids to timescale values.\n   * @return {number} the earliest base media decode start time for the\n   * fragment, in seconds\n   */\n\n  startTime = function (timescale, fragment) {\n    var trafs; // we need info from two childrend of each track fragment box\n\n    trafs = findBox(fragment, ['moof', 'traf']); // determine the start times for each track\n\n    var lowestTime = trafs.reduce(function (acc, traf) {\n      var tfhd = findBox(traf, ['tfhd'])[0]; // get the track id from the tfhd\n\n      var id = toUnsigned(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]); // assume a 90kHz clock if no timescale was specified\n\n      var scale = timescale[id] || 90e3; // get the base media decode time from the tfdt\n\n      var tfdt = findBox(traf, ['tfdt'])[0];\n      var dv = new DataView(tfdt.buffer, tfdt.byteOffset, tfdt.byteLength);\n      var baseTime; // version 1 is 64 bit\n\n      if (tfdt[0] === 1) {\n        baseTime = getUint64(tfdt.subarray(4, 12));\n      } else {\n        baseTime = dv.getUint32(4);\n      } // convert base time to seconds if it is a valid number.\n\n      let seconds;\n      if (typeof baseTime === 'bigint') {\n        seconds = baseTime / window$1.BigInt(scale);\n      } else if (typeof baseTime === 'number' && !isNaN(baseTime)) {\n        seconds = baseTime / scale;\n      }\n      if (seconds < Number.MAX_SAFE_INTEGER) {\n        seconds = Number(seconds);\n      }\n      if (seconds < acc) {\n        acc = seconds;\n      }\n      return acc;\n    }, Infinity);\n    return typeof lowestTime === 'bigint' || isFinite(lowestTime) ? lowestTime : 0;\n  };\n  /**\n   * Determine the composition start, in seconds, for an MP4\n   * fragment.\n   *\n   * The composition start time of a fragment can be calculated using the base\n   * media decode time, composition time offset, and timescale, as follows:\n   *\n   * compositionStartTime = (baseMediaDecodeTime + compositionTimeOffset) / timescale\n   *\n   * All of the aforementioned information is contained within a media fragment's\n   * `traf` box, except for timescale info, which comes from the initialization\n   * segment, so a track id (also contained within a `traf`) is also necessary to\n   * associate it with a timescale\n   *\n   *\n   * @param timescales {object} - a hash of track ids to timescale values.\n   * @param fragment {Unit8Array} - the bytes of a media segment\n   * @return {number} the composition start time for the fragment, in seconds\n   **/\n\n  compositionStartTime = function (timescales, fragment) {\n    var trafBoxes = findBox(fragment, ['moof', 'traf']);\n    var baseMediaDecodeTime = 0;\n    var compositionTimeOffset = 0;\n    var trackId;\n    if (trafBoxes && trafBoxes.length) {\n      // The spec states that track run samples contained within a `traf` box are contiguous, but\n      // it does not explicitly state whether the `traf` boxes themselves are contiguous.\n      // We will assume that they are, so we only need the first to calculate start time.\n      var tfhd = findBox(trafBoxes[0], ['tfhd'])[0];\n      var trun = findBox(trafBoxes[0], ['trun'])[0];\n      var tfdt = findBox(trafBoxes[0], ['tfdt'])[0];\n      if (tfhd) {\n        var parsedTfhd = parseTfhd(tfhd);\n        trackId = parsedTfhd.trackId;\n      }\n      if (tfdt) {\n        var parsedTfdt = parseTfdt(tfdt);\n        baseMediaDecodeTime = parsedTfdt.baseMediaDecodeTime;\n      }\n      if (trun) {\n        var parsedTrun = parseTrun(trun);\n        if (parsedTrun.samples && parsedTrun.samples.length) {\n          compositionTimeOffset = parsedTrun.samples[0].compositionTimeOffset || 0;\n        }\n      }\n    } // Get timescale for this specific track. Assume a 90kHz clock if no timescale was\n    // specified.\n\n    var timescale = timescales[trackId] || 90e3; // return the composition start time, in seconds\n\n    if (typeof baseMediaDecodeTime === 'bigint') {\n      compositionTimeOffset = window$1.BigInt(compositionTimeOffset);\n      timescale = window$1.BigInt(timescale);\n    }\n    var result = (baseMediaDecodeTime + compositionTimeOffset) / timescale;\n    if (typeof result === 'bigint' && result < Number.MAX_SAFE_INTEGER) {\n      result = Number(result);\n    }\n    return result;\n  };\n  /**\n    * Find the trackIds of the video tracks in this source.\n    * Found by parsing the Handler Reference and Track Header Boxes:\n    *   moov > trak > mdia > hdlr\n    *   moov > trak > tkhd\n    *\n    * @param {Uint8Array} init - The bytes of the init segment for this source\n    * @return {Number[]} A list of trackIds\n    *\n    * @see ISO-BMFF-12/2015, Section 8.4.3\n   **/\n\n  getVideoTrackIds = function (init) {\n    var traks = findBox(init, ['moov', 'trak']);\n    var videoTrackIds = [];\n    traks.forEach(function (trak) {\n      var hdlrs = findBox(trak, ['mdia', 'hdlr']);\n      var tkhds = findBox(trak, ['tkhd']);\n      hdlrs.forEach(function (hdlr, index) {\n        var handlerType = parseType$1(hdlr.subarray(8, 12));\n        var tkhd = tkhds[index];\n        var view;\n        var version;\n        var trackId;\n        if (handlerType === 'vide') {\n          view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n          version = view.getUint8(0);\n          trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);\n          videoTrackIds.push(trackId);\n        }\n      });\n    });\n    return videoTrackIds;\n  };\n  getTimescaleFromMediaHeader = function (mdhd) {\n    // mdhd is a FullBox, meaning it will have its own version as the first byte\n    var version = mdhd[0];\n    var index = version === 0 ? 12 : 20;\n    return toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);\n  };\n  /**\n   * Get all the video, audio, and hint tracks from a non fragmented\n   * mp4 segment\n   */\n\n  getTracks = function (init) {\n    var traks = findBox(init, ['moov', 'trak']);\n    var tracks = [];\n    traks.forEach(function (trak) {\n      var track = {};\n      var tkhd = findBox(trak, ['tkhd'])[0];\n      var view, tkhdVersion; // id\n\n      if (tkhd) {\n        view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);\n        tkhdVersion = view.getUint8(0);\n        track.id = tkhdVersion === 0 ? view.getUint32(12) : view.getUint32(20);\n      }\n      var hdlr = findBox(trak, ['mdia', 'hdlr'])[0]; // type\n\n      if (hdlr) {\n        var type = parseType$1(hdlr.subarray(8, 12));\n        if (type === 'vide') {\n          track.type = 'video';\n        } else if (type === 'soun') {\n          track.type = 'audio';\n        } else {\n          track.type = type;\n        }\n      } // codec\n\n      var stsd = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n      if (stsd) {\n        var sampleDescriptions = stsd.subarray(8); // gives the codec type string\n\n        track.codec = parseType$1(sampleDescriptions.subarray(4, 8));\n        var codecBox = findBox(sampleDescriptions, [track.codec])[0];\n        var codecConfig, codecConfigType;\n        if (codecBox) {\n          // https://tools.ietf.org/html/rfc6381#section-3.3\n          if (/^[asm]vc[1-9]$/i.test(track.codec)) {\n            // we don't need anything but the \"config\" parameter of the\n            // avc1 codecBox\n            codecConfig = codecBox.subarray(78);\n            codecConfigType = parseType$1(codecConfig.subarray(4, 8));\n            if (codecConfigType === 'avcC' && codecConfig.length > 11) {\n              track.codec += '.'; // left padded with zeroes for single digit hex\n              // profile idc\n\n              track.codec += toHexString(codecConfig[9]); // the byte containing the constraint_set flags\n\n              track.codec += toHexString(codecConfig[10]); // level idc\n\n              track.codec += toHexString(codecConfig[11]);\n            } else {\n              // TODO: show a warning that we couldn't parse the codec\n              // and are using the default\n              track.codec = 'avc1.4d400d';\n            }\n          } else if (/^mp4[a,v]$/i.test(track.codec)) {\n            // we do not need anything but the streamDescriptor of the mp4a codecBox\n            codecConfig = codecBox.subarray(28);\n            codecConfigType = parseType$1(codecConfig.subarray(4, 8));\n            if (codecConfigType === 'esds' && codecConfig.length > 20 && codecConfig[19] !== 0) {\n              track.codec += '.' + toHexString(codecConfig[19]); // this value is only a single digit\n\n              track.codec += '.' + toHexString(codecConfig[20] >>> 2 & 0x3f).replace(/^0/, '');\n            } else {\n              // TODO: show a warning that we couldn't parse the codec\n              // and are using the default\n              track.codec = 'mp4a.40.2';\n            }\n          } else {\n            // flac, opus, etc\n            track.codec = track.codec.toLowerCase();\n          }\n        }\n      }\n      var mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n      if (mdhd) {\n        track.timescale = getTimescaleFromMediaHeader(mdhd);\n      }\n      tracks.push(track);\n    });\n    return tracks;\n  };\n  /**\n   * Returns an array of emsg ID3 data from the provided segmentData.\n   * An offset can also be provided as the Latest Arrival Time to calculate \n   * the Event Start Time of v0 EMSG boxes. \n   * See: https://dashif-documents.azurewebsites.net/Events/master/event.html#Inband-event-timing\n   * \n   * @param {Uint8Array} segmentData the segment byte array.\n   * @param {number} offset the segment start time or Latest Arrival Time, \n   * @return {Object[]} an array of ID3 parsed from EMSG boxes\n   */\n\n  getEmsgID3 = function (segmentData, offset = 0) {\n    var emsgBoxes = findBox(segmentData, ['emsg']);\n    return emsgBoxes.map(data => {\n      var parsedBox = emsg.parseEmsgBox(new Uint8Array(data));\n      var parsedId3Frames = parseId3Frames(parsedBox.message_data);\n      return {\n        cueTime: emsg.scaleTime(parsedBox.presentation_time, parsedBox.timescale, parsedBox.presentation_time_delta, offset),\n        duration: emsg.scaleTime(parsedBox.event_duration, parsedBox.timescale),\n        frames: parsedId3Frames\n      };\n    });\n  };\n  var probe$2 = {\n    // export mp4 inspector's findBox and parseType for backwards compatibility\n    findBox: findBox,\n    parseType: parseType$1,\n    timescale: timescale,\n    startTime: startTime,\n    compositionStartTime: compositionStartTime,\n    videoTrackIds: getVideoTrackIds,\n    tracks: getTracks,\n    getTimescaleFromMediaHeader: getTimescaleFromMediaHeader,\n    getEmsgID3: getEmsgID3\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Utilities to detect basic properties and metadata about TS Segments.\n   */\n\n  var StreamTypes$1 = streamTypes;\n  var parsePid = function (packet) {\n    var pid = packet[1] & 0x1f;\n    pid <<= 8;\n    pid |= packet[2];\n    return pid;\n  };\n  var parsePayloadUnitStartIndicator = function (packet) {\n    return !!(packet[1] & 0x40);\n  };\n  var parseAdaptionField = function (packet) {\n    var offset = 0; // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n\n    if ((packet[3] & 0x30) >>> 4 > 0x01) {\n      offset += packet[4] + 1;\n    }\n    return offset;\n  };\n  var parseType = function (packet, pmtPid) {\n    var pid = parsePid(packet);\n    if (pid === 0) {\n      return 'pat';\n    } else if (pid === pmtPid) {\n      return 'pmt';\n    } else if (pmtPid) {\n      return 'pes';\n    }\n    return null;\n  };\n  var parsePat = function (packet) {\n    var pusi = parsePayloadUnitStartIndicator(packet);\n    var offset = 4 + parseAdaptionField(packet);\n    if (pusi) {\n      offset += packet[offset] + 1;\n    }\n    return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n  };\n  var parsePmt = function (packet) {\n    var programMapTable = {};\n    var pusi = parsePayloadUnitStartIndicator(packet);\n    var payloadOffset = 4 + parseAdaptionField(packet);\n    if (pusi) {\n      payloadOffset += packet[payloadOffset] + 1;\n    } // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n\n    if (!(packet[payloadOffset + 5] & 0x01)) {\n      return;\n    }\n    var sectionLength, tableEnd, programInfoLength; // the mapping table ends at the end of the current section\n\n    sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n    tableEnd = 3 + sectionLength - 4; // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n\n    programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11]; // advance the offset to the first entry in the mapping table\n\n    var offset = 12 + programInfoLength;\n    while (offset < tableEnd) {\n      var i = payloadOffset + offset; // add an entry that maps the elementary_pid to the stream_type\n\n      programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i]; // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n\n      offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n    }\n    return programMapTable;\n  };\n  var parsePesType = function (packet, programMapTable) {\n    var pid = parsePid(packet);\n    var type = programMapTable[pid];\n    switch (type) {\n      case StreamTypes$1.H264_STREAM_TYPE:\n        return 'video';\n      case StreamTypes$1.ADTS_STREAM_TYPE:\n        return 'audio';\n      case StreamTypes$1.METADATA_STREAM_TYPE:\n        return 'timed-metadata';\n      default:\n        return null;\n    }\n  };\n  var parsePesTime = function (packet) {\n    var pusi = parsePayloadUnitStartIndicator(packet);\n    if (!pusi) {\n      return null;\n    }\n    var offset = 4 + parseAdaptionField(packet);\n    if (offset >= packet.byteLength) {\n      // From the H 222.0 MPEG-TS spec\n      // \"For transport stream packets carrying PES packets, stuffing is needed when there\n      //  is insufficient PES packet data to completely fill the transport stream packet\n      //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n      //  the sum of the lengths of the data elements in it, so that the payload bytes\n      //  remaining after the adaptation field exactly accommodates the available PES packet\n      //  data.\"\n      //\n      // If the offset is >= the length of the packet, then the packet contains no data\n      // and instead is just adaption field stuffing bytes\n      return null;\n    }\n    var pes = null;\n    var ptsDtsFlags; // PES packets may be annotated with a PTS value, or a PTS value\n    // and a DTS value. Determine what combination of values is\n    // available to work with.\n\n    ptsDtsFlags = packet[offset + 7]; // PTS and DTS are normally stored as a 33-bit number.  Javascript\n    // performs all bitwise operations on 32-bit integers but javascript\n    // supports a much greater range (52-bits) of integer using standard\n    // mathematical operations.\n    // We construct a 31-bit value using bitwise operators over the 31\n    // most significant bits and then multiply by 4 (equal to a left-shift\n    // of 2) before we add the final 2 least significant bits of the\n    // timestamp (equal to an OR.)\n\n    if (ptsDtsFlags & 0xC0) {\n      pes = {}; // the PTS and DTS are not written out directly. For information\n      // on how they are encoded, see\n      // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n\n      pes.pts = (packet[offset + 9] & 0x0E) << 27 | (packet[offset + 10] & 0xFF) << 20 | (packet[offset + 11] & 0xFE) << 12 | (packet[offset + 12] & 0xFF) << 5 | (packet[offset + 13] & 0xFE) >>> 3;\n      pes.pts *= 4; // Left shift by 2\n\n      pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n\n      pes.dts = pes.pts;\n      if (ptsDtsFlags & 0x40) {\n        pes.dts = (packet[offset + 14] & 0x0E) << 27 | (packet[offset + 15] & 0xFF) << 20 | (packet[offset + 16] & 0xFE) << 12 | (packet[offset + 17] & 0xFF) << 5 | (packet[offset + 18] & 0xFE) >>> 3;\n        pes.dts *= 4; // Left shift by 2\n\n        pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n      }\n    }\n\n    return pes;\n  };\n  var parseNalUnitType = function (type) {\n    switch (type) {\n      case 0x05:\n        return 'slice_layer_without_partitioning_rbsp_idr';\n      case 0x06:\n        return 'sei_rbsp';\n      case 0x07:\n        return 'seq_parameter_set_rbsp';\n      case 0x08:\n        return 'pic_parameter_set_rbsp';\n      case 0x09:\n        return 'access_unit_delimiter_rbsp';\n      default:\n        return null;\n    }\n  };\n  var videoPacketContainsKeyFrame = function (packet) {\n    var offset = 4 + parseAdaptionField(packet);\n    var frameBuffer = packet.subarray(offset);\n    var frameI = 0;\n    var frameSyncPoint = 0;\n    var foundKeyFrame = false;\n    var nalType; // advance the sync point to a NAL start, if necessary\n\n    for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n      if (frameBuffer[frameSyncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        frameI = frameSyncPoint + 5;\n        break;\n      }\n    }\n    while (frameI < frameBuffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (frameBuffer[frameI]) {\n        case 0:\n          // skip past non-sync sequences\n          if (frameBuffer[frameI - 1] !== 0) {\n            frameI += 2;\n            break;\n          } else if (frameBuffer[frameI - 2] !== 0) {\n            frameI++;\n            break;\n          }\n          if (frameSyncPoint + 3 !== frameI - 2) {\n            nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n            if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n              foundKeyFrame = true;\n            }\n          } // drop trailing zeroes\n\n          do {\n            frameI++;\n          } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n          frameSyncPoint = frameI - 2;\n          frameI += 3;\n          break;\n        case 1:\n          // skip past non-sync sequences\n          if (frameBuffer[frameI - 1] !== 0 || frameBuffer[frameI - 2] !== 0) {\n            frameI += 3;\n            break;\n          }\n          nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n          if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n            foundKeyFrame = true;\n          }\n          frameSyncPoint = frameI - 2;\n          frameI += 3;\n          break;\n        default:\n          // the current byte isn't a one or zero, so it cannot be part\n          // of a sync sequence\n          frameI += 3;\n          break;\n      }\n    }\n    frameBuffer = frameBuffer.subarray(frameSyncPoint);\n    frameI -= frameSyncPoint;\n    frameSyncPoint = 0; // parse the final nal\n\n    if (frameBuffer && frameBuffer.byteLength > 3) {\n      nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n      if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n        foundKeyFrame = true;\n      }\n    }\n    return foundKeyFrame;\n  };\n  var probe$1 = {\n    parseType: parseType,\n    parsePat: parsePat,\n    parsePmt: parsePmt,\n    parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n    parsePesType: parsePesType,\n    parsePesTime: parsePesTime,\n    videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n  };\n  /**\n   * mux.js\n   *\n   * Copyright (c) Brightcove\n   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE\n   *\n   * Parse mpeg2 transport stream packets to extract basic timing information\n   */\n\n  var StreamTypes = streamTypes;\n  var handleRollover = timestampRolloverStream.handleRollover;\n  var probe = {};\n  probe.ts = probe$1;\n  probe.aac = utils;\n  var ONE_SECOND_IN_TS = clock$2.ONE_SECOND_IN_TS;\n  var MP2T_PACKET_LENGTH = 188,\n    // bytes\n    SYNC_BYTE = 0x47;\n  /**\n   * walks through segment data looking for pat and pmt packets to parse out\n   * program map table information\n   */\n\n  var parsePsi_ = function (bytes, pmt) {\n    var startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      packet,\n      type;\n    while (endIndex < bytes.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n        switch (type) {\n          case 'pat':\n            pmt.pid = probe.ts.parsePat(packet);\n            break;\n          case 'pmt':\n            var table = probe.ts.parsePmt(packet);\n            pmt.table = pmt.table || {};\n            Object.keys(table).forEach(function (key) {\n              pmt.table[key] = table[key];\n            });\n            break;\n        }\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n      startIndex++;\n      endIndex++;\n    }\n  };\n  /**\n   * walks through the segment data from the start and end to get timing information\n   * for the first and last audio pes packets\n   */\n\n  var parseAudioPes_ = function (bytes, pmt, result) {\n    var startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      packet,\n      type,\n      pesType,\n      pusi,\n      parsed;\n    var endLoop = false; // Start walking from start of segment to get first audio packet\n\n    while (endIndex <= bytes.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n        switch (type) {\n          case 'pes':\n            pesType = probe.ts.parsePesType(packet, pmt.table);\n            pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n            if (pesType === 'audio' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'audio';\n                result.audio.push(parsed);\n                endLoop = true;\n              }\n            }\n            break;\n        }\n        if (endLoop) {\n          break;\n        }\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n      startIndex++;\n      endIndex++;\n    } // Start walking from end of segment to get last audio packet\n\n    endIndex = bytes.byteLength;\n    startIndex = endIndex - MP2T_PACKET_LENGTH;\n    endLoop = false;\n    while (startIndex >= 0) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n        switch (type) {\n          case 'pes':\n            pesType = probe.ts.parsePesType(packet, pmt.table);\n            pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n            if (pesType === 'audio' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'audio';\n                result.audio.push(parsed);\n                endLoop = true;\n              }\n            }\n            break;\n        }\n        if (endLoop) {\n          break;\n        }\n        startIndex -= MP2T_PACKET_LENGTH;\n        endIndex -= MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n      startIndex--;\n      endIndex--;\n    }\n  };\n  /**\n   * walks through the segment data from the start and end to get timing information\n   * for the first and last video pes packets as well as timing information for the first\n   * key frame.\n   */\n\n  var parseVideoPes_ = function (bytes, pmt, result) {\n    var startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      packet,\n      type,\n      pesType,\n      pusi,\n      parsed,\n      frame,\n      i,\n      pes;\n    var endLoop = false;\n    var currentFrame = {\n      data: [],\n      size: 0\n    }; // Start walking from start of segment to get first video packet\n\n    while (endIndex < bytes.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n        switch (type) {\n          case 'pes':\n            pesType = probe.ts.parsePesType(packet, pmt.table);\n            pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n            if (pesType === 'video') {\n              if (pusi && !endLoop) {\n                parsed = probe.ts.parsePesTime(packet);\n                if (parsed) {\n                  parsed.type = 'video';\n                  result.video.push(parsed);\n                  endLoop = true;\n                }\n              }\n              if (!result.firstKeyFrame) {\n                if (pusi) {\n                  if (currentFrame.size !== 0) {\n                    frame = new Uint8Array(currentFrame.size);\n                    i = 0;\n                    while (currentFrame.data.length) {\n                      pes = currentFrame.data.shift();\n                      frame.set(pes, i);\n                      i += pes.byteLength;\n                    }\n                    if (probe.ts.videoPacketContainsKeyFrame(frame)) {\n                      var firstKeyFrame = probe.ts.parsePesTime(frame); // PTS/DTS may not be available. Simply *not* setting\n                      // the keyframe seems to work fine with HLS playback\n                      // and definitely preferable to a crash with TypeError...\n\n                      if (firstKeyFrame) {\n                        result.firstKeyFrame = firstKeyFrame;\n                        result.firstKeyFrame.type = 'video';\n                      } else {\n                        // eslint-disable-next-line\n                        console.warn('Failed to extract PTS/DTS from PES at first keyframe. ' + 'This could be an unusual TS segment, or else mux.js did not ' + 'parse your TS segment correctly. If you know your TS ' + 'segments do contain PTS/DTS on keyframes please file a bug ' + 'report! You can try ffprobe to double check for yourself.');\n                      }\n                    }\n                    currentFrame.size = 0;\n                  }\n                }\n                currentFrame.data.push(packet);\n                currentFrame.size += packet.byteLength;\n              }\n            }\n            break;\n        }\n        if (endLoop && result.firstKeyFrame) {\n          break;\n        }\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n      startIndex++;\n      endIndex++;\n    } // Start walking from end of segment to get last video packet\n\n    endIndex = bytes.byteLength;\n    startIndex = endIndex - MP2T_PACKET_LENGTH;\n    endLoop = false;\n    while (startIndex >= 0) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {\n        // We found a packet\n        packet = bytes.subarray(startIndex, endIndex);\n        type = probe.ts.parseType(packet, pmt.pid);\n        switch (type) {\n          case 'pes':\n            pesType = probe.ts.parsePesType(packet, pmt.table);\n            pusi = probe.ts.parsePayloadUnitStartIndicator(packet);\n            if (pesType === 'video' && pusi) {\n              parsed = probe.ts.parsePesTime(packet);\n              if (parsed) {\n                parsed.type = 'video';\n                result.video.push(parsed);\n                endLoop = true;\n              }\n            }\n            break;\n        }\n        if (endLoop) {\n          break;\n        }\n        startIndex -= MP2T_PACKET_LENGTH;\n        endIndex -= MP2T_PACKET_LENGTH;\n        continue;\n      } // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n\n      startIndex--;\n      endIndex--;\n    }\n  };\n  /**\n   * Adjusts the timestamp information for the segment to account for\n   * rollover and convert to seconds based on pes packet timescale (90khz clock)\n   */\n\n  var adjustTimestamp_ = function (segmentInfo, baseTimestamp) {\n    if (segmentInfo.audio && segmentInfo.audio.length) {\n      var audioBaseTimestamp = baseTimestamp;\n      if (typeof audioBaseTimestamp === 'undefined' || isNaN(audioBaseTimestamp)) {\n        audioBaseTimestamp = segmentInfo.audio[0].dts;\n      }\n      segmentInfo.audio.forEach(function (info) {\n        info.dts = handleRollover(info.dts, audioBaseTimestamp);\n        info.pts = handleRollover(info.pts, audioBaseTimestamp); // time in seconds\n\n        info.dtsTime = info.dts / ONE_SECOND_IN_TS;\n        info.ptsTime = info.pts / ONE_SECOND_IN_TS;\n      });\n    }\n    if (segmentInfo.video && segmentInfo.video.length) {\n      var videoBaseTimestamp = baseTimestamp;\n      if (typeof videoBaseTimestamp === 'undefined' || isNaN(videoBaseTimestamp)) {\n        videoBaseTimestamp = segmentInfo.video[0].dts;\n      }\n      segmentInfo.video.forEach(function (info) {\n        info.dts = handleRollover(info.dts, videoBaseTimestamp);\n        info.pts = handleRollover(info.pts, videoBaseTimestamp); // time in seconds\n\n        info.dtsTime = info.dts / ONE_SECOND_IN_TS;\n        info.ptsTime = info.pts / ONE_SECOND_IN_TS;\n      });\n      if (segmentInfo.firstKeyFrame) {\n        var frame = segmentInfo.firstKeyFrame;\n        frame.dts = handleRollover(frame.dts, videoBaseTimestamp);\n        frame.pts = handleRollover(frame.pts, videoBaseTimestamp); // time in seconds\n\n        frame.dtsTime = frame.dts / ONE_SECOND_IN_TS;\n        frame.ptsTime = frame.pts / ONE_SECOND_IN_TS;\n      }\n    }\n  };\n  /**\n   * inspects the aac data stream for start and end time information\n   */\n\n  var inspectAac_ = function (bytes) {\n    var endLoop = false,\n      audioCount = 0,\n      sampleRate = null,\n      timestamp = null,\n      frameSize = 0,\n      byteIndex = 0,\n      packet;\n    while (bytes.length - byteIndex >= 3) {\n      var type = probe.aac.parseType(bytes, byteIndex);\n      switch (type) {\n        case 'timed-metadata':\n          // Exit early because we don't have enough to parse\n          // the ID3 tag header\n          if (bytes.length - byteIndex < 10) {\n            endLoop = true;\n            break;\n          }\n          frameSize = probe.aac.parseId3TagSize(bytes, byteIndex); // Exit early if we don't have enough in the buffer\n          // to emit a full packet\n\n          if (frameSize > bytes.length) {\n            endLoop = true;\n            break;\n          }\n          if (timestamp === null) {\n            packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n            timestamp = probe.aac.parseAacTimestamp(packet);\n          }\n          byteIndex += frameSize;\n          break;\n        case 'audio':\n          // Exit early because we don't have enough to parse\n          // the ADTS frame header\n          if (bytes.length - byteIndex < 7) {\n            endLoop = true;\n            break;\n          }\n          frameSize = probe.aac.parseAdtsSize(bytes, byteIndex); // Exit early if we don't have enough in the buffer\n          // to emit a full packet\n\n          if (frameSize > bytes.length) {\n            endLoop = true;\n            break;\n          }\n          if (sampleRate === null) {\n            packet = bytes.subarray(byteIndex, byteIndex + frameSize);\n            sampleRate = probe.aac.parseSampleRate(packet);\n          }\n          audioCount++;\n          byteIndex += frameSize;\n          break;\n        default:\n          byteIndex++;\n          break;\n      }\n      if (endLoop) {\n        return null;\n      }\n    }\n    if (sampleRate === null || timestamp === null) {\n      return null;\n    }\n    var audioTimescale = ONE_SECOND_IN_TS / sampleRate;\n    var result = {\n      audio: [{\n        type: 'audio',\n        dts: timestamp,\n        pts: timestamp\n      }, {\n        type: 'audio',\n        dts: timestamp + audioCount * 1024 * audioTimescale,\n        pts: timestamp + audioCount * 1024 * audioTimescale\n      }]\n    };\n    return result;\n  };\n  /**\n   * inspects the transport stream segment data for start and end time information\n   * of the audio and video tracks (when present) as well as the first key frame's\n   * start time.\n   */\n\n  var inspectTs_ = function (bytes) {\n    var pmt = {\n      pid: null,\n      table: null\n    };\n    var result = {};\n    parsePsi_(bytes, pmt);\n    for (var pid in pmt.table) {\n      if (pmt.table.hasOwnProperty(pid)) {\n        var type = pmt.table[pid];\n        switch (type) {\n          case StreamTypes.H264_STREAM_TYPE:\n            result.video = [];\n            parseVideoPes_(bytes, pmt, result);\n            if (result.video.length === 0) {\n              delete result.video;\n            }\n            break;\n          case StreamTypes.ADTS_STREAM_TYPE:\n            result.audio = [];\n            parseAudioPes_(bytes, pmt, result);\n            if (result.audio.length === 0) {\n              delete result.audio;\n            }\n            break;\n        }\n      }\n    }\n    return result;\n  };\n  /**\n   * Inspects segment byte data and returns an object with start and end timing information\n   *\n   * @param {Uint8Array} bytes The segment byte data\n   * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame\n   *  timestamps for rollover. This value must be in 90khz clock.\n   * @return {Object} Object containing start and end frame timing info of segment.\n   */\n\n  var inspect = function (bytes, baseTimestamp) {\n    var isAacData = probe.aac.isLikelyAacData(bytes);\n    var result;\n    if (isAacData) {\n      result = inspectAac_(bytes);\n    } else {\n      result = inspectTs_(bytes);\n    }\n    if (!result || !result.audio && !result.video) {\n      return null;\n    }\n    adjustTimestamp_(result, baseTimestamp);\n    return result;\n  };\n  var tsInspector = {\n    inspect: inspect,\n    parseAudioPes_: parseAudioPes_\n  };\n  /* global self */\n\n  /**\n   * Re-emits transmuxer events by converting them into messages to the\n   * world outside the worker.\n   *\n   * @param {Object} transmuxer the transmuxer to wire events on\n   * @private\n   */\n\n  const wireTransmuxerEvents = function (self, transmuxer) {\n    transmuxer.on('data', function (segment) {\n      // transfer ownership of the underlying ArrayBuffer\n      // instead of doing a copy to save memory\n      // ArrayBuffers are transferable but generic TypedArrays are not\n      // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)\n      const initArray = segment.initSegment;\n      segment.initSegment = {\n        data: initArray.buffer,\n        byteOffset: initArray.byteOffset,\n        byteLength: initArray.byteLength\n      };\n      const typedArray = segment.data;\n      segment.data = typedArray.buffer;\n      self.postMessage({\n        action: 'data',\n        segment,\n        byteOffset: typedArray.byteOffset,\n        byteLength: typedArray.byteLength\n      }, [segment.data]);\n    });\n    transmuxer.on('done', function (data) {\n      self.postMessage({\n        action: 'done'\n      });\n    });\n    transmuxer.on('gopInfo', function (gopInfo) {\n      self.postMessage({\n        action: 'gopInfo',\n        gopInfo\n      });\n    });\n    transmuxer.on('videoSegmentTimingInfo', function (timingInfo) {\n      const videoSegmentTimingInfo = {\n        start: {\n          decode: clock$2.videoTsToSeconds(timingInfo.start.dts),\n          presentation: clock$2.videoTsToSeconds(timingInfo.start.pts)\n        },\n        end: {\n          decode: clock$2.videoTsToSeconds(timingInfo.end.dts),\n          presentation: clock$2.videoTsToSeconds(timingInfo.end.pts)\n        },\n        baseMediaDecodeTime: clock$2.videoTsToSeconds(timingInfo.baseMediaDecodeTime)\n      };\n      if (timingInfo.prependedContentDuration) {\n        videoSegmentTimingInfo.prependedContentDuration = clock$2.videoTsToSeconds(timingInfo.prependedContentDuration);\n      }\n      self.postMessage({\n        action: 'videoSegmentTimingInfo',\n        videoSegmentTimingInfo\n      });\n    });\n    transmuxer.on('audioSegmentTimingInfo', function (timingInfo) {\n      // Note that all times for [audio/video]SegmentTimingInfo events are in video clock\n      const audioSegmentTimingInfo = {\n        start: {\n          decode: clock$2.videoTsToSeconds(timingInfo.start.dts),\n          presentation: clock$2.videoTsToSeconds(timingInfo.start.pts)\n        },\n        end: {\n          decode: clock$2.videoTsToSeconds(timingInfo.end.dts),\n          presentation: clock$2.videoTsToSeconds(timingInfo.end.pts)\n        },\n        baseMediaDecodeTime: clock$2.videoTsToSeconds(timingInfo.baseMediaDecodeTime)\n      };\n      if (timingInfo.prependedContentDuration) {\n        audioSegmentTimingInfo.prependedContentDuration = clock$2.videoTsToSeconds(timingInfo.prependedContentDuration);\n      }\n      self.postMessage({\n        action: 'audioSegmentTimingInfo',\n        audioSegmentTimingInfo\n      });\n    });\n    transmuxer.on('id3Frame', function (id3Frame) {\n      self.postMessage({\n        action: 'id3Frame',\n        id3Frame\n      });\n    });\n    transmuxer.on('caption', function (caption) {\n      self.postMessage({\n        action: 'caption',\n        caption\n      });\n    });\n    transmuxer.on('trackinfo', function (trackInfo) {\n      self.postMessage({\n        action: 'trackinfo',\n        trackInfo\n      });\n    });\n    transmuxer.on('audioTimingInfo', function (audioTimingInfo) {\n      // convert to video TS since we prioritize video time over audio\n      self.postMessage({\n        action: 'audioTimingInfo',\n        audioTimingInfo: {\n          start: clock$2.videoTsToSeconds(audioTimingInfo.start),\n          end: clock$2.videoTsToSeconds(audioTimingInfo.end)\n        }\n      });\n    });\n    transmuxer.on('videoTimingInfo', function (videoTimingInfo) {\n      self.postMessage({\n        action: 'videoTimingInfo',\n        videoTimingInfo: {\n          start: clock$2.videoTsToSeconds(videoTimingInfo.start),\n          end: clock$2.videoTsToSeconds(videoTimingInfo.end)\n        }\n      });\n    });\n    transmuxer.on('log', function (log) {\n      self.postMessage({\n        action: 'log',\n        log\n      });\n    });\n  };\n  /**\n   * All incoming messages route through this hash. If no function exists\n   * to handle an incoming message, then we ignore the message.\n   *\n   * @class MessageHandlers\n   * @param {Object} options the options to initialize with\n   */\n\n  class MessageHandlers {\n    constructor(self, options) {\n      this.options = options || {};\n      this.self = self;\n      this.init();\n    }\n    /**\n     * initialize our web worker and wire all the events.\n     */\n\n    init() {\n      if (this.transmuxer) {\n        this.transmuxer.dispose();\n      }\n      this.transmuxer = new transmuxer.Transmuxer(this.options);\n      wireTransmuxerEvents(this.self, this.transmuxer);\n    }\n    pushMp4Captions(data) {\n      if (!this.captionParser) {\n        this.captionParser = new captionParser();\n        this.captionParser.init();\n      }\n      const segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n      const parsed = this.captionParser.parse(segment, data.trackIds, data.timescales);\n      this.self.postMessage({\n        action: 'mp4Captions',\n        captions: parsed && parsed.captions || [],\n        logs: parsed && parsed.logs || [],\n        data: segment.buffer\n      }, [segment.buffer]);\n    }\n    probeMp4StartTime({\n      timescales,\n      data\n    }) {\n      const startTime = probe$2.startTime(timescales, data);\n      this.self.postMessage({\n        action: 'probeMp4StartTime',\n        startTime,\n        data\n      }, [data.buffer]);\n    }\n    probeMp4Tracks({\n      data\n    }) {\n      const tracks = probe$2.tracks(data);\n      this.self.postMessage({\n        action: 'probeMp4Tracks',\n        tracks,\n        data\n      }, [data.buffer]);\n    }\n    /**\n     * Probe an mpeg2-ts segment to determine the start time of the segment in it's\n     * internal \"media time,\" as well as whether it contains video and/or audio.\n     *\n     * @private\n     * @param {Uint8Array} bytes - segment bytes\n     * @param {number} baseStartTime\n     *        Relative reference timestamp used when adjusting frame timestamps for rollover.\n     *        This value should be in seconds, as it's converted to a 90khz clock within the\n     *        function body.\n     * @return {Object} The start time of the current segment in \"media time\" as well as\n     *                  whether it contains video and/or audio\n     */\n\n    probeTs({\n      data,\n      baseStartTime\n    }) {\n      const tsStartTime = typeof baseStartTime === 'number' && !isNaN(baseStartTime) ? baseStartTime * clock$2.ONE_SECOND_IN_TS : void 0;\n      const timeInfo = tsInspector.inspect(data, tsStartTime);\n      let result = null;\n      if (timeInfo) {\n        result = {\n          // each type's time info comes back as an array of 2 times, start and end\n          hasVideo: timeInfo.video && timeInfo.video.length === 2 || false,\n          hasAudio: timeInfo.audio && timeInfo.audio.length === 2 || false\n        };\n        if (result.hasVideo) {\n          result.videoStart = timeInfo.video[0].ptsTime;\n        }\n        if (result.hasAudio) {\n          result.audioStart = timeInfo.audio[0].ptsTime;\n        }\n      }\n      this.self.postMessage({\n        action: 'probeTs',\n        result,\n        data\n      }, [data.buffer]);\n    }\n    clearAllMp4Captions() {\n      if (this.captionParser) {\n        this.captionParser.clearAllCaptions();\n      }\n    }\n    clearParsedMp4Captions() {\n      if (this.captionParser) {\n        this.captionParser.clearParsedCaptions();\n      }\n    }\n    /**\n     * Adds data (a ts segment) to the start of the transmuxer pipeline for\n     * processing.\n     *\n     * @param {ArrayBuffer} data data to push into the muxer\n     */\n\n    push(data) {\n      // Cast array buffer to correct type for transmuxer\n      const segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);\n      this.transmuxer.push(segment);\n    }\n    /**\n     * Recreate the transmuxer so that the next segment added via `push`\n     * start with a fresh transmuxer.\n     */\n\n    reset() {\n      this.transmuxer.reset();\n    }\n    /**\n     * Set the value that will be used as the `baseMediaDecodeTime` time for the\n     * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`\n     * set relative to the first based on the PTS values.\n     *\n     * @param {Object} data used to set the timestamp offset in the muxer\n     */\n\n    setTimestampOffset(data) {\n      const timestampOffset = data.timestampOffset || 0;\n      this.transmuxer.setBaseMediaDecodeTime(Math.round(clock$2.secondsToVideoTs(timestampOffset)));\n    }\n    setAudioAppendStart(data) {\n      this.transmuxer.setAudioAppendStart(Math.ceil(clock$2.secondsToVideoTs(data.appendStart)));\n    }\n    setRemux(data) {\n      this.transmuxer.setRemux(data.remux);\n    }\n    /**\n     * Forces the pipeline to finish processing the last segment and emit it's\n     * results.\n     *\n     * @param {Object} data event data, not really used\n     */\n\n    flush(data) {\n      this.transmuxer.flush(); // transmuxed done action is fired after both audio/video pipelines are flushed\n\n      self.postMessage({\n        action: 'done',\n        type: 'transmuxed'\n      });\n    }\n    endTimeline() {\n      this.transmuxer.endTimeline(); // transmuxed endedtimeline action is fired after both audio/video pipelines end their\n      // timelines\n\n      self.postMessage({\n        action: 'endedtimeline',\n        type: 'transmuxed'\n      });\n    }\n    alignGopsWith(data) {\n      this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());\n    }\n  }\n  /**\n   * Our web worker interface so that things can talk to mux.js\n   * that will be running in a web worker. the scope is passed to this by\n   * webworkify.\n   *\n   * @param {Object} self the scope for the web worker\n   */\n\n  self.onmessage = function (event) {\n    if (event.data.action === 'init' && event.data.options) {\n      this.messageHandlers = new MessageHandlers(self, event.data.options);\n      return;\n    }\n    if (!this.messageHandlers) {\n      this.messageHandlers = new MessageHandlers(self);\n    }\n    if (event.data && event.data.action && event.data.action !== 'init') {\n      if (this.messageHandlers[event.data.action]) {\n        this.messageHandlers[event.data.action](event.data);\n      }\n    }\n  };\n}));\nvar TransmuxWorker = factory(workerCode$1);\n/* rollup-plugin-worker-factory end for worker!/Users/ddashkevich/projects/http-streaming/src/transmuxer-worker.js */\n\nconst handleData_ = (event, transmuxedData, callback) => {\n  const {\n    type,\n    initSegment,\n    captions,\n    captionStreams,\n    metadata,\n    videoFrameDtsTime,\n    videoFramePtsTime\n  } = event.data.segment;\n  transmuxedData.buffer.push({\n    captions,\n    captionStreams,\n    metadata\n  });\n  const boxes = event.data.segment.boxes || {\n    data: event.data.segment.data\n  };\n  const result = {\n    type,\n    // cast ArrayBuffer to TypedArray\n    data: new Uint8Array(boxes.data, boxes.data.byteOffset, boxes.data.byteLength),\n    initSegment: new Uint8Array(initSegment.data, initSegment.byteOffset, initSegment.byteLength)\n  };\n  if (typeof videoFrameDtsTime !== 'undefined') {\n    result.videoFrameDtsTime = videoFrameDtsTime;\n  }\n  if (typeof videoFramePtsTime !== 'undefined') {\n    result.videoFramePtsTime = videoFramePtsTime;\n  }\n  callback(result);\n};\nconst handleDone_ = ({\n  transmuxedData,\n  callback\n}) => {\n  // Previously we only returned data on data events,\n  // not on done events. Clear out the buffer to keep that consistent.\n  transmuxedData.buffer = []; // all buffers should have been flushed from the muxer, so start processing anything we\n  // have received\n\n  callback(transmuxedData);\n};\nconst handleGopInfo_ = (event, transmuxedData) => {\n  transmuxedData.gopInfo = event.data.gopInfo;\n};\nconst processTransmux = options => {\n  const {\n    transmuxer,\n    bytes,\n    audioAppendStart,\n    gopsToAlignWith,\n    remux,\n    onData,\n    onTrackInfo,\n    onAudioTimingInfo,\n    onVideoTimingInfo,\n    onVideoSegmentTimingInfo,\n    onAudioSegmentTimingInfo,\n    onId3,\n    onCaptions,\n    onDone,\n    onEndedTimeline,\n    onTransmuxerLog,\n    isEndOfTimeline\n  } = options;\n  const transmuxedData = {\n    buffer: []\n  };\n  let waitForEndedTimelineEvent = isEndOfTimeline;\n  const handleMessage = event => {\n    if (transmuxer.currentTransmux !== options) {\n      // disposed\n      return;\n    }\n    if (event.data.action === 'data') {\n      handleData_(event, transmuxedData, onData);\n    }\n    if (event.data.action === 'trackinfo') {\n      onTrackInfo(event.data.trackInfo);\n    }\n    if (event.data.action === 'gopInfo') {\n      handleGopInfo_(event, transmuxedData);\n    }\n    if (event.data.action === 'audioTimingInfo') {\n      onAudioTimingInfo(event.data.audioTimingInfo);\n    }\n    if (event.data.action === 'videoTimingInfo') {\n      onVideoTimingInfo(event.data.videoTimingInfo);\n    }\n    if (event.data.action === 'videoSegmentTimingInfo') {\n      onVideoSegmentTimingInfo(event.data.videoSegmentTimingInfo);\n    }\n    if (event.data.action === 'audioSegmentTimingInfo') {\n      onAudioSegmentTimingInfo(event.data.audioSegmentTimingInfo);\n    }\n    if (event.data.action === 'id3Frame') {\n      onId3([event.data.id3Frame], event.data.id3Frame.dispatchType);\n    }\n    if (event.data.action === 'caption') {\n      onCaptions(event.data.caption);\n    }\n    if (event.data.action === 'endedtimeline') {\n      waitForEndedTimelineEvent = false;\n      onEndedTimeline();\n    }\n    if (event.data.action === 'log') {\n      onTransmuxerLog(event.data.log);\n    } // wait for the transmuxed event since we may have audio and video\n\n    if (event.data.type !== 'transmuxed') {\n      return;\n    } // If the \"endedtimeline\" event has not yet fired, and this segment represents the end\n    // of a timeline, that means there may still be data events before the segment\n    // processing can be considerred complete. In that case, the final event should be\n    // an \"endedtimeline\" event with the type \"transmuxed.\"\n\n    if (waitForEndedTimelineEvent) {\n      return;\n    }\n    transmuxer.onmessage = null;\n    handleDone_({\n      transmuxedData,\n      callback: onDone\n    });\n    /* eslint-disable no-use-before-define */\n\n    dequeue(transmuxer);\n    /* eslint-enable */\n  };\n\n  transmuxer.onmessage = handleMessage;\n  if (audioAppendStart) {\n    transmuxer.postMessage({\n      action: 'setAudioAppendStart',\n      appendStart: audioAppendStart\n    });\n  } // allow empty arrays to be passed to clear out GOPs\n\n  if (Array.isArray(gopsToAlignWith)) {\n    transmuxer.postMessage({\n      action: 'alignGopsWith',\n      gopsToAlignWith\n    });\n  }\n  if (typeof remux !== 'undefined') {\n    transmuxer.postMessage({\n      action: 'setRemux',\n      remux\n    });\n  }\n  if (bytes.byteLength) {\n    const buffer = bytes instanceof ArrayBuffer ? bytes : bytes.buffer;\n    const byteOffset = bytes instanceof ArrayBuffer ? 0 : bytes.byteOffset;\n    transmuxer.postMessage({\n      action: 'push',\n      // Send the typed-array of data as an ArrayBuffer so that\n      // it can be sent as a \"Transferable\" and avoid the costly\n      // memory copy\n      data: buffer,\n      // To recreate the original typed-array, we need information\n      // about what portion of the ArrayBuffer it was a view into\n      byteOffset,\n      byteLength: bytes.byteLength\n    }, [buffer]);\n  }\n  if (isEndOfTimeline) {\n    transmuxer.postMessage({\n      action: 'endTimeline'\n    });\n  } // even if we didn't push any bytes, we have to make sure we flush in case we reached\n  // the end of the segment\n\n  transmuxer.postMessage({\n    action: 'flush'\n  });\n};\nconst dequeue = transmuxer => {\n  transmuxer.currentTransmux = null;\n  if (transmuxer.transmuxQueue.length) {\n    transmuxer.currentTransmux = transmuxer.transmuxQueue.shift();\n    if (typeof transmuxer.currentTransmux === 'function') {\n      transmuxer.currentTransmux();\n    } else {\n      processTransmux(transmuxer.currentTransmux);\n    }\n  }\n};\nconst processAction = (transmuxer, action) => {\n  transmuxer.postMessage({\n    action\n  });\n  dequeue(transmuxer);\n};\nconst enqueueAction = (action, transmuxer) => {\n  if (!transmuxer.currentTransmux) {\n    transmuxer.currentTransmux = action;\n    processAction(transmuxer, action);\n    return;\n  }\n  transmuxer.transmuxQueue.push(processAction.bind(null, transmuxer, action));\n};\nconst reset = transmuxer => {\n  enqueueAction('reset', transmuxer);\n};\nconst endTimeline = transmuxer => {\n  enqueueAction('endTimeline', transmuxer);\n};\nconst transmux = options => {\n  if (!options.transmuxer.currentTransmux) {\n    options.transmuxer.currentTransmux = options;\n    processTransmux(options);\n    return;\n  }\n  options.transmuxer.transmuxQueue.push(options);\n};\nconst createTransmuxer = options => {\n  const transmuxer = new TransmuxWorker();\n  transmuxer.currentTransmux = null;\n  transmuxer.transmuxQueue = [];\n  const term = transmuxer.terminate;\n  transmuxer.terminate = () => {\n    transmuxer.currentTransmux = null;\n    transmuxer.transmuxQueue.length = 0;\n    return term.call(transmuxer);\n  };\n  transmuxer.postMessage({\n    action: 'init',\n    options\n  });\n  return transmuxer;\n};\nvar segmentTransmuxer = {\n  reset,\n  endTimeline,\n  transmux,\n  createTransmuxer\n};\nconst workerCallback = function (options) {\n  const transmuxer = options.transmuxer;\n  const endAction = options.endAction || options.action;\n  const callback = options.callback;\n  const message = _extends({}, options, {\n    endAction: null,\n    transmuxer: null,\n    callback: null\n  });\n  const listenForEndEvent = event => {\n    if (event.data.action !== endAction) {\n      return;\n    }\n    transmuxer.removeEventListener('message', listenForEndEvent); // transfer ownership of bytes back to us.\n\n    if (event.data.data) {\n      event.data.data = new Uint8Array(event.data.data, options.byteOffset || 0, options.byteLength || event.data.data.byteLength);\n      if (options.data) {\n        options.data = event.data.data;\n      }\n    }\n    callback(event.data);\n  };\n  transmuxer.addEventListener('message', listenForEndEvent);\n  if (options.data) {\n    const isArrayBuffer = options.data instanceof ArrayBuffer;\n    message.byteOffset = isArrayBuffer ? 0 : options.data.byteOffset;\n    message.byteLength = options.data.byteLength;\n    const transfers = [isArrayBuffer ? options.data : options.data.buffer];\n    transmuxer.postMessage(message, transfers);\n  } else {\n    transmuxer.postMessage(message);\n  }\n};\nconst REQUEST_ERRORS = {\n  FAILURE: 2,\n  TIMEOUT: -101,\n  ABORTED: -102\n};\n/**\n * Abort all requests\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n */\n\nconst abortAll = activeXhrs => {\n  activeXhrs.forEach(xhr => {\n    xhr.abort();\n  });\n};\n/**\n * Gather important bandwidth stats once a request has completed\n *\n * @param {Object} request - the XHR request from which to gather stats\n */\n\nconst getRequestStats = request => {\n  return {\n    bandwidth: request.bandwidth,\n    bytesReceived: request.bytesReceived || 0,\n    roundTripTime: request.roundTripTime || 0\n  };\n};\n/**\n * If possible gather bandwidth stats as a request is in\n * progress\n *\n * @param {Event} progressEvent - an event object from an XHR's progress event\n */\n\nconst getProgressStats = progressEvent => {\n  const request = progressEvent.target;\n  const roundTripTime = Date.now() - request.requestTime;\n  const stats = {\n    bandwidth: Infinity,\n    bytesReceived: 0,\n    roundTripTime: roundTripTime || 0\n  };\n  stats.bytesReceived = progressEvent.loaded; // This can result in Infinity if stats.roundTripTime is 0 but that is ok\n  // because we should only use bandwidth stats on progress to determine when\n  // abort a request early due to insufficient bandwidth\n\n  stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1000);\n  return stats;\n};\n/**\n * Handle all error conditions in one place and return an object\n * with all the information\n *\n * @param {Error|null} error - if non-null signals an error occured with the XHR\n * @param {Object} request -  the XHR request that possibly generated the error\n */\n\nconst handleErrors = (error, request) => {\n  if (request.timedout) {\n    return {\n      status: request.status,\n      message: 'HLS request timed-out at URL: ' + request.uri,\n      code: REQUEST_ERRORS.TIMEOUT,\n      xhr: request\n    };\n  }\n  if (request.aborted) {\n    return {\n      status: request.status,\n      message: 'HLS request aborted at URL: ' + request.uri,\n      code: REQUEST_ERRORS.ABORTED,\n      xhr: request\n    };\n  }\n  if (error) {\n    return {\n      status: request.status,\n      message: 'HLS request errored at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    };\n  }\n  if (request.responseType === 'arraybuffer' && request.response.byteLength === 0) {\n    return {\n      status: request.status,\n      message: 'Empty HLS response at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    };\n  }\n  return null;\n};\n/**\n * Handle responses for key data and convert the key data to the correct format\n * for the decryption step later\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Array} objects - objects to add the key bytes to.\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\nconst handleKeyResponse = (segment, objects, finishProcessingFn) => (error, request) => {\n  const response = request.response;\n  const errorObj = handleErrors(error, request);\n  if (errorObj) {\n    return finishProcessingFn(errorObj, segment);\n  }\n  if (response.byteLength !== 16) {\n    return finishProcessingFn({\n      status: request.status,\n      message: 'Invalid HLS key at URL: ' + request.uri,\n      code: REQUEST_ERRORS.FAILURE,\n      xhr: request\n    }, segment);\n  }\n  const view = new DataView(response);\n  const bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);\n  for (let i = 0; i < objects.length; i++) {\n    objects[i].bytes = bytes;\n  }\n  return finishProcessingFn(null, segment);\n};\nconst parseInitSegment = (segment, callback) => {\n  const type = detectContainerForBytes(segment.map.bytes); // TODO: We should also handle ts init segments here, but we\n  // only know how to parse mp4 init segments at the moment\n\n  if (type !== 'mp4') {\n    const uri = segment.map.resolvedUri || segment.map.uri;\n    return callback({\n      internal: true,\n      message: `Found unsupported ${type || 'unknown'} container for initialization segment at URL: ${uri}`,\n      code: REQUEST_ERRORS.FAILURE\n    });\n  }\n  workerCallback({\n    action: 'probeMp4Tracks',\n    data: segment.map.bytes,\n    transmuxer: segment.transmuxer,\n    callback: ({\n      tracks,\n      data\n    }) => {\n      // transfer bytes back to us\n      segment.map.bytes = data;\n      tracks.forEach(function (track) {\n        segment.map.tracks = segment.map.tracks || {}; // only support one track of each type for now\n\n        if (segment.map.tracks[track.type]) {\n          return;\n        }\n        segment.map.tracks[track.type] = track;\n        if (typeof track.id === 'number' && track.timescale) {\n          segment.map.timescales = segment.map.timescales || {};\n          segment.map.timescales[track.id] = track.timescale;\n        }\n      });\n      return callback(null);\n    }\n  });\n};\n/**\n * Handle init-segment responses\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\nconst handleInitSegmentResponse = ({\n  segment,\n  finishProcessingFn\n}) => (error, request) => {\n  const errorObj = handleErrors(error, request);\n  if (errorObj) {\n    return finishProcessingFn(errorObj, segment);\n  }\n  const bytes = new Uint8Array(request.response); // init segment is encypted, we will have to wait\n  // until the key request is done to decrypt.\n\n  if (segment.map.key) {\n    segment.map.encryptedBytes = bytes;\n    return finishProcessingFn(null, segment);\n  }\n  segment.map.bytes = bytes;\n  parseInitSegment(segment, function (parseError) {\n    if (parseError) {\n      parseError.xhr = request;\n      parseError.status = request.status;\n      return finishProcessingFn(parseError, segment);\n    }\n    finishProcessingFn(null, segment);\n  });\n};\n/**\n * Response handler for segment-requests being sure to set the correct\n * property depending on whether the segment is encryped or not\n * Also records and keeps track of stats that are used for ABR purposes\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} finishProcessingFn - a callback to execute to continue processing\n *                                        this request\n */\n\nconst handleSegmentResponse = ({\n  segment,\n  finishProcessingFn,\n  responseType\n}) => (error, request) => {\n  const errorObj = handleErrors(error, request);\n  if (errorObj) {\n    return finishProcessingFn(errorObj, segment);\n  }\n  const newBytes =\n  // although responseText \"should\" exist, this guard serves to prevent an error being\n  // thrown for two primary cases:\n  // 1. the mime type override stops working, or is not implemented for a specific\n  //    browser\n  // 2. when using mock XHR libraries like sinon that do not allow the override behavior\n  responseType === 'arraybuffer' || !request.responseText ? request.response : stringToArrayBuffer(request.responseText.substring(segment.lastReachedChar || 0));\n  segment.stats = getRequestStats(request);\n  if (segment.key) {\n    segment.encryptedBytes = new Uint8Array(newBytes);\n  } else {\n    segment.bytes = new Uint8Array(newBytes);\n  }\n  return finishProcessingFn(null, segment);\n};\nconst transmuxAndNotify = ({\n  segment,\n  bytes,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog\n}) => {\n  const fmp4Tracks = segment.map && segment.map.tracks || {};\n  const isMuxed = Boolean(fmp4Tracks.audio && fmp4Tracks.video); // Keep references to each function so we can null them out after we're done with them.\n  // One reason for this is that in the case of full segments, we want to trust start\n  // times from the probe, rather than the transmuxer.\n\n  let audioStartFn = timingInfoFn.bind(null, segment, 'audio', 'start');\n  const audioEndFn = timingInfoFn.bind(null, segment, 'audio', 'end');\n  let videoStartFn = timingInfoFn.bind(null, segment, 'video', 'start');\n  const videoEndFn = timingInfoFn.bind(null, segment, 'video', 'end');\n  const finish = () => transmux({\n    bytes,\n    transmuxer: segment.transmuxer,\n    audioAppendStart: segment.audioAppendStart,\n    gopsToAlignWith: segment.gopsToAlignWith,\n    remux: isMuxed,\n    onData: result => {\n      result.type = result.type === 'combined' ? 'video' : result.type;\n      dataFn(segment, result);\n    },\n    onTrackInfo: trackInfo => {\n      if (trackInfoFn) {\n        if (isMuxed) {\n          trackInfo.isMuxed = true;\n        }\n        trackInfoFn(segment, trackInfo);\n      }\n    },\n    onAudioTimingInfo: audioTimingInfo => {\n      // we only want the first start value we encounter\n      if (audioStartFn && typeof audioTimingInfo.start !== 'undefined') {\n        audioStartFn(audioTimingInfo.start);\n        audioStartFn = null;\n      } // we want to continually update the end time\n\n      if (audioEndFn && typeof audioTimingInfo.end !== 'undefined') {\n        audioEndFn(audioTimingInfo.end);\n      }\n    },\n    onVideoTimingInfo: videoTimingInfo => {\n      // we only want the first start value we encounter\n      if (videoStartFn && typeof videoTimingInfo.start !== 'undefined') {\n        videoStartFn(videoTimingInfo.start);\n        videoStartFn = null;\n      } // we want to continually update the end time\n\n      if (videoEndFn && typeof videoTimingInfo.end !== 'undefined') {\n        videoEndFn(videoTimingInfo.end);\n      }\n    },\n    onVideoSegmentTimingInfo: videoSegmentTimingInfo => {\n      videoSegmentTimingInfoFn(videoSegmentTimingInfo);\n    },\n    onAudioSegmentTimingInfo: audioSegmentTimingInfo => {\n      audioSegmentTimingInfoFn(audioSegmentTimingInfo);\n    },\n    onId3: (id3Frames, dispatchType) => {\n      id3Fn(segment, id3Frames, dispatchType);\n    },\n    onCaptions: captions => {\n      captionsFn(segment, [captions]);\n    },\n    isEndOfTimeline,\n    onEndedTimeline: () => {\n      endedTimelineFn();\n    },\n    onTransmuxerLog,\n    onDone: result => {\n      if (!doneFn) {\n        return;\n      }\n      result.type = result.type === 'combined' ? 'video' : result.type;\n      doneFn(null, segment, result);\n    }\n  }); // In the transmuxer, we don't yet have the ability to extract a \"proper\" start time.\n  // Meaning cached frame data may corrupt our notion of where this segment\n  // really starts. To get around this, probe for the info needed.\n\n  workerCallback({\n    action: 'probeTs',\n    transmuxer: segment.transmuxer,\n    data: bytes,\n    baseStartTime: segment.baseStartTime,\n    callback: data => {\n      segment.bytes = bytes = data.data;\n      const probeResult = data.result;\n      if (probeResult) {\n        trackInfoFn(segment, {\n          hasAudio: probeResult.hasAudio,\n          hasVideo: probeResult.hasVideo,\n          isMuxed\n        });\n        trackInfoFn = null;\n        if (probeResult.hasAudio && !isMuxed) {\n          audioStartFn(probeResult.audioStart);\n        }\n        if (probeResult.hasVideo) {\n          videoStartFn(probeResult.videoStart);\n        }\n        audioStartFn = null;\n        videoStartFn = null;\n      }\n      finish();\n    }\n  });\n};\nconst handleSegmentBytes = ({\n  segment,\n  bytes,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog\n}) => {\n  let bytesAsUint8Array = new Uint8Array(bytes); // TODO:\n  // We should have a handler that fetches the number of bytes required\n  // to check if something is fmp4. This will allow us to save bandwidth\n  // because we can only exclude a playlist and abort requests\n  // by codec after trackinfo triggers.\n\n  if (isLikelyFmp4MediaSegment(bytesAsUint8Array)) {\n    segment.isFmp4 = true;\n    const {\n      tracks\n    } = segment.map;\n    const trackInfo = {\n      isFmp4: true,\n      hasVideo: !!tracks.video,\n      hasAudio: !!tracks.audio\n    }; // if we have a audio track, with a codec that is not set to\n    // encrypted audio\n\n    if (tracks.audio && tracks.audio.codec && tracks.audio.codec !== 'enca') {\n      trackInfo.audioCodec = tracks.audio.codec;\n    } // if we have a video track, with a codec that is not set to\n    // encrypted video\n\n    if (tracks.video && tracks.video.codec && tracks.video.codec !== 'encv') {\n      trackInfo.videoCodec = tracks.video.codec;\n    }\n    if (tracks.video && tracks.audio) {\n      trackInfo.isMuxed = true;\n    } // since we don't support appending fmp4 data on progress, we know we have the full\n    // segment here\n\n    trackInfoFn(segment, trackInfo); // The probe doesn't provide the segment end time, so only callback with the start\n    // time. The end time can be roughly calculated by the receiver using the duration.\n    //\n    // Note that the start time returned by the probe reflects the baseMediaDecodeTime, as\n    // that is the true start of the segment (where the playback engine should begin\n    // decoding).\n\n    const finishLoading = captions => {\n      // if the track still has audio at this point it is only possible\n      // for it to be audio only. See `tracks.video && tracks.audio` if statement\n      // above.\n      // we make sure to use segment.bytes here as that\n      dataFn(segment, {\n        data: bytesAsUint8Array,\n        type: trackInfo.hasAudio && !trackInfo.isMuxed ? 'audio' : 'video'\n      });\n      if (captions && captions.length) {\n        captionsFn(segment, captions);\n      }\n      doneFn(null, segment, {});\n    };\n    workerCallback({\n      action: 'probeMp4StartTime',\n      timescales: segment.map.timescales,\n      data: bytesAsUint8Array,\n      transmuxer: segment.transmuxer,\n      callback: ({\n        data,\n        startTime\n      }) => {\n        // transfer bytes back to us\n        bytes = data.buffer;\n        segment.bytes = bytesAsUint8Array = data;\n        if (trackInfo.hasAudio && !trackInfo.isMuxed) {\n          timingInfoFn(segment, 'audio', 'start', startTime);\n        }\n        if (trackInfo.hasVideo) {\n          timingInfoFn(segment, 'video', 'start', startTime);\n        } // Run through the CaptionParser in case there are captions.\n        // Initialize CaptionParser if it hasn't been yet\n\n        if (!tracks.video || !data.byteLength || !segment.transmuxer) {\n          finishLoading();\n          return;\n        }\n        workerCallback({\n          action: 'pushMp4Captions',\n          endAction: 'mp4Captions',\n          transmuxer: segment.transmuxer,\n          data: bytesAsUint8Array,\n          timescales: segment.map.timescales,\n          trackIds: [tracks.video.id],\n          callback: message => {\n            // transfer bytes back to us\n            bytes = message.data.buffer;\n            segment.bytes = bytesAsUint8Array = message.data;\n            message.logs.forEach(function (log) {\n              onTransmuxerLog(merge(log, {\n                stream: 'mp4CaptionParser'\n              }));\n            });\n            finishLoading(message.captions);\n          }\n        });\n      }\n    });\n    return;\n  } // VTT or other segments that don't need processing\n\n  if (!segment.transmuxer) {\n    doneFn(null, segment, {});\n    return;\n  }\n  if (typeof segment.container === 'undefined') {\n    segment.container = detectContainerForBytes(bytesAsUint8Array);\n  }\n  if (segment.container !== 'ts' && segment.container !== 'aac') {\n    trackInfoFn(segment, {\n      hasAudio: false,\n      hasVideo: false\n    });\n    doneFn(null, segment, {});\n    return;\n  } // ts or aac\n\n  transmuxAndNotify({\n    segment,\n    bytes,\n    trackInfoFn,\n    timingInfoFn,\n    videoSegmentTimingInfoFn,\n    audioSegmentTimingInfoFn,\n    id3Fn,\n    captionsFn,\n    isEndOfTimeline,\n    endedTimelineFn,\n    dataFn,\n    doneFn,\n    onTransmuxerLog\n  });\n};\nconst decrypt = function ({\n  id,\n  key,\n  encryptedBytes,\n  decryptionWorker\n}, callback) {\n  const decryptionHandler = event => {\n    if (event.data.source === id) {\n      decryptionWorker.removeEventListener('message', decryptionHandler);\n      const decrypted = event.data.decrypted;\n      callback(new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength));\n    }\n  };\n  decryptionWorker.addEventListener('message', decryptionHandler);\n  let keyBytes;\n  if (key.bytes.slice) {\n    keyBytes = key.bytes.slice();\n  } else {\n    keyBytes = new Uint32Array(Array.prototype.slice.call(key.bytes));\n  } // incrementally decrypt the bytes\n\n  decryptionWorker.postMessage(createTransferableMessage({\n    source: id,\n    encrypted: encryptedBytes,\n    key: keyBytes,\n    iv: key.iv\n  }), [encryptedBytes.buffer, keyBytes.buffer]);\n};\n/**\n * Decrypt the segment via the decryption web worker\n *\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128 decryption\n *                                       routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} trackInfoFn - a callback that receives track info\n * @param {Function} timingInfoFn - a callback that receives timing info\n * @param {Function} videoSegmentTimingInfoFn\n *                   a callback that receives video timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} audioSegmentTimingInfoFn\n *                   a callback that receives audio timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {boolean}  isEndOfTimeline\n *                   true if this segment represents the last segment in a timeline\n * @param {Function} endedTimelineFn\n *                   a callback made when a timeline is ended, will only be called if\n *                   isEndOfTimeline is true\n * @param {Function} dataFn - a callback that is executed when segment bytes are available\n *                            and ready to use\n * @param {Function} doneFn - a callback that is executed after decryption has completed\n */\n\nconst decryptSegment = ({\n  decryptionWorker,\n  segment,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog\n}) => {\n  decrypt({\n    id: segment.requestId,\n    key: segment.key,\n    encryptedBytes: segment.encryptedBytes,\n    decryptionWorker\n  }, decryptedBytes => {\n    segment.bytes = decryptedBytes;\n    handleSegmentBytes({\n      segment,\n      bytes: segment.bytes,\n      trackInfoFn,\n      timingInfoFn,\n      videoSegmentTimingInfoFn,\n      audioSegmentTimingInfoFn,\n      id3Fn,\n      captionsFn,\n      isEndOfTimeline,\n      endedTimelineFn,\n      dataFn,\n      doneFn,\n      onTransmuxerLog\n    });\n  });\n};\n/**\n * This function waits for all XHRs to finish (with either success or failure)\n * before continueing processing via it's callback. The function gathers errors\n * from each request into a single errors array so that the error status for\n * each request can be examined later.\n *\n * @param {Object} activeXhrs - an object that tracks all XHR requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128 decryption\n *                                       routines\n * @param {Function} trackInfoFn - a callback that receives track info\n * @param {Function} timingInfoFn - a callback that receives timing info\n * @param {Function} videoSegmentTimingInfoFn\n *                   a callback that receives video timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} audioSegmentTimingInfoFn\n *                   a callback that receives audio timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} id3Fn - a callback that receives ID3 metadata\n * @param {Function} captionsFn - a callback that receives captions\n * @param {boolean}  isEndOfTimeline\n *                   true if this segment represents the last segment in a timeline\n * @param {Function} endedTimelineFn\n *                   a callback made when a timeline is ended, will only be called if\n *                   isEndOfTimeline is true\n * @param {Function} dataFn - a callback that is executed when segment bytes are available\n *                            and ready to use\n * @param {Function} doneFn - a callback that is executed after all resources have been\n *                            downloaded and any decryption completed\n */\n\nconst waitForCompletion = ({\n  activeXhrs,\n  decryptionWorker,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog\n}) => {\n  let count = 0;\n  let didError = false;\n  return (error, segment) => {\n    if (didError) {\n      return;\n    }\n    if (error) {\n      didError = true; // If there are errors, we have to abort any outstanding requests\n\n      abortAll(activeXhrs); // Even though the requests above are aborted, and in theory we could wait until we\n      // handle the aborted events from those requests, there are some cases where we may\n      // never get an aborted event. For instance, if the network connection is lost and\n      // there were two requests, the first may have triggered an error immediately, while\n      // the second request remains unsent. In that case, the aborted algorithm will not\n      // trigger an abort: see https://xhr.spec.whatwg.org/#the-abort()-method\n      //\n      // We also can't rely on the ready state of the XHR, since the request that\n      // triggered the connection error may also show as a ready state of 0 (unsent).\n      // Therefore, we have to finish this group of requests immediately after the first\n      // seen error.\n\n      return doneFn(error, segment);\n    }\n    count += 1;\n    if (count === activeXhrs.length) {\n      const segmentFinish = function () {\n        if (segment.encryptedBytes) {\n          return decryptSegment({\n            decryptionWorker,\n            segment,\n            trackInfoFn,\n            timingInfoFn,\n            videoSegmentTimingInfoFn,\n            audioSegmentTimingInfoFn,\n            id3Fn,\n            captionsFn,\n            isEndOfTimeline,\n            endedTimelineFn,\n            dataFn,\n            doneFn,\n            onTransmuxerLog\n          });\n        } // Otherwise, everything is ready just continue\n\n        handleSegmentBytes({\n          segment,\n          bytes: segment.bytes,\n          trackInfoFn,\n          timingInfoFn,\n          videoSegmentTimingInfoFn,\n          audioSegmentTimingInfoFn,\n          id3Fn,\n          captionsFn,\n          isEndOfTimeline,\n          endedTimelineFn,\n          dataFn,\n          doneFn,\n          onTransmuxerLog\n        });\n      }; // Keep track of when *all* of the requests have completed\n\n      segment.endOfAllRequests = Date.now();\n      if (segment.map && segment.map.encryptedBytes && !segment.map.bytes) {\n        return decrypt({\n          decryptionWorker,\n          // add -init to the \"id\" to differentiate between segment\n          // and init segment decryption, just in case they happen\n          // at the same time at some point in the future.\n          id: segment.requestId + '-init',\n          encryptedBytes: segment.map.encryptedBytes,\n          key: segment.map.key\n        }, decryptedBytes => {\n          segment.map.bytes = decryptedBytes;\n          parseInitSegment(segment, parseError => {\n            if (parseError) {\n              abortAll(activeXhrs);\n              return doneFn(parseError, segment);\n            }\n            segmentFinish();\n          });\n        });\n      }\n      segmentFinish();\n    }\n  };\n};\n/**\n * Calls the abort callback if any request within the batch was aborted. Will only call\n * the callback once per batch of requests, even if multiple were aborted.\n *\n * @param {Object} loadendState - state to check to see if the abort function was called\n * @param {Function} abortFn - callback to call for abort\n */\n\nconst handleLoadEnd = ({\n  loadendState,\n  abortFn\n}) => event => {\n  const request = event.target;\n  if (request.aborted && abortFn && !loadendState.calledAbortFn) {\n    abortFn();\n    loadendState.calledAbortFn = true;\n  }\n};\n/**\n * Simple progress event callback handler that gathers some stats before\n * executing a provided callback with the `segment` object\n *\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} progressFn - a callback that is executed each time a progress event\n *                                is received\n * @param {Function} trackInfoFn - a callback that receives track info\n * @param {Function} timingInfoFn - a callback that receives timing info\n * @param {Function} videoSegmentTimingInfoFn\n *                   a callback that receives video timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} audioSegmentTimingInfoFn\n *                   a callback that receives audio timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {boolean}  isEndOfTimeline\n *                   true if this segment represents the last segment in a timeline\n * @param {Function} endedTimelineFn\n *                   a callback made when a timeline is ended, will only be called if\n *                   isEndOfTimeline is true\n * @param {Function} dataFn - a callback that is executed when segment bytes are available\n *                            and ready to use\n * @param {Event} event - the progress event object from XMLHttpRequest\n */\n\nconst handleProgress = ({\n  segment,\n  progressFn,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn\n}) => event => {\n  const request = event.target;\n  if (request.aborted) {\n    return;\n  }\n  segment.stats = merge(segment.stats, getProgressStats(event)); // record the time that we receive the first byte of data\n\n  if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {\n    segment.stats.firstBytesReceivedAt = Date.now();\n  }\n  return progressFn(event, segment);\n};\n/**\n * Load all resources and does any processing necessary for a media-segment\n *\n * Features:\n *   decrypts the media-segment if it has a key uri and an iv\n *   aborts *all* requests if *any* one request fails\n *\n * The segment object, at minimum, has the following format:\n * {\n *   resolvedUri: String,\n *   [transmuxer]: Object,\n *   [byterange]: {\n *     offset: Number,\n *     length: Number\n *   },\n *   [key]: {\n *     resolvedUri: String\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     iv: {\n *       bytes: Uint32Array\n *     }\n *   },\n *   [map]: {\n *     resolvedUri: String,\n *     [byterange]: {\n *       offset: Number,\n *       length: Number\n *     },\n *     [bytes]: Uint8Array\n *   }\n * }\n * ...where [name] denotes optional properties\n *\n * @param {Function} xhr - an instance of the xhr wrapper in xhr.js\n * @param {Object} xhrOptions - the base options to provide to all xhr requests\n * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128\n *                                       decryption routines\n * @param {Object} segment - a simplified copy of the segmentInfo object\n *                           from SegmentLoader\n * @param {Function} abortFn - a callback called (only once) if any piece of a request was\n *                             aborted\n * @param {Function} progressFn - a callback that receives progress events from the main\n *                                segment's xhr request\n * @param {Function} trackInfoFn - a callback that receives track info\n * @param {Function} timingInfoFn - a callback that receives timing info\n * @param {Function} videoSegmentTimingInfoFn\n *                   a callback that receives video timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} audioSegmentTimingInfoFn\n *                   a callback that receives audio timing info based on media times and\n *                   any adjustments made by the transmuxer\n * @param {Function} id3Fn - a callback that receives ID3 metadata\n * @param {Function} captionsFn - a callback that receives captions\n * @param {boolean}  isEndOfTimeline\n *                   true if this segment represents the last segment in a timeline\n * @param {Function} endedTimelineFn\n *                   a callback made when a timeline is ended, will only be called if\n *                   isEndOfTimeline is true\n * @param {Function} dataFn - a callback that receives data from the main segment's xhr\n *                            request, transmuxed if needed\n * @param {Function} doneFn - a callback that is executed only once all requests have\n *                            succeeded or failed\n * @return {Function} a function that, when invoked, immediately aborts all\n *                     outstanding requests\n */\n\nconst mediaSegmentRequest = ({\n  xhr,\n  xhrOptions,\n  decryptionWorker,\n  segment,\n  abortFn,\n  progressFn,\n  trackInfoFn,\n  timingInfoFn,\n  videoSegmentTimingInfoFn,\n  audioSegmentTimingInfoFn,\n  id3Fn,\n  captionsFn,\n  isEndOfTimeline,\n  endedTimelineFn,\n  dataFn,\n  doneFn,\n  onTransmuxerLog\n}) => {\n  const activeXhrs = [];\n  const finishProcessingFn = waitForCompletion({\n    activeXhrs,\n    decryptionWorker,\n    trackInfoFn,\n    timingInfoFn,\n    videoSegmentTimingInfoFn,\n    audioSegmentTimingInfoFn,\n    id3Fn,\n    captionsFn,\n    isEndOfTimeline,\n    endedTimelineFn,\n    dataFn,\n    doneFn,\n    onTransmuxerLog\n  }); // optionally, request the decryption key\n\n  if (segment.key && !segment.key.bytes) {\n    const objects = [segment.key];\n    if (segment.map && !segment.map.bytes && segment.map.key && segment.map.key.resolvedUri === segment.key.resolvedUri) {\n      objects.push(segment.map.key);\n    }\n    const keyRequestOptions = merge(xhrOptions, {\n      uri: segment.key.resolvedUri,\n      responseType: 'arraybuffer'\n    });\n    const keyRequestCallback = handleKeyResponse(segment, objects, finishProcessingFn);\n    const keyXhr = xhr(keyRequestOptions, keyRequestCallback);\n    activeXhrs.push(keyXhr);\n  } // optionally, request the associated media init segment\n\n  if (segment.map && !segment.map.bytes) {\n    const differentMapKey = segment.map.key && (!segment.key || segment.key.resolvedUri !== segment.map.key.resolvedUri);\n    if (differentMapKey) {\n      const mapKeyRequestOptions = merge(xhrOptions, {\n        uri: segment.map.key.resolvedUri,\n        responseType: 'arraybuffer'\n      });\n      const mapKeyRequestCallback = handleKeyResponse(segment, [segment.map.key], finishProcessingFn);\n      const mapKeyXhr = xhr(mapKeyRequestOptions, mapKeyRequestCallback);\n      activeXhrs.push(mapKeyXhr);\n    }\n    const initSegmentOptions = merge(xhrOptions, {\n      uri: segment.map.resolvedUri,\n      responseType: 'arraybuffer',\n      headers: segmentXhrHeaders(segment.map)\n    });\n    const initSegmentRequestCallback = handleInitSegmentResponse({\n      segment,\n      finishProcessingFn\n    });\n    const initSegmentXhr = xhr(initSegmentOptions, initSegmentRequestCallback);\n    activeXhrs.push(initSegmentXhr);\n  }\n  const segmentRequestOptions = merge(xhrOptions, {\n    uri: segment.part && segment.part.resolvedUri || segment.resolvedUri,\n    responseType: 'arraybuffer',\n    headers: segmentXhrHeaders(segment)\n  });\n  const segmentRequestCallback = handleSegmentResponse({\n    segment,\n    finishProcessingFn,\n    responseType: segmentRequestOptions.responseType\n  });\n  const segmentXhr = xhr(segmentRequestOptions, segmentRequestCallback);\n  segmentXhr.addEventListener('progress', handleProgress({\n    segment,\n    progressFn,\n    trackInfoFn,\n    timingInfoFn,\n    videoSegmentTimingInfoFn,\n    audioSegmentTimingInfoFn,\n    id3Fn,\n    captionsFn,\n    isEndOfTimeline,\n    endedTimelineFn,\n    dataFn\n  }));\n  activeXhrs.push(segmentXhr); // since all parts of the request must be considered, but should not make callbacks\n  // multiple times, provide a shared state object\n\n  const loadendState = {};\n  activeXhrs.forEach(activeXhr => {\n    activeXhr.addEventListener('loadend', handleLoadEnd({\n      loadendState,\n      abortFn\n    }));\n  });\n  return () => abortAll(activeXhrs);\n};\n\n/**\n * @file - codecs.js - Handles tasks regarding codec strings such as translating them to\n * codec strings, or translating codec strings into objects that can be examined.\n */\nconst logFn$1 = logger('CodecUtils');\n/**\n * Returns a set of codec strings parsed from the playlist or the default\n * codec strings if no codecs were specified in the playlist\n *\n * @param {Playlist} media the current media playlist\n * @return {Object} an object with the video and audio codecs\n */\n\nconst getCodecs = function (media) {\n  // if the codecs were explicitly specified, use them instead of the\n  // defaults\n  const mediaAttributes = media.attributes || {};\n  if (mediaAttributes.CODECS) {\n    return parseCodecs(mediaAttributes.CODECS);\n  }\n};\nconst isMaat = (main, media) => {\n  const mediaAttributes = media.attributes || {};\n  return main && main.mediaGroups && main.mediaGroups.AUDIO && mediaAttributes.AUDIO && main.mediaGroups.AUDIO[mediaAttributes.AUDIO];\n};\nconst isMuxed = (main, media) => {\n  if (!isMaat(main, media)) {\n    return true;\n  }\n  const mediaAttributes = media.attributes || {};\n  const audioGroup = main.mediaGroups.AUDIO[mediaAttributes.AUDIO];\n  for (const groupId in audioGroup) {\n    // If an audio group has a URI (the case for HLS, as HLS will use external playlists),\n    // or there are listed playlists (the case for DASH, as the manifest will have already\n    // provided all of the details necessary to generate the audio playlist, as opposed to\n    // HLS' externally requested playlists), then the content is demuxed.\n    if (!audioGroup[groupId].uri && !audioGroup[groupId].playlists) {\n      return true;\n    }\n  }\n  return false;\n};\nconst unwrapCodecList = function (codecList) {\n  const codecs = {};\n  codecList.forEach(({\n    mediaType,\n    type,\n    details\n  }) => {\n    codecs[mediaType] = codecs[mediaType] || [];\n    codecs[mediaType].push(translateLegacyCodec(`${type}${details}`));\n  });\n  Object.keys(codecs).forEach(function (mediaType) {\n    if (codecs[mediaType].length > 1) {\n      logFn$1(`multiple ${mediaType} codecs found as attributes: ${codecs[mediaType].join(', ')}. Setting playlist codecs to null so that we wait for mux.js to probe segments for real codecs.`);\n      codecs[mediaType] = null;\n      return;\n    }\n    codecs[mediaType] = codecs[mediaType][0];\n  });\n  return codecs;\n};\nconst codecCount = function (codecObj) {\n  let count = 0;\n  if (codecObj.audio) {\n    count++;\n  }\n  if (codecObj.video) {\n    count++;\n  }\n  return count;\n};\n/**\n * Calculates the codec strings for a working configuration of\n * SourceBuffers to play variant streams in a main playlist. If\n * there is no possible working configuration, an empty object will be\n * returned.\n *\n * @param main {Object} the m3u8 object for the main playlist\n * @param media {Object} the m3u8 object for the variant playlist\n * @return {Object} the codec strings.\n *\n * @private\n */\n\nconst codecsForPlaylist = function (main, media) {\n  const mediaAttributes = media.attributes || {};\n  const codecInfo = unwrapCodecList(getCodecs(media) || []); // HLS with multiple-audio tracks must always get an audio codec.\n  // Put another way, there is no way to have a video-only multiple-audio HLS!\n\n  if (isMaat(main, media) && !codecInfo.audio) {\n    if (!isMuxed(main, media)) {\n      // It is possible for codecs to be specified on the audio media group playlist but\n      // not on the rendition playlist. This is mostly the case for DASH, where audio and\n      // video are always separate (and separately specified).\n      const defaultCodecs = unwrapCodecList(codecsFromDefault(main, mediaAttributes.AUDIO) || []);\n      if (defaultCodecs.audio) {\n        codecInfo.audio = defaultCodecs.audio;\n      }\n    }\n  }\n  return codecInfo;\n};\nconst logFn = logger('PlaylistSelector');\nconst representationToString = function (representation) {\n  if (!representation || !representation.playlist) {\n    return;\n  }\n  const playlist = representation.playlist;\n  return JSON.stringify({\n    id: playlist.id,\n    bandwidth: representation.bandwidth,\n    width: representation.width,\n    height: representation.height,\n    codecs: playlist.attributes && playlist.attributes.CODECS || ''\n  });\n}; // Utilities\n\n/**\n * Returns the CSS value for the specified property on an element\n * using `getComputedStyle`. Firefox has a long-standing issue where\n * getComputedStyle() may return null when running in an iframe with\n * `display: none`.\n *\n * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n * @param {HTMLElement} el the htmlelement to work on\n * @param {string} the proprety to get the style for\n */\n\nconst safeGetComputedStyle = function (el, property) {\n  if (!el) {\n    return '';\n  }\n  const result = window$1.getComputedStyle(el);\n  if (!result) {\n    return '';\n  }\n  return result[property];\n};\n/**\n * Resuable stable sort function\n *\n * @param {Playlists} array\n * @param {Function} sortFn Different comparators\n * @function stableSort\n */\n\nconst stableSort = function (array, sortFn) {\n  const newArray = array.slice();\n  array.sort(function (left, right) {\n    const cmp = sortFn(left, right);\n    if (cmp === 0) {\n      return newArray.indexOf(left) - newArray.indexOf(right);\n    }\n    return cmp;\n  });\n};\n/**\n * A comparator function to sort two playlist object by bandwidth.\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {number} Greater than zero if the bandwidth attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the bandwidth of right is greater than left and\n * exactly zero if the two are equal.\n */\n\nconst comparePlaylistBandwidth = function (left, right) {\n  let leftBandwidth;\n  let rightBandwidth;\n  if (left.attributes.BANDWIDTH) {\n    leftBandwidth = left.attributes.BANDWIDTH;\n  }\n  leftBandwidth = leftBandwidth || window$1.Number.MAX_VALUE;\n  if (right.attributes.BANDWIDTH) {\n    rightBandwidth = right.attributes.BANDWIDTH;\n  }\n  rightBandwidth = rightBandwidth || window$1.Number.MAX_VALUE;\n  return leftBandwidth - rightBandwidth;\n};\n/**\n * A comparator function to sort two playlist object by resolution (width).\n *\n * @param {Object} left a media playlist object\n * @param {Object} right a media playlist object\n * @return {number} Greater than zero if the resolution.width attribute of\n * left is greater than the corresponding attribute of right. Less\n * than zero if the resolution.width of right is greater than left and\n * exactly zero if the two are equal.\n */\n\nconst comparePlaylistResolution = function (left, right) {\n  let leftWidth;\n  let rightWidth;\n  if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {\n    leftWidth = left.attributes.RESOLUTION.width;\n  }\n  leftWidth = leftWidth || window$1.Number.MAX_VALUE;\n  if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {\n    rightWidth = right.attributes.RESOLUTION.width;\n  }\n  rightWidth = rightWidth || window$1.Number.MAX_VALUE; // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions\n  // have the same media dimensions/ resolution\n\n  if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {\n    return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;\n  }\n  return leftWidth - rightWidth;\n};\n/**\n * Chooses the appropriate media playlist based on bandwidth and player size\n *\n * @param {Object} main\n *        Object representation of the main manifest\n * @param {number} playerBandwidth\n *        Current calculated bandwidth of the player\n * @param {number} playerWidth\n *        Current width of the player element (should account for the device pixel ratio)\n * @param {number} playerHeight\n *        Current height of the player element (should account for the device pixel ratio)\n * @param {boolean} limitRenditionByPlayerDimensions\n *        True if the player width and height should be used during the selection, false otherwise\n * @param {Object} playlistController\n *        the current playlistController object\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\n\nlet simpleSelector = function (main, playerBandwidth, playerWidth, playerHeight, limitRenditionByPlayerDimensions, playlistController) {\n  // If we end up getting called before `main` is available, exit early\n  if (!main) {\n    return;\n  }\n  const options = {\n    bandwidth: playerBandwidth,\n    width: playerWidth,\n    height: playerHeight,\n    limitRenditionByPlayerDimensions\n  };\n  let playlists = main.playlists; // if playlist is audio only, select between currently active audio group playlists.\n\n  if (Playlist.isAudioOnly(main)) {\n    playlists = playlistController.getAudioTrackPlaylists_(); // add audioOnly to options so that we log audioOnly: true\n    // at the buttom of this function for debugging.\n\n    options.audioOnly = true;\n  } // convert the playlists to an intermediary representation to make comparisons easier\n\n  let sortedPlaylistReps = playlists.map(playlist => {\n    let bandwidth;\n    const width = playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;\n    const height = playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;\n    bandwidth = playlist.attributes && playlist.attributes.BANDWIDTH;\n    bandwidth = bandwidth || window$1.Number.MAX_VALUE;\n    return {\n      bandwidth,\n      width,\n      height,\n      playlist\n    };\n  });\n  stableSort(sortedPlaylistReps, (left, right) => left.bandwidth - right.bandwidth); // filter out any playlists that have been excluded due to\n  // incompatible configurations\n\n  sortedPlaylistReps = sortedPlaylistReps.filter(rep => !Playlist.isIncompatible(rep.playlist)); // filter out any playlists that have been disabled manually through the representations\n  // api or excluded temporarily due to playback errors.\n\n  let enabledPlaylistReps = sortedPlaylistReps.filter(rep => Playlist.isEnabled(rep.playlist));\n  if (!enabledPlaylistReps.length) {\n    // if there are no enabled playlists, then they have all been excluded or disabled\n    // by the user through the representations api. In this case, ignore exclusion and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylistReps = sortedPlaylistReps.filter(rep => !Playlist.isDisabled(rep.playlist));\n  } // filter out any variant that has greater effective bitrate\n  // than the current estimated bandwidth\n\n  const bandwidthPlaylistReps = enabledPlaylistReps.filter(rep => rep.bandwidth * Config.BANDWIDTH_VARIANCE < playerBandwidth);\n  let highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1]; // get all of the renditions with the same (highest) bandwidth\n  // and then taking the very first element\n\n  const bandwidthBestRep = bandwidthPlaylistReps.filter(rep => rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0]; // if we're not going to limit renditions by player size, make an early decision.\n\n  if (limitRenditionByPlayerDimensions === false) {\n    const chosenRep = bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\n    if (chosenRep && chosenRep.playlist) {\n      let type = 'sortedPlaylistReps';\n      if (bandwidthBestRep) {\n        type = 'bandwidthBestRep';\n      }\n      if (enabledPlaylistReps[0]) {\n        type = 'enabledPlaylistReps';\n      }\n      logFn(`choosing ${representationToString(chosenRep)} using ${type} with options`, options);\n      return chosenRep.playlist;\n    }\n    logFn('could not choose a playlist with options', options);\n    return null;\n  } // filter out playlists without resolution information\n\n  const haveResolution = bandwidthPlaylistReps.filter(rep => rep.width && rep.height); // sort variants by resolution\n\n  stableSort(haveResolution, (left, right) => left.width - right.width); // if we have the exact resolution as the player use it\n\n  const resolutionBestRepList = haveResolution.filter(rep => rep.width === playerWidth && rep.height === playerHeight);\n  highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1]; // ensure that we pick the highest bandwidth variant that have exact resolution\n\n  const resolutionBestRep = resolutionBestRepList.filter(rep => rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0];\n  let resolutionPlusOneList;\n  let resolutionPlusOneSmallest;\n  let resolutionPlusOneRep; // find the smallest variant that is larger than the player\n  // if there is no match of exact resolution\n\n  if (!resolutionBestRep) {\n    resolutionPlusOneList = haveResolution.filter(rep => rep.width > playerWidth || rep.height > playerHeight); // find all the variants have the same smallest resolution\n\n    resolutionPlusOneSmallest = resolutionPlusOneList.filter(rep => rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height); // ensure that we also pick the highest bandwidth variant that\n    // is just-larger-than the video player\n\n    highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];\n    resolutionPlusOneRep = resolutionPlusOneSmallest.filter(rep => rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0];\n  }\n  let leastPixelDiffRep; // If this selector proves to be better than others,\n  // resolutionPlusOneRep and resolutionBestRep and all\n  // the code involving them should be removed.\n\n  if (playlistController.leastPixelDiffSelector) {\n    // find the variant that is closest to the player's pixel size\n    const leastPixelDiffList = haveResolution.map(rep => {\n      rep.pixelDiff = Math.abs(rep.width - playerWidth) + Math.abs(rep.height - playerHeight);\n      return rep;\n    }); // get the highest bandwidth, closest resolution playlist\n\n    stableSort(leastPixelDiffList, (left, right) => {\n      // sort by highest bandwidth if pixelDiff is the same\n      if (left.pixelDiff === right.pixelDiff) {\n        return right.bandwidth - left.bandwidth;\n      }\n      return left.pixelDiff - right.pixelDiff;\n    });\n    leastPixelDiffRep = leastPixelDiffList[0];\n  } // fallback chain of variants\n\n  const chosenRep = leastPixelDiffRep || resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];\n  if (chosenRep && chosenRep.playlist) {\n    let type = 'sortedPlaylistReps';\n    if (leastPixelDiffRep) {\n      type = 'leastPixelDiffRep';\n    } else if (resolutionPlusOneRep) {\n      type = 'resolutionPlusOneRep';\n    } else if (resolutionBestRep) {\n      type = 'resolutionBestRep';\n    } else if (bandwidthBestRep) {\n      type = 'bandwidthBestRep';\n    } else if (enabledPlaylistReps[0]) {\n      type = 'enabledPlaylistReps';\n    }\n    logFn(`choosing ${representationToString(chosenRep)} using ${type} with options`, options);\n    return chosenRep.playlist;\n  }\n  logFn('could not choose a playlist with options', options);\n  return null;\n};\n\n/**\n * Chooses the appropriate media playlist based on the most recent\n * bandwidth estimate and the player size.\n *\n * Expects to be called within the context of an instance of VhsHandler\n *\n * @return {Playlist} the highest bitrate playlist less than the\n * currently detected bandwidth, accounting for some amount of\n * bandwidth variance\n */\n\nconst lastBandwidthSelector = function () {\n  const pixelRatio = this.useDevicePixelRatio ? window$1.devicePixelRatio || 1 : 1;\n  return simpleSelector(this.playlists.main, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10) * pixelRatio, parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10) * pixelRatio, this.limitRenditionByPlayerDimensions, this.playlistController_);\n};\n/**\n * Chooses the appropriate media playlist based on an\n * exponential-weighted moving average of the bandwidth after\n * filtering for player size.\n *\n * Expects to be called within the context of an instance of VhsHandler\n *\n * @param {number} decay - a number between 0 and 1. Higher values of\n * this parameter will cause previous bandwidth estimates to lose\n * significance more quickly.\n * @return {Function} a function which can be invoked to create a new\n * playlist selector function.\n * @see https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n */\n\nconst movingAverageBandwidthSelector = function (decay) {\n  let average = -1;\n  let lastSystemBandwidth = -1;\n  if (decay < 0 || decay > 1) {\n    throw new Error('Moving average bandwidth decay must be between 0 and 1.');\n  }\n  return function () {\n    const pixelRatio = this.useDevicePixelRatio ? window$1.devicePixelRatio || 1 : 1;\n    if (average < 0) {\n      average = this.systemBandwidth;\n      lastSystemBandwidth = this.systemBandwidth;\n    } // stop the average value from decaying for every 250ms\n    // when the systemBandwidth is constant\n    // and\n    // stop average from setting to a very low value when the\n    // systemBandwidth becomes 0 in case of chunk cancellation\n\n    if (this.systemBandwidth > 0 && this.systemBandwidth !== lastSystemBandwidth) {\n      average = decay * this.systemBandwidth + (1 - decay) * average;\n      lastSystemBandwidth = this.systemBandwidth;\n    }\n    return simpleSelector(this.playlists.main, average, parseInt(safeGetComputedStyle(this.tech_.el(), 'width'), 10) * pixelRatio, parseInt(safeGetComputedStyle(this.tech_.el(), 'height'), 10) * pixelRatio, this.limitRenditionByPlayerDimensions, this.playlistController_);\n  };\n};\n/**\n * Chooses the appropriate media playlist based on the potential to rebuffer\n *\n * @param {Object} settings\n *        Object of information required to use this selector\n * @param {Object} settings.main\n *        Object representation of the main manifest\n * @param {number} settings.currentTime\n *        The current time of the player\n * @param {number} settings.bandwidth\n *        Current measured bandwidth\n * @param {number} settings.duration\n *        Duration of the media\n * @param {number} settings.segmentDuration\n *        Segment duration to be used in round trip time calculations\n * @param {number} settings.timeUntilRebuffer\n *        Time left in seconds until the player has to rebuffer\n * @param {number} settings.currentTimeline\n *        The current timeline segments are being loaded from\n * @param {SyncController} settings.syncController\n *        SyncController for determining if we have a sync point for a given playlist\n * @return {Object|null}\n *         {Object} return.playlist\n *         The highest bandwidth playlist with the least amount of rebuffering\n *         {Number} return.rebufferingImpact\n *         The amount of time in seconds switching to this playlist will rebuffer. A\n *         negative value means that switching will cause zero rebuffering.\n */\n\nconst minRebufferMaxBandwidthSelector = function (settings) {\n  const {\n    main,\n    currentTime,\n    bandwidth,\n    duration,\n    segmentDuration,\n    timeUntilRebuffer,\n    currentTimeline,\n    syncController\n  } = settings; // filter out any playlists that have been excluded due to\n  // incompatible configurations\n\n  const compatiblePlaylists = main.playlists.filter(playlist => !Playlist.isIncompatible(playlist)); // filter out any playlists that have been disabled manually through the representations\n  // api or excluded temporarily due to playback errors.\n\n  let enabledPlaylists = compatiblePlaylists.filter(Playlist.isEnabled);\n  if (!enabledPlaylists.length) {\n    // if there are no enabled playlists, then they have all been excluded or disabled\n    // by the user through the representations api. In this case, ignore exclusion and\n    // fallback to what the user wants by using playlists the user has not disabled.\n    enabledPlaylists = compatiblePlaylists.filter(playlist => !Playlist.isDisabled(playlist));\n  }\n  const bandwidthPlaylists = enabledPlaylists.filter(Playlist.hasAttribute.bind(null, 'BANDWIDTH'));\n  const rebufferingEstimates = bandwidthPlaylists.map(playlist => {\n    const syncPoint = syncController.getSyncPoint(playlist, duration, currentTimeline, currentTime); // If there is no sync point for this playlist, switching to it will require a\n    // sync request first. This will double the request time\n\n    const numRequests = syncPoint ? 1 : 2;\n    const requestTimeEstimate = Playlist.estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);\n    const rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;\n    return {\n      playlist,\n      rebufferingImpact\n    };\n  });\n  const noRebufferingPlaylists = rebufferingEstimates.filter(estimate => estimate.rebufferingImpact <= 0); // Sort by bandwidth DESC\n\n  stableSort(noRebufferingPlaylists, (a, b) => comparePlaylistBandwidth(b.playlist, a.playlist));\n  if (noRebufferingPlaylists.length) {\n    return noRebufferingPlaylists[0];\n  }\n  stableSort(rebufferingEstimates, (a, b) => a.rebufferingImpact - b.rebufferingImpact);\n  return rebufferingEstimates[0] || null;\n};\n/**\n * Chooses the appropriate media playlist, which in this case is the lowest bitrate\n * one with video.  If no renditions with video exist, return the lowest audio rendition.\n *\n * Expects to be called within the context of an instance of VhsHandler\n *\n * @return {Object|null}\n *         {Object} return.playlist\n *         The lowest bitrate playlist that contains a video codec.  If no such rendition\n *         exists pick the lowest audio rendition.\n */\n\nconst lowestBitrateCompatibleVariantSelector = function () {\n  // filter out any playlists that have been excluded due to\n  // incompatible configurations or playback errors\n  const playlists = this.playlists.main.playlists.filter(Playlist.isEnabled); // Sort ascending by bitrate\n\n  stableSort(playlists, (a, b) => comparePlaylistBandwidth(a, b)); // Parse and assume that playlists with no video codec have no video\n  // (this is not necessarily true, although it is generally true).\n  //\n  // If an entire manifest has no valid videos everything will get filtered\n  // out.\n\n  const playlistsWithVideo = playlists.filter(playlist => !!codecsForPlaylist(this.playlists.main, playlist).video);\n  return playlistsWithVideo[0] || null;\n};\n\n/**\n * Combine all segments into a single Uint8Array\n *\n * @param {Object} segmentObj\n * @return {Uint8Array} concatenated bytes\n * @private\n */\nconst concatSegments = segmentObj => {\n  let offset = 0;\n  let tempBuffer;\n  if (segmentObj.bytes) {\n    tempBuffer = new Uint8Array(segmentObj.bytes); // combine the individual segments into one large typed-array\n\n    segmentObj.segments.forEach(segment => {\n      tempBuffer.set(segment, offset);\n      offset += segment.byteLength;\n    });\n  }\n  return tempBuffer;\n};\n\n/**\n * @file text-tracks.js\n */\n/**\n * Create captions text tracks on video.js if they do not exist\n *\n * @param {Object} inbandTextTracks a reference to current inbandTextTracks\n * @param {Object} tech the video.js tech\n * @param {Object} captionStream the caption stream to create\n * @private\n */\n\nconst createCaptionsTrackIfNotExists = function (inbandTextTracks, tech, captionStream) {\n  if (!inbandTextTracks[captionStream]) {\n    tech.trigger({\n      type: 'usage',\n      name: 'vhs-608'\n    });\n    let instreamId = captionStream; // we need to translate SERVICEn for 708 to how mux.js currently labels them\n\n    if (/^cc708_/.test(captionStream)) {\n      instreamId = 'SERVICE' + captionStream.split('_')[1];\n    }\n    const track = tech.textTracks().getTrackById(instreamId);\n    if (track) {\n      // Resuse an existing track with a CC# id because this was\n      // very likely created by videojs-contrib-hls from information\n      // in the m3u8 for us to use\n      inbandTextTracks[captionStream] = track;\n    } else {\n      // This section gets called when we have caption services that aren't specified in the manifest.\n      // Manifest level caption services are handled in media-groups.js under CLOSED-CAPTIONS.\n      const captionServices = tech.options_.vhs && tech.options_.vhs.captionServices || {};\n      let label = captionStream;\n      let language = captionStream;\n      let def = false;\n      const captionService = captionServices[instreamId];\n      if (captionService) {\n        label = captionService.label;\n        language = captionService.language;\n        def = captionService.default;\n      } // Otherwise, create a track with the default `CC#` label and\n      // without a language\n\n      inbandTextTracks[captionStream] = tech.addRemoteTextTrack({\n        kind: 'captions',\n        id: instreamId,\n        // TODO: investigate why this doesn't seem to turn the caption on by default\n        default: def,\n        label,\n        language\n      }, false).track;\n    }\n  }\n};\n/**\n * Add caption text track data to a source handler given an array of captions\n *\n * @param {Object}\n *   @param {Object} inbandTextTracks the inband text tracks\n *   @param {number} timestampOffset the timestamp offset of the source buffer\n *   @param {Array} captionArray an array of caption data\n * @private\n */\n\nconst addCaptionData = function ({\n  inbandTextTracks,\n  captionArray,\n  timestampOffset\n}) {\n  if (!captionArray) {\n    return;\n  }\n  const Cue = window$1.WebKitDataCue || window$1.VTTCue;\n  captionArray.forEach(caption => {\n    const track = caption.stream;\n    inbandTextTracks[track].addCue(new Cue(caption.startTime + timestampOffset, caption.endTime + timestampOffset, caption.text));\n  });\n};\n/**\n * Define properties on a cue for backwards compatability,\n * but warn the user that the way that they are using it\n * is depricated and will be removed at a later date.\n *\n * @param {Cue} cue the cue to add the properties on\n * @private\n */\n\nconst deprecateOldCue = function (cue) {\n  Object.defineProperties(cue.frame, {\n    id: {\n      get() {\n        videojs.log.warn('cue.frame.id is deprecated. Use cue.value.key instead.');\n        return cue.value.key;\n      }\n    },\n    value: {\n      get() {\n        videojs.log.warn('cue.frame.value is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    },\n    privateData: {\n      get() {\n        videojs.log.warn('cue.frame.privateData is deprecated. Use cue.value.data instead.');\n        return cue.value.data;\n      }\n    }\n  });\n};\n/**\n * Add metadata text track data to a source handler given an array of metadata\n *\n * @param {Object}\n *   @param {Object} inbandTextTracks the inband text tracks\n *   @param {Array} metadataArray an array of meta data\n *   @param {number} timestampOffset the timestamp offset of the source buffer\n *   @param {number} videoDuration the duration of the video\n * @private\n */\n\nconst addMetadata = ({\n  inbandTextTracks,\n  metadataArray,\n  timestampOffset,\n  videoDuration\n}) => {\n  if (!metadataArray) {\n    return;\n  }\n  const Cue = window$1.WebKitDataCue || window$1.VTTCue;\n  const metadataTrack = inbandTextTracks.metadataTrack_;\n  if (!metadataTrack) {\n    return;\n  }\n  metadataArray.forEach(metadata => {\n    const time = metadata.cueTime + timestampOffset; // if time isn't a finite number between 0 and Infinity, like NaN,\n    // ignore this bit of metadata.\n    // This likely occurs when you have an non-timed ID3 tag like TIT2,\n    // which is the \"Title/Songname/Content description\" frame\n\n    if (typeof time !== 'number' || window$1.isNaN(time) || time < 0 || !(time < Infinity)) {\n      return;\n    }\n    metadata.frames.forEach(frame => {\n      const cue = new Cue(time, time, frame.value || frame.url || frame.data || '');\n      cue.frame = frame;\n      cue.value = frame;\n      deprecateOldCue(cue);\n      metadataTrack.addCue(cue);\n    });\n  });\n  if (!metadataTrack.cues || !metadataTrack.cues.length) {\n    return;\n  } // Updating the metadeta cues so that\n  // the endTime of each cue is the startTime of the next cue\n  // the endTime of last cue is the duration of the video\n\n  const cues = metadataTrack.cues;\n  const cuesArray = []; // Create a copy of the TextTrackCueList...\n  // ...disregarding cues with a falsey value\n\n  for (let i = 0; i < cues.length; i++) {\n    if (cues[i]) {\n      cuesArray.push(cues[i]);\n    }\n  } // Group cues by their startTime value\n\n  const cuesGroupedByStartTime = cuesArray.reduce((obj, cue) => {\n    const timeSlot = obj[cue.startTime] || [];\n    timeSlot.push(cue);\n    obj[cue.startTime] = timeSlot;\n    return obj;\n  }, {}); // Sort startTimes by ascending order\n\n  const sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort((a, b) => Number(a) - Number(b)); // Map each cue group's endTime to the next group's startTime\n\n  sortedStartTimes.forEach((startTime, idx) => {\n    const cueGroup = cuesGroupedByStartTime[startTime];\n    const nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration; // Map each cue's endTime the next group's startTime\n\n    cueGroup.forEach(cue => {\n      cue.endTime = nextTime;\n    });\n  });\n};\n/**\n * Create metadata text track on video.js if it does not exist\n *\n * @param {Object} inbandTextTracks a reference to current inbandTextTracks\n * @param {string} dispatchType the inband metadata track dispatch type\n * @param {Object} tech the video.js tech\n * @private\n */\n\nconst createMetadataTrackIfNotExists = (inbandTextTracks, dispatchType, tech) => {\n  if (inbandTextTracks.metadataTrack_) {\n    return;\n  }\n  inbandTextTracks.metadataTrack_ = tech.addRemoteTextTrack({\n    kind: 'metadata',\n    label: 'Timed Metadata'\n  }, false).track;\n  inbandTextTracks.metadataTrack_.inBandMetadataTrackDispatchType = dispatchType;\n};\n/**\n * Remove cues from a track on video.js.\n *\n * @param {Double} start start of where we should remove the cue\n * @param {Double} end end of where the we should remove the cue\n * @param {Object} track the text track to remove the cues from\n * @private\n */\n\nconst removeCuesFromTrack = function (start, end, track) {\n  let i;\n  let cue;\n  if (!track) {\n    return;\n  }\n  if (!track.cues) {\n    return;\n  }\n  i = track.cues.length;\n  while (i--) {\n    cue = track.cues[i]; // Remove any cue within the provided start and end time\n\n    if (cue.startTime >= start && cue.endTime <= end) {\n      track.removeCue(cue);\n    }\n  }\n};\n/**\n * Remove duplicate cues from a track on video.js (a cue is considered a\n * duplicate if it has the same time interval and text as another)\n *\n * @param {Object} track the text track to remove the duplicate cues from\n * @private\n */\n\nconst removeDuplicateCuesFromTrack = function (track) {\n  const cues = track.cues;\n  if (!cues) {\n    return;\n  }\n  for (let i = 0; i < cues.length; i++) {\n    const duplicates = [];\n    let occurrences = 0;\n    for (let j = 0; j < cues.length; j++) {\n      if (cues[i].startTime === cues[j].startTime && cues[i].endTime === cues[j].endTime && cues[i].text === cues[j].text) {\n        occurrences++;\n        if (occurrences > 1) {\n          duplicates.push(cues[j]);\n        }\n      }\n    }\n    if (duplicates.length) {\n      duplicates.forEach(dupe => track.removeCue(dupe));\n    }\n  }\n};\n\n/**\n * Returns a list of gops in the buffer that have a pts value of 3 seconds or more in\n * front of current time.\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {number} currentTime\n *        The current time\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n * @return {Array}\n *         List of gops considered safe to append over\n */\n\nconst gopsSafeToAlignWith = (buffer, currentTime, mapping) => {\n  if (typeof currentTime === 'undefined' || currentTime === null || !buffer.length) {\n    return [];\n  } // pts value for current time + 3 seconds to give a bit more wiggle room\n\n  const currentTimePts = Math.ceil((currentTime - mapping + 3) * ONE_SECOND_IN_TS);\n  let i;\n  for (i = 0; i < buffer.length; i++) {\n    if (buffer[i].pts > currentTimePts) {\n      break;\n    }\n  }\n  return buffer.slice(i);\n};\n/**\n * Appends gop information (timing and byteLength) received by the transmuxer for the\n * gops appended in the last call to appendBuffer\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Array} gops\n *        List of new gop information\n * @param {boolean} replace\n *        If true, replace the buffer with the new gop information. If false, append the\n *        new gop information to the buffer in the right location of time.\n * @return {Array}\n *         Updated list of gop information\n */\n\nconst updateGopBuffer = (buffer, gops, replace) => {\n  if (!gops.length) {\n    return buffer;\n  }\n  if (replace) {\n    // If we are in safe append mode, then completely overwrite the gop buffer\n    // with the most recent appeneded data. This will make sure that when appending\n    // future segments, we only try to align with gops that are both ahead of current\n    // time and in the last segment appended.\n    return gops.slice();\n  }\n  const start = gops[0].pts;\n  let i = 0;\n  for (i; i < buffer.length; i++) {\n    if (buffer[i].pts >= start) {\n      break;\n    }\n  }\n  return buffer.slice(0, i).concat(gops);\n};\n/**\n * Removes gop information in buffer that overlaps with provided start and end\n *\n * @param {Array} buffer\n *        The current buffer of gop information\n * @param {Double} start\n *        position to start the remove at\n * @param {Double} end\n *        position to end the remove at\n * @param {Double} mapping\n *        Offset to map display time to stream presentation time\n */\n\nconst removeGopBuffer = (buffer, start, end, mapping) => {\n  const startPts = Math.ceil((start - mapping) * ONE_SECOND_IN_TS);\n  const endPts = Math.ceil((end - mapping) * ONE_SECOND_IN_TS);\n  const updatedBuffer = buffer.slice();\n  let i = buffer.length;\n  while (i--) {\n    if (buffer[i].pts <= endPts) {\n      break;\n    }\n  }\n  if (i === -1) {\n    // no removal because end of remove range is before start of buffer\n    return updatedBuffer;\n  }\n  let j = i + 1;\n  while (j--) {\n    if (buffer[j].pts <= startPts) {\n      break;\n    }\n  } // clamp remove range start to 0 index\n\n  j = Math.max(j, 0);\n  updatedBuffer.splice(j, i - j + 1);\n  return updatedBuffer;\n};\nconst shallowEqual = function (a, b) {\n  // if both are undefined\n  // or one or the other is undefined\n  // they are not equal\n  if (!a && !b || !a && b || a && !b) {\n    return false;\n  } // they are the same object and thus, equal\n\n  if (a === b) {\n    return true;\n  } // sort keys so we can make sure they have\n  // all the same keys later.\n\n  const akeys = Object.keys(a).sort();\n  const bkeys = Object.keys(b).sort(); // different number of keys, not equal\n\n  if (akeys.length !== bkeys.length) {\n    return false;\n  }\n  for (let i = 0; i < akeys.length; i++) {\n    const key = akeys[i]; // different sorted keys, not equal\n\n    if (key !== bkeys[i]) {\n      return false;\n    } // different values, not equal\n\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// https://www.w3.org/TR/WebIDL-1/#quotaexceedederror\nconst QUOTA_EXCEEDED_ERR = 22;\n\n/**\n * The segment loader has no recourse except to fetch a segment in the\n * current playlist and use the internal timestamps in that segment to\n * generate a syncPoint. This function returns a good candidate index\n * for that process.\n *\n * @param {Array} segments - the segments array from a playlist.\n * @return {number} An index of a segment from the playlist to load\n */\n\nconst getSyncSegmentCandidate = function (currentTimeline, segments, targetTime) {\n  segments = segments || [];\n  const timelineSegments = [];\n  let time = 0;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    if (currentTimeline === segment.timeline) {\n      timelineSegments.push(i);\n      time += segment.duration;\n      if (time > targetTime) {\n        return i;\n      }\n    }\n  }\n  if (timelineSegments.length === 0) {\n    return 0;\n  } // default to the last timeline segment\n\n  return timelineSegments[timelineSegments.length - 1];\n}; // In the event of a quota exceeded error, keep at least one second of back buffer. This\n// number was arbitrarily chosen and may be updated in the future, but seemed reasonable\n// as a start to prevent any potential issues with removing content too close to the\n// playhead.\n\nconst MIN_BACK_BUFFER = 1; // in ms\n\nconst CHECK_BUFFER_DELAY = 500;\nconst finite = num => typeof num === 'number' && isFinite(num); // With most content hovering around 30fps, if a segment has a duration less than a half\n// frame at 30fps or one frame at 60fps, the bandwidth and throughput calculations will\n// not accurately reflect the rest of the content.\n\nconst MIN_SEGMENT_DURATION_TO_SAVE_STATS = 1 / 60;\nconst illegalMediaSwitch = (loaderType, startingMedia, trackInfo) => {\n  // Although these checks should most likely cover non 'main' types, for now it narrows\n  // the scope of our checks.\n  if (loaderType !== 'main' || !startingMedia || !trackInfo) {\n    return null;\n  }\n  if (!trackInfo.hasAudio && !trackInfo.hasVideo) {\n    return 'Neither audio nor video found in segment.';\n  }\n  if (startingMedia.hasVideo && !trackInfo.hasVideo) {\n    return 'Only audio found in segment when we expected video.' + ' We can\\'t switch to audio only from a stream that had video.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n  if (!startingMedia.hasVideo && trackInfo.hasVideo) {\n    return 'Video found in segment when we expected only audio.' + ' We can\\'t switch to a stream with video from an audio only stream.' + ' To get rid of this message, please add codec information to the manifest.';\n  }\n  return null;\n};\n/**\n * Calculates a time value that is safe to remove from the back buffer without interrupting\n * playback.\n *\n * @param {TimeRange} seekable\n *        The current seekable range\n * @param {number} currentTime\n *        The current time of the player\n * @param {number} targetDuration\n *        The target duration of the current playlist\n * @return {number}\n *         Time that is safe to remove from the back buffer without interrupting playback\n */\n\nconst safeBackBufferTrimTime = (seekable, currentTime, targetDuration) => {\n  // 30 seconds before the playhead provides a safe default for trimming.\n  //\n  // Choosing a reasonable default is particularly important for high bitrate content and\n  // VOD videos/live streams with large windows, as the buffer may end up overfilled and\n  // throw an APPEND_BUFFER_ERR.\n  let trimTime = currentTime - Config.BACK_BUFFER_LENGTH;\n  if (seekable.length) {\n    // Some live playlists may have a shorter window of content than the full allowed back\n    // buffer. For these playlists, don't save content that's no longer within the window.\n    trimTime = Math.max(trimTime, seekable.start(0));\n  } // Don't remove within target duration of the current time to avoid the possibility of\n  // removing the GOP currently being played, as removing it can cause playback stalls.\n\n  const maxTrimTime = currentTime - targetDuration;\n  return Math.min(maxTrimTime, trimTime);\n};\nconst segmentInfoString = segmentInfo => {\n  const {\n    startOfSegment,\n    duration,\n    segment,\n    part,\n    playlist: {\n      mediaSequence: seq,\n      id,\n      segments = []\n    },\n    mediaIndex: index,\n    partIndex,\n    timeline\n  } = segmentInfo;\n  const segmentLen = segments.length - 1;\n  let selection = 'mediaIndex/partIndex increment';\n  if (segmentInfo.getMediaInfoForTime) {\n    selection = `getMediaInfoForTime (${segmentInfo.getMediaInfoForTime})`;\n  } else if (segmentInfo.isSyncRequest) {\n    selection = 'getSyncSegmentCandidate (isSyncRequest)';\n  }\n  if (segmentInfo.independent) {\n    selection += ` with independent ${segmentInfo.independent}`;\n  }\n  const hasPartIndex = typeof partIndex === 'number';\n  const name = segmentInfo.segment.uri ? 'segment' : 'pre-segment';\n  const zeroBasedPartCount = hasPartIndex ? getKnownPartCount({\n    preloadSegment: segment\n  }) - 1 : 0;\n  return `${name} [${seq + index}/${seq + segmentLen}]` + (hasPartIndex ? ` part [${partIndex}/${zeroBasedPartCount}]` : '') + ` segment start/end [${segment.start} => ${segment.end}]` + (hasPartIndex ? ` part start/end [${part.start} => ${part.end}]` : '') + ` startOfSegment [${startOfSegment}]` + ` duration [${duration}]` + ` timeline [${timeline}]` + ` selected by [${selection}]` + ` playlist [${id}]`;\n};\nconst timingInfoPropertyForMedia = mediaType => `${mediaType}TimingInfo`;\n/**\n * Returns the timestamp offset to use for the segment.\n *\n * @param {number} segmentTimeline\n *        The timeline of the segment\n * @param {number} currentTimeline\n *        The timeline currently being followed by the loader\n * @param {number} startOfSegment\n *        The estimated segment start\n * @param {TimeRange[]} buffered\n *        The loader's buffer\n * @param {boolean} overrideCheck\n *        If true, no checks are made to see if the timestamp offset value should be set,\n *        but sets it directly to a value.\n *\n * @return {number|null}\n *         Either a number representing a new timestamp offset, or null if the segment is\n *         part of the same timeline\n */\n\nconst timestampOffsetForSegment = ({\n  segmentTimeline,\n  currentTimeline,\n  startOfSegment,\n  buffered,\n  overrideCheck\n}) => {\n  // Check to see if we are crossing a discontinuity to see if we need to set the\n  // timestamp offset on the transmuxer and source buffer.\n  //\n  // Previously, we changed the timestampOffset if the start of this segment was less than\n  // the currently set timestampOffset, but this isn't desirable as it can produce bad\n  // behavior, especially around long running live streams.\n  if (!overrideCheck && segmentTimeline === currentTimeline) {\n    return null;\n  } // When changing renditions, it's possible to request a segment on an older timeline. For\n  // instance, given two renditions with the following:\n  //\n  // #EXTINF:10\n  // segment1\n  // #EXT-X-DISCONTINUITY\n  // #EXTINF:10\n  // segment2\n  // #EXTINF:10\n  // segment3\n  //\n  // And the current player state:\n  //\n  // current time: 8\n  // buffer: 0 => 20\n  //\n  // The next segment on the current rendition would be segment3, filling the buffer from\n  // 20s onwards. However, if a rendition switch happens after segment2 was requested,\n  // then the next segment to be requested will be segment1 from the new rendition in\n  // order to fill time 8 and onwards. Using the buffered end would result in repeated\n  // content (since it would position segment1 of the new rendition starting at 20s). This\n  // case can be identified when the new segment's timeline is a prior value. Instead of\n  // using the buffered end, the startOfSegment can be used, which, hopefully, will be\n  // more accurate to the actual start time of the segment.\n\n  if (segmentTimeline < currentTimeline) {\n    return startOfSegment;\n  } // segmentInfo.startOfSegment used to be used as the timestamp offset, however, that\n  // value uses the end of the last segment if it is available. While this value\n  // should often be correct, it's better to rely on the buffered end, as the new\n  // content post discontinuity should line up with the buffered end as if it were\n  // time 0 for the new content.\n\n  return buffered.length ? buffered.end(buffered.length - 1) : startOfSegment;\n};\n/**\n * Returns whether or not the loader should wait for a timeline change from the timeline\n * change controller before processing the segment.\n *\n * Primary timing in VHS goes by video. This is different from most media players, as\n * audio is more often used as the primary timing source. For the foreseeable future, VHS\n * will continue to use video as the primary timing source, due to the current logic and\n * expectations built around it.\n\n * Since the timing follows video, in order to maintain sync, the video loader is\n * responsible for setting both audio and video source buffer timestamp offsets.\n *\n * Setting different values for audio and video source buffers could lead to\n * desyncing. The following examples demonstrate some of the situations where this\n * distinction is important. Note that all of these cases involve demuxed content. When\n * content is muxed, the audio and video are packaged together, therefore syncing\n * separate media playlists is not an issue.\n *\n * CASE 1: Audio prepares to load a new timeline before video:\n *\n * Timeline:       0                 1\n * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Audio Loader:                     ^\n * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Video Loader              ^\n *\n * In the above example, the audio loader is preparing to load the 6th segment, the first\n * after a discontinuity, while the video loader is still loading the 5th segment, before\n * the discontinuity.\n *\n * If the audio loader goes ahead and loads and appends the 6th segment before the video\n * loader crosses the discontinuity, then when appended, the 6th audio segment will use\n * the timestamp offset from timeline 0. This will likely lead to desyncing. In addition,\n * the audio loader must provide the audioAppendStart value to trim the content in the\n * transmuxer, and that value relies on the audio timestamp offset. Since the audio\n * timestamp offset is set by the video (main) loader, the audio loader shouldn't load the\n * segment until that value is provided.\n *\n * CASE 2: Video prepares to load a new timeline before audio:\n *\n * Timeline:       0                 1\n * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Audio Loader:             ^\n * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Video Loader                      ^\n *\n * In the above example, the video loader is preparing to load the 6th segment, the first\n * after a discontinuity, while the audio loader is still loading the 5th segment, before\n * the discontinuity.\n *\n * If the video loader goes ahead and loads and appends the 6th segment, then once the\n * segment is loaded and processed, both the video and audio timestamp offsets will be\n * set, since video is used as the primary timing source. This is to ensure content lines\n * up appropriately, as any modifications to the video timing are reflected by audio when\n * the video loader sets the audio and video timestamp offsets to the same value. However,\n * setting the timestamp offset for audio before audio has had a chance to change\n * timelines will likely lead to desyncing, as the audio loader will append segment 5 with\n * a timestamp intended to apply to segments from timeline 1 rather than timeline 0.\n *\n * CASE 3: When seeking, audio prepares to load a new timeline before video\n *\n * Timeline:       0                 1\n * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Audio Loader:           ^\n * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9\n * Video Loader            ^\n *\n * In the above example, both audio and video loaders are loading segments from timeline\n * 0, but imagine that the seek originated from timeline 1.\n *\n * When seeking to a new timeline, the timestamp offset will be set based on the expected\n * segment start of the loaded video segment. In order to maintain sync, the audio loader\n * must wait for the video loader to load its segment and update both the audio and video\n * timestamp offsets before it may load and append its own segment. This is the case\n * whether the seek results in a mismatched segment request (e.g., the audio loader\n * chooses to load segment 3 and the video loader chooses to load segment 4) or the\n * loaders choose to load the same segment index from each playlist, as the segments may\n * not be aligned perfectly, even for matching segment indexes.\n *\n * @param {Object} timelinechangeController\n * @param {number} currentTimeline\n *        The timeline currently being followed by the loader\n * @param {number} segmentTimeline\n *        The timeline of the segment being loaded\n * @param {('main'|'audio')} loaderType\n *        The loader type\n * @param {boolean} audioDisabled\n *        Whether the audio is disabled for the loader. This should only be true when the\n *        loader may have muxed audio in its segment, but should not append it, e.g., for\n *        the main loader when an alternate audio playlist is active.\n *\n * @return {boolean}\n *         Whether the loader should wait for a timeline change from the timeline change\n *         controller before processing the segment\n */\n\nconst shouldWaitForTimelineChange = ({\n  timelineChangeController,\n  currentTimeline,\n  segmentTimeline,\n  loaderType,\n  audioDisabled\n}) => {\n  if (currentTimeline === segmentTimeline) {\n    return false;\n  }\n  if (loaderType === 'audio') {\n    const lastMainTimelineChange = timelineChangeController.lastTimelineChange({\n      type: 'main'\n    }); // Audio loader should wait if:\n    //\n    // * main hasn't had a timeline change yet (thus has not loaded its first segment)\n    // * main hasn't yet changed to the timeline audio is looking to load\n\n    return !lastMainTimelineChange || lastMainTimelineChange.to !== segmentTimeline;\n  } // The main loader only needs to wait for timeline changes if there's demuxed audio.\n  // Otherwise, there's nothing to wait for, since audio would be muxed into the main\n  // loader's segments (or the content is audio/video only and handled by the main\n  // loader).\n\n  if (loaderType === 'main' && audioDisabled) {\n    const pendingAudioTimelineChange = timelineChangeController.pendingTimelineChange({\n      type: 'audio'\n    }); // Main loader should wait for the audio loader if audio is not pending a timeline\n    // change to the current timeline.\n    //\n    // Since the main loader is responsible for setting the timestamp offset for both\n    // audio and video, the main loader must wait for audio to be about to change to its\n    // timeline before setting the offset, otherwise, if audio is behind in loading,\n    // segments from the previous timeline would be adjusted by the new timestamp offset.\n    //\n    // This requirement means that video will not cross a timeline until the audio is\n    // about to cross to it, so that way audio and video will always cross the timeline\n    // together.\n    //\n    // In addition to normal timeline changes, these rules also apply to the start of a\n    // stream (going from a non-existent timeline, -1, to timeline 0). It's important\n    // that these rules apply to the first timeline change because if they did not, it's\n    // possible that the main loader will cross two timelines before the audio loader has\n    // crossed one. Logic may be implemented to handle the startup as a special case, but\n    // it's easier to simply treat all timeline changes the same.\n\n    if (pendingAudioTimelineChange && pendingAudioTimelineChange.to === segmentTimeline) {\n      return false;\n    }\n    return true;\n  }\n  return false;\n};\nconst mediaDuration = timingInfos => {\n  let maxDuration = 0;\n  ['video', 'audio'].forEach(function (type) {\n    const typeTimingInfo = timingInfos[`${type}TimingInfo`];\n    if (!typeTimingInfo) {\n      return;\n    }\n    const {\n      start,\n      end\n    } = typeTimingInfo;\n    let duration;\n    if (typeof start === 'bigint' || typeof end === 'bigint') {\n      duration = window$1.BigInt(end) - window$1.BigInt(start);\n    } else if (typeof start === 'number' && typeof end === 'number') {\n      duration = end - start;\n    }\n    if (typeof duration !== 'undefined' && duration > maxDuration) {\n      maxDuration = duration;\n    }\n  }); // convert back to a number if it is lower than MAX_SAFE_INTEGER\n  // as we only need BigInt when we are above that.\n\n  if (typeof maxDuration === 'bigint' && maxDuration < Number.MAX_SAFE_INTEGER) {\n    maxDuration = Number(maxDuration);\n  }\n  return maxDuration;\n};\nconst segmentTooLong = ({\n  segmentDuration,\n  maxDuration\n}) => {\n  // 0 duration segments are most likely due to metadata only segments or a lack of\n  // information.\n  if (!segmentDuration) {\n    return false;\n  } // For HLS:\n  //\n  // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1\n  // The EXTINF duration of each Media Segment in the Playlist\n  // file, when rounded to the nearest integer, MUST be less than or equal\n  // to the target duration; longer segments can trigger playback stalls\n  // or other errors.\n  //\n  // For DASH, the mpd-parser uses the largest reported segment duration as the target\n  // duration. Although that reported duration is occasionally approximate (i.e., not\n  // exact), a strict check may report that a segment is too long more often in DASH.\n\n  return Math.round(segmentDuration) > maxDuration + TIME_FUDGE_FACTOR;\n};\nconst getTroublesomeSegmentDurationMessage = (segmentInfo, sourceType) => {\n  // Right now we aren't following DASH's timing model exactly, so only perform\n  // this check for HLS content.\n  if (sourceType !== 'hls') {\n    return null;\n  }\n  const segmentDuration = mediaDuration({\n    audioTimingInfo: segmentInfo.audioTimingInfo,\n    videoTimingInfo: segmentInfo.videoTimingInfo\n  }); // Don't report if we lack information.\n  //\n  // If the segment has a duration of 0 it is either a lack of information or a\n  // metadata only segment and shouldn't be reported here.\n\n  if (!segmentDuration) {\n    return null;\n  }\n  const targetDuration = segmentInfo.playlist.targetDuration;\n  const isSegmentWayTooLong = segmentTooLong({\n    segmentDuration,\n    maxDuration: targetDuration * 2\n  });\n  const isSegmentSlightlyTooLong = segmentTooLong({\n    segmentDuration,\n    maxDuration: targetDuration\n  });\n  const segmentTooLongMessage = `Segment with index ${segmentInfo.mediaIndex} ` + `from playlist ${segmentInfo.playlist.id} ` + `has a duration of ${segmentDuration} ` + `when the reported duration is ${segmentInfo.duration} ` + `and the target duration is ${targetDuration}. ` + 'For HLS content, a duration in excess of the target duration may result in ' + 'playback issues. See the HLS specification section on EXT-X-TARGETDURATION for ' + 'more details: ' + 'https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1';\n  if (isSegmentWayTooLong || isSegmentSlightlyTooLong) {\n    return {\n      severity: isSegmentWayTooLong ? 'warn' : 'info',\n      message: segmentTooLongMessage\n    };\n  }\n  return null;\n};\n/**\n * An object that manages segment loading and appending.\n *\n * @class SegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nclass SegmentLoader extends videojs.EventTarget {\n  constructor(settings, options = {}) {\n    super(); // check pre-conditions\n\n    if (!settings) {\n      throw new TypeError('Initialization settings are required');\n    }\n    if (typeof settings.currentTime !== 'function') {\n      throw new TypeError('No currentTime getter specified');\n    }\n    if (!settings.mediaSource) {\n      throw new TypeError('No MediaSource specified');\n    } // public properties\n\n    this.bandwidth = settings.bandwidth;\n    this.throughput = {\n      rate: 0,\n      count: 0\n    };\n    this.roundTrip = NaN;\n    this.resetStats_();\n    this.mediaIndex = null;\n    this.partIndex = null; // private settings\n\n    this.hasPlayed_ = settings.hasPlayed;\n    this.currentTime_ = settings.currentTime;\n    this.seekable_ = settings.seekable;\n    this.seeking_ = settings.seeking;\n    this.duration_ = settings.duration;\n    this.mediaSource_ = settings.mediaSource;\n    this.vhs_ = settings.vhs;\n    this.loaderType_ = settings.loaderType;\n    this.currentMediaInfo_ = void 0;\n    this.startingMediaInfo_ = void 0;\n    this.segmentMetadataTrack_ = settings.segmentMetadataTrack;\n    this.goalBufferLength_ = settings.goalBufferLength;\n    this.sourceType_ = settings.sourceType;\n    this.sourceUpdater_ = settings.sourceUpdater;\n    this.inbandTextTracks_ = settings.inbandTextTracks;\n    this.state_ = 'INIT';\n    this.timelineChangeController_ = settings.timelineChangeController;\n    this.shouldSaveSegmentTimingInfo_ = true;\n    this.parse708captions_ = settings.parse708captions;\n    this.useDtsForTimestampOffset_ = settings.useDtsForTimestampOffset;\n    this.captionServices_ = settings.captionServices;\n    this.exactManifestTimings = settings.exactManifestTimings; // private instance variables\n\n    this.checkBufferTimeout_ = null;\n    this.error_ = void 0;\n    this.currentTimeline_ = -1;\n    this.pendingSegment_ = null;\n    this.xhrOptions_ = null;\n    this.pendingSegments_ = [];\n    this.audioDisabled_ = false;\n    this.isPendingTimestampOffset_ = false; // TODO possibly move gopBuffer and timeMapping info to a separate controller\n\n    this.gopBuffer_ = [];\n    this.timeMapping_ = 0;\n    this.safeAppend_ = videojs.browser.IE_VERSION >= 11;\n    this.appendInitSegment_ = {\n      audio: true,\n      video: true\n    };\n    this.playlistOfLastInitSegment_ = {\n      audio: null,\n      video: null\n    };\n    this.callQueue_ = []; // If the segment loader prepares to load a segment, but does not have enough\n    // information yet to start the loading process (e.g., if the audio loader wants to\n    // load a segment from the next timeline but the main loader hasn't yet crossed that\n    // timeline), then the load call will be added to the queue until it is ready to be\n    // processed.\n\n    this.loadQueue_ = [];\n    this.metadataQueue_ = {\n      id3: [],\n      caption: []\n    };\n    this.waitingOnRemove_ = false;\n    this.quotaExceededErrorRetryTimeout_ = null; // Fragmented mp4 playback\n\n    this.activeInitSegmentId_ = null;\n    this.initSegments_ = {}; // HLSe playback\n\n    this.cacheEncryptionKeys_ = settings.cacheEncryptionKeys;\n    this.keyCache_ = {};\n    this.decrypter_ = settings.decrypter; // Manages the tracking and generation of sync-points, mappings\n    // between a time in the display time and a segment index within\n    // a playlist\n\n    this.syncController_ = settings.syncController;\n    this.syncPoint_ = {\n      segmentIndex: 0,\n      time: 0\n    };\n    this.transmuxer_ = this.createTransmuxer_();\n    this.triggerSyncInfoUpdate_ = () => this.trigger('syncinfoupdate');\n    this.syncController_.on('syncinfoupdate', this.triggerSyncInfoUpdate_);\n    this.mediaSource_.addEventListener('sourceopen', () => {\n      if (!this.isEndOfStream_()) {\n        this.ended_ = false;\n      }\n    }); // ...for determining the fetch location\n\n    this.fetchAtBuffer_ = false;\n    this.logger_ = logger(`SegmentLoader[${this.loaderType_}]`);\n    Object.defineProperty(this, 'state', {\n      get() {\n        return this.state_;\n      },\n      set(newState) {\n        if (newState !== this.state_) {\n          this.logger_(`${this.state_} -> ${newState}`);\n          this.state_ = newState;\n          this.trigger('statechange');\n        }\n      }\n    });\n    this.sourceUpdater_.on('ready', () => {\n      if (this.hasEnoughInfoToAppend_()) {\n        this.processCallQueue_();\n      }\n    }); // Only the main loader needs to listen for pending timeline changes, as the main\n    // loader should wait for audio to be ready to change its timeline so that both main\n    // and audio timelines change together. For more details, see the\n    // shouldWaitForTimelineChange function.\n\n    if (this.loaderType_ === 'main') {\n      this.timelineChangeController_.on('pendingtimelinechange', () => {\n        if (this.hasEnoughInfoToAppend_()) {\n          this.processCallQueue_();\n        }\n      });\n    } // The main loader only listens on pending timeline changes, but the audio loader,\n    // since its loads follow main, needs to listen on timeline changes. For more details,\n    // see the shouldWaitForTimelineChange function.\n\n    if (this.loaderType_ === 'audio') {\n      this.timelineChangeController_.on('timelinechange', () => {\n        if (this.hasEnoughInfoToLoad_()) {\n          this.processLoadQueue_();\n        }\n        if (this.hasEnoughInfoToAppend_()) {\n          this.processCallQueue_();\n        }\n      });\n    }\n  }\n  createTransmuxer_() {\n    return segmentTransmuxer.createTransmuxer({\n      remux: false,\n      alignGopsAtEnd: this.safeAppend_,\n      keepOriginalTimestamps: true,\n      parse708captions: this.parse708captions_,\n      captionServices: this.captionServices_\n    });\n  }\n  /**\n   * reset all of our media stats\n   *\n   * @private\n   */\n\n  resetStats_() {\n    this.mediaBytesTransferred = 0;\n    this.mediaRequests = 0;\n    this.mediaRequestsAborted = 0;\n    this.mediaRequestsTimedout = 0;\n    this.mediaRequestsErrored = 0;\n    this.mediaTransferDuration = 0;\n    this.mediaSecondsLoaded = 0;\n    this.mediaAppends = 0;\n  }\n  /**\n   * dispose of the SegmentLoader and reset to the default state\n   */\n\n  dispose() {\n    this.trigger('dispose');\n    this.state = 'DISPOSED';\n    this.pause();\n    this.abort_();\n    if (this.transmuxer_) {\n      this.transmuxer_.terminate();\n    }\n    this.resetStats_();\n    if (this.checkBufferTimeout_) {\n      window$1.clearTimeout(this.checkBufferTimeout_);\n    }\n    if (this.syncController_ && this.triggerSyncInfoUpdate_) {\n      this.syncController_.off('syncinfoupdate', this.triggerSyncInfoUpdate_);\n    }\n    this.off();\n  }\n  setAudio(enable) {\n    this.audioDisabled_ = !enable;\n    if (enable) {\n      this.appendInitSegment_.audio = true;\n    } else {\n      // remove current track audio if it gets disabled\n      this.sourceUpdater_.removeAudio(0, this.duration_());\n    }\n  }\n  /**\n   * abort anything that is currently doing on with the SegmentLoader\n   * and reset to a default state\n   */\n\n  abort() {\n    if (this.state !== 'WAITING') {\n      if (this.pendingSegment_) {\n        this.pendingSegment_ = null;\n      }\n      return;\n    }\n    this.abort_(); // We aborted the requests we were waiting on, so reset the loader's state to READY\n    // since we are no longer \"waiting\" on any requests. XHR callback is not always run\n    // when the request is aborted. This will prevent the loader from being stuck in the\n    // WAITING state indefinitely.\n\n    this.state = 'READY'; // don't wait for buffer check timeouts to begin fetching the\n    // next segment\n\n    if (!this.paused()) {\n      this.monitorBuffer_();\n    }\n  }\n  /**\n   * abort all pending xhr requests and null any pending segements\n   *\n   * @private\n   */\n\n  abort_() {\n    if (this.pendingSegment_ && this.pendingSegment_.abortRequests) {\n      this.pendingSegment_.abortRequests();\n    } // clear out the segment being processed\n\n    this.pendingSegment_ = null;\n    this.callQueue_ = [];\n    this.loadQueue_ = [];\n    this.metadataQueue_.id3 = [];\n    this.metadataQueue_.caption = [];\n    this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_);\n    this.waitingOnRemove_ = false;\n    window$1.clearTimeout(this.quotaExceededErrorRetryTimeout_);\n    this.quotaExceededErrorRetryTimeout_ = null;\n  }\n  checkForAbort_(requestId) {\n    // If the state is APPENDING, then aborts will not modify the state, meaning the first\n    // callback that happens should reset the state to READY so that loading can continue.\n    if (this.state === 'APPENDING' && !this.pendingSegment_) {\n      this.state = 'READY';\n      return true;\n    }\n    if (!this.pendingSegment_ || this.pendingSegment_.requestId !== requestId) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * set an error on the segment loader and null out any pending segements\n   *\n   * @param {Error} error the error to set on the SegmentLoader\n   * @return {Error} the error that was set or that is currently set\n   */\n\n  error(error) {\n    if (typeof error !== 'undefined') {\n      this.logger_('error occurred:', error);\n      this.error_ = error;\n    }\n    this.pendingSegment_ = null;\n    return this.error_;\n  }\n  endOfStream() {\n    this.ended_ = true;\n    if (this.transmuxer_) {\n      // need to clear out any cached data to prepare for the new segment\n      segmentTransmuxer.reset(this.transmuxer_);\n    }\n    this.gopBuffer_.length = 0;\n    this.pause();\n    this.trigger('ended');\n  }\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n  buffered_() {\n    const trackInfo = this.getMediaInfo_();\n    if (!this.sourceUpdater_ || !trackInfo) {\n      return createTimeRanges();\n    }\n    if (this.loaderType_ === 'main') {\n      const {\n        hasAudio,\n        hasVideo,\n        isMuxed\n      } = trackInfo;\n      if (hasVideo && hasAudio && !this.audioDisabled_ && !isMuxed) {\n        return this.sourceUpdater_.buffered();\n      }\n      if (hasVideo) {\n        return this.sourceUpdater_.videoBuffered();\n      }\n    } // One case that can be ignored for now is audio only with alt audio,\n    // as we don't yet have proper support for that.\n\n    return this.sourceUpdater_.audioBuffered();\n  }\n  /**\n   * Gets and sets init segment for the provided map\n   *\n   * @param {Object} map\n   *        The map object representing the init segment to get or set\n   * @param {boolean=} set\n   *        If true, the init segment for the provided map should be saved\n   * @return {Object}\n   *         map object for desired init segment\n   */\n\n  initSegmentForMap(map, set = false) {\n    if (!map) {\n      return null;\n    }\n    const id = initSegmentId(map);\n    let storedMap = this.initSegments_[id];\n    if (set && !storedMap && map.bytes) {\n      this.initSegments_[id] = storedMap = {\n        resolvedUri: map.resolvedUri,\n        byterange: map.byterange,\n        bytes: map.bytes,\n        tracks: map.tracks,\n        timescales: map.timescales\n      };\n    }\n    return storedMap || map;\n  }\n  /**\n   * Gets and sets key for the provided key\n   *\n   * @param {Object} key\n   *        The key object representing the key to get or set\n   * @param {boolean=} set\n   *        If true, the key for the provided key should be saved\n   * @return {Object}\n   *         Key object for desired key\n   */\n\n  segmentKey(key, set = false) {\n    if (!key) {\n      return null;\n    }\n    const id = segmentKeyId(key);\n    let storedKey = this.keyCache_[id]; // TODO: We should use the HTTP Expires header to invalidate our cache per\n    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-6.2.3\n\n    if (this.cacheEncryptionKeys_ && set && !storedKey && key.bytes) {\n      this.keyCache_[id] = storedKey = {\n        resolvedUri: key.resolvedUri,\n        bytes: key.bytes\n      };\n    }\n    const result = {\n      resolvedUri: (storedKey || key).resolvedUri\n    };\n    if (storedKey) {\n      result.bytes = storedKey.bytes;\n    }\n    return result;\n  }\n  /**\n   * Returns true if all configuration required for loading is present, otherwise false.\n   *\n   * @return {boolean} True if the all configuration is ready for loading\n   * @private\n   */\n\n  couldBeginLoading_() {\n    return this.playlist_ && !this.paused();\n  }\n  /**\n   * load a playlist and start to fill the buffer\n   */\n\n  load() {\n    // un-pause\n    this.monitorBuffer_(); // if we don't have a playlist yet, keep waiting for one to be\n    // specified\n\n    if (!this.playlist_) {\n      return;\n    } // if all the configuration is ready, initialize and begin loading\n\n    if (this.state === 'INIT' && this.couldBeginLoading_()) {\n      return this.init_();\n    } // if we're in the middle of processing a segment already, don't\n    // kick off an additional segment request\n\n    if (!this.couldBeginLoading_() || this.state !== 'READY' && this.state !== 'INIT') {\n      return;\n    }\n    this.state = 'READY';\n  }\n  /**\n   * Once all the starting parameters have been specified, begin\n   * operation. This method should only be invoked from the INIT\n   * state.\n   *\n   * @private\n   */\n\n  init_() {\n    this.state = 'READY'; // if this is the audio segment loader, and it hasn't been inited before, then any old\n    // audio data from the muxed content should be removed\n\n    this.resetEverything();\n    return this.monitorBuffer_();\n  }\n  /**\n   * set a playlist on the segment loader\n   *\n   * @param {PlaylistLoader} media the playlist to set on the segment loader\n   */\n\n  playlist(newPlaylist, options = {}) {\n    if (!newPlaylist) {\n      return;\n    }\n    const oldPlaylist = this.playlist_;\n    const segmentInfo = this.pendingSegment_;\n    this.playlist_ = newPlaylist;\n    this.xhrOptions_ = options; // when we haven't started playing yet, the start of a live playlist\n    // is always our zero-time so force a sync update each time the playlist\n    // is refreshed from the server\n    //\n    // Use the INIT state to determine if playback has started, as the playlist sync info\n    // should be fixed once requests begin (as sync points are generated based on sync\n    // info), but not before then.\n\n    if (this.state === 'INIT') {\n      newPlaylist.syncInfo = {\n        mediaSequence: newPlaylist.mediaSequence,\n        time: 0\n      }; // Setting the date time mapping means mapping the program date time (if available)\n      // to time 0 on the player's timeline. The playlist's syncInfo serves a similar\n      // purpose, mapping the initial mediaSequence to time zero. Since the syncInfo can\n      // be updated as the playlist is refreshed before the loader starts loading, the\n      // program date time mapping needs to be updated as well.\n      //\n      // This mapping is only done for the main loader because a program date time should\n      // map equivalently between playlists.\n\n      if (this.loaderType_ === 'main') {\n        this.syncController_.setDateTimeMappingForStart(newPlaylist);\n      }\n    }\n    let oldId = null;\n    if (oldPlaylist) {\n      if (oldPlaylist.id) {\n        oldId = oldPlaylist.id;\n      } else if (oldPlaylist.uri) {\n        oldId = oldPlaylist.uri;\n      }\n    }\n    this.logger_(`playlist update [${oldId} => ${newPlaylist.id || newPlaylist.uri}]`); // in VOD, this is always a rendition switch (or we updated our syncInfo above)\n    // in LIVE, we always want to update with new playlists (including refreshes)\n\n    this.trigger('syncinfoupdate'); // if we were unpaused but waiting for a playlist, start\n    // buffering now\n\n    if (this.state === 'INIT' && this.couldBeginLoading_()) {\n      return this.init_();\n    }\n    if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {\n      if (this.mediaIndex !== null) {\n        // we must reset/resync the segment loader when we switch renditions and\n        // the segment loader is already synced to the previous rendition\n        // on playlist changes we want it to be possible to fetch\n        // at the buffer for vod but not for live. So we use resetLoader\n        // for live and resyncLoader for vod. We want this because\n        // if a playlist uses independent and non-independent segments/parts the\n        // buffer may not accurately reflect the next segment that we should try\n        // downloading.\n        if (!newPlaylist.endList) {\n          this.resetLoader();\n        } else {\n          this.resyncLoader();\n        }\n      }\n      this.currentMediaInfo_ = void 0;\n      this.trigger('playlistupdate'); // the rest of this function depends on `oldPlaylist` being defined\n\n      return;\n    } // we reloaded the same playlist so we are in a live scenario\n    // and we will likely need to adjust the mediaIndex\n\n    const mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;\n    this.logger_(`live window shift [${mediaSequenceDiff}]`); // update the mediaIndex on the SegmentLoader\n    // this is important because we can abort a request and this value must be\n    // equal to the last appended mediaIndex\n\n    if (this.mediaIndex !== null) {\n      this.mediaIndex -= mediaSequenceDiff; // this can happen if we are going to load the first segment, but get a playlist\n      // update during that. mediaIndex would go from 0 to -1 if mediaSequence in the\n      // new playlist was incremented by 1.\n\n      if (this.mediaIndex < 0) {\n        this.mediaIndex = null;\n        this.partIndex = null;\n      } else {\n        const segment = this.playlist_.segments[this.mediaIndex]; // partIndex should remain the same for the same segment\n        // unless parts fell off of the playlist for this segment.\n        // In that case we need to reset partIndex and resync\n\n        if (this.partIndex && (!segment.parts || !segment.parts.length || !segment.parts[this.partIndex])) {\n          const mediaIndex = this.mediaIndex;\n          this.logger_(`currently processing part (index ${this.partIndex}) no longer exists.`);\n          this.resetLoader(); // We want to throw away the partIndex and the data associated with it,\n          // as the part was dropped from our current playlists segment.\n          // The mediaIndex will still be valid so keep that around.\n\n          this.mediaIndex = mediaIndex;\n        }\n      }\n    } // update the mediaIndex on the SegmentInfo object\n    // this is important because we will update this.mediaIndex with this value\n    // in `handleAppendsDone_` after the segment has been successfully appended\n\n    if (segmentInfo) {\n      segmentInfo.mediaIndex -= mediaSequenceDiff;\n      if (segmentInfo.mediaIndex < 0) {\n        segmentInfo.mediaIndex = null;\n        segmentInfo.partIndex = null;\n      } else {\n        // we need to update the referenced segment so that timing information is\n        // saved for the new playlist's segment, however, if the segment fell off the\n        // playlist, we can leave the old reference and just lose the timing info\n        if (segmentInfo.mediaIndex >= 0) {\n          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];\n        }\n        if (segmentInfo.partIndex >= 0 && segmentInfo.segment.parts) {\n          segmentInfo.part = segmentInfo.segment.parts[segmentInfo.partIndex];\n        }\n      }\n    }\n    this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);\n  }\n  /**\n   * Prevent the loader from fetching additional segments. If there\n   * is a segment request outstanding, it will finish processing\n   * before the loader halts. A segment loader can be unpaused by\n   * calling load().\n   */\n\n  pause() {\n    if (this.checkBufferTimeout_) {\n      window$1.clearTimeout(this.checkBufferTimeout_);\n      this.checkBufferTimeout_ = null;\n    }\n  }\n  /**\n   * Returns whether the segment loader is fetching additional\n   * segments when given the opportunity. This property can be\n   * modified through calls to pause() and load().\n   */\n\n  paused() {\n    return this.checkBufferTimeout_ === null;\n  }\n  /**\n   * Delete all the buffered data and reset the SegmentLoader\n   *\n   * @param {Function} [done] an optional callback to be executed when the remove\n   * operation is complete\n   */\n\n  resetEverything(done) {\n    this.ended_ = false;\n    this.activeInitSegmentId_ = null;\n    this.appendInitSegment_ = {\n      audio: true,\n      video: true\n    };\n    this.resetLoader(); // remove from 0, the earliest point, to Infinity, to signify removal of everything.\n    // VTT Segment Loader doesn't need to do anything but in the regular SegmentLoader,\n    // we then clamp the value to duration if necessary.\n\n    this.remove(0, Infinity, done); // clears fmp4 captions\n\n    if (this.transmuxer_) {\n      this.transmuxer_.postMessage({\n        action: 'clearAllMp4Captions'\n      }); // reset the cache in the transmuxer\n\n      this.transmuxer_.postMessage({\n        action: 'reset'\n      });\n    }\n  }\n  /**\n   * Force the SegmentLoader to resync and start loading around the currentTime instead\n   * of starting at the end of the buffer\n   *\n   * Useful for fast quality changes\n   */\n\n  resetLoader() {\n    this.fetchAtBuffer_ = false;\n    this.resyncLoader();\n  }\n  /**\n   * Force the SegmentLoader to restart synchronization and make a conservative guess\n   * before returning to the simple walk-forward method\n   */\n\n  resyncLoader() {\n    if (this.transmuxer_) {\n      // need to clear out any cached data to prepare for the new segment\n      segmentTransmuxer.reset(this.transmuxer_);\n    }\n    this.mediaIndex = null;\n    this.partIndex = null;\n    this.syncPoint_ = null;\n    this.isPendingTimestampOffset_ = false;\n    this.callQueue_ = [];\n    this.loadQueue_ = [];\n    this.metadataQueue_.id3 = [];\n    this.metadataQueue_.caption = [];\n    this.abort();\n    if (this.transmuxer_) {\n      this.transmuxer_.postMessage({\n        action: 'clearParsedMp4Captions'\n      });\n    }\n  }\n  /**\n   * Remove any data in the source buffer between start and end times\n   *\n   * @param {number} start - the start time of the region to remove from the buffer\n   * @param {number} end - the end time of the region to remove from the buffer\n   * @param {Function} [done] - an optional callback to be executed when the remove\n   * @param {boolean} force - force all remove operations to happen\n   * operation is complete\n   */\n\n  remove(start, end, done = () => {}, force = false) {\n    // clamp end to duration if we need to remove everything.\n    // This is due to a browser bug that causes issues if we remove to Infinity.\n    // videojs/videojs-contrib-hls#1225\n    if (end === Infinity) {\n      end = this.duration_();\n    } // skip removes that would throw an error\n    // commonly happens during a rendition switch at the start of a video\n    // from start 0 to end 0\n\n    if (end <= start) {\n      this.logger_('skipping remove because end ${end} is <= start ${start}');\n      return;\n    }\n    if (!this.sourceUpdater_ || !this.getMediaInfo_()) {\n      this.logger_('skipping remove because no source updater or starting media info'); // nothing to remove if we haven't processed any media\n\n      return;\n    } // set it to one to complete this function's removes\n\n    let removesRemaining = 1;\n    const removeFinished = () => {\n      removesRemaining--;\n      if (removesRemaining === 0) {\n        done();\n      }\n    };\n    if (force || !this.audioDisabled_) {\n      removesRemaining++;\n      this.sourceUpdater_.removeAudio(start, end, removeFinished);\n    } // While it would be better to only remove video if the main loader has video, this\n    // should be safe with audio only as removeVideo will call back even if there's no\n    // video buffer.\n    //\n    // In theory we can check to see if there's video before calling the remove, but in\n    // the event that we're switching between renditions and from video to audio only\n    // (when we add support for that), we may need to clear the video contents despite\n    // what the new media will contain.\n\n    if (force || this.loaderType_ === 'main') {\n      this.gopBuffer_ = removeGopBuffer(this.gopBuffer_, start, end, this.timeMapping_);\n      removesRemaining++;\n      this.sourceUpdater_.removeVideo(start, end, removeFinished);\n    } // remove any captions and ID3 tags\n\n    for (const track in this.inbandTextTracks_) {\n      removeCuesFromTrack(start, end, this.inbandTextTracks_[track]);\n    }\n    removeCuesFromTrack(start, end, this.segmentMetadataTrack_); // finished this function's removes\n\n    removeFinished();\n  }\n  /**\n   * (re-)schedule monitorBufferTick_ to run as soon as possible\n   *\n   * @private\n   */\n\n  monitorBuffer_() {\n    if (this.checkBufferTimeout_) {\n      window$1.clearTimeout(this.checkBufferTimeout_);\n    }\n    this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), 1);\n  }\n  /**\n   * As long as the SegmentLoader is in the READY state, periodically\n   * invoke fillBuffer_().\n   *\n   * @private\n   */\n\n  monitorBufferTick_() {\n    if (this.state === 'READY') {\n      this.fillBuffer_();\n    }\n    if (this.checkBufferTimeout_) {\n      window$1.clearTimeout(this.checkBufferTimeout_);\n    }\n    this.checkBufferTimeout_ = window$1.setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);\n  }\n  /**\n   * fill the buffer with segements unless the sourceBuffers are\n   * currently updating\n   *\n   * Note: this function should only ever be called by monitorBuffer_\n   * and never directly\n   *\n   * @private\n   */\n\n  fillBuffer_() {\n    // TODO since the source buffer maintains a queue, and we shouldn't call this function\n    // except when we're ready for the next segment, this check can most likely be removed\n    if (this.sourceUpdater_.updating()) {\n      return;\n    } // see if we need to begin loading immediately\n\n    const segmentInfo = this.chooseNextRequest_();\n    if (!segmentInfo) {\n      return;\n    }\n    if (typeof segmentInfo.timestampOffset === 'number') {\n      this.isPendingTimestampOffset_ = false;\n      this.timelineChangeController_.pendingTimelineChange({\n        type: this.loaderType_,\n        from: this.currentTimeline_,\n        to: segmentInfo.timeline\n      });\n    }\n    this.loadSegment_(segmentInfo);\n  }\n  /**\n   * Determines if we should call endOfStream on the media source based\n   * on the state of the buffer or if appened segment was the final\n   * segment in the playlist.\n   *\n   * @param {number} [mediaIndex] the media index of segment we last appended\n   * @param {Object} [playlist] a media playlist object\n   * @return {boolean} do we need to call endOfStream on the MediaSource\n   */\n\n  isEndOfStream_(mediaIndex = this.mediaIndex, playlist = this.playlist_, partIndex = this.partIndex) {\n    if (!playlist || !this.mediaSource_) {\n      return false;\n    }\n    const segment = typeof mediaIndex === 'number' && playlist.segments[mediaIndex]; // mediaIndex is zero based but length is 1 based\n\n    const appendedLastSegment = mediaIndex + 1 === playlist.segments.length; // true if there are no parts, or this is the last part.\n\n    const appendedLastPart = !segment || !segment.parts || partIndex + 1 === segment.parts.length; // if we've buffered to the end of the video, we need to call endOfStream\n    // so that MediaSources can trigger the `ended` event when it runs out of\n    // buffered data instead of waiting for me\n\n    return playlist.endList && this.mediaSource_.readyState === 'open' && appendedLastSegment && appendedLastPart;\n  }\n  /**\n   * Determines what request should be made given current segment loader state.\n   *\n   * @return {Object} a request object that describes the segment/part to load\n   */\n\n  chooseNextRequest_() {\n    const buffered = this.buffered_();\n    const bufferedEnd = lastBufferedEnd(buffered) || 0;\n    const bufferedTime = timeAheadOf(buffered, this.currentTime_());\n    const preloaded = !this.hasPlayed_() && bufferedTime >= 1;\n    const haveEnoughBuffer = bufferedTime >= this.goalBufferLength_();\n    const segments = this.playlist_.segments; // return no segment if:\n    // 1. we don't have segments\n    // 2. The video has not yet played and we already downloaded a segment\n    // 3. we already have enough buffered time\n\n    if (!segments.length || preloaded || haveEnoughBuffer) {\n      return null;\n    }\n    this.syncPoint_ = this.syncPoint_ || this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());\n    const next = {\n      partIndex: null,\n      mediaIndex: null,\n      startOfSegment: null,\n      playlist: this.playlist_,\n      isSyncRequest: Boolean(!this.syncPoint_)\n    };\n    if (next.isSyncRequest) {\n      next.mediaIndex = getSyncSegmentCandidate(this.currentTimeline_, segments, bufferedEnd);\n    } else if (this.mediaIndex !== null) {\n      const segment = segments[this.mediaIndex];\n      const partIndex = typeof this.partIndex === 'number' ? this.partIndex : -1;\n      next.startOfSegment = segment.end ? segment.end : bufferedEnd;\n      if (segment.parts && segment.parts[partIndex + 1]) {\n        next.mediaIndex = this.mediaIndex;\n        next.partIndex = partIndex + 1;\n      } else {\n        next.mediaIndex = this.mediaIndex + 1;\n      }\n    } else {\n      // Find the segment containing the end of the buffer or current time.\n      const {\n        segmentIndex,\n        startTime,\n        partIndex\n      } = Playlist.getMediaInfoForTime({\n        exactManifestTimings: this.exactManifestTimings,\n        playlist: this.playlist_,\n        currentTime: this.fetchAtBuffer_ ? bufferedEnd : this.currentTime_(),\n        startingPartIndex: this.syncPoint_.partIndex,\n        startingSegmentIndex: this.syncPoint_.segmentIndex,\n        startTime: this.syncPoint_.time\n      });\n      next.getMediaInfoForTime = this.fetchAtBuffer_ ? `bufferedEnd ${bufferedEnd}` : `currentTime ${this.currentTime_()}`;\n      next.mediaIndex = segmentIndex;\n      next.startOfSegment = startTime;\n      next.partIndex = partIndex;\n    }\n    const nextSegment = segments[next.mediaIndex];\n    let nextPart = nextSegment && typeof next.partIndex === 'number' && nextSegment.parts && nextSegment.parts[next.partIndex]; // if the next segment index is invalid or\n    // the next partIndex is invalid do not choose a next segment.\n\n    if (!nextSegment || typeof next.partIndex === 'number' && !nextPart) {\n      return null;\n    } // if the next segment has parts, and we don't have a partIndex.\n    // Set partIndex to 0\n\n    if (typeof next.partIndex !== 'number' && nextSegment.parts) {\n      next.partIndex = 0;\n      nextPart = nextSegment.parts[0];\n    } // if we have no buffered data then we need to make sure\n    // that the next part we append is \"independent\" if possible.\n    // So we check if the previous part is independent, and request\n    // it if it is.\n\n    if (!bufferedTime && nextPart && !nextPart.independent) {\n      if (next.partIndex === 0) {\n        const lastSegment = segments[next.mediaIndex - 1];\n        const lastSegmentLastPart = lastSegment.parts && lastSegment.parts.length && lastSegment.parts[lastSegment.parts.length - 1];\n        if (lastSegmentLastPart && lastSegmentLastPart.independent) {\n          next.mediaIndex -= 1;\n          next.partIndex = lastSegment.parts.length - 1;\n          next.independent = 'previous segment';\n        }\n      } else if (nextSegment.parts[next.partIndex - 1].independent) {\n        next.partIndex -= 1;\n        next.independent = 'previous part';\n      }\n    }\n    const ended = this.mediaSource_ && this.mediaSource_.readyState === 'ended'; // do not choose a next segment if all of the following:\n    // 1. this is the last segment in the playlist\n    // 2. end of stream has been called on the media source already\n    // 3. the player is not seeking\n\n    if (next.mediaIndex >= segments.length - 1 && ended && !this.seeking_()) {\n      return null;\n    }\n    return this.generateSegmentInfo_(next);\n  }\n  generateSegmentInfo_(options) {\n    const {\n      independent,\n      playlist,\n      mediaIndex,\n      startOfSegment,\n      isSyncRequest,\n      partIndex,\n      forceTimestampOffset,\n      getMediaInfoForTime\n    } = options;\n    const segment = playlist.segments[mediaIndex];\n    const part = typeof partIndex === 'number' && segment.parts[partIndex];\n    const segmentInfo = {\n      requestId: 'segment-loader-' + Math.random(),\n      // resolve the segment URL relative to the playlist\n      uri: part && part.resolvedUri || segment.resolvedUri,\n      // the segment's mediaIndex at the time it was requested\n      mediaIndex,\n      partIndex: part ? partIndex : null,\n      // whether or not to update the SegmentLoader's state with this\n      // segment's mediaIndex\n      isSyncRequest,\n      startOfSegment,\n      // the segment's playlist\n      playlist,\n      // unencrypted bytes of the segment\n      bytes: null,\n      // when a key is defined for this segment, the encrypted bytes\n      encryptedBytes: null,\n      // The target timestampOffset for this segment when we append it\n      // to the source buffer\n      timestampOffset: null,\n      // The timeline that the segment is in\n      timeline: segment.timeline,\n      // The expected duration of the segment in seconds\n      duration: part && part.duration || segment.duration,\n      // retain the segment in case the playlist updates while doing an async process\n      segment,\n      part,\n      byteLength: 0,\n      transmuxer: this.transmuxer_,\n      // type of getMediaInfoForTime that was used to get this segment\n      getMediaInfoForTime,\n      independent\n    };\n    const overrideCheck = typeof forceTimestampOffset !== 'undefined' ? forceTimestampOffset : this.isPendingTimestampOffset_;\n    segmentInfo.timestampOffset = this.timestampOffsetForSegment_({\n      segmentTimeline: segment.timeline,\n      currentTimeline: this.currentTimeline_,\n      startOfSegment,\n      buffered: this.buffered_(),\n      overrideCheck\n    });\n    const audioBufferedEnd = lastBufferedEnd(this.sourceUpdater_.audioBuffered());\n    if (typeof audioBufferedEnd === 'number') {\n      // since the transmuxer is using the actual timing values, but the buffer is\n      // adjusted by the timestamp offset, we must adjust the value here\n      segmentInfo.audioAppendStart = audioBufferedEnd - this.sourceUpdater_.audioTimestampOffset();\n    }\n    if (this.sourceUpdater_.videoBuffered().length) {\n      segmentInfo.gopsToAlignWith = gopsSafeToAlignWith(this.gopBuffer_,\n      // since the transmuxer is using the actual timing values, but the time is\n      // adjusted by the timestmap offset, we must adjust the value here\n      this.currentTime_() - this.sourceUpdater_.videoTimestampOffset(), this.timeMapping_);\n    }\n    return segmentInfo;\n  } // get the timestampoffset for a segment,\n  // added so that vtt segment loader can override and prevent\n  // adding timestamp offsets.\n\n  timestampOffsetForSegment_(options) {\n    return timestampOffsetForSegment(options);\n  }\n  /**\n   * Determines if the network has enough bandwidth to complete the current segment\n   * request in a timely manner. If not, the request will be aborted early and bandwidth\n   * updated to trigger a playlist switch.\n   *\n   * @param {Object} stats\n   *        Object containing stats about the request timing and size\n   * @private\n   */\n\n  earlyAbortWhenNeeded_(stats) {\n    if (this.vhs_.tech_.paused() ||\n    // Don't abort if the current playlist is on the lowestEnabledRendition\n    // TODO: Replace using timeout with a boolean indicating whether this playlist is\n    //       the lowestEnabledRendition.\n    !this.xhrOptions_.timeout ||\n    // Don't abort if we have no bandwidth information to estimate segment sizes\n    !this.playlist_.attributes.BANDWIDTH) {\n      return;\n    } // Wait at least 1 second since the first byte of data has been received before\n    // using the calculated bandwidth from the progress event to allow the bitrate\n    // to stabilize\n\n    if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) {\n      return;\n    }\n    const currentTime = this.currentTime_();\n    const measuredBandwidth = stats.bandwidth;\n    const segmentDuration = this.pendingSegment_.duration;\n    const requestTimeRemaining = Playlist.estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived); // Subtract 1 from the timeUntilRebuffer so we still consider an early abort\n    // if we are only left with less than 1 second when the request completes.\n    // A negative timeUntilRebuffering indicates we are already rebuffering\n\n    const timeUntilRebuffer$1 = timeUntilRebuffer(this.buffered_(), currentTime, this.vhs_.tech_.playbackRate()) - 1; // Only consider aborting early if the estimated time to finish the download\n    // is larger than the estimated time until the player runs out of forward buffer\n\n    if (requestTimeRemaining <= timeUntilRebuffer$1) {\n      return;\n    }\n    const switchCandidate = minRebufferMaxBandwidthSelector({\n      main: this.vhs_.playlists.main,\n      currentTime,\n      bandwidth: measuredBandwidth,\n      duration: this.duration_(),\n      segmentDuration,\n      timeUntilRebuffer: timeUntilRebuffer$1,\n      currentTimeline: this.currentTimeline_,\n      syncController: this.syncController_\n    });\n    if (!switchCandidate) {\n      return;\n    }\n    const rebufferingImpact = requestTimeRemaining - timeUntilRebuffer$1;\n    const timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;\n    let minimumTimeSaving = 0.5; // If we are already rebuffering, increase the amount of variance we add to the\n    // potential round trip time of the new request so that we are not too aggressive\n    // with switching to a playlist that might save us a fraction of a second.\n\n    if (timeUntilRebuffer$1 <= TIME_FUDGE_FACTOR) {\n      minimumTimeSaving = 1;\n    }\n    if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {\n      return;\n    } // set the bandwidth to that of the desired playlist being sure to scale by\n    // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it\n    // don't trigger a bandwidthupdate as the bandwidth is artifial\n\n    this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * Config.BANDWIDTH_VARIANCE + 1;\n    this.trigger('earlyabort');\n  }\n  handleAbort_(segmentInfo) {\n    this.logger_(`Aborting ${segmentInfoString(segmentInfo)}`);\n    this.mediaRequestsAborted += 1;\n  }\n  /**\n   * XHR `progress` event handler\n   *\n   * @param {Event}\n   *        The XHR `progress` event\n   * @param {Object} simpleSegment\n   *        A simplified segment object copy\n   * @private\n   */\n\n  handleProgress_(event, simpleSegment) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    }\n    this.trigger('progress');\n  }\n  handleTrackInfo_(simpleSegment, trackInfo) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    }\n    if (this.checkForIllegalMediaSwitch(trackInfo)) {\n      return;\n    }\n    trackInfo = trackInfo || {}; // When we have track info, determine what media types this loader is dealing with.\n    // Guard against cases where we're not getting track info at all until we are\n    // certain that all streams will provide it.\n\n    if (!shallowEqual(this.currentMediaInfo_, trackInfo)) {\n      this.appendInitSegment_ = {\n        audio: true,\n        video: true\n      };\n      this.startingMediaInfo_ = trackInfo;\n      this.currentMediaInfo_ = trackInfo;\n      this.logger_('trackinfo update', trackInfo);\n      this.trigger('trackinfo');\n    } // trackinfo may cause an abort if the trackinfo\n    // causes a codec change to an unsupported codec.\n\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    } // set trackinfo on the pending segment so that\n    // it can append.\n\n    this.pendingSegment_.trackInfo = trackInfo; // check if any calls were waiting on the track info\n\n    if (this.hasEnoughInfoToAppend_()) {\n      this.processCallQueue_();\n    }\n  }\n  handleTimingInfo_(simpleSegment, mediaType, timeType, time) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    }\n    const segmentInfo = this.pendingSegment_;\n    const timingInfoProperty = timingInfoPropertyForMedia(mediaType);\n    segmentInfo[timingInfoProperty] = segmentInfo[timingInfoProperty] || {};\n    segmentInfo[timingInfoProperty][timeType] = time;\n    this.logger_(`timinginfo: ${mediaType} - ${timeType} - ${time}`); // check if any calls were waiting on the timing info\n\n    if (this.hasEnoughInfoToAppend_()) {\n      this.processCallQueue_();\n    }\n  }\n  handleCaptions_(simpleSegment, captionData) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    } // This could only happen with fmp4 segments, but\n    // should still not happen in general\n\n    if (captionData.length === 0) {\n      this.logger_('SegmentLoader received no captions from a caption event');\n      return;\n    }\n    const segmentInfo = this.pendingSegment_; // Wait until we have some video data so that caption timing\n    // can be adjusted by the timestamp offset\n\n    if (!segmentInfo.hasAppendedData_) {\n      this.metadataQueue_.caption.push(this.handleCaptions_.bind(this, simpleSegment, captionData));\n      return;\n    }\n    const timestampOffset = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();\n    const captionTracks = {}; // get total start/end and captions for each track/stream\n\n    captionData.forEach(caption => {\n      // caption.stream is actually a track name...\n      // set to the existing values in tracks or default values\n      captionTracks[caption.stream] = captionTracks[caption.stream] || {\n        // Infinity, as any other value will be less than this\n        startTime: Infinity,\n        captions: [],\n        // 0 as an other value will be more than this\n        endTime: 0\n      };\n      const captionTrack = captionTracks[caption.stream];\n      captionTrack.startTime = Math.min(captionTrack.startTime, caption.startTime + timestampOffset);\n      captionTrack.endTime = Math.max(captionTrack.endTime, caption.endTime + timestampOffset);\n      captionTrack.captions.push(caption);\n    });\n    Object.keys(captionTracks).forEach(trackName => {\n      const {\n        startTime,\n        endTime,\n        captions\n      } = captionTracks[trackName];\n      const inbandTextTracks = this.inbandTextTracks_;\n      this.logger_(`adding cues from ${startTime} -> ${endTime} for ${trackName}`);\n      createCaptionsTrackIfNotExists(inbandTextTracks, this.vhs_.tech_, trackName); // clear out any cues that start and end at the same time period for the same track.\n      // We do this because a rendition change that also changes the timescale for captions\n      // will result in captions being re-parsed for certain segments. If we add them again\n      // without clearing we will have two of the same captions visible.\n\n      removeCuesFromTrack(startTime, endTime, inbandTextTracks[trackName]);\n      addCaptionData({\n        captionArray: captions,\n        inbandTextTracks,\n        timestampOffset\n      });\n    }); // Reset stored captions since we added parsed\n    // captions to a text track at this point\n\n    if (this.transmuxer_) {\n      this.transmuxer_.postMessage({\n        action: 'clearParsedMp4Captions'\n      });\n    }\n  }\n  handleId3_(simpleSegment, id3Frames, dispatchType) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    }\n    const segmentInfo = this.pendingSegment_; // we need to have appended data in order for the timestamp offset to be set\n\n    if (!segmentInfo.hasAppendedData_) {\n      this.metadataQueue_.id3.push(this.handleId3_.bind(this, simpleSegment, id3Frames, dispatchType));\n      return;\n    }\n    const timestampOffset = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset(); // There's potentially an issue where we could double add metadata if there's a muxed\n    // audio/video source with a metadata track, and an alt audio with a metadata track.\n    // However, this probably won't happen, and if it does it can be handled then.\n\n    createMetadataTrackIfNotExists(this.inbandTextTracks_, dispatchType, this.vhs_.tech_);\n    addMetadata({\n      inbandTextTracks: this.inbandTextTracks_,\n      metadataArray: id3Frames,\n      timestampOffset,\n      videoDuration: this.duration_()\n    });\n  }\n  processMetadataQueue_() {\n    this.metadataQueue_.id3.forEach(fn => fn());\n    this.metadataQueue_.caption.forEach(fn => fn());\n    this.metadataQueue_.id3 = [];\n    this.metadataQueue_.caption = [];\n  }\n  processCallQueue_() {\n    const callQueue = this.callQueue_; // Clear out the queue before the queued functions are run, since some of the\n    // functions may check the length of the load queue and default to pushing themselves\n    // back onto the queue.\n\n    this.callQueue_ = [];\n    callQueue.forEach(fun => fun());\n  }\n  processLoadQueue_() {\n    const loadQueue = this.loadQueue_; // Clear out the queue before the queued functions are run, since some of the\n    // functions may check the length of the load queue and default to pushing themselves\n    // back onto the queue.\n\n    this.loadQueue_ = [];\n    loadQueue.forEach(fun => fun());\n  }\n  /**\n   * Determines whether the loader has enough info to load the next segment.\n   *\n   * @return {boolean}\n   *         Whether or not the loader has enough info to load the next segment\n   */\n\n  hasEnoughInfoToLoad_() {\n    // Since primary timing goes by video, only the audio loader potentially needs to wait\n    // to load.\n    if (this.loaderType_ !== 'audio') {\n      return true;\n    }\n    const segmentInfo = this.pendingSegment_; // A fill buffer must have already run to establish a pending segment before there's\n    // enough info to load.\n\n    if (!segmentInfo) {\n      return false;\n    } // The first segment can and should be loaded immediately so that source buffers are\n    // created together (before appending). Source buffer creation uses the presence of\n    // audio and video data to determine whether to create audio/video source buffers, and\n    // uses processed (transmuxed or parsed) media to determine the types required.\n\n    if (!this.getCurrentMediaInfo_()) {\n      return true;\n    }\n    if (\n    // Technically, instead of waiting to load a segment on timeline changes, a segment\n    // can be requested and downloaded and only wait before it is transmuxed or parsed.\n    // But in practice, there are a few reasons why it is better to wait until a loader\n    // is ready to append that segment before requesting and downloading:\n    //\n    // 1. Because audio and main loaders cross discontinuities together, if this loader\n    //    is waiting for the other to catch up, then instead of requesting another\n    //    segment and using up more bandwidth, by not yet loading, more bandwidth is\n    //    allotted to the loader currently behind.\n    // 2. media-segment-request doesn't have to have logic to consider whether a segment\n    // is ready to be processed or not, isolating the queueing behavior to the loader.\n    // 3. The audio loader bases some of its segment properties on timing information\n    //    provided by the main loader, meaning that, if the logic for waiting on\n    //    processing was in media-segment-request, then it would also need to know how\n    //    to re-generate the segment information after the main loader caught up.\n    shouldWaitForTimelineChange({\n      timelineChangeController: this.timelineChangeController_,\n      currentTimeline: this.currentTimeline_,\n      segmentTimeline: segmentInfo.timeline,\n      loaderType: this.loaderType_,\n      audioDisabled: this.audioDisabled_\n    })) {\n      return false;\n    }\n    return true;\n  }\n  getCurrentMediaInfo_(segmentInfo = this.pendingSegment_) {\n    return segmentInfo && segmentInfo.trackInfo || this.currentMediaInfo_;\n  }\n  getMediaInfo_(segmentInfo = this.pendingSegment_) {\n    return this.getCurrentMediaInfo_(segmentInfo) || this.startingMediaInfo_;\n  }\n  getPendingSegmentPlaylist() {\n    return this.pendingSegment_ ? this.pendingSegment_.playlist : null;\n  }\n  hasEnoughInfoToAppend_() {\n    if (!this.sourceUpdater_.ready()) {\n      return false;\n    } // If content needs to be removed or the loader is waiting on an append reattempt,\n    // then no additional content should be appended until the prior append is resolved.\n\n    if (this.waitingOnRemove_ || this.quotaExceededErrorRetryTimeout_) {\n      return false;\n    }\n    const segmentInfo = this.pendingSegment_;\n    const trackInfo = this.getCurrentMediaInfo_(); // no segment to append any data for or\n    // we do not have information on this specific\n    // segment yet\n\n    if (!segmentInfo || !trackInfo) {\n      return false;\n    }\n    const {\n      hasAudio,\n      hasVideo,\n      isMuxed\n    } = trackInfo;\n    if (hasVideo && !segmentInfo.videoTimingInfo) {\n      return false;\n    } // muxed content only relies on video timing information for now.\n\n    if (hasAudio && !this.audioDisabled_ && !isMuxed && !segmentInfo.audioTimingInfo) {\n      return false;\n    }\n    if (shouldWaitForTimelineChange({\n      timelineChangeController: this.timelineChangeController_,\n      currentTimeline: this.currentTimeline_,\n      segmentTimeline: segmentInfo.timeline,\n      loaderType: this.loaderType_,\n      audioDisabled: this.audioDisabled_\n    })) {\n      return false;\n    }\n    return true;\n  }\n  handleData_(simpleSegment, result) {\n    this.earlyAbortWhenNeeded_(simpleSegment.stats);\n    if (this.checkForAbort_(simpleSegment.requestId)) {\n      return;\n    } // If there's anything in the call queue, then this data came later and should be\n    // executed after the calls currently queued.\n\n    if (this.callQueue_.length || !this.hasEnoughInfoToAppend_()) {\n      this.callQueue_.push(this.handleData_.bind(this, simpleSegment, result));\n      return;\n    }\n    const segmentInfo = this.pendingSegment_; // update the time mapping so we can translate from display time to media time\n\n    this.setTimeMapping_(segmentInfo.timeline); // for tracking overall stats\n\n    this.updateMediaSecondsLoaded_(segmentInfo.part || segmentInfo.segment); // Note that the state isn't changed from loading to appending. This is because abort\n    // logic may change behavior depending on the state, and changing state too early may\n    // inflate our estimates of bandwidth. In the future this should be re-examined to\n    // note more granular states.\n    // don't process and append data if the mediaSource is closed\n\n    if (this.mediaSource_.readyState === 'closed') {\n      return;\n    } // if this request included an initialization segment, save that data\n    // to the initSegment cache\n\n    if (simpleSegment.map) {\n      simpleSegment.map = this.initSegmentForMap(simpleSegment.map, true); // move over init segment properties to media request\n\n      segmentInfo.segment.map = simpleSegment.map;\n    } // if this request included a segment key, save that data in the cache\n\n    if (simpleSegment.key) {\n      this.segmentKey(simpleSegment.key, true);\n    }\n    segmentInfo.isFmp4 = simpleSegment.isFmp4;\n    segmentInfo.timingInfo = segmentInfo.timingInfo || {};\n    if (segmentInfo.isFmp4) {\n      this.trigger('fmp4');\n      segmentInfo.timingInfo.start = segmentInfo[timingInfoPropertyForMedia(result.type)].start;\n    } else {\n      const trackInfo = this.getCurrentMediaInfo_();\n      const useVideoTimingInfo = this.loaderType_ === 'main' && trackInfo && trackInfo.hasVideo;\n      let firstVideoFrameTimeForData;\n      if (useVideoTimingInfo) {\n        firstVideoFrameTimeForData = segmentInfo.videoTimingInfo.start;\n      } // Segment loader knows more about segment timing than the transmuxer (in certain\n      // aspects), so make any changes required for a more accurate start time.\n      // Don't set the end time yet, as the segment may not be finished processing.\n\n      segmentInfo.timingInfo.start = this.trueSegmentStart_({\n        currentStart: segmentInfo.timingInfo.start,\n        playlist: segmentInfo.playlist,\n        mediaIndex: segmentInfo.mediaIndex,\n        currentVideoTimestampOffset: this.sourceUpdater_.videoTimestampOffset(),\n        useVideoTimingInfo,\n        firstVideoFrameTimeForData,\n        videoTimingInfo: segmentInfo.videoTimingInfo,\n        audioTimingInfo: segmentInfo.audioTimingInfo\n      });\n    } // Init segments for audio and video only need to be appended in certain cases. Now\n    // that data is about to be appended, we can check the final cases to determine\n    // whether we should append an init segment.\n\n    this.updateAppendInitSegmentStatus(segmentInfo, result.type); // Timestamp offset should be updated once we get new data and have its timing info,\n    // as we use the start of the segment to offset the best guess (playlist provided)\n    // timestamp offset.\n\n    this.updateSourceBufferTimestampOffset_(segmentInfo); // if this is a sync request we need to determine whether it should\n    // be appended or not.\n\n    if (segmentInfo.isSyncRequest) {\n      // first save/update our timing info for this segment.\n      // this is what allows us to choose an accurate segment\n      // and the main reason we make a sync request.\n      this.updateTimingInfoEnd_(segmentInfo);\n      this.syncController_.saveSegmentTimingInfo({\n        segmentInfo,\n        shouldSaveTimelineMapping: this.loaderType_ === 'main'\n      });\n      const next = this.chooseNextRequest_(); // If the sync request isn't the segment that would be requested next\n      // after taking into account its timing info, do not append it.\n\n      if (next.mediaIndex !== segmentInfo.mediaIndex || next.partIndex !== segmentInfo.partIndex) {\n        this.logger_('sync segment was incorrect, not appending');\n        return;\n      } // otherwise append it like any other segment as our guess was correct.\n\n      this.logger_('sync segment was correct, appending');\n    } // Save some state so that in the future anything waiting on first append (and/or\n    // timestamp offset(s)) can process immediately. While the extra state isn't optimal,\n    // we need some notion of whether the timestamp offset or other relevant information\n    // has had a chance to be set.\n\n    segmentInfo.hasAppendedData_ = true; // Now that the timestamp offset should be set, we can append any waiting ID3 tags.\n\n    this.processMetadataQueue_();\n    this.appendData_(segmentInfo, result);\n  }\n  updateAppendInitSegmentStatus(segmentInfo, type) {\n    // alt audio doesn't manage timestamp offset\n    if (this.loaderType_ === 'main' && typeof segmentInfo.timestampOffset === 'number' &&\n    // in the case that we're handling partial data, we don't want to append an init\n    // segment for each chunk\n    !segmentInfo.changedTimestampOffset) {\n      // if the timestamp offset changed, the timeline may have changed, so we have to re-\n      // append init segments\n      this.appendInitSegment_ = {\n        audio: true,\n        video: true\n      };\n    }\n    if (this.playlistOfLastInitSegment_[type] !== segmentInfo.playlist) {\n      // make sure we append init segment on playlist changes, in case the media config\n      // changed\n      this.appendInitSegment_[type] = true;\n    }\n  }\n  getInitSegmentAndUpdateState_({\n    type,\n    initSegment,\n    map,\n    playlist\n  }) {\n    // \"The EXT-X-MAP tag specifies how to obtain the Media Initialization Section\n    // (Section 3) required to parse the applicable Media Segments.  It applies to every\n    // Media Segment that appears after it in the Playlist until the next EXT-X-MAP tag\n    // or until the end of the playlist.\"\n    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.5\n    if (map) {\n      const id = initSegmentId(map);\n      if (this.activeInitSegmentId_ === id) {\n        // don't need to re-append the init segment if the ID matches\n        return null;\n      } // a map-specified init segment takes priority over any transmuxed (or otherwise\n      // obtained) init segment\n      //\n      // this also caches the init segment for later use\n\n      initSegment = this.initSegmentForMap(map, true).bytes;\n      this.activeInitSegmentId_ = id;\n    } // We used to always prepend init segments for video, however, that shouldn't be\n    // necessary. Instead, we should only append on changes, similar to what we've always\n    // done for audio. This is more important (though may not be that important) for\n    // frame-by-frame appending for LHLS, simply because of the increased quantity of\n    // appends.\n\n    if (initSegment && this.appendInitSegment_[type]) {\n      // Make sure we track the playlist that we last used for the init segment, so that\n      // we can re-append the init segment in the event that we get data from a new\n      // playlist. Discontinuities and track changes are handled in other sections.\n      this.playlistOfLastInitSegment_[type] = playlist; // Disable future init segment appends for this type. Until a change is necessary.\n\n      this.appendInitSegment_[type] = false; // we need to clear out the fmp4 active init segment id, since\n      // we are appending the muxer init segment\n\n      this.activeInitSegmentId_ = null;\n      return initSegment;\n    }\n    return null;\n  }\n  handleQuotaExceededError_({\n    segmentInfo,\n    type,\n    bytes\n  }, error) {\n    const audioBuffered = this.sourceUpdater_.audioBuffered();\n    const videoBuffered = this.sourceUpdater_.videoBuffered(); // For now we're ignoring any notion of gaps in the buffer, but they, in theory,\n    // should be cleared out during the buffer removals. However, log in case it helps\n    // debug.\n\n    if (audioBuffered.length > 1) {\n      this.logger_('On QUOTA_EXCEEDED_ERR, found gaps in the audio buffer: ' + timeRangesToArray(audioBuffered).join(', '));\n    }\n    if (videoBuffered.length > 1) {\n      this.logger_('On QUOTA_EXCEEDED_ERR, found gaps in the video buffer: ' + timeRangesToArray(videoBuffered).join(', '));\n    }\n    const audioBufferStart = audioBuffered.length ? audioBuffered.start(0) : 0;\n    const audioBufferEnd = audioBuffered.length ? audioBuffered.end(audioBuffered.length - 1) : 0;\n    const videoBufferStart = videoBuffered.length ? videoBuffered.start(0) : 0;\n    const videoBufferEnd = videoBuffered.length ? videoBuffered.end(videoBuffered.length - 1) : 0;\n    if (audioBufferEnd - audioBufferStart <= MIN_BACK_BUFFER && videoBufferEnd - videoBufferStart <= MIN_BACK_BUFFER) {\n      // Can't remove enough buffer to make room for new segment (or the browser doesn't\n      // allow for appends of segments this size). In the future, it may be possible to\n      // split up the segment and append in pieces, but for now, error out this playlist\n      // in an attempt to switch to a more manageable rendition.\n      this.logger_('On QUOTA_EXCEEDED_ERR, single segment too large to append to ' + 'buffer, triggering an error. ' + `Appended byte length: ${bytes.byteLength}, ` + `audio buffer: ${timeRangesToArray(audioBuffered).join(', ')}, ` + `video buffer: ${timeRangesToArray(videoBuffered).join(', ')}, `);\n      this.error({\n        message: 'Quota exceeded error with append of a single segment of content',\n        excludeUntil: Infinity\n      });\n      this.trigger('error');\n      return;\n    } // To try to resolve the quota exceeded error, clear back buffer and retry. This means\n    // that the segment-loader should block on future events until this one is handled, so\n    // that it doesn't keep moving onto further segments. Adding the call to the call\n    // queue will prevent further appends until waitingOnRemove_ and\n    // quotaExceededErrorRetryTimeout_ are cleared.\n    //\n    // Note that this will only block the current loader. In the case of demuxed content,\n    // the other load may keep filling as fast as possible. In practice, this should be\n    // OK, as it is a rare case when either audio has a high enough bitrate to fill up a\n    // source buffer, or video fills without enough room for audio to append (and without\n    // the availability of clearing out seconds of back buffer to make room for audio).\n    // But it might still be good to handle this case in the future as a TODO.\n\n    this.waitingOnRemove_ = true;\n    this.callQueue_.push(this.appendToSourceBuffer_.bind(this, {\n      segmentInfo,\n      type,\n      bytes\n    }));\n    const currentTime = this.currentTime_(); // Try to remove as much audio and video as possible to make room for new content\n    // before retrying.\n\n    const timeToRemoveUntil = currentTime - MIN_BACK_BUFFER;\n    this.logger_(`On QUOTA_EXCEEDED_ERR, removing audio/video from 0 to ${timeToRemoveUntil}`);\n    this.remove(0, timeToRemoveUntil, () => {\n      this.logger_(`On QUOTA_EXCEEDED_ERR, retrying append in ${MIN_BACK_BUFFER}s`);\n      this.waitingOnRemove_ = false; // wait the length of time alotted in the back buffer to prevent wasted\n      // attempts (since we can't clear less than the minimum)\n\n      this.quotaExceededErrorRetryTimeout_ = window$1.setTimeout(() => {\n        this.logger_('On QUOTA_EXCEEDED_ERR, re-processing call queue');\n        this.quotaExceededErrorRetryTimeout_ = null;\n        this.processCallQueue_();\n      }, MIN_BACK_BUFFER * 1000);\n    }, true);\n  }\n  handleAppendError_({\n    segmentInfo,\n    type,\n    bytes\n  }, error) {\n    // if there's no error, nothing to do\n    if (!error) {\n      return;\n    }\n    if (error.code === QUOTA_EXCEEDED_ERR) {\n      this.handleQuotaExceededError_({\n        segmentInfo,\n        type,\n        bytes\n      }); // A quota exceeded error should be recoverable with a future re-append, so no need\n      // to trigger an append error.\n\n      return;\n    }\n    this.logger_('Received non QUOTA_EXCEEDED_ERR on append', error);\n    this.error(`${type} append of ${bytes.length}b failed for segment ` + `#${segmentInfo.mediaIndex} in playlist ${segmentInfo.playlist.id}`); // If an append errors, we often can't recover.\n    // (see https://w3c.github.io/media-source/#sourcebuffer-append-error).\n    //\n    // Trigger a special error so that it can be handled separately from normal,\n    // recoverable errors.\n\n    this.trigger('appenderror');\n  }\n  appendToSourceBuffer_({\n    segmentInfo,\n    type,\n    initSegment,\n    data,\n    bytes\n  }) {\n    // If this is a re-append, bytes were already created and don't need to be recreated\n    if (!bytes) {\n      const segments = [data];\n      let byteLength = data.byteLength;\n      if (initSegment) {\n        // if the media initialization segment is changing, append it before the content\n        // segment\n        segments.unshift(initSegment);\n        byteLength += initSegment.byteLength;\n      } // Technically we should be OK appending the init segment separately, however, we\n      // haven't yet tested that, and prepending is how we have always done things.\n\n      bytes = concatSegments({\n        bytes: byteLength,\n        segments\n      });\n    }\n    this.sourceUpdater_.appendBuffer({\n      segmentInfo,\n      type,\n      bytes\n    }, this.handleAppendError_.bind(this, {\n      segmentInfo,\n      type,\n      bytes\n    }));\n  }\n  handleSegmentTimingInfo_(type, requestId, segmentTimingInfo) {\n    if (!this.pendingSegment_ || requestId !== this.pendingSegment_.requestId) {\n      return;\n    }\n    const segment = this.pendingSegment_.segment;\n    const timingInfoProperty = `${type}TimingInfo`;\n    if (!segment[timingInfoProperty]) {\n      segment[timingInfoProperty] = {};\n    }\n    segment[timingInfoProperty].transmuxerPrependedSeconds = segmentTimingInfo.prependedContentDuration || 0;\n    segment[timingInfoProperty].transmuxedPresentationStart = segmentTimingInfo.start.presentation;\n    segment[timingInfoProperty].transmuxedDecodeStart = segmentTimingInfo.start.decode;\n    segment[timingInfoProperty].transmuxedPresentationEnd = segmentTimingInfo.end.presentation;\n    segment[timingInfoProperty].transmuxedDecodeEnd = segmentTimingInfo.end.decode; // mainly used as a reference for debugging\n\n    segment[timingInfoProperty].baseMediaDecodeTime = segmentTimingInfo.baseMediaDecodeTime;\n  }\n  appendData_(segmentInfo, result) {\n    const {\n      type,\n      data\n    } = result;\n    if (!data || !data.byteLength) {\n      return;\n    }\n    if (type === 'audio' && this.audioDisabled_) {\n      return;\n    }\n    const initSegment = this.getInitSegmentAndUpdateState_({\n      type,\n      initSegment: result.initSegment,\n      playlist: segmentInfo.playlist,\n      map: segmentInfo.isFmp4 ? segmentInfo.segment.map : null\n    });\n    this.appendToSourceBuffer_({\n      segmentInfo,\n      type,\n      initSegment,\n      data\n    });\n  }\n  /**\n   * load a specific segment from a request into the buffer\n   *\n   * @private\n   */\n\n  loadSegment_(segmentInfo) {\n    this.state = 'WAITING';\n    this.pendingSegment_ = segmentInfo;\n    this.trimBackBuffer_(segmentInfo);\n    if (typeof segmentInfo.timestampOffset === 'number') {\n      if (this.transmuxer_) {\n        this.transmuxer_.postMessage({\n          action: 'clearAllMp4Captions'\n        });\n      }\n    }\n    if (!this.hasEnoughInfoToLoad_()) {\n      this.loadQueue_.push(() => {\n        // regenerate the audioAppendStart, timestampOffset, etc as they\n        // may have changed since this function was added to the queue.\n        const options = _extends({}, segmentInfo, {\n          forceTimestampOffset: true\n        });\n        _extends(segmentInfo, this.generateSegmentInfo_(options));\n        this.isPendingTimestampOffset_ = false;\n        this.updateTransmuxerAndRequestSegment_(segmentInfo);\n      });\n      return;\n    }\n    this.updateTransmuxerAndRequestSegment_(segmentInfo);\n  }\n  updateTransmuxerAndRequestSegment_(segmentInfo) {\n    // We'll update the source buffer's timestamp offset once we have transmuxed data, but\n    // the transmuxer still needs to be updated before then.\n    //\n    // Even though keepOriginalTimestamps is set to true for the transmuxer, timestamp\n    // offset must be passed to the transmuxer for stream correcting adjustments.\n    if (this.shouldUpdateTransmuxerTimestampOffset_(segmentInfo.timestampOffset)) {\n      this.gopBuffer_.length = 0; // gopsToAlignWith was set before the GOP buffer was cleared\n\n      segmentInfo.gopsToAlignWith = [];\n      this.timeMapping_ = 0; // reset values in the transmuxer since a discontinuity should start fresh\n\n      this.transmuxer_.postMessage({\n        action: 'reset'\n      });\n      this.transmuxer_.postMessage({\n        action: 'setTimestampOffset',\n        timestampOffset: segmentInfo.timestampOffset\n      });\n    }\n    const simpleSegment = this.createSimplifiedSegmentObj_(segmentInfo);\n    const isEndOfStream = this.isEndOfStream_(segmentInfo.mediaIndex, segmentInfo.playlist, segmentInfo.partIndex);\n    const isWalkingForward = this.mediaIndex !== null;\n    const isDiscontinuity = segmentInfo.timeline !== this.currentTimeline_ &&\n    // currentTimeline starts at -1, so we shouldn't end the timeline switching to 0,\n    // the first timeline\n    segmentInfo.timeline > 0;\n    const isEndOfTimeline = isEndOfStream || isWalkingForward && isDiscontinuity;\n    this.logger_(`Requesting ${segmentInfoString(segmentInfo)}`); // If there's an init segment associated with this segment, but it is not cached (identified by a lack of bytes),\n    // then this init segment has never been seen before and should be appended.\n    //\n    // At this point the content type (audio/video or both) is not yet known, but it should be safe to set\n    // both to true and leave the decision of whether to append the init segment to append time.\n\n    if (simpleSegment.map && !simpleSegment.map.bytes) {\n      this.logger_('going to request init segment.');\n      this.appendInitSegment_ = {\n        video: true,\n        audio: true\n      };\n    }\n    segmentInfo.abortRequests = mediaSegmentRequest({\n      xhr: this.vhs_.xhr,\n      xhrOptions: this.xhrOptions_,\n      decryptionWorker: this.decrypter_,\n      segment: simpleSegment,\n      abortFn: this.handleAbort_.bind(this, segmentInfo),\n      progressFn: this.handleProgress_.bind(this),\n      trackInfoFn: this.handleTrackInfo_.bind(this),\n      timingInfoFn: this.handleTimingInfo_.bind(this),\n      videoSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, 'video', segmentInfo.requestId),\n      audioSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, 'audio', segmentInfo.requestId),\n      captionsFn: this.handleCaptions_.bind(this),\n      isEndOfTimeline,\n      endedTimelineFn: () => {\n        this.logger_('received endedtimeline callback');\n      },\n      id3Fn: this.handleId3_.bind(this),\n      dataFn: this.handleData_.bind(this),\n      doneFn: this.segmentRequestFinished_.bind(this),\n      onTransmuxerLog: ({\n        message,\n        level,\n        stream\n      }) => {\n        this.logger_(`${segmentInfoString(segmentInfo)} logged from transmuxer stream ${stream} as a ${level}: ${message}`);\n      }\n    });\n  }\n  /**\n   * trim the back buffer so that we don't have too much data\n   * in the source buffer\n   *\n   * @private\n   *\n   * @param {Object} segmentInfo - the current segment\n   */\n\n  trimBackBuffer_(segmentInfo) {\n    const removeToTime = safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10); // Chrome has a hard limit of 150MB of\n    // buffer and a very conservative \"garbage collector\"\n    // We manually clear out the old buffer to ensure\n    // we don't trigger the QuotaExceeded error\n    // on the source buffer during subsequent appends\n\n    if (removeToTime > 0) {\n      this.remove(0, removeToTime);\n    }\n  }\n  /**\n   * created a simplified copy of the segment object with just the\n   * information necessary to perform the XHR and decryption\n   *\n   * @private\n   *\n   * @param {Object} segmentInfo - the current segment\n   * @return {Object} a simplified segment object copy\n   */\n\n  createSimplifiedSegmentObj_(segmentInfo) {\n    const segment = segmentInfo.segment;\n    const part = segmentInfo.part;\n    const simpleSegment = {\n      resolvedUri: part ? part.resolvedUri : segment.resolvedUri,\n      byterange: part ? part.byterange : segment.byterange,\n      requestId: segmentInfo.requestId,\n      transmuxer: segmentInfo.transmuxer,\n      audioAppendStart: segmentInfo.audioAppendStart,\n      gopsToAlignWith: segmentInfo.gopsToAlignWith,\n      part: segmentInfo.part\n    };\n    const previousSegment = segmentInfo.playlist.segments[segmentInfo.mediaIndex - 1];\n    if (previousSegment && previousSegment.timeline === segment.timeline) {\n      // The baseStartTime of a segment is used to handle rollover when probing the TS\n      // segment to retrieve timing information. Since the probe only looks at the media's\n      // times (e.g., PTS and DTS values of the segment), and doesn't consider the\n      // player's time (e.g., player.currentTime()), baseStartTime should reflect the\n      // media time as well. transmuxedDecodeEnd represents the end time of a segment, in\n      // seconds of media time, so should be used here. The previous segment is used since\n      // the end of the previous segment should represent the beginning of the current\n      // segment, so long as they are on the same timeline.\n      if (previousSegment.videoTimingInfo) {\n        simpleSegment.baseStartTime = previousSegment.videoTimingInfo.transmuxedDecodeEnd;\n      } else if (previousSegment.audioTimingInfo) {\n        simpleSegment.baseStartTime = previousSegment.audioTimingInfo.transmuxedDecodeEnd;\n      }\n    }\n    if (segment.key) {\n      // if the media sequence is greater than 2^32, the IV will be incorrect\n      // assuming 10s segments, that would be about 1300 years\n      const iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);\n      simpleSegment.key = this.segmentKey(segment.key);\n      simpleSegment.key.iv = iv;\n    }\n    if (segment.map) {\n      simpleSegment.map = this.initSegmentForMap(segment.map);\n    }\n    return simpleSegment;\n  }\n  saveTransferStats_(stats) {\n    // every request counts as a media request even if it has been aborted\n    // or canceled due to a timeout\n    this.mediaRequests += 1;\n    if (stats) {\n      this.mediaBytesTransferred += stats.bytesReceived;\n      this.mediaTransferDuration += stats.roundTripTime;\n    }\n  }\n  saveBandwidthRelatedStats_(duration, stats) {\n    // byteLength will be used for throughput, and should be based on bytes receieved,\n    // which we only know at the end of the request and should reflect total bytes\n    // downloaded rather than just bytes processed from components of the segment\n    this.pendingSegment_.byteLength = stats.bytesReceived;\n    if (duration < MIN_SEGMENT_DURATION_TO_SAVE_STATS) {\n      this.logger_(`Ignoring segment's bandwidth because its duration of ${duration}` + ` is less than the min to record ${MIN_SEGMENT_DURATION_TO_SAVE_STATS}`);\n      return;\n    }\n    this.bandwidth = stats.bandwidth;\n    this.roundTrip = stats.roundTripTime;\n  }\n  handleTimeout_() {\n    // although the VTT segment loader bandwidth isn't really used, it's good to\n    // maintain functinality between segment loaders\n    this.mediaRequestsTimedout += 1;\n    this.bandwidth = 1;\n    this.roundTrip = NaN;\n    this.trigger('bandwidthupdate');\n    this.trigger('timeout');\n  }\n  /**\n   * Handle the callback from the segmentRequest function and set the\n   * associated SegmentLoader state and errors if necessary\n   *\n   * @private\n   */\n\n  segmentRequestFinished_(error, simpleSegment, result) {\n    // TODO handle special cases, e.g., muxed audio/video but only audio in the segment\n    // check the call queue directly since this function doesn't need to deal with any\n    // data, and can continue even if the source buffers are not set up and we didn't get\n    // any data from the segment\n    if (this.callQueue_.length) {\n      this.callQueue_.push(this.segmentRequestFinished_.bind(this, error, simpleSegment, result));\n      return;\n    }\n    this.saveTransferStats_(simpleSegment.stats); // The request was aborted and the SegmentLoader has already been reset\n\n    if (!this.pendingSegment_) {\n      return;\n    } // the request was aborted and the SegmentLoader has already started\n    // another request. this can happen when the timeout for an aborted\n    // request triggers due to a limitation in the XHR library\n    // do not count this as any sort of request or we risk double-counting\n\n    if (simpleSegment.requestId !== this.pendingSegment_.requestId) {\n      return;\n    } // an error occurred from the active pendingSegment_ so reset everything\n\n    if (error) {\n      this.pendingSegment_ = null;\n      this.state = 'READY'; // aborts are not a true error condition and nothing corrective needs to be done\n\n      if (error.code === REQUEST_ERRORS.ABORTED) {\n        return;\n      }\n      this.pause(); // the error is really just that at least one of the requests timed-out\n      // set the bandwidth to a very low value and trigger an ABR switch to\n      // take emergency action\n\n      if (error.code === REQUEST_ERRORS.TIMEOUT) {\n        this.handleTimeout_();\n        return;\n      } // if control-flow has arrived here, then the error is real\n      // emit an error event to exclude the current playlist\n\n      this.mediaRequestsErrored += 1;\n      this.error(error);\n      this.trigger('error');\n      return;\n    }\n    const segmentInfo = this.pendingSegment_; // the response was a success so set any bandwidth stats the request\n    // generated for ABR purposes\n\n    this.saveBandwidthRelatedStats_(segmentInfo.duration, simpleSegment.stats);\n    segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;\n    if (result.gopInfo) {\n      this.gopBuffer_ = updateGopBuffer(this.gopBuffer_, result.gopInfo, this.safeAppend_);\n    } // Although we may have already started appending on progress, we shouldn't switch the\n    // state away from loading until we are officially done loading the segment data.\n\n    this.state = 'APPENDING'; // used for testing\n\n    this.trigger('appending');\n    this.waitForAppendsToComplete_(segmentInfo);\n  }\n  setTimeMapping_(timeline) {\n    const timelineMapping = this.syncController_.mappingForTimeline(timeline);\n    if (timelineMapping !== null) {\n      this.timeMapping_ = timelineMapping;\n    }\n  }\n  updateMediaSecondsLoaded_(segment) {\n    if (typeof segment.start === 'number' && typeof segment.end === 'number') {\n      this.mediaSecondsLoaded += segment.end - segment.start;\n    } else {\n      this.mediaSecondsLoaded += segment.duration;\n    }\n  }\n  shouldUpdateTransmuxerTimestampOffset_(timestampOffset) {\n    if (timestampOffset === null) {\n      return false;\n    } // note that we're potentially using the same timestamp offset for both video and\n    // audio\n\n    if (this.loaderType_ === 'main' && timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) {\n      return true;\n    }\n    if (!this.audioDisabled_ && timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) {\n      return true;\n    }\n    return false;\n  }\n  trueSegmentStart_({\n    currentStart,\n    playlist,\n    mediaIndex,\n    firstVideoFrameTimeForData,\n    currentVideoTimestampOffset,\n    useVideoTimingInfo,\n    videoTimingInfo,\n    audioTimingInfo\n  }) {\n    if (typeof currentStart !== 'undefined') {\n      // if start was set once, keep using it\n      return currentStart;\n    }\n    if (!useVideoTimingInfo) {\n      return audioTimingInfo.start;\n    }\n    const previousSegment = playlist.segments[mediaIndex - 1]; // The start of a segment should be the start of the first full frame contained\n    // within that segment. Since the transmuxer maintains a cache of incomplete data\n    // from and/or the last frame seen, the start time may reflect a frame that starts\n    // in the previous segment. Check for that case and ensure the start time is\n    // accurate for the segment.\n\n    if (mediaIndex === 0 || !previousSegment || typeof previousSegment.start === 'undefined' || previousSegment.end !== firstVideoFrameTimeForData + currentVideoTimestampOffset) {\n      return firstVideoFrameTimeForData;\n    }\n    return videoTimingInfo.start;\n  }\n  waitForAppendsToComplete_(segmentInfo) {\n    const trackInfo = this.getCurrentMediaInfo_(segmentInfo);\n    if (!trackInfo) {\n      this.error({\n        message: 'No starting media returned, likely due to an unsupported media format.',\n        playlistExclusionDuration: Infinity\n      });\n      this.trigger('error');\n      return;\n    } // Although transmuxing is done, appends may not yet be finished. Throw a marker\n    // on each queue this loader is responsible for to ensure that the appends are\n    // complete.\n\n    const {\n      hasAudio,\n      hasVideo,\n      isMuxed\n    } = trackInfo;\n    const waitForVideo = this.loaderType_ === 'main' && hasVideo;\n    const waitForAudio = !this.audioDisabled_ && hasAudio && !isMuxed;\n    segmentInfo.waitingOnAppends = 0; // segments with no data\n\n    if (!segmentInfo.hasAppendedData_) {\n      if (!segmentInfo.timingInfo && typeof segmentInfo.timestampOffset === 'number') {\n        // When there's no audio or video data in the segment, there's no audio or video\n        // timing information.\n        //\n        // If there's no audio or video timing information, then the timestamp offset\n        // can't be adjusted to the appropriate value for the transmuxer and source\n        // buffers.\n        //\n        // Therefore, the next segment should be used to set the timestamp offset.\n        this.isPendingTimestampOffset_ = true;\n      } // override settings for metadata only segments\n\n      segmentInfo.timingInfo = {\n        start: 0\n      };\n      segmentInfo.waitingOnAppends++;\n      if (!this.isPendingTimestampOffset_) {\n        // update the timestampoffset\n        this.updateSourceBufferTimestampOffset_(segmentInfo); // make sure the metadata queue is processed even though we have\n        // no video/audio data.\n\n        this.processMetadataQueue_();\n      } // append is \"done\" instantly with no data.\n\n      this.checkAppendsDone_(segmentInfo);\n      return;\n    } // Since source updater could call back synchronously, do the increments first.\n\n    if (waitForVideo) {\n      segmentInfo.waitingOnAppends++;\n    }\n    if (waitForAudio) {\n      segmentInfo.waitingOnAppends++;\n    }\n    if (waitForVideo) {\n      this.sourceUpdater_.videoQueueCallback(this.checkAppendsDone_.bind(this, segmentInfo));\n    }\n    if (waitForAudio) {\n      this.sourceUpdater_.audioQueueCallback(this.checkAppendsDone_.bind(this, segmentInfo));\n    }\n  }\n  checkAppendsDone_(segmentInfo) {\n    if (this.checkForAbort_(segmentInfo.requestId)) {\n      return;\n    }\n    segmentInfo.waitingOnAppends--;\n    if (segmentInfo.waitingOnAppends === 0) {\n      this.handleAppendsDone_();\n    }\n  }\n  checkForIllegalMediaSwitch(trackInfo) {\n    const illegalMediaSwitchError = illegalMediaSwitch(this.loaderType_, this.getCurrentMediaInfo_(), trackInfo);\n    if (illegalMediaSwitchError) {\n      this.error({\n        message: illegalMediaSwitchError,\n        playlistExclusionDuration: Infinity\n      });\n      this.trigger('error');\n      return true;\n    }\n    return false;\n  }\n  updateSourceBufferTimestampOffset_(segmentInfo) {\n    if (segmentInfo.timestampOffset === null ||\n    // we don't yet have the start for whatever media type (video or audio) has\n    // priority, timing-wise, so we must wait\n    typeof segmentInfo.timingInfo.start !== 'number' ||\n    // already updated the timestamp offset for this segment\n    segmentInfo.changedTimestampOffset ||\n    // the alt audio loader should not be responsible for setting the timestamp offset\n    this.loaderType_ !== 'main') {\n      return;\n    }\n    let didChange = false; // Primary timing goes by video, and audio is trimmed in the transmuxer, meaning that\n    // the timing info here comes from video. In the event that the audio is longer than\n    // the video, this will trim the start of the audio.\n    // This also trims any offset from 0 at the beginning of the media\n\n    segmentInfo.timestampOffset -= this.getSegmentStartTimeForTimestampOffsetCalculation_({\n      videoTimingInfo: segmentInfo.segment.videoTimingInfo,\n      audioTimingInfo: segmentInfo.segment.audioTimingInfo,\n      timingInfo: segmentInfo.timingInfo\n    }); // In the event that there are part segment downloads, each will try to update the\n    // timestamp offset. Retaining this bit of state prevents us from updating in the\n    // future (within the same segment), however, there may be a better way to handle it.\n\n    segmentInfo.changedTimestampOffset = true;\n    if (segmentInfo.timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) {\n      this.sourceUpdater_.videoTimestampOffset(segmentInfo.timestampOffset);\n      didChange = true;\n    }\n    if (segmentInfo.timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) {\n      this.sourceUpdater_.audioTimestampOffset(segmentInfo.timestampOffset);\n      didChange = true;\n    }\n    if (didChange) {\n      this.trigger('timestampoffset');\n    }\n  }\n  getSegmentStartTimeForTimestampOffsetCalculation_({\n    videoTimingInfo,\n    audioTimingInfo,\n    timingInfo\n  }) {\n    if (!this.useDtsForTimestampOffset_) {\n      return timingInfo.start;\n    }\n    if (videoTimingInfo && typeof videoTimingInfo.transmuxedDecodeStart === 'number') {\n      return videoTimingInfo.transmuxedDecodeStart;\n    } // handle audio only\n\n    if (audioTimingInfo && typeof audioTimingInfo.transmuxedDecodeStart === 'number') {\n      return audioTimingInfo.transmuxedDecodeStart;\n    } // handle content not transmuxed (e.g., MP4)\n\n    return timingInfo.start;\n  }\n  updateTimingInfoEnd_(segmentInfo) {\n    segmentInfo.timingInfo = segmentInfo.timingInfo || {};\n    const trackInfo = this.getMediaInfo_();\n    const useVideoTimingInfo = this.loaderType_ === 'main' && trackInfo && trackInfo.hasVideo;\n    const prioritizedTimingInfo = useVideoTimingInfo && segmentInfo.videoTimingInfo ? segmentInfo.videoTimingInfo : segmentInfo.audioTimingInfo;\n    if (!prioritizedTimingInfo) {\n      return;\n    }\n    segmentInfo.timingInfo.end = typeof prioritizedTimingInfo.end === 'number' ?\n    // End time may not exist in a case where we aren't parsing the full segment (one\n    // current example is the case of fmp4), so use the rough duration to calculate an\n    // end time.\n    prioritizedTimingInfo.end : prioritizedTimingInfo.start + segmentInfo.duration;\n  }\n  /**\n   * callback to run when appendBuffer is finished. detects if we are\n   * in a good state to do things with the data we got, or if we need\n   * to wait for more\n   *\n   * @private\n   */\n\n  handleAppendsDone_() {\n    // appendsdone can cause an abort\n    if (this.pendingSegment_) {\n      this.trigger('appendsdone');\n    }\n    if (!this.pendingSegment_) {\n      this.state = 'READY'; // TODO should this move into this.checkForAbort to speed up requests post abort in\n      // all appending cases?\n\n      if (!this.paused()) {\n        this.monitorBuffer_();\n      }\n      return;\n    }\n    const segmentInfo = this.pendingSegment_; // Now that the end of the segment has been reached, we can set the end time. It's\n    // best to wait until all appends are done so we're sure that the primary media is\n    // finished (and we have its end time).\n\n    this.updateTimingInfoEnd_(segmentInfo);\n    if (this.shouldSaveSegmentTimingInfo_) {\n      // Timeline mappings should only be saved for the main loader. This is for multiple\n      // reasons:\n      //\n      // 1) Only one mapping is saved per timeline, meaning that if both the audio loader\n      //    and the main loader try to save the timeline mapping, whichever comes later\n      //    will overwrite the first. In theory this is OK, as the mappings should be the\n      //    same, however, it breaks for (2)\n      // 2) In the event of a live stream, the initial live point will make for a somewhat\n      //    arbitrary mapping. If audio and video streams are not perfectly in-sync, then\n      //    the mapping will be off for one of the streams, dependent on which one was\n      //    first saved (see (1)).\n      // 3) Primary timing goes by video in VHS, so the mapping should be video.\n      //\n      // Since the audio loader will wait for the main loader to load the first segment,\n      // the main loader will save the first timeline mapping, and ensure that there won't\n      // be a case where audio loads two segments without saving a mapping (thus leading\n      // to missing segment timing info).\n      this.syncController_.saveSegmentTimingInfo({\n        segmentInfo,\n        shouldSaveTimelineMapping: this.loaderType_ === 'main'\n      });\n    }\n    const segmentDurationMessage = getTroublesomeSegmentDurationMessage(segmentInfo, this.sourceType_);\n    if (segmentDurationMessage) {\n      if (segmentDurationMessage.severity === 'warn') {\n        videojs.log.warn(segmentDurationMessage.message);\n      } else {\n        this.logger_(segmentDurationMessage.message);\n      }\n    }\n    this.recordThroughput_(segmentInfo);\n    this.pendingSegment_ = null;\n    this.state = 'READY';\n    if (segmentInfo.isSyncRequest) {\n      this.trigger('syncinfoupdate'); // if the sync request was not appended\n      // then it was not the correct segment.\n      // throw it away and use the data it gave us\n      // to get the correct one.\n\n      if (!segmentInfo.hasAppendedData_) {\n        this.logger_(`Throwing away un-appended sync request ${segmentInfoString(segmentInfo)}`);\n        return;\n      }\n    }\n    this.logger_(`Appended ${segmentInfoString(segmentInfo)}`);\n    this.addSegmentMetadataCue_(segmentInfo);\n    this.fetchAtBuffer_ = true;\n    if (this.currentTimeline_ !== segmentInfo.timeline) {\n      this.timelineChangeController_.lastTimelineChange({\n        type: this.loaderType_,\n        from: this.currentTimeline_,\n        to: segmentInfo.timeline\n      }); // If audio is not disabled, the main segment loader is responsible for updating\n      // the audio timeline as well. If the content is video only, this won't have any\n      // impact.\n\n      if (this.loaderType_ === 'main' && !this.audioDisabled_) {\n        this.timelineChangeController_.lastTimelineChange({\n          type: 'audio',\n          from: this.currentTimeline_,\n          to: segmentInfo.timeline\n        });\n      }\n    }\n    this.currentTimeline_ = segmentInfo.timeline; // We must update the syncinfo to recalculate the seekable range before\n    // the following conditional otherwise it may consider this a bad \"guess\"\n    // and attempt to resync when the post-update seekable window and live\n    // point would mean that this was the perfect segment to fetch\n\n    this.trigger('syncinfoupdate');\n    const segment = segmentInfo.segment;\n    const part = segmentInfo.part;\n    const badSegmentGuess = segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3;\n    const badPartGuess = part && part.end && this.currentTime_() - part.end > segmentInfo.playlist.partTargetDuration * 3; // If we previously appended a segment/part that ends more than 3 part/targetDurations before\n    // the currentTime_ that means that our conservative guess was too conservative.\n    // In that case, reset the loader state so that we try to use any information gained\n    // from the previous request to create a new, more accurate, sync-point.\n\n    if (badSegmentGuess || badPartGuess) {\n      this.logger_(`bad ${badSegmentGuess ? 'segment' : 'part'} ${segmentInfoString(segmentInfo)}`);\n      this.resetEverything();\n      return;\n    }\n    const isWalkingForward = this.mediaIndex !== null; // Don't do a rendition switch unless we have enough time to get a sync segment\n    // and conservatively guess\n\n    if (isWalkingForward) {\n      this.trigger('bandwidthupdate');\n    }\n    this.trigger('progress');\n    this.mediaIndex = segmentInfo.mediaIndex;\n    this.partIndex = segmentInfo.partIndex; // any time an update finishes and the last segment is in the\n    // buffer, end the stream. this ensures the \"ended\" event will\n    // fire if playback reaches that point.\n\n    if (this.isEndOfStream_(segmentInfo.mediaIndex, segmentInfo.playlist, segmentInfo.partIndex)) {\n      this.endOfStream();\n    } // used for testing\n\n    this.trigger('appended');\n    if (segmentInfo.hasAppendedData_) {\n      this.mediaAppends++;\n    }\n    if (!this.paused()) {\n      this.monitorBuffer_();\n    }\n  }\n  /**\n   * Records the current throughput of the decrypt, transmux, and append\n   * portion of the semgment pipeline. `throughput.rate` is a the cumulative\n   * moving average of the throughput. `throughput.count` is the number of\n   * data points in the average.\n   *\n   * @private\n   * @param {Object} segmentInfo the object returned by loadSegment\n   */\n\n  recordThroughput_(segmentInfo) {\n    if (segmentInfo.duration < MIN_SEGMENT_DURATION_TO_SAVE_STATS) {\n      this.logger_(`Ignoring segment's throughput because its duration of ${segmentInfo.duration}` + ` is less than the min to record ${MIN_SEGMENT_DURATION_TO_SAVE_STATS}`);\n      return;\n    }\n    const rate = this.throughput.rate; // Add one to the time to ensure that we don't accidentally attempt to divide\n    // by zero in the case where the throughput is ridiculously high\n\n    const segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1; // Multiply by 8000 to convert from bytes/millisecond to bits/second\n\n    const segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1000); // This is just a cumulative moving average calculation:\n    //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)\n\n    this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;\n  }\n  /**\n   * Adds a cue to the segment-metadata track with some metadata information about the\n   * segment\n   *\n   * @private\n   * @param {Object} segmentInfo\n   *        the object returned by loadSegment\n   * @method addSegmentMetadataCue_\n   */\n\n  addSegmentMetadataCue_(segmentInfo) {\n    if (!this.segmentMetadataTrack_) {\n      return;\n    }\n    const segment = segmentInfo.segment;\n    const start = segment.start;\n    const end = segment.end; // Do not try adding the cue if the start and end times are invalid.\n\n    if (!finite(start) || !finite(end)) {\n      return;\n    }\n    removeCuesFromTrack(start, end, this.segmentMetadataTrack_);\n    const Cue = window$1.WebKitDataCue || window$1.VTTCue;\n    const value = {\n      custom: segment.custom,\n      dateTimeObject: segment.dateTimeObject,\n      dateTimeString: segment.dateTimeString,\n      bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,\n      resolution: segmentInfo.playlist.attributes.RESOLUTION,\n      codecs: segmentInfo.playlist.attributes.CODECS,\n      byteLength: segmentInfo.byteLength,\n      uri: segmentInfo.uri,\n      timeline: segmentInfo.timeline,\n      playlist: segmentInfo.playlist.id,\n      start,\n      end\n    };\n    const data = JSON.stringify(value);\n    const cue = new Cue(start, end, data); // Attach the metadata to the value property of the cue to keep consistency between\n    // the differences of WebKitDataCue in safari and VTTCue in other browsers\n\n    cue.value = value;\n    this.segmentMetadataTrack_.addCue(cue);\n  }\n}\nfunction noop() {}\nconst toTitleCase = function (string) {\n  if (typeof string !== 'string') {\n    return string;\n  }\n  return string.replace(/./, w => w.toUpperCase());\n};\n\n/**\n * @file source-updater.js\n */\nconst bufferTypes = ['video', 'audio'];\nconst updating = (type, sourceUpdater) => {\n  const sourceBuffer = sourceUpdater[`${type}Buffer`];\n  return sourceBuffer && sourceBuffer.updating || sourceUpdater.queuePending[type];\n};\nconst nextQueueIndexOfType = (type, queue) => {\n  for (let i = 0; i < queue.length; i++) {\n    const queueEntry = queue[i];\n    if (queueEntry.type === 'mediaSource') {\n      // If the next entry is a media source entry (uses multiple source buffers), block\n      // processing to allow it to go through first.\n      return null;\n    }\n    if (queueEntry.type === type) {\n      return i;\n    }\n  }\n  return null;\n};\nconst shiftQueue = (type, sourceUpdater) => {\n  if (sourceUpdater.queue.length === 0) {\n    return;\n  }\n  let queueIndex = 0;\n  let queueEntry = sourceUpdater.queue[queueIndex];\n  if (queueEntry.type === 'mediaSource') {\n    if (!sourceUpdater.updating() && sourceUpdater.mediaSource.readyState !== 'closed') {\n      sourceUpdater.queue.shift();\n      queueEntry.action(sourceUpdater);\n      if (queueEntry.doneFn) {\n        queueEntry.doneFn();\n      } // Only specific source buffer actions must wait for async updateend events. Media\n      // Source actions process synchronously. Therefore, both audio and video source\n      // buffers are now clear to process the next queue entries.\n\n      shiftQueue('audio', sourceUpdater);\n      shiftQueue('video', sourceUpdater);\n    } // Media Source actions require both source buffers, so if the media source action\n    // couldn't process yet (because one or both source buffers are busy), block other\n    // queue actions until both are available and the media source action can process.\n\n    return;\n  }\n  if (type === 'mediaSource') {\n    // If the queue was shifted by a media source action (this happens when pushing a\n    // media source action onto the queue), then it wasn't from an updateend event from an\n    // audio or video source buffer, so there's no change from previous state, and no\n    // processing should be done.\n    return;\n  } // Media source queue entries don't need to consider whether the source updater is\n  // started (i.e., source buffers are created) as they don't need the source buffers, but\n  // source buffer queue entries do.\n\n  if (!sourceUpdater.ready() || sourceUpdater.mediaSource.readyState === 'closed' || updating(type, sourceUpdater)) {\n    return;\n  }\n  if (queueEntry.type !== type) {\n    queueIndex = nextQueueIndexOfType(type, sourceUpdater.queue);\n    if (queueIndex === null) {\n      // Either there's no queue entry that uses this source buffer type in the queue, or\n      // there's a media source queue entry before the next entry of this type, in which\n      // case wait for that action to process first.\n      return;\n    }\n    queueEntry = sourceUpdater.queue[queueIndex];\n  }\n  sourceUpdater.queue.splice(queueIndex, 1); // Keep a record that this source buffer type is in use.\n  //\n  // The queue pending operation must be set before the action is performed in the event\n  // that the action results in a synchronous event that is acted upon. For instance, if\n  // an exception is thrown that can be handled, it's possible that new actions will be\n  // appended to an empty queue and immediately executed, but would not have the correct\n  // pending information if this property was set after the action was performed.\n\n  sourceUpdater.queuePending[type] = queueEntry;\n  queueEntry.action(type, sourceUpdater);\n  if (!queueEntry.doneFn) {\n    // synchronous operation, process next entry\n    sourceUpdater.queuePending[type] = null;\n    shiftQueue(type, sourceUpdater);\n    return;\n  }\n};\nconst cleanupBuffer = (type, sourceUpdater) => {\n  const buffer = sourceUpdater[`${type}Buffer`];\n  const titleType = toTitleCase(type);\n  if (!buffer) {\n    return;\n  }\n  buffer.removeEventListener('updateend', sourceUpdater[`on${titleType}UpdateEnd_`]);\n  buffer.removeEventListener('error', sourceUpdater[`on${titleType}Error_`]);\n  sourceUpdater.codecs[type] = null;\n  sourceUpdater[`${type}Buffer`] = null;\n};\nconst inSourceBuffers = (mediaSource, sourceBuffer) => mediaSource && sourceBuffer && Array.prototype.indexOf.call(mediaSource.sourceBuffers, sourceBuffer) !== -1;\nconst actions = {\n  appendBuffer: (bytes, segmentInfo, onError) => (type, sourceUpdater) => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n    sourceUpdater.logger_(`Appending segment ${segmentInfo.mediaIndex}'s ${bytes.length} bytes to ${type}Buffer`);\n    try {\n      sourceBuffer.appendBuffer(bytes);\n    } catch (e) {\n      sourceUpdater.logger_(`Error with code ${e.code} ` + (e.code === QUOTA_EXCEEDED_ERR ? '(QUOTA_EXCEEDED_ERR) ' : '') + `when appending segment ${segmentInfo.mediaIndex} to ${type}Buffer`);\n      sourceUpdater.queuePending[type] = null;\n      onError(e);\n    }\n  },\n  remove: (start, end) => (type, sourceUpdater) => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n    sourceUpdater.logger_(`Removing ${start} to ${end} from ${type}Buffer`);\n    try {\n      sourceBuffer.remove(start, end);\n    } catch (e) {\n      sourceUpdater.logger_(`Remove ${start} to ${end} from ${type}Buffer failed`);\n    }\n  },\n  timestampOffset: offset => (type, sourceUpdater) => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n    sourceUpdater.logger_(`Setting ${type}timestampOffset to ${offset}`);\n    sourceBuffer.timestampOffset = offset;\n  },\n  callback: callback => (type, sourceUpdater) => {\n    callback();\n  },\n  endOfStream: error => sourceUpdater => {\n    if (sourceUpdater.mediaSource.readyState !== 'open') {\n      return;\n    }\n    sourceUpdater.logger_(`Calling mediaSource endOfStream(${error || ''})`);\n    try {\n      sourceUpdater.mediaSource.endOfStream(error);\n    } catch (e) {\n      videojs.log.warn('Failed to call media source endOfStream', e);\n    }\n  },\n  duration: duration => sourceUpdater => {\n    sourceUpdater.logger_(`Setting mediaSource duration to ${duration}`);\n    try {\n      sourceUpdater.mediaSource.duration = duration;\n    } catch (e) {\n      videojs.log.warn('Failed to set media source duration', e);\n    }\n  },\n  abort: () => (type, sourceUpdater) => {\n    if (sourceUpdater.mediaSource.readyState !== 'open') {\n      return;\n    }\n    const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n    sourceUpdater.logger_(`calling abort on ${type}Buffer`);\n    try {\n      sourceBuffer.abort();\n    } catch (e) {\n      videojs.log.warn(`Failed to abort on ${type}Buffer`, e);\n    }\n  },\n  addSourceBuffer: (type, codec) => sourceUpdater => {\n    const titleType = toTitleCase(type);\n    const mime = getMimeForCodec(codec);\n    sourceUpdater.logger_(`Adding ${type}Buffer with codec ${codec} to mediaSource`);\n    const sourceBuffer = sourceUpdater.mediaSource.addSourceBuffer(mime);\n    sourceBuffer.addEventListener('updateend', sourceUpdater[`on${titleType}UpdateEnd_`]);\n    sourceBuffer.addEventListener('error', sourceUpdater[`on${titleType}Error_`]);\n    sourceUpdater.codecs[type] = codec;\n    sourceUpdater[`${type}Buffer`] = sourceBuffer;\n  },\n  removeSourceBuffer: type => sourceUpdater => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`];\n    cleanupBuffer(type, sourceUpdater); // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    }\n    sourceUpdater.logger_(`Removing ${type}Buffer with codec ${sourceUpdater.codecs[type]} from mediaSource`);\n    try {\n      sourceUpdater.mediaSource.removeSourceBuffer(sourceBuffer);\n    } catch (e) {\n      videojs.log.warn(`Failed to removeSourceBuffer ${type}Buffer`, e);\n    }\n  },\n  changeType: codec => (type, sourceUpdater) => {\n    const sourceBuffer = sourceUpdater[`${type}Buffer`];\n    const mime = getMimeForCodec(codec); // can't do anything if the media source / source buffer is null\n    // or the media source does not contain this source buffer.\n\n    if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {\n      return;\n    } // do not update codec if we don't need to.\n\n    if (sourceUpdater.codecs[type] === codec) {\n      return;\n    }\n    sourceUpdater.logger_(`changing ${type}Buffer codec from ${sourceUpdater.codecs[type]} to ${codec}`);\n    sourceBuffer.changeType(mime);\n    sourceUpdater.codecs[type] = codec;\n  }\n};\nconst pushQueue = ({\n  type,\n  sourceUpdater,\n  action,\n  doneFn,\n  name\n}) => {\n  sourceUpdater.queue.push({\n    type,\n    action,\n    doneFn,\n    name\n  });\n  shiftQueue(type, sourceUpdater);\n};\nconst onUpdateend = (type, sourceUpdater) => e => {\n  // Although there should, in theory, be a pending action for any updateend receieved,\n  // there are some actions that may trigger updateend events without set definitions in\n  // the w3c spec. For instance, setting the duration on the media source may trigger\n  // updateend events on source buffers. This does not appear to be in the spec. As such,\n  // if we encounter an updateend without a corresponding pending action from our queue\n  // for that source buffer type, process the next action.\n  if (sourceUpdater.queuePending[type]) {\n    const doneFn = sourceUpdater.queuePending[type].doneFn;\n    sourceUpdater.queuePending[type] = null;\n    if (doneFn) {\n      // if there's an error, report it\n      doneFn(sourceUpdater[`${type}Error_`]);\n    }\n  }\n  shiftQueue(type, sourceUpdater);\n};\n/**\n * A queue of callbacks to be serialized and applied when a\n * MediaSource and its associated SourceBuffers are not in the\n * updating state. It is used by the segment loader to update the\n * underlying SourceBuffers when new data is loaded, for instance.\n *\n * @class SourceUpdater\n * @param {MediaSource} mediaSource the MediaSource to create the SourceBuffer from\n * @param {string} mimeType the desired MIME type of the underlying SourceBuffer\n */\n\nclass SourceUpdater extends videojs.EventTarget {\n  constructor(mediaSource) {\n    super();\n    this.mediaSource = mediaSource;\n    this.sourceopenListener_ = () => shiftQueue('mediaSource', this);\n    this.mediaSource.addEventListener('sourceopen', this.sourceopenListener_);\n    this.logger_ = logger('SourceUpdater'); // initial timestamp offset is 0\n\n    this.audioTimestampOffset_ = 0;\n    this.videoTimestampOffset_ = 0;\n    this.queue = [];\n    this.queuePending = {\n      audio: null,\n      video: null\n    };\n    this.delayedAudioAppendQueue_ = [];\n    this.videoAppendQueued_ = false;\n    this.codecs = {};\n    this.onVideoUpdateEnd_ = onUpdateend('video', this);\n    this.onAudioUpdateEnd_ = onUpdateend('audio', this);\n    this.onVideoError_ = e => {\n      // used for debugging\n      this.videoError_ = e;\n    };\n    this.onAudioError_ = e => {\n      // used for debugging\n      this.audioError_ = e;\n    };\n    this.createdSourceBuffers_ = false;\n    this.initializedEme_ = false;\n    this.triggeredReady_ = false;\n  }\n  initializedEme() {\n    this.initializedEme_ = true;\n    this.triggerReady();\n  }\n  hasCreatedSourceBuffers() {\n    // if false, likely waiting on one of the segment loaders to get enough data to create\n    // source buffers\n    return this.createdSourceBuffers_;\n  }\n  hasInitializedAnyEme() {\n    return this.initializedEme_;\n  }\n  ready() {\n    return this.hasCreatedSourceBuffers() && this.hasInitializedAnyEme();\n  }\n  createSourceBuffers(codecs) {\n    if (this.hasCreatedSourceBuffers()) {\n      // already created them before\n      return;\n    } // the intial addOrChangeSourceBuffers will always be\n    // two add buffers.\n\n    this.addOrChangeSourceBuffers(codecs);\n    this.createdSourceBuffers_ = true;\n    this.trigger('createdsourcebuffers');\n    this.triggerReady();\n  }\n  triggerReady() {\n    // only allow ready to be triggered once, this prevents the case\n    // where:\n    // 1. we trigger createdsourcebuffers\n    // 2. ie 11 synchronously initializates eme\n    // 3. the synchronous initialization causes us to trigger ready\n    // 4. We go back to the ready check in createSourceBuffers and ready is triggered again.\n    if (this.ready() && !this.triggeredReady_) {\n      this.triggeredReady_ = true;\n      this.trigger('ready');\n    }\n  }\n  /**\n   * Add a type of source buffer to the media source.\n   *\n   * @param {string} type\n   *        The type of source buffer to add.\n   *\n   * @param {string} codec\n   *        The codec to add the source buffer with.\n   */\n\n  addSourceBuffer(type, codec) {\n    pushQueue({\n      type: 'mediaSource',\n      sourceUpdater: this,\n      action: actions.addSourceBuffer(type, codec),\n      name: 'addSourceBuffer'\n    });\n  }\n  /**\n   * call abort on a source buffer.\n   *\n   * @param {string} type\n   *        The type of source buffer to call abort on.\n   */\n\n  abort(type) {\n    pushQueue({\n      type,\n      sourceUpdater: this,\n      action: actions.abort(type),\n      name: 'abort'\n    });\n  }\n  /**\n   * Call removeSourceBuffer and remove a specific type\n   * of source buffer on the mediaSource.\n   *\n   * @param {string} type\n   *        The type of source buffer to remove.\n   */\n\n  removeSourceBuffer(type) {\n    if (!this.canRemoveSourceBuffer()) {\n      videojs.log.error('removeSourceBuffer is not supported!');\n      return;\n    }\n    pushQueue({\n      type: 'mediaSource',\n      sourceUpdater: this,\n      action: actions.removeSourceBuffer(type),\n      name: 'removeSourceBuffer'\n    });\n  }\n  /**\n   * Whether or not the removeSourceBuffer function is supported\n   * on the mediaSource.\n   *\n   * @return {boolean}\n   *          if removeSourceBuffer can be called.\n   */\n\n  canRemoveSourceBuffer() {\n    // IE reports that it supports removeSourceBuffer, but often throws\n    // errors when attempting to use the function. So we report that it\n    // does not support removeSourceBuffer. As of Firefox 83 removeSourceBuffer\n    // throws errors, so we report that it does not support this as well.\n    return !videojs.browser.IE_VERSION && !videojs.browser.IS_FIREFOX && window$1.MediaSource && window$1.MediaSource.prototype && typeof window$1.MediaSource.prototype.removeSourceBuffer === 'function';\n  }\n  /**\n   * Whether or not the changeType function is supported\n   * on our SourceBuffers.\n   *\n   * @return {boolean}\n   *         if changeType can be called.\n   */\n\n  static canChangeType() {\n    return window$1.SourceBuffer && window$1.SourceBuffer.prototype && typeof window$1.SourceBuffer.prototype.changeType === 'function';\n  }\n  /**\n   * Whether or not the changeType function is supported\n   * on our SourceBuffers.\n   *\n   * @return {boolean}\n   *         if changeType can be called.\n   */\n\n  canChangeType() {\n    return this.constructor.canChangeType();\n  }\n  /**\n   * Call the changeType function on a source buffer, given the code and type.\n   *\n   * @param {string} type\n   *        The type of source buffer to call changeType on.\n   *\n   * @param {string} codec\n   *        The codec string to change type with on the source buffer.\n   */\n\n  changeType(type, codec) {\n    if (!this.canChangeType()) {\n      videojs.log.error('changeType is not supported!');\n      return;\n    }\n    pushQueue({\n      type,\n      sourceUpdater: this,\n      action: actions.changeType(codec),\n      name: 'changeType'\n    });\n  }\n  /**\n   * Add source buffers with a codec or, if they are already created,\n   * call changeType on source buffers using changeType.\n   *\n   * @param {Object} codecs\n   *        Codecs to switch to\n   */\n\n  addOrChangeSourceBuffers(codecs) {\n    if (!codecs || typeof codecs !== 'object' || Object.keys(codecs).length === 0) {\n      throw new Error('Cannot addOrChangeSourceBuffers to undefined codecs');\n    }\n    Object.keys(codecs).forEach(type => {\n      const codec = codecs[type];\n      if (!this.hasCreatedSourceBuffers()) {\n        return this.addSourceBuffer(type, codec);\n      }\n      if (this.canChangeType()) {\n        this.changeType(type, codec);\n      }\n    });\n  }\n  /**\n   * Queue an update to append an ArrayBuffer.\n   *\n   * @param {MediaObject} object containing audioBytes and/or videoBytes\n   * @param {Function} done the function to call when done\n   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data\n   */\n\n  appendBuffer(options, doneFn) {\n    const {\n      segmentInfo,\n      type,\n      bytes\n    } = options;\n    this.processedAppend_ = true;\n    if (type === 'audio' && this.videoBuffer && !this.videoAppendQueued_) {\n      this.delayedAudioAppendQueue_.push([options, doneFn]);\n      this.logger_(`delayed audio append of ${bytes.length} until video append`);\n      return;\n    } // In the case of certain errors, for instance, QUOTA_EXCEEDED_ERR, updateend will\n    // not be fired. This means that the queue will be blocked until the next action\n    // taken by the segment-loader. Provide a mechanism for segment-loader to handle\n    // these errors by calling the doneFn with the specific error.\n\n    const onError = doneFn;\n    pushQueue({\n      type,\n      sourceUpdater: this,\n      action: actions.appendBuffer(bytes, segmentInfo || {\n        mediaIndex: -1\n      }, onError),\n      doneFn,\n      name: 'appendBuffer'\n    });\n    if (type === 'video') {\n      this.videoAppendQueued_ = true;\n      if (!this.delayedAudioAppendQueue_.length) {\n        return;\n      }\n      const queue = this.delayedAudioAppendQueue_.slice();\n      this.logger_(`queuing delayed audio ${queue.length} appendBuffers`);\n      this.delayedAudioAppendQueue_.length = 0;\n      queue.forEach(que => {\n        this.appendBuffer.apply(this, que);\n      });\n    }\n  }\n  /**\n   * Get the audio buffer's buffered timerange.\n   *\n   * @return {TimeRange}\n   *         The audio buffer's buffered time range\n   */\n\n  audioBuffered() {\n    // no media source/source buffer or it isn't in the media sources\n    // source buffer list\n    if (!inSourceBuffers(this.mediaSource, this.audioBuffer)) {\n      return createTimeRanges();\n    }\n    return this.audioBuffer.buffered ? this.audioBuffer.buffered : createTimeRanges();\n  }\n  /**\n   * Get the video buffer's buffered timerange.\n   *\n   * @return {TimeRange}\n   *         The video buffer's buffered time range\n   */\n\n  videoBuffered() {\n    // no media source/source buffer or it isn't in the media sources\n    // source buffer list\n    if (!inSourceBuffers(this.mediaSource, this.videoBuffer)) {\n      return createTimeRanges();\n    }\n    return this.videoBuffer.buffered ? this.videoBuffer.buffered : createTimeRanges();\n  }\n  /**\n   * Get a combined video/audio buffer's buffered timerange.\n   *\n   * @return {TimeRange}\n   *         the combined time range\n   */\n\n  buffered() {\n    const video = inSourceBuffers(this.mediaSource, this.videoBuffer) ? this.videoBuffer : null;\n    const audio = inSourceBuffers(this.mediaSource, this.audioBuffer) ? this.audioBuffer : null;\n    if (audio && !video) {\n      return this.audioBuffered();\n    }\n    if (video && !audio) {\n      return this.videoBuffered();\n    }\n    return bufferIntersection(this.audioBuffered(), this.videoBuffered());\n  }\n  /**\n   * Add a callback to the queue that will set duration on the mediaSource.\n   *\n   * @param {number} duration\n   *        The duration to set\n   *\n   * @param {Function} [doneFn]\n   *        function to run after duration has been set.\n   */\n\n  setDuration(duration, doneFn = noop) {\n    // In order to set the duration on the media source, it's necessary to wait for all\n    // source buffers to no longer be updating. \"If the updating attribute equals true on\n    // any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and\n    // abort these steps.\" (source: https://www.w3.org/TR/media-source/#attributes).\n    pushQueue({\n      type: 'mediaSource',\n      sourceUpdater: this,\n      action: actions.duration(duration),\n      name: 'duration',\n      doneFn\n    });\n  }\n  /**\n   * Add a mediaSource endOfStream call to the queue\n   *\n   * @param {Error} [error]\n   *        Call endOfStream with an error\n   *\n   * @param {Function} [doneFn]\n   *        A function that should be called when the\n   *        endOfStream call has finished.\n   */\n\n  endOfStream(error = null, doneFn = noop) {\n    if (typeof error !== 'string') {\n      error = undefined;\n    } // In order to set the duration on the media source, it's necessary to wait for all\n    // source buffers to no longer be updating. \"If the updating attribute equals true on\n    // any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and\n    // abort these steps.\" (source: https://www.w3.org/TR/media-source/#attributes).\n\n    pushQueue({\n      type: 'mediaSource',\n      sourceUpdater: this,\n      action: actions.endOfStream(error),\n      name: 'endOfStream',\n      doneFn\n    });\n  }\n  /**\n   * Queue an update to remove a time range from the buffer.\n   *\n   * @param {number} start where to start the removal\n   * @param {number} end where to end the removal\n   * @param {Function} [done=noop] optional callback to be executed when the remove\n   * operation is complete\n   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n   */\n\n  removeAudio(start, end, done = noop) {\n    if (!this.audioBuffered().length || this.audioBuffered().end(0) === 0) {\n      done();\n      return;\n    }\n    pushQueue({\n      type: 'audio',\n      sourceUpdater: this,\n      action: actions.remove(start, end),\n      doneFn: done,\n      name: 'remove'\n    });\n  }\n  /**\n   * Queue an update to remove a time range from the buffer.\n   *\n   * @param {number} start where to start the removal\n   * @param {number} end where to end the removal\n   * @param {Function} [done=noop] optional callback to be executed when the remove\n   * operation is complete\n   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end\n   */\n\n  removeVideo(start, end, done = noop) {\n    if (!this.videoBuffered().length || this.videoBuffered().end(0) === 0) {\n      done();\n      return;\n    }\n    pushQueue({\n      type: 'video',\n      sourceUpdater: this,\n      action: actions.remove(start, end),\n      doneFn: done,\n      name: 'remove'\n    });\n  }\n  /**\n   * Whether the underlying sourceBuffer is updating or not\n   *\n   * @return {boolean} the updating status of the SourceBuffer\n   */\n\n  updating() {\n    // the audio/video source buffer is updating\n    if (updating('audio', this) || updating('video', this)) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Set/get the timestampoffset on the audio SourceBuffer\n   *\n   * @return {number} the timestamp offset\n   */\n\n  audioTimestampOffset(offset) {\n    if (typeof offset !== 'undefined' && this.audioBuffer &&\n    // no point in updating if it's the same\n    this.audioTimestampOffset_ !== offset) {\n      pushQueue({\n        type: 'audio',\n        sourceUpdater: this,\n        action: actions.timestampOffset(offset),\n        name: 'timestampOffset'\n      });\n      this.audioTimestampOffset_ = offset;\n    }\n    return this.audioTimestampOffset_;\n  }\n  /**\n   * Set/get the timestampoffset on the video SourceBuffer\n   *\n   * @return {number} the timestamp offset\n   */\n\n  videoTimestampOffset(offset) {\n    if (typeof offset !== 'undefined' && this.videoBuffer &&\n    // no point in updating if it's the same\n    this.videoTimestampOffset !== offset) {\n      pushQueue({\n        type: 'video',\n        sourceUpdater: this,\n        action: actions.timestampOffset(offset),\n        name: 'timestampOffset'\n      });\n      this.videoTimestampOffset_ = offset;\n    }\n    return this.videoTimestampOffset_;\n  }\n  /**\n   * Add a function to the queue that will be called\n   * when it is its turn to run in the audio queue.\n   *\n   * @param {Function} callback\n   *        The callback to queue.\n   */\n\n  audioQueueCallback(callback) {\n    if (!this.audioBuffer) {\n      return;\n    }\n    pushQueue({\n      type: 'audio',\n      sourceUpdater: this,\n      action: actions.callback(callback),\n      name: 'callback'\n    });\n  }\n  /**\n   * Add a function to the queue that will be called\n   * when it is its turn to run in the video queue.\n   *\n   * @param {Function} callback\n   *        The callback to queue.\n   */\n\n  videoQueueCallback(callback) {\n    if (!this.videoBuffer) {\n      return;\n    }\n    pushQueue({\n      type: 'video',\n      sourceUpdater: this,\n      action: actions.callback(callback),\n      name: 'callback'\n    });\n  }\n  /**\n   * dispose of the source updater and the underlying sourceBuffer\n   */\n\n  dispose() {\n    this.trigger('dispose');\n    bufferTypes.forEach(type => {\n      this.abort(type);\n      if (this.canRemoveSourceBuffer()) {\n        this.removeSourceBuffer(type);\n      } else {\n        this[`${type}QueueCallback`](() => cleanupBuffer(type, this));\n      }\n    });\n    this.videoAppendQueued_ = false;\n    this.delayedAudioAppendQueue_.length = 0;\n    if (this.sourceopenListener_) {\n      this.mediaSource.removeEventListener('sourceopen', this.sourceopenListener_);\n    }\n    this.off();\n  }\n}\nconst uint8ToUtf8 = uintArray => decodeURIComponent(escape(String.fromCharCode.apply(null, uintArray)));\n\n/**\n * @file vtt-segment-loader.js\n */\nconst VTT_LINE_TERMINATORS = new Uint8Array('\\n\\n'.split('').map(char => char.charCodeAt(0)));\nclass NoVttJsError extends Error {\n  constructor() {\n    super('Trying to parse received VTT cues, but there is no WebVTT. Make sure vtt.js is loaded.');\n  }\n}\n/**\n * An object that manages segment loading and appending.\n *\n * @class VTTSegmentLoader\n * @param {Object} options required and optional options\n * @extends videojs.EventTarget\n */\n\nclass VTTSegmentLoader extends SegmentLoader {\n  constructor(settings, options = {}) {\n    super(settings, options); // SegmentLoader requires a MediaSource be specified or it will throw an error;\n    // however, VTTSegmentLoader has no need of a media source, so delete the reference\n\n    this.mediaSource_ = null;\n    this.subtitlesTrack_ = null;\n    this.loaderType_ = 'subtitle';\n    this.featuresNativeTextTracks_ = settings.featuresNativeTextTracks;\n    this.loadVttJs = settings.loadVttJs; // The VTT segment will have its own time mappings. Saving VTT segment timing info in\n    // the sync controller leads to improper behavior.\n\n    this.shouldSaveSegmentTimingInfo_ = false;\n  }\n  createTransmuxer_() {\n    // don't need to transmux any subtitles\n    return null;\n  }\n  /**\n   * Indicates which time ranges are buffered\n   *\n   * @return {TimeRange}\n   *         TimeRange object representing the current buffered ranges\n   */\n\n  buffered_() {\n    if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues || !this.subtitlesTrack_.cues.length) {\n      return createTimeRanges();\n    }\n    const cues = this.subtitlesTrack_.cues;\n    const start = cues[0].startTime;\n    const end = cues[cues.length - 1].startTime;\n    return createTimeRanges([[start, end]]);\n  }\n  /**\n   * Gets and sets init segment for the provided map\n   *\n   * @param {Object} map\n   *        The map object representing the init segment to get or set\n   * @param {boolean=} set\n   *        If true, the init segment for the provided map should be saved\n   * @return {Object}\n   *         map object for desired init segment\n   */\n\n  initSegmentForMap(map, set = false) {\n    if (!map) {\n      return null;\n    }\n    const id = initSegmentId(map);\n    let storedMap = this.initSegments_[id];\n    if (set && !storedMap && map.bytes) {\n      // append WebVTT line terminators to the media initialization segment if it exists\n      // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that\n      // requires two or more WebVTT line terminators between the WebVTT header and the\n      // rest of the file\n      const combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;\n      const combinedSegment = new Uint8Array(combinedByteLength);\n      combinedSegment.set(map.bytes);\n      combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);\n      this.initSegments_[id] = storedMap = {\n        resolvedUri: map.resolvedUri,\n        byterange: map.byterange,\n        bytes: combinedSegment\n      };\n    }\n    return storedMap || map;\n  }\n  /**\n   * Returns true if all configuration required for loading is present, otherwise false.\n   *\n   * @return {boolean} True if the all configuration is ready for loading\n   * @private\n   */\n\n  couldBeginLoading_() {\n    return this.playlist_ && this.subtitlesTrack_ && !this.paused();\n  }\n  /**\n   * Once all the starting parameters have been specified, begin\n   * operation. This method should only be invoked from the INIT\n   * state.\n   *\n   * @private\n   */\n\n  init_() {\n    this.state = 'READY';\n    this.resetEverything();\n    return this.monitorBuffer_();\n  }\n  /**\n   * Set a subtitle track on the segment loader to add subtitles to\n   *\n   * @param {TextTrack=} track\n   *        The text track to add loaded subtitles to\n   * @return {TextTrack}\n   *        Returns the subtitles track\n   */\n\n  track(track) {\n    if (typeof track === 'undefined') {\n      return this.subtitlesTrack_;\n    }\n    this.subtitlesTrack_ = track; // if we were unpaused but waiting for a sourceUpdater, start\n    // buffering now\n\n    if (this.state === 'INIT' && this.couldBeginLoading_()) {\n      this.init_();\n    }\n    return this.subtitlesTrack_;\n  }\n  /**\n   * Remove any data in the source buffer between start and end times\n   *\n   * @param {number} start - the start time of the region to remove from the buffer\n   * @param {number} end - the end time of the region to remove from the buffer\n   */\n\n  remove(start, end) {\n    removeCuesFromTrack(start, end, this.subtitlesTrack_);\n  }\n  /**\n   * fill the buffer with segements unless the sourceBuffers are\n   * currently updating\n   *\n   * Note: this function should only ever be called by monitorBuffer_\n   * and never directly\n   *\n   * @private\n   */\n\n  fillBuffer_() {\n    // see if we need to begin loading immediately\n    const segmentInfo = this.chooseNextRequest_();\n    if (!segmentInfo) {\n      return;\n    }\n    if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {\n      // We don't have the timestamp offset that we need to sync subtitles.\n      // Rerun on a timestamp offset or user interaction.\n      const checkTimestampOffset = () => {\n        this.state = 'READY';\n        if (!this.paused()) {\n          // if not paused, queue a buffer check as soon as possible\n          this.monitorBuffer_();\n        }\n      };\n      this.syncController_.one('timestampoffset', checkTimestampOffset);\n      this.state = 'WAITING_ON_TIMELINE';\n      return;\n    }\n    this.loadSegment_(segmentInfo);\n  } // never set a timestamp offset for vtt segments.\n\n  timestampOffsetForSegment_() {\n    return null;\n  }\n  chooseNextRequest_() {\n    return this.skipEmptySegments_(super.chooseNextRequest_());\n  }\n  /**\n   * Prevents the segment loader from requesting segments we know contain no subtitles\n   * by walking forward until we find the next segment that we don't know whether it is\n   * empty or not.\n   *\n   * @param {Object} segmentInfo\n   *        a segment info object that describes the current segment\n   * @return {Object}\n   *         a segment info object that describes the current segment\n   */\n\n  skipEmptySegments_(segmentInfo) {\n    while (segmentInfo && segmentInfo.segment.empty) {\n      // stop at the last possible segmentInfo\n      if (segmentInfo.mediaIndex + 1 >= segmentInfo.playlist.segments.length) {\n        segmentInfo = null;\n        break;\n      }\n      segmentInfo = this.generateSegmentInfo_({\n        playlist: segmentInfo.playlist,\n        mediaIndex: segmentInfo.mediaIndex + 1,\n        startOfSegment: segmentInfo.startOfSegment + segmentInfo.duration,\n        isSyncRequest: segmentInfo.isSyncRequest\n      });\n    }\n    return segmentInfo;\n  }\n  stopForError(error) {\n    this.error(error);\n    this.state = 'READY';\n    this.pause();\n    this.trigger('error');\n  }\n  /**\n   * append a decrypted segement to the SourceBuffer through a SourceUpdater\n   *\n   * @private\n   */\n\n  segmentRequestFinished_(error, simpleSegment, result) {\n    if (!this.subtitlesTrack_) {\n      this.state = 'READY';\n      return;\n    }\n    this.saveTransferStats_(simpleSegment.stats); // the request was aborted\n\n    if (!this.pendingSegment_) {\n      this.state = 'READY';\n      this.mediaRequestsAborted += 1;\n      return;\n    }\n    if (error) {\n      if (error.code === REQUEST_ERRORS.TIMEOUT) {\n        this.handleTimeout_();\n      }\n      if (error.code === REQUEST_ERRORS.ABORTED) {\n        this.mediaRequestsAborted += 1;\n      } else {\n        this.mediaRequestsErrored += 1;\n      }\n      this.stopForError(error);\n      return;\n    }\n    const segmentInfo = this.pendingSegment_; // although the VTT segment loader bandwidth isn't really used, it's good to\n    // maintain functionality between segment loaders\n\n    this.saveBandwidthRelatedStats_(segmentInfo.duration, simpleSegment.stats); // if this request included a segment key, save that data in the cache\n\n    if (simpleSegment.key) {\n      this.segmentKey(simpleSegment.key, true);\n    }\n    this.state = 'APPENDING'; // used for tests\n\n    this.trigger('appending');\n    const segment = segmentInfo.segment;\n    if (segment.map) {\n      segment.map.bytes = simpleSegment.map.bytes;\n    }\n    segmentInfo.bytes = simpleSegment.bytes; // Make sure that vttjs has loaded, otherwise, load it and wait till it finished loading\n\n    if (typeof window$1.WebVTT !== 'function' && typeof this.loadVttJs === 'function') {\n      this.state = 'WAITING_ON_VTTJS'; // should be fine to call multiple times\n      // script will be loaded once but multiple listeners will be added to the queue, which is expected.\n\n      this.loadVttJs().then(() => this.segmentRequestFinished_(error, simpleSegment, result), () => this.stopForError({\n        message: 'Error loading vtt.js'\n      }));\n      return;\n    }\n    segment.requested = true;\n    try {\n      this.parseVTTCues_(segmentInfo);\n    } catch (e) {\n      this.stopForError({\n        message: e.message\n      });\n      return;\n    }\n    this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);\n    if (segmentInfo.cues.length) {\n      segmentInfo.timingInfo = {\n        start: segmentInfo.cues[0].startTime,\n        end: segmentInfo.cues[segmentInfo.cues.length - 1].endTime\n      };\n    } else {\n      segmentInfo.timingInfo = {\n        start: segmentInfo.startOfSegment,\n        end: segmentInfo.startOfSegment + segmentInfo.duration\n      };\n    }\n    if (segmentInfo.isSyncRequest) {\n      this.trigger('syncinfoupdate');\n      this.pendingSegment_ = null;\n      this.state = 'READY';\n      return;\n    }\n    segmentInfo.byteLength = segmentInfo.bytes.byteLength;\n    this.mediaSecondsLoaded += segment.duration; // Create VTTCue instances for each cue in the new segment and add them to\n    // the subtitle track\n\n    segmentInfo.cues.forEach(cue => {\n      this.subtitlesTrack_.addCue(this.featuresNativeTextTracks_ ? new window$1.VTTCue(cue.startTime, cue.endTime, cue.text) : cue);\n    }); // Remove any duplicate cues from the subtitle track. The WebVTT spec allows\n    // cues to have identical time-intervals, but if the text is also identical\n    // we can safely assume it is a duplicate that can be removed (ex. when a cue\n    // \"overlaps\" VTT segments)\n\n    removeDuplicateCuesFromTrack(this.subtitlesTrack_);\n    this.handleAppendsDone_();\n  }\n  handleData_() {// noop as we shouldn't be getting video/audio data captions\n    // that we do not support here.\n  }\n  updateTimingInfoEnd_() {// noop\n  }\n  /**\n   * Uses the WebVTT parser to parse the segment response\n   *\n   * @throws NoVttJsError\n   *\n   * @param {Object} segmentInfo\n   *        a segment info object that describes the current segment\n   * @private\n   */\n\n  parseVTTCues_(segmentInfo) {\n    let decoder;\n    let decodeBytesToString = false;\n    if (typeof window$1.WebVTT !== 'function') {\n      // caller is responsible for exception handling.\n      throw new NoVttJsError();\n    }\n    if (typeof window$1.TextDecoder === 'function') {\n      decoder = new window$1.TextDecoder('utf8');\n    } else {\n      decoder = window$1.WebVTT.StringDecoder();\n      decodeBytesToString = true;\n    }\n    const parser = new window$1.WebVTT.Parser(window$1, window$1.vttjs, decoder);\n    segmentInfo.cues = [];\n    segmentInfo.timestampmap = {\n      MPEGTS: 0,\n      LOCAL: 0\n    };\n    parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);\n    parser.ontimestampmap = map => {\n      segmentInfo.timestampmap = map;\n    };\n    parser.onparsingerror = error => {\n      videojs.log.warn('Error encountered when parsing cues: ' + error.message);\n    };\n    if (segmentInfo.segment.map) {\n      let mapData = segmentInfo.segment.map.bytes;\n      if (decodeBytesToString) {\n        mapData = uint8ToUtf8(mapData);\n      }\n      parser.parse(mapData);\n    }\n    let segmentData = segmentInfo.bytes;\n    if (decodeBytesToString) {\n      segmentData = uint8ToUtf8(segmentData);\n    }\n    parser.parse(segmentData);\n    parser.flush();\n  }\n  /**\n   * Updates the start and end times of any cues parsed by the WebVTT parser using\n   * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping\n   * from the SyncController\n   *\n   * @param {Object} segmentInfo\n   *        a segment info object that describes the current segment\n   * @param {Object} mappingObj\n   *        object containing a mapping from TS to media time\n   * @param {Object} playlist\n   *        the playlist object containing the segment\n   * @private\n   */\n\n  updateTimeMapping_(segmentInfo, mappingObj, playlist) {\n    const segment = segmentInfo.segment;\n    if (!mappingObj) {\n      // If the sync controller does not have a mapping of TS to Media Time for the\n      // timeline, then we don't have enough information to update the cue\n      // start/end times\n      return;\n    }\n    if (!segmentInfo.cues.length) {\n      // If there are no cues, we also do not have enough information to figure out\n      // segment timing. Mark that the segment contains no cues so we don't re-request\n      // an empty segment.\n      segment.empty = true;\n      return;\n    }\n    const timestampmap = segmentInfo.timestampmap;\n    const diff = timestampmap.MPEGTS / ONE_SECOND_IN_TS - timestampmap.LOCAL + mappingObj.mapping;\n    segmentInfo.cues.forEach(cue => {\n      // First convert cue time to TS time using the timestamp-map provided within the vtt\n      cue.startTime += diff;\n      cue.endTime += diff;\n    });\n    if (!playlist.syncInfo) {\n      const firstStart = segmentInfo.cues[0].startTime;\n      const lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;\n      playlist.syncInfo = {\n        mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,\n        time: Math.min(firstStart, lastStart - segment.duration)\n      };\n    }\n  }\n}\n\n/**\n * @file ad-cue-tags.js\n */\n/**\n * Searches for an ad cue that overlaps with the given mediaTime\n *\n * @param {Object} track\n *        the track to find the cue for\n *\n * @param {number} mediaTime\n *        the time to find the cue at\n *\n * @return {Object|null}\n *         the found cue or null\n */\n\nconst findAdCue = function (track, mediaTime) {\n  const cues = track.cues;\n  for (let i = 0; i < cues.length; i++) {\n    const cue = cues[i];\n    if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {\n      return cue;\n    }\n  }\n  return null;\n};\nconst updateAdCues = function (media, track, offset = 0) {\n  if (!media.segments) {\n    return;\n  }\n  let mediaTime = offset;\n  let cue;\n  for (let i = 0; i < media.segments.length; i++) {\n    const segment = media.segments[i];\n    if (!cue) {\n      // Since the cues will span for at least the segment duration, adding a fudge\n      // factor of half segment duration will prevent duplicate cues from being\n      // created when timing info is not exact (e.g. cue start time initialized\n      // at 10.006677, but next call mediaTime is 10.003332 )\n      cue = findAdCue(track, mediaTime + segment.duration / 2);\n    }\n    if (cue) {\n      if ('cueIn' in segment) {\n        // Found a CUE-IN so end the cue\n        cue.endTime = mediaTime;\n        cue.adEndTime = mediaTime;\n        mediaTime += segment.duration;\n        cue = null;\n        continue;\n      }\n      if (mediaTime < cue.endTime) {\n        // Already processed this mediaTime for this cue\n        mediaTime += segment.duration;\n        continue;\n      } // otherwise extend cue until a CUE-IN is found\n\n      cue.endTime += segment.duration;\n    } else {\n      if ('cueOut' in segment) {\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);\n        cue.adStartTime = mediaTime; // Assumes tag format to be\n        // #EXT-X-CUE-OUT:30\n\n        cue.adEndTime = mediaTime + parseFloat(segment.cueOut);\n        track.addCue(cue);\n      }\n      if ('cueOutCont' in segment) {\n        // Entered into the middle of an ad cue\n        // Assumes tag formate to be\n        // #EXT-X-CUE-OUT-CONT:10/30\n        const [adOffset, adTotal] = segment.cueOutCont.split('/').map(parseFloat);\n        cue = new window$1.VTTCue(mediaTime, mediaTime + segment.duration, '');\n        cue.adStartTime = mediaTime - adOffset;\n        cue.adEndTime = cue.adStartTime + adTotal;\n        track.addCue(cue);\n      }\n    }\n    mediaTime += segment.duration;\n  }\n};\n\n/**\n * @file sync-controller.js\n */\n// synchronize expired playlist segments.\n// the max media sequence diff is 48 hours of live stream\n// content with two second segments. Anything larger than that\n// will likely be invalid.\n\nconst MAX_MEDIA_SEQUENCE_DIFF_FOR_SYNC = 86400;\nconst syncPointStrategies = [\n// Stategy \"VOD\": Handle the VOD-case where the sync-point is *always*\n//                the equivalence display-time 0 === segment-index 0\n{\n  name: 'VOD',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    if (duration !== Infinity) {\n      const syncPoint = {\n        time: 0,\n        segmentIndex: 0,\n        partIndex: null\n      };\n      return syncPoint;\n    }\n    return null;\n  }\n},\n// Stategy \"ProgramDateTime\": We have a program-date-time tag in this playlist\n{\n  name: 'ProgramDateTime',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    if (!Object.keys(syncController.timelineToDatetimeMappings).length) {\n      return null;\n    }\n    let syncPoint = null;\n    let lastDistance = null;\n    const partsAndSegments = getPartsAndSegments(playlist);\n    currentTime = currentTime || 0;\n    for (let i = 0; i < partsAndSegments.length; i++) {\n      // start from the end and loop backwards for live\n      // or start from the front and loop forwards for non-live\n      const index = playlist.endList || currentTime === 0 ? i : partsAndSegments.length - (i + 1);\n      const partAndSegment = partsAndSegments[index];\n      const segment = partAndSegment.segment;\n      const datetimeMapping = syncController.timelineToDatetimeMappings[segment.timeline];\n      if (!datetimeMapping || !segment.dateTimeObject) {\n        continue;\n      }\n      const segmentTime = segment.dateTimeObject.getTime() / 1000;\n      let start = segmentTime + datetimeMapping; // take part duration into account.\n\n      if (segment.parts && typeof partAndSegment.partIndex === 'number') {\n        for (let z = 0; z < partAndSegment.partIndex; z++) {\n          start += segment.parts[z].duration;\n        }\n      }\n      const distance = Math.abs(currentTime - start); // Once the distance begins to increase, or if distance is 0, we have passed\n      // currentTime and can stop looking for better candidates\n\n      if (lastDistance !== null && (distance === 0 || lastDistance < distance)) {\n        break;\n      }\n      lastDistance = distance;\n      syncPoint = {\n        time: start,\n        segmentIndex: partAndSegment.segmentIndex,\n        partIndex: partAndSegment.partIndex\n      };\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Segment\": We have a known time mapping for a timeline and a\n//                    segment in the current timeline with timing data\n{\n  name: 'Segment',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    let syncPoint = null;\n    let lastDistance = null;\n    currentTime = currentTime || 0;\n    const partsAndSegments = getPartsAndSegments(playlist);\n    for (let i = 0; i < partsAndSegments.length; i++) {\n      // start from the end and loop backwards for live\n      // or start from the front and loop forwards for non-live\n      const index = playlist.endList || currentTime === 0 ? i : partsAndSegments.length - (i + 1);\n      const partAndSegment = partsAndSegments[index];\n      const segment = partAndSegment.segment;\n      const start = partAndSegment.part && partAndSegment.part.start || segment && segment.start;\n      if (segment.timeline === currentTimeline && typeof start !== 'undefined') {\n        const distance = Math.abs(currentTime - start); // Once the distance begins to increase, we have passed\n        // currentTime and can stop looking for better candidates\n\n        if (lastDistance !== null && lastDistance < distance) {\n          break;\n        }\n        if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n          lastDistance = distance;\n          syncPoint = {\n            time: start,\n            segmentIndex: partAndSegment.segmentIndex,\n            partIndex: partAndSegment.partIndex\n          };\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Discontinuity\": We have a discontinuity with a known\n//                          display-time\n{\n  name: 'Discontinuity',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    let syncPoint = null;\n    currentTime = currentTime || 0;\n    if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      let lastDistance = null;\n      for (let i = 0; i < playlist.discontinuityStarts.length; i++) {\n        const segmentIndex = playlist.discontinuityStarts[i];\n        const discontinuity = playlist.discontinuitySequence + i + 1;\n        const discontinuitySync = syncController.discontinuities[discontinuity];\n        if (discontinuitySync) {\n          const distance = Math.abs(currentTime - discontinuitySync.time); // Once the distance begins to increase, we have passed\n          // currentTime and can stop looking for better candidates\n\n          if (lastDistance !== null && lastDistance < distance) {\n            break;\n          }\n          if (!syncPoint || lastDistance === null || lastDistance >= distance) {\n            lastDistance = distance;\n            syncPoint = {\n              time: discontinuitySync.time,\n              segmentIndex,\n              partIndex: null\n            };\n          }\n        }\n      }\n    }\n    return syncPoint;\n  }\n},\n// Stategy \"Playlist\": We have a playlist with a known mapping of\n//                     segment index to display time\n{\n  name: 'Playlist',\n  run: (syncController, playlist, duration, currentTimeline, currentTime) => {\n    if (playlist.syncInfo) {\n      const syncPoint = {\n        time: playlist.syncInfo.time,\n        segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence,\n        partIndex: null\n      };\n      return syncPoint;\n    }\n    return null;\n  }\n}];\nclass SyncController extends videojs.EventTarget {\n  constructor(options = {}) {\n    super(); // ...for synching across variants\n\n    this.timelines = [];\n    this.discontinuities = [];\n    this.timelineToDatetimeMappings = {};\n    this.logger_ = logger('SyncController');\n  }\n  /**\n   * Find a sync-point for the playlist specified\n   *\n   * A sync-point is defined as a known mapping from display-time to\n   * a segment-index in the current playlist.\n   *\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {number} duration\n   *        Duration of the MediaSource (Infinite if playing a live source)\n   * @param {number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @return {Object}\n   *          A sync-point object\n   */\n\n  getSyncPoint(playlist, duration, currentTimeline, currentTime) {\n    const syncPoints = this.runStrategies_(playlist, duration, currentTimeline, currentTime);\n    if (!syncPoints.length) {\n      // Signal that we need to attempt to get a sync-point manually\n      // by fetching a segment in the playlist and constructing\n      // a sync-point from that information\n      return null;\n    } // Now find the sync-point that is closest to the currentTime because\n    // that should result in the most accurate guess about which segment\n    // to fetch\n\n    return this.selectSyncPoint_(syncPoints, {\n      key: 'time',\n      value: currentTime\n    });\n  }\n  /**\n   * Calculate the amount of time that has expired off the playlist during playback\n   *\n   * @param {Playlist} playlist\n   *        Playlist object to calculate expired from\n   * @param {number} duration\n   *        Duration of the MediaSource (Infinity if playling a live source)\n   * @return {number|null}\n   *          The amount of time that has expired off the playlist during playback. Null\n   *          if no sync-points for the playlist can be found.\n   */\n\n  getExpiredTime(playlist, duration) {\n    if (!playlist || !playlist.segments) {\n      return null;\n    }\n    const syncPoints = this.runStrategies_(playlist, duration, playlist.discontinuitySequence, 0); // Without sync-points, there is not enough information to determine the expired time\n\n    if (!syncPoints.length) {\n      return null;\n    }\n    const syncPoint = this.selectSyncPoint_(syncPoints, {\n      key: 'segmentIndex',\n      value: 0\n    }); // If the sync-point is beyond the start of the playlist, we want to subtract the\n    // duration from index 0 to syncPoint.segmentIndex instead of adding.\n\n    if (syncPoint.segmentIndex > 0) {\n      syncPoint.time *= -1;\n    }\n    return Math.abs(syncPoint.time + sumDurations({\n      defaultDuration: playlist.targetDuration,\n      durationList: playlist.segments,\n      startIndex: syncPoint.segmentIndex,\n      endIndex: 0\n    }));\n  }\n  /**\n   * Runs each sync-point strategy and returns a list of sync-points returned by the\n   * strategies\n   *\n   * @private\n   * @param {Playlist} playlist\n   *        The playlist that needs a sync-point\n   * @param {number} duration\n   *        Duration of the MediaSource (Infinity if playing a live source)\n   * @param {number} currentTimeline\n   *        The last timeline from which a segment was loaded\n   * @return {Array}\n   *          A list of sync-point objects\n   */\n\n  runStrategies_(playlist, duration, currentTimeline, currentTime) {\n    const syncPoints = []; // Try to find a sync-point in by utilizing various strategies...\n\n    for (let i = 0; i < syncPointStrategies.length; i++) {\n      const strategy = syncPointStrategies[i];\n      const syncPoint = strategy.run(this, playlist, duration, currentTimeline, currentTime);\n      if (syncPoint) {\n        syncPoint.strategy = strategy.name;\n        syncPoints.push({\n          strategy: strategy.name,\n          syncPoint\n        });\n      }\n    }\n    return syncPoints;\n  }\n  /**\n   * Selects the sync-point nearest the specified target\n   *\n   * @private\n   * @param {Array} syncPoints\n   *        List of sync-points to select from\n   * @param {Object} target\n   *        Object specifying the property and value we are targeting\n   * @param {string} target.key\n   *        Specifies the property to target. Must be either 'time' or 'segmentIndex'\n   * @param {number} target.value\n   *        The value to target for the specified key.\n   * @return {Object}\n   *          The sync-point nearest the target\n   */\n\n  selectSyncPoint_(syncPoints, target) {\n    let bestSyncPoint = syncPoints[0].syncPoint;\n    let bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);\n    let bestStrategy = syncPoints[0].strategy;\n    for (let i = 1; i < syncPoints.length; i++) {\n      const newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);\n      if (newDistance < bestDistance) {\n        bestDistance = newDistance;\n        bestSyncPoint = syncPoints[i].syncPoint;\n        bestStrategy = syncPoints[i].strategy;\n      }\n    }\n    this.logger_(`syncPoint for [${target.key}: ${target.value}] chosen with strategy` + ` [${bestStrategy}]: [time:${bestSyncPoint.time},` + ` segmentIndex:${bestSyncPoint.segmentIndex}` + (typeof bestSyncPoint.partIndex === 'number' ? `,partIndex:${bestSyncPoint.partIndex}` : '') + ']');\n    return bestSyncPoint;\n  }\n  /**\n   * Save any meta-data present on the segments when segments leave\n   * the live window to the playlist to allow for synchronization at the\n   * playlist level later.\n   *\n   * @param {Playlist} oldPlaylist - The previous active playlist\n   * @param {Playlist} newPlaylist - The updated and most current playlist\n   */\n\n  saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {\n    const mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence; // Ignore large media sequence gaps\n\n    if (mediaSequenceDiff > MAX_MEDIA_SEQUENCE_DIFF_FOR_SYNC) {\n      videojs.log.warn(`Not saving expired segment info. Media sequence gap ${mediaSequenceDiff} is too large.`);\n      return;\n    } // When a segment expires from the playlist and it has a start time\n    // save that information as a possible sync-point reference in future\n\n    for (let i = mediaSequenceDiff - 1; i >= 0; i--) {\n      const lastRemovedSegment = oldPlaylist.segments[i];\n      if (lastRemovedSegment && typeof lastRemovedSegment.start !== 'undefined') {\n        newPlaylist.syncInfo = {\n          mediaSequence: oldPlaylist.mediaSequence + i,\n          time: lastRemovedSegment.start\n        };\n        this.logger_(`playlist refresh sync: [time:${newPlaylist.syncInfo.time},` + ` mediaSequence: ${newPlaylist.syncInfo.mediaSequence}]`);\n        this.trigger('syncinfoupdate');\n        break;\n      }\n    }\n  }\n  /**\n   * Save the mapping from playlist's ProgramDateTime to display. This should only happen\n   * before segments start to load.\n   *\n   * @param {Playlist} playlist - The currently active playlist\n   */\n\n  setDateTimeMappingForStart(playlist) {\n    // It's possible for the playlist to be updated before playback starts, meaning time\n    // zero is not yet set. If, during these playlist refreshes, a discontinuity is\n    // crossed, then the old time zero mapping (for the prior timeline) would be retained\n    // unless the mappings are cleared.\n    this.timelineToDatetimeMappings = {};\n    if (playlist.segments && playlist.segments.length && playlist.segments[0].dateTimeObject) {\n      const firstSegment = playlist.segments[0];\n      const playlistTimestamp = firstSegment.dateTimeObject.getTime() / 1000;\n      this.timelineToDatetimeMappings[firstSegment.timeline] = -playlistTimestamp;\n    }\n  }\n  /**\n   * Calculates and saves timeline mappings, playlist sync info, and segment timing values\n   * based on the latest timing information.\n   *\n   * @param {Object} options\n   *        Options object\n   * @param {SegmentInfo} options.segmentInfo\n   *        The current active request information\n   * @param {boolean} options.shouldSaveTimelineMapping\n   *        If there's a timeline change, determines if the timeline mapping should be\n   *        saved for timeline mapping and program date time mappings.\n   */\n\n  saveSegmentTimingInfo({\n    segmentInfo,\n    shouldSaveTimelineMapping\n  }) {\n    const didCalculateSegmentTimeMapping = this.calculateSegmentTimeMapping_(segmentInfo, segmentInfo.timingInfo, shouldSaveTimelineMapping);\n    const segment = segmentInfo.segment;\n    if (didCalculateSegmentTimeMapping) {\n      this.saveDiscontinuitySyncInfo_(segmentInfo); // If the playlist does not have sync information yet, record that information\n      // now with segment timing information\n\n      if (!segmentInfo.playlist.syncInfo) {\n        segmentInfo.playlist.syncInfo = {\n          mediaSequence: segmentInfo.playlist.mediaSequence + segmentInfo.mediaIndex,\n          time: segment.start\n        };\n      }\n    }\n    const dateTime = segment.dateTimeObject;\n    if (segment.discontinuity && shouldSaveTimelineMapping && dateTime) {\n      this.timelineToDatetimeMappings[segment.timeline] = -(dateTime.getTime() / 1000);\n    }\n  }\n  timestampOffsetForTimeline(timeline) {\n    if (typeof this.timelines[timeline] === 'undefined') {\n      return null;\n    }\n    return this.timelines[timeline].time;\n  }\n  mappingForTimeline(timeline) {\n    if (typeof this.timelines[timeline] === 'undefined') {\n      return null;\n    }\n    return this.timelines[timeline].mapping;\n  }\n  /**\n   * Use the \"media time\" for a segment to generate a mapping to \"display time\" and\n   * save that display time to the segment.\n   *\n   * @private\n   * @param {SegmentInfo} segmentInfo\n   *        The current active request information\n   * @param {Object} timingInfo\n   *        The start and end time of the current segment in \"media time\"\n   * @param {boolean} shouldSaveTimelineMapping\n   *        If there's a timeline change, determines if the timeline mapping should be\n   *        saved in timelines.\n   * @return {boolean}\n   *          Returns false if segment time mapping could not be calculated\n   */\n\n  calculateSegmentTimeMapping_(segmentInfo, timingInfo, shouldSaveTimelineMapping) {\n    // TODO: remove side effects\n    const segment = segmentInfo.segment;\n    const part = segmentInfo.part;\n    let mappingObj = this.timelines[segmentInfo.timeline];\n    let start;\n    let end;\n    if (typeof segmentInfo.timestampOffset === 'number') {\n      mappingObj = {\n        time: segmentInfo.startOfSegment,\n        mapping: segmentInfo.startOfSegment - timingInfo.start\n      };\n      if (shouldSaveTimelineMapping) {\n        this.timelines[segmentInfo.timeline] = mappingObj;\n        this.trigger('timestampoffset');\n        this.logger_(`time mapping for timeline ${segmentInfo.timeline}: ` + `[time: ${mappingObj.time}] [mapping: ${mappingObj.mapping}]`);\n      }\n      start = segmentInfo.startOfSegment;\n      end = timingInfo.end + mappingObj.mapping;\n    } else if (mappingObj) {\n      start = timingInfo.start + mappingObj.mapping;\n      end = timingInfo.end + mappingObj.mapping;\n    } else {\n      return false;\n    }\n    if (part) {\n      part.start = start;\n      part.end = end;\n    } // If we don't have a segment start yet or the start value we got\n    // is less than our current segment.start value, save a new start value.\n    // We have to do this because parts will have segment timing info saved\n    // multiple times and we want segment start to be the earliest part start\n    // value for that segment.\n\n    if (!segment.start || start < segment.start) {\n      segment.start = start;\n    }\n    segment.end = end;\n    return true;\n  }\n  /**\n   * Each time we have discontinuity in the playlist, attempt to calculate the location\n   * in display of the start of the discontinuity and save that. We also save an accuracy\n   * value so that we save values with the most accuracy (closest to 0.)\n   *\n   * @private\n   * @param {SegmentInfo} segmentInfo - The current active request information\n   */\n\n  saveDiscontinuitySyncInfo_(segmentInfo) {\n    const playlist = segmentInfo.playlist;\n    const segment = segmentInfo.segment; // If the current segment is a discontinuity then we know exactly where\n    // the start of the range and it's accuracy is 0 (greater accuracy values\n    // mean more approximation)\n\n    if (segment.discontinuity) {\n      this.discontinuities[segment.timeline] = {\n        time: segment.start,\n        accuracy: 0\n      };\n    } else if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {\n      // Search for future discontinuities that we can provide better timing\n      // information for and save that information for sync purposes\n      for (let i = 0; i < playlist.discontinuityStarts.length; i++) {\n        const segmentIndex = playlist.discontinuityStarts[i];\n        const discontinuity = playlist.discontinuitySequence + i + 1;\n        const mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;\n        const accuracy = Math.abs(mediaIndexDiff);\n        if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {\n          let time;\n          if (mediaIndexDiff < 0) {\n            time = segment.start - sumDurations({\n              defaultDuration: playlist.targetDuration,\n              durationList: playlist.segments,\n              startIndex: segmentInfo.mediaIndex,\n              endIndex: segmentIndex\n            });\n          } else {\n            time = segment.end + sumDurations({\n              defaultDuration: playlist.targetDuration,\n              durationList: playlist.segments,\n              startIndex: segmentInfo.mediaIndex + 1,\n              endIndex: segmentIndex\n            });\n          }\n          this.discontinuities[discontinuity] = {\n            time,\n            accuracy\n          };\n        }\n      }\n    }\n  }\n  dispose() {\n    this.trigger('dispose');\n    this.off();\n  }\n}\n\n/**\n * The TimelineChangeController acts as a source for segment loaders to listen for and\n * keep track of latest and pending timeline changes. This is useful to ensure proper\n * sync, as each loader may need to make a consideration for what timeline the other\n * loader is on before making changes which could impact the other loader's media.\n *\n * @class TimelineChangeController\n * @extends videojs.EventTarget\n */\n\nclass TimelineChangeController extends videojs.EventTarget {\n  constructor() {\n    super();\n    this.pendingTimelineChanges_ = {};\n    this.lastTimelineChanges_ = {};\n  }\n  clearPendingTimelineChange(type) {\n    this.pendingTimelineChanges_[type] = null;\n    this.trigger('pendingtimelinechange');\n  }\n  pendingTimelineChange({\n    type,\n    from,\n    to\n  }) {\n    if (typeof from === 'number' && typeof to === 'number') {\n      this.pendingTimelineChanges_[type] = {\n        type,\n        from,\n        to\n      };\n      this.trigger('pendingtimelinechange');\n    }\n    return this.pendingTimelineChanges_[type];\n  }\n  lastTimelineChange({\n    type,\n    from,\n    to\n  }) {\n    if (typeof from === 'number' && typeof to === 'number') {\n      this.lastTimelineChanges_[type] = {\n        type,\n        from,\n        to\n      };\n      delete this.pendingTimelineChanges_[type];\n      this.trigger('timelinechange');\n    }\n    return this.lastTimelineChanges_[type];\n  }\n  dispose() {\n    this.trigger('dispose');\n    this.pendingTimelineChanges_ = {};\n    this.lastTimelineChanges_ = {};\n    this.off();\n  }\n}\n\n/* rollup-plugin-worker-factory start for worker!/Users/ddashkevich/projects/http-streaming/src/decrypter-worker.js */\nconst workerCode = transform(getWorkerString(function () {\n  /**\n   * @file stream.js\n   */\n\n  /**\n   * A lightweight readable stream implemention that handles event dispatching.\n   *\n   * @class Stream\n   */\n\n  var Stream = /*#__PURE__*/function () {\n    function Stream() {\n      this.listeners = {};\n    }\n    /**\n     * Add a listener for a specified event type.\n     *\n     * @param {string} type the event name\n     * @param {Function} listener the callback to be invoked when an event of\n     * the specified type occurs\n     */\n\n    var _proto = Stream.prototype;\n    _proto.on = function on(type, listener) {\n      if (!this.listeners[type]) {\n        this.listeners[type] = [];\n      }\n      this.listeners[type].push(listener);\n    }\n    /**\n     * Remove a listener for a specified event type.\n     *\n     * @param {string} type the event name\n     * @param {Function} listener  a function previously registered for this\n     * type of event through `on`\n     * @return {boolean} if we could turn it off or not\n     */;\n\n    _proto.off = function off(type, listener) {\n      if (!this.listeners[type]) {\n        return false;\n      }\n      var index = this.listeners[type].indexOf(listener); // TODO: which is better?\n      // In Video.js we slice listener functions\n      // on trigger so that it does not mess up the order\n      // while we loop through.\n      //\n      // Here we slice on off so that the loop in trigger\n      // can continue using it's old reference to loop without\n      // messing up the order.\n\n      this.listeners[type] = this.listeners[type].slice(0);\n      this.listeners[type].splice(index, 1);\n      return index > -1;\n    }\n    /**\n     * Trigger an event of the specified type on this stream. Any additional\n     * arguments to this function are passed as parameters to event listeners.\n     *\n     * @param {string} type the event name\n     */;\n\n    _proto.trigger = function trigger(type) {\n      var callbacks = this.listeners[type];\n      if (!callbacks) {\n        return;\n      } // Slicing the arguments on every invocation of this method\n      // can add a significant amount of overhead. Avoid the\n      // intermediate object creation for the common case of a\n      // single callback argument\n\n      if (arguments.length === 2) {\n        var length = callbacks.length;\n        for (var i = 0; i < length; ++i) {\n          callbacks[i].call(this, arguments[1]);\n        }\n      } else {\n        var args = Array.prototype.slice.call(arguments, 1);\n        var _length = callbacks.length;\n        for (var _i = 0; _i < _length; ++_i) {\n          callbacks[_i].apply(this, args);\n        }\n      }\n    }\n    /**\n     * Destroys the stream and cleans up.\n     */;\n\n    _proto.dispose = function dispose() {\n      this.listeners = {};\n    }\n    /**\n     * Forwards all `data` events on this stream to the destination stream. The\n     * destination stream should provide a method `push` to receive the data\n     * events as they arrive.\n     *\n     * @param {Stream} destination the stream that will receive all `data` events\n     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\n     */;\n\n    _proto.pipe = function pipe(destination) {\n      this.on('data', function (data) {\n        destination.push(data);\n      });\n    };\n    return Stream;\n  }();\n  /*! @name pkcs7 @version 1.0.4 @license Apache-2.0 */\n\n  /**\n   * Returns the subarray of a Uint8Array without PKCS#7 padding.\n   *\n   * @param padded {Uint8Array} unencrypted bytes that have been padded\n   * @return {Uint8Array} the unpadded bytes\n   * @see http://tools.ietf.org/html/rfc5652\n   */\n\n  function unpad(padded) {\n    return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);\n  }\n  /*! @name aes-decrypter @version 4.0.1 @license Apache-2.0 */\n\n  /**\n   * @file aes.js\n   *\n   * This file contains an adaptation of the AES decryption algorithm\n   * from the Standford Javascript Cryptography Library. That work is\n   * covered by the following copyright and permissions notice:\n   *\n   * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.\n   * All rights reserved.\n   *\n   * Redistribution and use in source and binary forms, with or without\n   * modification, are permitted provided that the following conditions are\n   * met:\n   *\n   * 1. Redistributions of source code must retain the above copyright\n   *    notice, this list of conditions and the following disclaimer.\n   *\n   * 2. Redistributions in binary form must reproduce the above\n   *    copyright notice, this list of conditions and the following\n   *    disclaimer in the documentation and/or other materials provided\n   *    with the distribution.\n   *\n   * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR\n   * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n   * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE\n   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n   * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n   * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n   * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n   * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   *\n   * The views and conclusions contained in the software and documentation\n   * are those of the authors and should not be interpreted as representing\n   * official policies, either expressed or implied, of the authors.\n   */\n\n  /**\n   * Expand the S-box tables.\n   *\n   * @private\n   */\n\n  const precompute = function () {\n    const tables = [[[], [], [], [], []], [[], [], [], [], []]];\n    const encTable = tables[0];\n    const decTable = tables[1];\n    const sbox = encTable[4];\n    const sboxInv = decTable[4];\n    let i;\n    let x;\n    let xInv;\n    const d = [];\n    const th = [];\n    let x2;\n    let x4;\n    let x8;\n    let s;\n    let tEnc;\n    let tDec; // Compute double and third tables\n\n    for (i = 0; i < 256; i++) {\n      th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n    }\n    for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n      // Compute sbox\n      s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n      s = s >> 8 ^ s & 255 ^ 99;\n      sbox[x] = s;\n      sboxInv[s] = x; // Compute MixColumns\n\n      x8 = d[x4 = d[x2 = d[x]]];\n      tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n      tEnc = d[s] * 0x101 ^ s * 0x1010100;\n      for (i = 0; i < 4; i++) {\n        encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n        decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n      }\n    } // Compactify. Considerable speedup on Firefox.\n\n    for (i = 0; i < 5; i++) {\n      encTable[i] = encTable[i].slice(0);\n      decTable[i] = decTable[i].slice(0);\n    }\n    return tables;\n  };\n  let aesTables = null;\n  /**\n   * Schedule out an AES key for both encryption and decryption. This\n   * is a low-level class. Use a cipher mode to do bulk encryption.\n   *\n   * @class AES\n   * @param key {Array} The key as an array of 4, 6 or 8 words.\n   */\n\n  class AES {\n    constructor(key) {\n      /**\n      * The expanded S-box and inverse S-box tables. These will be computed\n      * on the client so that we don't have to send them down the wire.\n      *\n      * There are two tables, _tables[0] is for encryption and\n      * _tables[1] is for decryption.\n      *\n      * The first 4 sub-tables are the expanded S-box with MixColumns. The\n      * last (_tables[01][4]) is the S-box itself.\n      *\n      * @private\n      */\n      // if we have yet to precompute the S-box tables\n      // do so now\n      if (!aesTables) {\n        aesTables = precompute();\n      } // then make a copy of that object for use\n\n      this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];\n      let i;\n      let j;\n      let tmp;\n      const sbox = this._tables[0][4];\n      const decTable = this._tables[1];\n      const keyLen = key.length;\n      let rcon = 1;\n      if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n        throw new Error('Invalid aes key size');\n      }\n      const encKey = key.slice(0);\n      const decKey = [];\n      this._key = [encKey, decKey]; // schedule encryption keys\n\n      for (i = keyLen; i < 4 * keyLen + 28; i++) {\n        tmp = encKey[i - 1]; // apply sbox\n\n        if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {\n          tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255]; // shift rows and add rcon\n\n          if (i % keyLen === 0) {\n            tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n            rcon = rcon << 1 ^ (rcon >> 7) * 283;\n          }\n        }\n        encKey[i] = encKey[i - keyLen] ^ tmp;\n      } // schedule decryption keys\n\n      for (j = 0; i; j++, i--) {\n        tmp = encKey[j & 3 ? i : i - 4];\n        if (i <= 4 || j < 4) {\n          decKey[j] = tmp;\n        } else {\n          decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];\n        }\n      }\n    }\n    /**\n     * Decrypt 16 bytes, specified as four 32-bit words.\n     *\n     * @param {number} encrypted0 the first word to decrypt\n     * @param {number} encrypted1 the second word to decrypt\n     * @param {number} encrypted2 the third word to decrypt\n     * @param {number} encrypted3 the fourth word to decrypt\n     * @param {Int32Array} out the array to write the decrypted words\n     * into\n     * @param {number} offset the offset into the output array to start\n     * writing results\n     * @return {Array} The plaintext.\n     */\n\n    decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {\n      const key = this._key[1]; // state variables a,b,c,d are loaded with pre-whitened data\n\n      let a = encrypted0 ^ key[0];\n      let b = encrypted3 ^ key[1];\n      let c = encrypted2 ^ key[2];\n      let d = encrypted1 ^ key[3];\n      let a2;\n      let b2;\n      let c2; // key.length === 2 ?\n\n      const nInnerRounds = key.length / 4 - 2;\n      let i;\n      let kIndex = 4;\n      const table = this._tables[1]; // load up the tables\n\n      const table0 = table[0];\n      const table1 = table[1];\n      const table2 = table[2];\n      const table3 = table[3];\n      const sbox = table[4]; // Inner rounds. Cribbed from OpenSSL.\n\n      for (i = 0; i < nInnerRounds; i++) {\n        a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];\n        b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];\n        c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];\n        d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];\n        kIndex += 4;\n        a = a2;\n        b = b2;\n        c = c2;\n      } // Last round.\n\n      for (i = 0; i < 4; i++) {\n        out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];\n        a2 = a;\n        a = b;\n        b = c;\n        c = d;\n        d = a2;\n      }\n    }\n  }\n  /**\n   * @file async-stream.js\n   */\n\n  /**\n   * A wrapper around the Stream class to use setTimeout\n   * and run stream \"jobs\" Asynchronously\n   *\n   * @class AsyncStream\n   * @extends Stream\n   */\n\n  class AsyncStream extends Stream {\n    constructor() {\n      super(Stream);\n      this.jobs = [];\n      this.delay = 1;\n      this.timeout_ = null;\n    }\n    /**\n     * process an async job\n     *\n     * @private\n     */\n\n    processJob_() {\n      this.jobs.shift()();\n      if (this.jobs.length) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      } else {\n        this.timeout_ = null;\n      }\n    }\n    /**\n     * push a job into the stream\n     *\n     * @param {Function} job the job to push into the stream\n     */\n\n    push(job) {\n      this.jobs.push(job);\n      if (!this.timeout_) {\n        this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);\n      }\n    }\n  }\n  /**\n   * @file decrypter.js\n   *\n   * An asynchronous implementation of AES-128 CBC decryption with\n   * PKCS#7 padding.\n   */\n\n  /**\n   * Convert network-order (big-endian) bytes into their little-endian\n   * representation.\n   */\n\n  const ntoh = function (word) {\n    return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n  };\n  /**\n   * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n   *\n   * @param {Uint8Array} encrypted the encrypted bytes\n   * @param {Uint32Array} key the bytes of the decryption key\n   * @param {Uint32Array} initVector the initialization vector (IV) to\n   * use for the first round of CBC.\n   * @return {Uint8Array} the decrypted bytes\n   *\n   * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n   * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n   * @see https://tools.ietf.org/html/rfc2315\n   */\n\n  const decrypt = function (encrypted, key, initVector) {\n    // word-level access to the encrypted bytes\n    const encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n    const decipher = new AES(Array.prototype.slice.call(key)); // byte and word-level access for the decrypted output\n\n    const decrypted = new Uint8Array(encrypted.byteLength);\n    const decrypted32 = new Int32Array(decrypted.buffer); // temporary variables for working with the IV, encrypted, and\n    // decrypted data\n\n    let init0;\n    let init1;\n    let init2;\n    let init3;\n    let encrypted0;\n    let encrypted1;\n    let encrypted2;\n    let encrypted3; // iteration variable\n\n    let wordIx; // pull out the words of the IV to ensure we don't modify the\n    // passed-in reference and easier access\n\n    init0 = initVector[0];\n    init1 = initVector[1];\n    init2 = initVector[2];\n    init3 = initVector[3]; // decrypt four word sequences, applying cipher-block chaining (CBC)\n    // to each decrypted block\n\n    for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n      // convert big-endian (network order) words into little-endian\n      // (javascript order)\n      encrypted0 = ntoh(encrypted32[wordIx]);\n      encrypted1 = ntoh(encrypted32[wordIx + 1]);\n      encrypted2 = ntoh(encrypted32[wordIx + 2]);\n      encrypted3 = ntoh(encrypted32[wordIx + 3]); // decrypt the block\n\n      decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx); // XOR with the IV, and restore network byte-order to obtain the\n      // plaintext\n\n      decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n      decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n      decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n      decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3); // setup the IV for the next round\n\n      init0 = encrypted0;\n      init1 = encrypted1;\n      init2 = encrypted2;\n      init3 = encrypted3;\n    }\n    return decrypted;\n  };\n  /**\n   * The `Decrypter` class that manages decryption of AES\n   * data through `AsyncStream` objects and the `decrypt`\n   * function\n   *\n   * @param {Uint8Array} encrypted the encrypted bytes\n   * @param {Uint32Array} key the bytes of the decryption key\n   * @param {Uint32Array} initVector the initialization vector (IV) to\n   * @param {Function} done the function to run when done\n   * @class Decrypter\n   */\n\n  class Decrypter {\n    constructor(encrypted, key, initVector, done) {\n      const step = Decrypter.STEP;\n      const encrypted32 = new Int32Array(encrypted.buffer);\n      const decrypted = new Uint8Array(encrypted.byteLength);\n      let i = 0;\n      this.asyncStream_ = new AsyncStream(); // split up the encryption job and do the individual chunks asynchronously\n\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n      for (i = step; i < encrypted32.length; i += step) {\n        initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n        this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n      } // invoke the done() callback when everything is finished\n\n      this.asyncStream_.push(function () {\n        // remove pkcs#7 padding from the decrypted bytes\n        done(null, unpad(decrypted));\n      });\n    }\n    /**\n     * a getter for step the maximum number of bytes to process at one time\n     *\n     * @return {number} the value of step 32000\n     */\n\n    static get STEP() {\n      // 4 * 8000;\n      return 32000;\n    }\n    /**\n     * @private\n     */\n\n    decryptChunk_(encrypted, key, initVector, decrypted) {\n      return function () {\n        const bytes = decrypt(encrypted, key, initVector);\n        decrypted.set(bytes, encrypted.byteOffset);\n      };\n    }\n  }\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n  var win;\n  if (typeof window !== \"undefined\") {\n    win = window;\n  } else if (typeof commonjsGlobal !== \"undefined\") {\n    win = commonjsGlobal;\n  } else if (typeof self !== \"undefined\") {\n    win = self;\n  } else {\n    win = {};\n  }\n  var window_1 = win;\n  var isArrayBufferView = function isArrayBufferView(obj) {\n    if (ArrayBuffer.isView === 'function') {\n      return ArrayBuffer.isView(obj);\n    }\n    return obj && obj.buffer instanceof ArrayBuffer;\n  };\n  var BigInt = window_1.BigInt || Number;\n  [BigInt('0x1'), BigInt('0x100'), BigInt('0x10000'), BigInt('0x1000000'), BigInt('0x100000000'), BigInt('0x10000000000'), BigInt('0x1000000000000'), BigInt('0x100000000000000'), BigInt('0x10000000000000000')];\n  (function () {\n    var a = new Uint16Array([0xFFCC]);\n    var b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\n    if (b[0] === 0xFF) {\n      return 'big';\n    }\n    if (b[0] === 0xCC) {\n      return 'little';\n    }\n    return 'unknown';\n  })();\n  /**\n   * Creates an object for sending to a web worker modifying properties that are TypedArrays\n   * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n   *\n   * @param {Object} message\n   *        Object of properties and values to send to the web worker\n   * @return {Object}\n   *         Modified message with TypedArray values expanded\n   * @function createTransferableMessage\n   */\n\n  const createTransferableMessage = function (message) {\n    const transferable = {};\n    Object.keys(message).forEach(key => {\n      const value = message[key];\n      if (isArrayBufferView(value)) {\n        transferable[key] = {\n          bytes: value.buffer,\n          byteOffset: value.byteOffset,\n          byteLength: value.byteLength\n        };\n      } else {\n        transferable[key] = value;\n      }\n    });\n    return transferable;\n  };\n  /* global self */\n\n  /**\n   * Our web worker interface so that things can talk to aes-decrypter\n   * that will be running in a web worker. the scope is passed to this by\n   * webworkify.\n   */\n\n  self.onmessage = function (event) {\n    const data = event.data;\n    const encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);\n    const key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);\n    const iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);\n    /* eslint-disable no-new, handle-callback-err */\n\n    new Decrypter(encrypted, key, iv, function (err, bytes) {\n      self.postMessage(createTransferableMessage({\n        source: data.source,\n        decrypted: bytes\n      }), [bytes.buffer]);\n    });\n    /* eslint-enable */\n  };\n}));\n\nvar Decrypter = factory(workerCode);\n/* rollup-plugin-worker-factory end for worker!/Users/ddashkevich/projects/http-streaming/src/decrypter-worker.js */\n\n/**\n * Convert the properties of an HLS track into an audioTrackKind.\n *\n * @private\n */\n\nconst audioTrackKind_ = properties => {\n  let kind = properties.default ? 'main' : 'alternative';\n  if (properties.characteristics && properties.characteristics.indexOf('public.accessibility.describes-video') >= 0) {\n    kind = 'main-desc';\n  }\n  return kind;\n};\n/**\n * Pause provided segment loader and playlist loader if active\n *\n * @param {SegmentLoader} segmentLoader\n *        SegmentLoader to pause\n * @param {Object} mediaType\n *        Active media type\n * @function stopLoaders\n */\n\nconst stopLoaders = (segmentLoader, mediaType) => {\n  segmentLoader.abort();\n  segmentLoader.pause();\n  if (mediaType && mediaType.activePlaylistLoader) {\n    mediaType.activePlaylistLoader.pause();\n    mediaType.activePlaylistLoader = null;\n  }\n};\n/**\n * Start loading provided segment loader and playlist loader\n *\n * @param {PlaylistLoader} playlistLoader\n *        PlaylistLoader to start loading\n * @param {Object} mediaType\n *        Active media type\n * @function startLoaders\n */\n\nconst startLoaders = (playlistLoader, mediaType) => {\n  // Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the\n  // playlist loader\n  mediaType.activePlaylistLoader = playlistLoader;\n  playlistLoader.load();\n};\n/**\n * Returns a function to be called when the media group changes. It performs a\n * non-destructive (preserve the buffer) resync of the SegmentLoader. This is because a\n * change of group is merely a rendition switch of the same content at another encoding,\n * rather than a change of content, such as switching audio from English to Spanish.\n *\n * @param {string} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a non-destructive resync of SegmentLoader when the active media\n *         group changes.\n * @function onGroupChanged\n */\n\nconst onGroupChanged = (type, settings) => () => {\n  const {\n    segmentLoaders: {\n      [type]: segmentLoader,\n      main: mainSegmentLoader\n    },\n    mediaTypes: {\n      [type]: mediaType\n    }\n  } = settings;\n  const activeTrack = mediaType.activeTrack();\n  const activeGroup = mediaType.getActiveGroup();\n  const previousActiveLoader = mediaType.activePlaylistLoader;\n  const lastGroup = mediaType.lastGroup_; // the group did not change do nothing\n\n  if (activeGroup && lastGroup && activeGroup.id === lastGroup.id) {\n    return;\n  }\n  mediaType.lastGroup_ = activeGroup;\n  mediaType.lastTrack_ = activeTrack;\n  stopLoaders(segmentLoader, mediaType);\n  if (!activeGroup || activeGroup.isMainPlaylist) {\n    // there is no group active or active group is a main playlist and won't change\n    return;\n  }\n  if (!activeGroup.playlistLoader) {\n    if (previousActiveLoader) {\n      // The previous group had a playlist loader but the new active group does not\n      // this means we are switching from demuxed to muxed audio. In this case we want to\n      // do a destructive reset of the main segment loader and not restart the audio\n      // loaders.\n      mainSegmentLoader.resetEverything();\n    }\n    return;\n  } // Non-destructive resync\n\n  segmentLoader.resyncLoader();\n  startLoaders(activeGroup.playlistLoader, mediaType);\n};\nconst onGroupChanging = (type, settings) => () => {\n  const {\n    segmentLoaders: {\n      [type]: segmentLoader\n    },\n    mediaTypes: {\n      [type]: mediaType\n    }\n  } = settings;\n  mediaType.lastGroup_ = null;\n  segmentLoader.abort();\n  segmentLoader.pause();\n};\n/**\n * Returns a function to be called when the media track changes. It performs a\n * destructive reset of the SegmentLoader to ensure we start loading as close to\n * currentTime as possible.\n *\n * @param {string} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Handler for a destructive reset of SegmentLoader when the active media\n *         track changes.\n * @function onTrackChanged\n */\n\nconst onTrackChanged = (type, settings) => () => {\n  const {\n    mainPlaylistLoader,\n    segmentLoaders: {\n      [type]: segmentLoader,\n      main: mainSegmentLoader\n    },\n    mediaTypes: {\n      [type]: mediaType\n    }\n  } = settings;\n  const activeTrack = mediaType.activeTrack();\n  const activeGroup = mediaType.getActiveGroup();\n  const previousActiveLoader = mediaType.activePlaylistLoader;\n  const lastTrack = mediaType.lastTrack_; // track did not change, do nothing\n\n  if (lastTrack && activeTrack && lastTrack.id === activeTrack.id) {\n    return;\n  }\n  mediaType.lastGroup_ = activeGroup;\n  mediaType.lastTrack_ = activeTrack;\n  stopLoaders(segmentLoader, mediaType);\n  if (!activeGroup) {\n    // there is no group active so we do not want to restart loaders\n    return;\n  }\n  if (activeGroup.isMainPlaylist) {\n    // track did not change, do nothing\n    if (!activeTrack || !lastTrack || activeTrack.id === lastTrack.id) {\n      return;\n    }\n    const pc = settings.vhs.playlistController_;\n    const newPlaylist = pc.selectPlaylist(); // media will not change do nothing\n\n    if (pc.media() === newPlaylist) {\n      return;\n    }\n    mediaType.logger_(`track change. Switching main audio from ${lastTrack.id} to ${activeTrack.id}`);\n    mainPlaylistLoader.pause();\n    mainSegmentLoader.resetEverything();\n    pc.fastQualityChange_(newPlaylist);\n    return;\n  }\n  if (type === 'AUDIO') {\n    if (!activeGroup.playlistLoader) {\n      // when switching from demuxed audio/video to muxed audio/video (noted by no\n      // playlist loader for the audio group), we want to do a destructive reset of the\n      // main segment loader and not restart the audio loaders\n      mainSegmentLoader.setAudio(true); // don't have to worry about disabling the audio of the audio segment loader since\n      // it should be stopped\n\n      mainSegmentLoader.resetEverything();\n      return;\n    } // although the segment loader is an audio segment loader, call the setAudio\n    // function to ensure it is prepared to re-append the init segment (or handle other\n    // config changes)\n\n    segmentLoader.setAudio(true);\n    mainSegmentLoader.setAudio(false);\n  }\n  if (previousActiveLoader === activeGroup.playlistLoader) {\n    // Nothing has actually changed. This can happen because track change events can fire\n    // multiple times for a \"single\" change. One for enabling the new active track, and\n    // one for disabling the track that was active\n    startLoaders(activeGroup.playlistLoader, mediaType);\n    return;\n  }\n  if (segmentLoader.track) {\n    // For WebVTT, set the new text track in the segmentloader\n    segmentLoader.track(activeTrack);\n  } // destructive reset\n\n  segmentLoader.resetEverything();\n  startLoaders(activeGroup.playlistLoader, mediaType);\n};\nconst onError = {\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning (or error if the playlist is excluded) to\n   *         console and switches back to default audio track.\n   * @function onError.AUDIO\n   */\n  AUDIO: (type, settings) => () => {\n    const {\n      segmentLoaders: {\n        [type]: segmentLoader\n      },\n      mediaTypes: {\n        [type]: mediaType\n      },\n      excludePlaylist\n    } = settings;\n    stopLoaders(segmentLoader, mediaType); // switch back to default audio track\n\n    const activeTrack = mediaType.activeTrack();\n    const activeGroup = mediaType.activeGroup();\n    const id = (activeGroup.filter(group => group.default)[0] || activeGroup[0]).id;\n    const defaultTrack = mediaType.tracks[id];\n    if (activeTrack === defaultTrack) {\n      // Default track encountered an error. All we can do now is exclude the current\n      // rendition and hope another will switch audio groups\n      excludePlaylist({\n        error: {\n          message: 'Problem encountered loading the default audio track.'\n        }\n      });\n      return;\n    }\n    videojs.log.warn('Problem encountered loading the alternate audio track.' + 'Switching back to default.');\n    for (const trackId in mediaType.tracks) {\n      mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;\n    }\n    mediaType.onTrackChanged();\n  },\n  /**\n   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters\n   * an error.\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Error handler. Logs warning to console and disables the active subtitle track\n   * @function onError.SUBTITLES\n   */\n  SUBTITLES: (type, settings) => () => {\n    const {\n      segmentLoaders: {\n        [type]: segmentLoader\n      },\n      mediaTypes: {\n        [type]: mediaType\n      }\n    } = settings;\n    videojs.log.warn('Problem encountered loading the subtitle track.' + 'Disabling subtitle track.');\n    stopLoaders(segmentLoader, mediaType);\n    const track = mediaType.activeTrack();\n    if (track) {\n      track.mode = 'disabled';\n    }\n    mediaType.onTrackChanged();\n  }\n};\nconst setupListeners = {\n  /**\n   * Setup event listeners for audio playlist loader\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.AUDIO\n   */\n  AUDIO: (type, playlistLoader, settings) => {\n    if (!playlistLoader) {\n      // no playlist loader means audio will be muxed with the video\n      return;\n    }\n    const {\n      tech,\n      requestOptions,\n      segmentLoaders: {\n        [type]: segmentLoader\n      }\n    } = settings;\n    playlistLoader.on('loadedmetadata', () => {\n      const media = playlistLoader.media();\n      segmentLoader.playlist(media, requestOptions); // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('loadedplaylist', () => {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions); // If the player isn't paused, ensure that the segment loader is running\n\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup event listeners for subtitle playlist loader\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {PlaylistLoader|null} playlistLoader\n   *        PlaylistLoader to register listeners on\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function setupListeners.SUBTITLES\n   */\n  SUBTITLES: (type, playlistLoader, settings) => {\n    const {\n      tech,\n      requestOptions,\n      segmentLoaders: {\n        [type]: segmentLoader\n      },\n      mediaTypes: {\n        [type]: mediaType\n      }\n    } = settings;\n    playlistLoader.on('loadedmetadata', () => {\n      const media = playlistLoader.media();\n      segmentLoader.playlist(media, requestOptions);\n      segmentLoader.track(mediaType.activeTrack()); // if the video is already playing, or if this isn't a live video and preload\n      // permits, start downloading segments\n\n      if (!tech.paused() || media.endList && tech.preload() !== 'none') {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('loadedplaylist', () => {\n      segmentLoader.playlist(playlistLoader.media(), requestOptions); // If the player isn't paused, ensure that the segment loader is running\n\n      if (!tech.paused()) {\n        segmentLoader.load();\n      }\n    });\n    playlistLoader.on('error', onError[type](type, settings));\n  }\n};\nconst initialize = {\n  /**\n   * Setup PlaylistLoaders and AudioTracks for the audio groups\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.AUDIO\n   */\n  'AUDIO': (type, settings) => {\n    const {\n      vhs,\n      sourceType,\n      segmentLoaders: {\n        [type]: segmentLoader\n      },\n      requestOptions,\n      main: {\n        mediaGroups\n      },\n      mediaTypes: {\n        [type]: {\n          groups,\n          tracks,\n          logger_\n        }\n      },\n      mainPlaylistLoader\n    } = settings;\n    const audioOnlyMain = isAudioOnly(mainPlaylistLoader.main); // force a default if we have none\n\n    if (!mediaGroups[type] || Object.keys(mediaGroups[type]).length === 0) {\n      mediaGroups[type] = {\n        main: {\n          default: {\n            default: true\n          }\n        }\n      };\n      if (audioOnlyMain) {\n        mediaGroups[type].main.default.playlists = mainPlaylistLoader.main.playlists;\n      }\n    }\n    for (const groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n      for (const variantLabel in mediaGroups[type][groupId]) {\n        let properties = mediaGroups[type][groupId][variantLabel];\n        let playlistLoader;\n        if (audioOnlyMain) {\n          logger_(`AUDIO group '${groupId}' label '${variantLabel}' is a main playlist`);\n          properties.isMainPlaylist = true;\n          playlistLoader = null; // if vhs-json was provided as the source, and the media playlist was resolved,\n          // use the resolved media playlist object\n        } else if (sourceType === 'vhs-json' && properties.playlists) {\n          playlistLoader = new PlaylistLoader(properties.playlists[0], vhs, requestOptions);\n        } else if (properties.resolvedUri) {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, vhs, requestOptions); // TODO: dash isn't the only type with properties.playlists\n          // should we even have properties.playlists in this check.\n        } else if (properties.playlists && sourceType === 'dash') {\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], vhs, requestOptions, mainPlaylistLoader);\n        } else {\n          // no resolvedUri means the audio is muxed with the video when using this\n          // audio track\n          playlistLoader = null;\n        }\n        properties = merge({\n          id: variantLabel,\n          playlistLoader\n        }, properties);\n        setupListeners[type](type, properties.playlistLoader, settings);\n        groups[groupId].push(properties);\n        if (typeof tracks[variantLabel] === 'undefined') {\n          const track = new videojs.AudioTrack({\n            id: variantLabel,\n            kind: audioTrackKind_(properties),\n            enabled: false,\n            language: properties.language,\n            default: properties.default,\n            label: variantLabel\n          });\n          tracks[variantLabel] = track;\n        }\n      }\n    } // setup single error event handler for the segment loader\n\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup PlaylistLoaders and TextTracks for the subtitle groups\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize.SUBTITLES\n   */\n  'SUBTITLES': (type, settings) => {\n    const {\n      tech,\n      vhs,\n      sourceType,\n      segmentLoaders: {\n        [type]: segmentLoader\n      },\n      requestOptions,\n      main: {\n        mediaGroups\n      },\n      mediaTypes: {\n        [type]: {\n          groups,\n          tracks\n        }\n      },\n      mainPlaylistLoader\n    } = settings;\n    for (const groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n      for (const variantLabel in mediaGroups[type][groupId]) {\n        if (mediaGroups[type][groupId][variantLabel].forced) {\n          // Subtitle playlists with the forced attribute are not selectable in Safari.\n          // According to Apple's HLS Authoring Specification:\n          //   If content has forced subtitles and regular subtitles in a given language,\n          //   the regular subtitles track in that language MUST contain both the forced\n          //   subtitles and the regular subtitles for that language.\n          // Because of this requirement and that Safari does not add forced subtitles,\n          // forced subtitles are skipped here to maintain consistent experience across\n          // all platforms\n          continue;\n        }\n        let properties = mediaGroups[type][groupId][variantLabel];\n        let playlistLoader;\n        if (sourceType === 'hls') {\n          playlistLoader = new PlaylistLoader(properties.resolvedUri, vhs, requestOptions);\n        } else if (sourceType === 'dash') {\n          const playlists = properties.playlists.filter(p => p.excludeUntil !== Infinity);\n          if (!playlists.length) {\n            return;\n          }\n          playlistLoader = new DashPlaylistLoader(properties.playlists[0], vhs, requestOptions, mainPlaylistLoader);\n        } else if (sourceType === 'vhs-json') {\n          playlistLoader = new PlaylistLoader(\n          // if the vhs-json object included the media playlist, use the media playlist\n          // as provided, otherwise use the resolved URI to load the playlist\n          properties.playlists ? properties.playlists[0] : properties.resolvedUri, vhs, requestOptions);\n        }\n        properties = merge({\n          id: variantLabel,\n          playlistLoader\n        }, properties);\n        setupListeners[type](type, properties.playlistLoader, settings);\n        groups[groupId].push(properties);\n        if (typeof tracks[variantLabel] === 'undefined') {\n          const track = tech.addRemoteTextTrack({\n            id: variantLabel,\n            kind: 'subtitles',\n            default: properties.default && properties.autoselect,\n            language: properties.language,\n            label: variantLabel\n          }, false).track;\n          tracks[variantLabel] = track;\n        }\n      }\n    } // setup single error event handler for the segment loader\n\n    segmentLoader.on('error', onError[type](type, settings));\n  },\n  /**\n   * Setup TextTracks for the closed-caption groups\n   *\n   * @param {String} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @function initialize['CLOSED-CAPTIONS']\n   */\n  'CLOSED-CAPTIONS': (type, settings) => {\n    const {\n      tech,\n      main: {\n        mediaGroups\n      },\n      mediaTypes: {\n        [type]: {\n          groups,\n          tracks\n        }\n      }\n    } = settings;\n    for (const groupId in mediaGroups[type]) {\n      if (!groups[groupId]) {\n        groups[groupId] = [];\n      }\n      for (const variantLabel in mediaGroups[type][groupId]) {\n        const properties = mediaGroups[type][groupId][variantLabel]; // Look for either 608 (CCn) or 708 (SERVICEn) caption services\n\n        if (!/^(?:CC|SERVICE)/.test(properties.instreamId)) {\n          continue;\n        }\n        const captionServices = tech.options_.vhs && tech.options_.vhs.captionServices || {};\n        let newProps = {\n          label: variantLabel,\n          language: properties.language,\n          instreamId: properties.instreamId,\n          default: properties.default && properties.autoselect\n        };\n        if (captionServices[newProps.instreamId]) {\n          newProps = merge(newProps, captionServices[newProps.instreamId]);\n        }\n        if (newProps.default === undefined) {\n          delete newProps.default;\n        } // No PlaylistLoader is required for Closed-Captions because the captions are\n        // embedded within the video stream\n\n        groups[groupId].push(merge({\n          id: variantLabel\n        }, properties));\n        if (typeof tracks[variantLabel] === 'undefined') {\n          const track = tech.addRemoteTextTrack({\n            id: newProps.instreamId,\n            kind: 'captions',\n            default: newProps.default,\n            language: newProps.language,\n            label: newProps.label\n          }, false).track;\n          tracks[variantLabel] = track;\n        }\n      }\n    }\n  }\n};\nconst groupMatch = (list, media) => {\n  for (let i = 0; i < list.length; i++) {\n    if (playlistMatch(media, list[i])) {\n      return true;\n    }\n    if (list[i].playlists && groupMatch(list[i].playlists, media)) {\n      return true;\n    }\n  }\n  return false;\n};\n/**\n * Returns a function used to get the active group of the provided type\n *\n * @param {string} type\n *        MediaGroup type\n * @param {Object} settings\n *        Object containing required information for media groups\n * @return {Function}\n *         Function that returns the active media group for the provided type. Takes an\n *         optional parameter {TextTrack} track. If no track is provided, a list of all\n *         variants in the group, otherwise the variant corresponding to the provided\n *         track is returned.\n * @function activeGroup\n */\n\nconst activeGroup = (type, settings) => track => {\n  const {\n    mainPlaylistLoader,\n    mediaTypes: {\n      [type]: {\n        groups\n      }\n    }\n  } = settings;\n  const media = mainPlaylistLoader.media();\n  if (!media) {\n    return null;\n  }\n  let variants = null; // set to variants to main media active group\n\n  if (media.attributes[type]) {\n    variants = groups[media.attributes[type]];\n  }\n  const groupKeys = Object.keys(groups);\n  if (!variants) {\n    // find the mainPlaylistLoader media\n    // that is in a media group if we are dealing\n    // with audio only\n    if (type === 'AUDIO' && groupKeys.length > 1 && isAudioOnly(settings.main)) {\n      for (let i = 0; i < groupKeys.length; i++) {\n        const groupPropertyList = groups[groupKeys[i]];\n        if (groupMatch(groupPropertyList, media)) {\n          variants = groupPropertyList;\n          break;\n        }\n      } // use the main group if it exists\n    } else if (groups.main) {\n      variants = groups.main; // only one group, use that one\n    } else if (groupKeys.length === 1) {\n      variants = groups[groupKeys[0]];\n    }\n  }\n  if (typeof track === 'undefined') {\n    return variants;\n  }\n  if (track === null || !variants) {\n    // An active track was specified so a corresponding group is expected. track === null\n    // means no track is currently active so there is no corresponding group\n    return null;\n  }\n  return variants.filter(props => props.id === track.id)[0] || null;\n};\nconst activeTrack = {\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.AUDIO\n   */\n  AUDIO: (type, settings) => () => {\n    const {\n      mediaTypes: {\n        [type]: {\n          tracks\n        }\n      }\n    } = settings;\n    for (const id in tracks) {\n      if (tracks[id].enabled) {\n        return tracks[id];\n      }\n    }\n    return null;\n  },\n  /**\n   * Returns a function used to get the active track of type provided\n   *\n   * @param {string} type\n   *        MediaGroup type\n   * @param {Object} settings\n   *        Object containing required information for media groups\n   * @return {Function}\n   *         Function that returns the active media track for the provided type. Returns\n   *         null if no track is active\n   * @function activeTrack.SUBTITLES\n   */\n  SUBTITLES: (type, settings) => () => {\n    const {\n      mediaTypes: {\n        [type]: {\n          tracks\n        }\n      }\n    } = settings;\n    for (const id in tracks) {\n      if (tracks[id].mode === 'showing' || tracks[id].mode === 'hidden') {\n        return tracks[id];\n      }\n    }\n    return null;\n  }\n};\nconst getActiveGroup = (type, {\n  mediaTypes\n}) => () => {\n  const activeTrack_ = mediaTypes[type].activeTrack();\n  if (!activeTrack_) {\n    return null;\n  }\n  return mediaTypes[type].activeGroup(activeTrack_);\n};\n/**\n * Setup PlaylistLoaders and Tracks for media groups (Audio, Subtitles,\n * Closed-Captions) specified in the main manifest.\n *\n * @param {Object} settings\n *        Object containing required information for setting up the media groups\n * @param {Tech} settings.tech\n *        The tech of the player\n * @param {Object} settings.requestOptions\n *        XHR request options used by the segment loaders\n * @param {PlaylistLoader} settings.mainPlaylistLoader\n *        PlaylistLoader for the main source\n * @param {VhsHandler} settings.vhs\n *        VHS SourceHandler\n * @param {Object} settings.main\n *        The parsed main manifest\n * @param {Object} settings.mediaTypes\n *        Object to store the loaders, tracks, and utility methods for each media type\n * @param {Function} settings.excludePlaylist\n *        Excludes the current rendition and forces a rendition switch.\n * @function setupMediaGroups\n */\n\nconst setupMediaGroups = settings => {\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(type => {\n    initialize[type](type, settings);\n  });\n  const {\n    mediaTypes,\n    mainPlaylistLoader,\n    tech,\n    vhs,\n    segmentLoaders: {\n      ['AUDIO']: audioSegmentLoader,\n      main: mainSegmentLoader\n    }\n  } = settings; // setup active group and track getters and change event handlers\n\n  ['AUDIO', 'SUBTITLES'].forEach(type => {\n    mediaTypes[type].activeGroup = activeGroup(type, settings);\n    mediaTypes[type].activeTrack = activeTrack[type](type, settings);\n    mediaTypes[type].onGroupChanged = onGroupChanged(type, settings);\n    mediaTypes[type].onGroupChanging = onGroupChanging(type, settings);\n    mediaTypes[type].onTrackChanged = onTrackChanged(type, settings);\n    mediaTypes[type].getActiveGroup = getActiveGroup(type, settings);\n  }); // DO NOT enable the default subtitle or caption track.\n  // DO enable the default audio track\n\n  const audioGroup = mediaTypes.AUDIO.activeGroup();\n  if (audioGroup) {\n    const groupId = (audioGroup.filter(group => group.default)[0] || audioGroup[0]).id;\n    mediaTypes.AUDIO.tracks[groupId].enabled = true;\n    mediaTypes.AUDIO.onGroupChanged();\n    mediaTypes.AUDIO.onTrackChanged();\n    const activeAudioGroup = mediaTypes.AUDIO.getActiveGroup(); // a similar check for handling setAudio on each loader is run again each time the\n    // track is changed, but needs to be handled here since the track may not be considered\n    // changed on the first call to onTrackChanged\n\n    if (!activeAudioGroup.playlistLoader) {\n      // either audio is muxed with video or the stream is audio only\n      mainSegmentLoader.setAudio(true);\n    } else {\n      // audio is demuxed\n      mainSegmentLoader.setAudio(false);\n      audioSegmentLoader.setAudio(true);\n    }\n  }\n  mainPlaylistLoader.on('mediachange', () => {\n    ['AUDIO', 'SUBTITLES'].forEach(type => mediaTypes[type].onGroupChanged());\n  });\n  mainPlaylistLoader.on('mediachanging', () => {\n    ['AUDIO', 'SUBTITLES'].forEach(type => mediaTypes[type].onGroupChanging());\n  }); // custom audio track change event handler for usage event\n\n  const onAudioTrackChanged = () => {\n    mediaTypes.AUDIO.onTrackChanged();\n    tech.trigger({\n      type: 'usage',\n      name: 'vhs-audio-change'\n    });\n  };\n  tech.audioTracks().addEventListener('change', onAudioTrackChanged);\n  tech.remoteTextTracks().addEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n  vhs.on('dispose', () => {\n    tech.audioTracks().removeEventListener('change', onAudioTrackChanged);\n    tech.remoteTextTracks().removeEventListener('change', mediaTypes.SUBTITLES.onTrackChanged);\n  }); // clear existing audio tracks and add the ones we just created\n\n  tech.clearTracks('audio');\n  for (const id in mediaTypes.AUDIO.tracks) {\n    tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);\n  }\n};\n/**\n * Creates skeleton object used to store the loaders, tracks, and utility methods for each\n * media type\n *\n * @return {Object}\n *         Object to store the loaders, tracks, and utility methods for each media type\n * @function createMediaTypes\n */\n\nconst createMediaTypes = () => {\n  const mediaTypes = {};\n  ['AUDIO', 'SUBTITLES', 'CLOSED-CAPTIONS'].forEach(type => {\n    mediaTypes[type] = {\n      groups: {},\n      tracks: {},\n      activePlaylistLoader: null,\n      activeGroup: noop,\n      activeTrack: noop,\n      getActiveGroup: noop,\n      onGroupChanged: noop,\n      onTrackChanged: noop,\n      lastTrack_: null,\n      logger_: logger(`MediaGroups[${type}]`)\n    };\n  });\n  return mediaTypes;\n};\n\n/**\n * @file playlist-controller.js\n */\nconst ABORT_EARLY_EXCLUSION_SECONDS = 60 * 2;\nlet Vhs$1; // SegmentLoader stats that need to have each loader's\n// values summed to calculate the final value\n\nconst loaderStats = ['mediaRequests', 'mediaRequestsAborted', 'mediaRequestsTimedout', 'mediaRequestsErrored', 'mediaTransferDuration', 'mediaBytesTransferred', 'mediaAppends'];\nconst sumLoaderStat = function (stat) {\n  return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];\n};\nconst shouldSwitchToMedia = function ({\n  currentPlaylist,\n  buffered,\n  currentTime,\n  nextPlaylist,\n  bufferLowWaterLine,\n  bufferHighWaterLine,\n  duration,\n  bufferBasedABR,\n  log\n}) {\n  // we have no other playlist to switch to\n  if (!nextPlaylist) {\n    videojs.log.warn('We received no playlist to switch to. Please check your stream.');\n    return false;\n  }\n  const sharedLogLine = `allowing switch ${currentPlaylist && currentPlaylist.id || 'null'} -> ${nextPlaylist.id}`;\n  if (!currentPlaylist) {\n    log(`${sharedLogLine} as current playlist is not set`);\n    return true;\n  } // no need to switch if playlist is the same\n\n  if (nextPlaylist.id === currentPlaylist.id) {\n    return false;\n  } // determine if current time is in a buffered range.\n\n  const isBuffered = Boolean(findRange(buffered, currentTime).length); // If the playlist is live, then we want to not take low water line into account.\n  // This is because in LIVE, the player plays 3 segments from the end of the\n  // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble\n  // in those segments, a viewer will never experience a rendition upswitch.\n\n  if (!currentPlaylist.endList) {\n    // For LLHLS live streams, don't switch renditions before playback has started, as it almost\n    // doubles the time to first playback.\n    if (!isBuffered && typeof currentPlaylist.partTargetDuration === 'number') {\n      log(`not ${sharedLogLine} as current playlist is live llhls, but currentTime isn't in buffered.`);\n      return false;\n    }\n    log(`${sharedLogLine} as current playlist is live`);\n    return true;\n  }\n  const forwardBuffer = timeAheadOf(buffered, currentTime);\n  const maxBufferLowWaterLine = bufferBasedABR ? Config.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE : Config.MAX_BUFFER_LOW_WATER_LINE; // For the same reason as LIVE, we ignore the low water line when the VOD\n  // duration is below the max potential low water line\n\n  if (duration < maxBufferLowWaterLine) {\n    log(`${sharedLogLine} as duration < max low water line (${duration} < ${maxBufferLowWaterLine})`);\n    return true;\n  }\n  const nextBandwidth = nextPlaylist.attributes.BANDWIDTH;\n  const currBandwidth = currentPlaylist.attributes.BANDWIDTH; // when switching down, if our buffer is lower than the high water line,\n  // we can switch down\n\n  if (nextBandwidth < currBandwidth && (!bufferBasedABR || forwardBuffer < bufferHighWaterLine)) {\n    let logLine = `${sharedLogLine} as next bandwidth < current bandwidth (${nextBandwidth} < ${currBandwidth})`;\n    if (bufferBasedABR) {\n      logLine += ` and forwardBuffer < bufferHighWaterLine (${forwardBuffer} < ${bufferHighWaterLine})`;\n    }\n    log(logLine);\n    return true;\n  } // and if our buffer is higher than the low water line,\n  // we can switch up\n\n  if ((!bufferBasedABR || nextBandwidth > currBandwidth) && forwardBuffer >= bufferLowWaterLine) {\n    let logLine = `${sharedLogLine} as forwardBuffer >= bufferLowWaterLine (${forwardBuffer} >= ${bufferLowWaterLine})`;\n    if (bufferBasedABR) {\n      logLine += ` and next bandwidth > current bandwidth (${nextBandwidth} > ${currBandwidth})`;\n    }\n    log(logLine);\n    return true;\n  }\n  log(`not ${sharedLogLine} as no switching criteria met`);\n  return false;\n};\n/**\n * the main playlist controller controller all interactons\n * between playlists and segmentloaders. At this time this mainly\n * involves a main playlist and a series of audio playlists\n * if they are available\n *\n * @class PlaylistController\n * @extends videojs.EventTarget\n */\n\nclass PlaylistController extends videojs.EventTarget {\n  constructor(options) {\n    super();\n    const {\n      src,\n      withCredentials,\n      tech,\n      bandwidth,\n      externVhs,\n      useCueTags,\n      playlistExclusionDuration,\n      enableLowInitialPlaylist,\n      sourceType,\n      cacheEncryptionKeys,\n      bufferBasedABR,\n      leastPixelDiffSelector,\n      captionServices\n    } = options;\n    if (!src) {\n      throw new Error('A non-empty playlist URL or JSON manifest string is required');\n    }\n    let {\n      maxPlaylistRetries\n    } = options;\n    if (maxPlaylistRetries === null || typeof maxPlaylistRetries === 'undefined') {\n      maxPlaylistRetries = Infinity;\n    }\n    Vhs$1 = externVhs;\n    this.bufferBasedABR = Boolean(bufferBasedABR);\n    this.leastPixelDiffSelector = Boolean(leastPixelDiffSelector);\n    this.withCredentials = withCredentials;\n    this.tech_ = tech;\n    this.vhs_ = tech.vhs;\n    this.sourceType_ = sourceType;\n    this.useCueTags_ = useCueTags;\n    this.playlistExclusionDuration = playlistExclusionDuration;\n    this.maxPlaylistRetries = maxPlaylistRetries;\n    this.enableLowInitialPlaylist = enableLowInitialPlaylist;\n    if (this.useCueTags_) {\n      this.cueTagsTrack_ = this.tech_.addTextTrack('metadata', 'ad-cues');\n      this.cueTagsTrack_.inBandMetadataTrackDispatchType = '';\n    }\n    this.requestOptions_ = {\n      withCredentials,\n      maxPlaylistRetries,\n      timeout: null\n    };\n    this.on('error', this.pauseLoading);\n    this.mediaTypes_ = createMediaTypes();\n    this.mediaSource = new window$1.MediaSource();\n    this.handleDurationChange_ = this.handleDurationChange_.bind(this);\n    this.handleSourceOpen_ = this.handleSourceOpen_.bind(this);\n    this.handleSourceEnded_ = this.handleSourceEnded_.bind(this);\n    this.mediaSource.addEventListener('durationchange', this.handleDurationChange_); // load the media source into the player\n\n    this.mediaSource.addEventListener('sourceopen', this.handleSourceOpen_);\n    this.mediaSource.addEventListener('sourceended', this.handleSourceEnded_); // we don't have to handle sourceclose since dispose will handle termination of\n    // everything, and the MediaSource should not be detached without a proper disposal\n\n    this.seekable_ = createTimeRanges();\n    this.hasPlayed_ = false;\n    this.syncController_ = new SyncController(options);\n    this.segmentMetadataTrack_ = tech.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'segment-metadata'\n    }, false).track;\n    this.decrypter_ = new Decrypter();\n    this.sourceUpdater_ = new SourceUpdater(this.mediaSource);\n    this.inbandTextTracks_ = {};\n    this.timelineChangeController_ = new TimelineChangeController();\n    const segmentLoaderSettings = {\n      vhs: this.vhs_,\n      parse708captions: options.parse708captions,\n      useDtsForTimestampOffset: options.useDtsForTimestampOffset,\n      captionServices,\n      mediaSource: this.mediaSource,\n      currentTime: this.tech_.currentTime.bind(this.tech_),\n      seekable: () => this.seekable(),\n      seeking: () => this.tech_.seeking(),\n      duration: () => this.duration(),\n      hasPlayed: () => this.hasPlayed_,\n      goalBufferLength: () => this.goalBufferLength(),\n      bandwidth,\n      syncController: this.syncController_,\n      decrypter: this.decrypter_,\n      sourceType: this.sourceType_,\n      inbandTextTracks: this.inbandTextTracks_,\n      cacheEncryptionKeys,\n      sourceUpdater: this.sourceUpdater_,\n      timelineChangeController: this.timelineChangeController_,\n      exactManifestTimings: options.exactManifestTimings\n    }; // The source type check not only determines whether a special DASH playlist loader\n    // should be used, but also covers the case where the provided src is a vhs-json\n    // manifest object (instead of a URL). In the case of vhs-json, the default\n    // PlaylistLoader should be used.\n\n    this.mainPlaylistLoader_ = this.sourceType_ === 'dash' ? new DashPlaylistLoader(src, this.vhs_, this.requestOptions_) : new PlaylistLoader(src, this.vhs_, this.requestOptions_);\n    this.setupMainPlaylistLoaderListeners_(); // setup segment loaders\n    // combined audio/video or just video when alternate audio track is selected\n\n    this.mainSegmentLoader_ = new SegmentLoader(merge(segmentLoaderSettings, {\n      segmentMetadataTrack: this.segmentMetadataTrack_,\n      loaderType: 'main'\n    }), options); // alternate audio track\n\n    this.audioSegmentLoader_ = new SegmentLoader(merge(segmentLoaderSettings, {\n      loaderType: 'audio'\n    }), options);\n    this.subtitleSegmentLoader_ = new VTTSegmentLoader(merge(segmentLoaderSettings, {\n      loaderType: 'vtt',\n      featuresNativeTextTracks: this.tech_.featuresNativeTextTracks,\n      loadVttJs: () => new Promise((resolve, reject) => {\n        function onLoad() {\n          tech.off('vttjserror', onError);\n          resolve();\n        }\n        function onError() {\n          tech.off('vttjsloaded', onLoad);\n          reject();\n        }\n        tech.one('vttjsloaded', onLoad);\n        tech.one('vttjserror', onError); // safe to call multiple times, script will be loaded only once:\n\n        tech.addWebVttScript_();\n      })\n    }), options);\n    this.setupSegmentLoaderListeners_();\n    if (this.bufferBasedABR) {\n      this.mainPlaylistLoader_.one('loadedplaylist', () => this.startABRTimer_());\n      this.tech_.on('pause', () => this.stopABRTimer_());\n      this.tech_.on('play', () => this.startABRTimer_());\n    } // Create SegmentLoader stat-getters\n    // mediaRequests_\n    // mediaRequestsAborted_\n    // mediaRequestsTimedout_\n    // mediaRequestsErrored_\n    // mediaTransferDuration_\n    // mediaBytesTransferred_\n    // mediaAppends_\n\n    loaderStats.forEach(stat => {\n      this[stat + '_'] = sumLoaderStat.bind(this, stat);\n    });\n    this.logger_ = logger('pc');\n    this.triggeredFmp4Usage = false;\n    if (this.tech_.preload() === 'none') {\n      this.loadOnPlay_ = () => {\n        this.loadOnPlay_ = null;\n        this.mainPlaylistLoader_.load();\n      };\n      this.tech_.one('play', this.loadOnPlay_);\n    } else {\n      this.mainPlaylistLoader_.load();\n    }\n    this.timeToLoadedData__ = -1;\n    this.mainAppendsToLoadedData__ = -1;\n    this.audioAppendsToLoadedData__ = -1;\n    const event = this.tech_.preload() === 'none' ? 'play' : 'loadstart'; // start the first frame timer on loadstart or play (for preload none)\n\n    this.tech_.one(event, () => {\n      const timeToLoadedDataStart = Date.now();\n      this.tech_.one('loadeddata', () => {\n        this.timeToLoadedData__ = Date.now() - timeToLoadedDataStart;\n        this.mainAppendsToLoadedData__ = this.mainSegmentLoader_.mediaAppends;\n        this.audioAppendsToLoadedData__ = this.audioSegmentLoader_.mediaAppends;\n      });\n    });\n  }\n  mainAppendsToLoadedData_() {\n    return this.mainAppendsToLoadedData__;\n  }\n  audioAppendsToLoadedData_() {\n    return this.audioAppendsToLoadedData__;\n  }\n  appendsToLoadedData_() {\n    const main = this.mainAppendsToLoadedData_();\n    const audio = this.audioAppendsToLoadedData_();\n    if (main === -1 || audio === -1) {\n      return -1;\n    }\n    return main + audio;\n  }\n  timeToLoadedData_() {\n    return this.timeToLoadedData__;\n  }\n  /**\n   * Run selectPlaylist and switch to the new playlist if we should\n   *\n   * @param {string} [reason=abr] a reason for why the ABR check is made\n   * @private\n   */\n\n  checkABR_(reason = 'abr') {\n    const nextPlaylist = this.selectPlaylist();\n    if (nextPlaylist && this.shouldSwitchToMedia_(nextPlaylist)) {\n      this.switchMedia_(nextPlaylist, reason);\n    }\n  }\n  switchMedia_(playlist, cause, delay) {\n    const oldMedia = this.media();\n    const oldId = oldMedia && (oldMedia.id || oldMedia.uri);\n    const newId = playlist.id || playlist.uri;\n    if (oldId && oldId !== newId) {\n      this.logger_(`switch media ${oldId} -> ${newId} from ${cause}`);\n      this.tech_.trigger({\n        type: 'usage',\n        name: `vhs-rendition-change-${cause}`\n      });\n    }\n    this.mainPlaylistLoader_.media(playlist, delay);\n  }\n  /**\n   * Start a timer that periodically calls checkABR_\n   *\n   * @private\n   */\n\n  startABRTimer_() {\n    this.stopABRTimer_();\n    this.abrTimer_ = window$1.setInterval(() => this.checkABR_(), 250);\n  }\n  /**\n   * Stop the timer that periodically calls checkABR_\n   *\n   * @private\n   */\n\n  stopABRTimer_() {\n    // if we're scrubbing, we don't need to pause.\n    // This getter will be added to Video.js in version 7.11.\n    if (this.tech_.scrubbing && this.tech_.scrubbing()) {\n      return;\n    }\n    window$1.clearInterval(this.abrTimer_);\n    this.abrTimer_ = null;\n  }\n  /**\n   * Get a list of playlists for the currently selected audio playlist\n   *\n   * @return {Array} the array of audio playlists\n   */\n\n  getAudioTrackPlaylists_() {\n    const main = this.main();\n    const defaultPlaylists = main && main.playlists || []; // if we don't have any audio groups then we can only\n    // assume that the audio tracks are contained in main\n    // playlist array, use that or an empty array.\n\n    if (!main || !main.mediaGroups || !main.mediaGroups.AUDIO) {\n      return defaultPlaylists;\n    }\n    const AUDIO = main.mediaGroups.AUDIO;\n    const groupKeys = Object.keys(AUDIO);\n    let track; // get the current active track\n\n    if (Object.keys(this.mediaTypes_.AUDIO.groups).length) {\n      track = this.mediaTypes_.AUDIO.activeTrack(); // or get the default track from main if mediaTypes_ isn't setup yet\n    } else {\n      // default group is `main` or just the first group.\n      const defaultGroup = AUDIO.main || groupKeys.length && AUDIO[groupKeys[0]];\n      for (const label in defaultGroup) {\n        if (defaultGroup[label].default) {\n          track = {\n            label\n          };\n          break;\n        }\n      }\n    } // no active track no playlists.\n\n    if (!track) {\n      return defaultPlaylists;\n    }\n    const playlists = []; // get all of the playlists that are possible for the\n    // active track.\n\n    for (const group in AUDIO) {\n      if (AUDIO[group][track.label]) {\n        const properties = AUDIO[group][track.label];\n        if (properties.playlists && properties.playlists.length) {\n          playlists.push.apply(playlists, properties.playlists);\n        } else if (properties.uri) {\n          playlists.push(properties);\n        } else if (main.playlists.length) {\n          // if an audio group does not have a uri\n          // see if we have main playlists that use it as a group.\n          // if we do then add those to the playlists list.\n          for (let i = 0; i < main.playlists.length; i++) {\n            const playlist = main.playlists[i];\n            if (playlist.attributes && playlist.attributes.AUDIO && playlist.attributes.AUDIO === group) {\n              playlists.push(playlist);\n            }\n          }\n        }\n      }\n    }\n    if (!playlists.length) {\n      return defaultPlaylists;\n    }\n    return playlists;\n  }\n  /**\n   * Register event handlers on the main playlist loader. A helper\n   * function for construction time.\n   *\n   * @private\n   */\n\n  setupMainPlaylistLoaderListeners_() {\n    this.mainPlaylistLoader_.on('loadedmetadata', () => {\n      const media = this.mainPlaylistLoader_.media();\n      const requestTimeout = media.targetDuration * 1.5 * 1000; // If we don't have any more available playlists, we don't want to\n      // timeout the request.\n\n      if (isLowestEnabledRendition(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.media())) {\n        this.requestOptions_.timeout = 0;\n      } else {\n        this.requestOptions_.timeout = requestTimeout;\n      } // if this isn't a live video and preload permits, start\n      // downloading segments\n\n      if (media.endList && this.tech_.preload() !== 'none') {\n        this.mainSegmentLoader_.playlist(media, this.requestOptions_);\n        this.mainSegmentLoader_.load();\n      }\n      setupMediaGroups({\n        sourceType: this.sourceType_,\n        segmentLoaders: {\n          AUDIO: this.audioSegmentLoader_,\n          SUBTITLES: this.subtitleSegmentLoader_,\n          main: this.mainSegmentLoader_\n        },\n        tech: this.tech_,\n        requestOptions: this.requestOptions_,\n        mainPlaylistLoader: this.mainPlaylistLoader_,\n        vhs: this.vhs_,\n        main: this.main(),\n        mediaTypes: this.mediaTypes_,\n        excludePlaylist: this.excludePlaylist.bind(this)\n      });\n      this.triggerPresenceUsage_(this.main(), media);\n      this.setupFirstPlay();\n      if (!this.mediaTypes_.AUDIO.activePlaylistLoader || this.mediaTypes_.AUDIO.activePlaylistLoader.media()) {\n        this.trigger('selectedinitialmedia');\n      } else {\n        // We must wait for the active audio playlist loader to\n        // finish setting up before triggering this event so the\n        // representations API and EME setup is correct\n        this.mediaTypes_.AUDIO.activePlaylistLoader.one('loadedmetadata', () => {\n          this.trigger('selectedinitialmedia');\n        });\n      }\n    });\n    this.mainPlaylistLoader_.on('loadedplaylist', () => {\n      if (this.loadOnPlay_) {\n        this.tech_.off('play', this.loadOnPlay_);\n      }\n      let updatedPlaylist = this.mainPlaylistLoader_.media();\n      if (!updatedPlaylist) {\n        // exclude any variants that are not supported by the browser before selecting\n        // an initial media as the playlist selectors do not consider browser support\n        this.excludeUnsupportedVariants_();\n        let selectedMedia;\n        if (this.enableLowInitialPlaylist) {\n          selectedMedia = this.selectInitialPlaylist();\n        }\n        if (!selectedMedia) {\n          selectedMedia = this.selectPlaylist();\n        }\n        if (!selectedMedia || !this.shouldSwitchToMedia_(selectedMedia)) {\n          return;\n        }\n        this.initialMedia_ = selectedMedia;\n        this.switchMedia_(this.initialMedia_, 'initial'); // Under the standard case where a source URL is provided, loadedplaylist will\n        // fire again since the playlist will be requested. In the case of vhs-json\n        // (where the manifest object is provided as the source), when the media\n        // playlist's `segments` list is already available, a media playlist won't be\n        // requested, and loadedplaylist won't fire again, so the playlist handler must be\n        // called on its own here.\n\n        const haveJsonSource = this.sourceType_ === 'vhs-json' && this.initialMedia_.segments;\n        if (!haveJsonSource) {\n          return;\n        }\n        updatedPlaylist = this.initialMedia_;\n      }\n      this.handleUpdatedMediaPlaylist(updatedPlaylist);\n    });\n    this.mainPlaylistLoader_.on('error', () => {\n      const error = this.mainPlaylistLoader_.error;\n      this.excludePlaylist({\n        playlistToExclude: error.playlist,\n        error\n      });\n    });\n    this.mainPlaylistLoader_.on('mediachanging', () => {\n      this.mainSegmentLoader_.abort();\n      this.mainSegmentLoader_.pause();\n    });\n    this.mainPlaylistLoader_.on('mediachange', () => {\n      const media = this.mainPlaylistLoader_.media();\n      const requestTimeout = media.targetDuration * 1.5 * 1000; // If we don't have any more available playlists, we don't want to\n      // timeout the request.\n\n      if (isLowestEnabledRendition(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.media())) {\n        this.requestOptions_.timeout = 0;\n      } else {\n        this.requestOptions_.timeout = requestTimeout;\n      }\n      this.mainPlaylistLoader_.load(); // TODO: Create a new event on the PlaylistLoader that signals\n      // that the segments have changed in some way and use that to\n      // update the SegmentLoader instead of doing it twice here and\n      // on `loadedplaylist`\n\n      this.mainSegmentLoader_.playlist(media, this.requestOptions_);\n      this.mainSegmentLoader_.load();\n      this.tech_.trigger({\n        type: 'mediachange',\n        bubbles: true\n      });\n    });\n    this.mainPlaylistLoader_.on('playlistunchanged', () => {\n      const updatedPlaylist = this.mainPlaylistLoader_.media(); // ignore unchanged playlists that have already been\n      // excluded for not-changing. We likely just have a really slowly updating\n      // playlist.\n\n      if (updatedPlaylist.lastExcludeReason_ === 'playlist-unchanged') {\n        return;\n      }\n      const playlistOutdated = this.stuckAtPlaylistEnd_(updatedPlaylist);\n      if (playlistOutdated) {\n        // Playlist has stopped updating and we're stuck at its end. Try to\n        // exclude it and switch to another playlist in the hope that that\n        // one is updating (and give the player a chance to re-adjust to the\n        // safe live point).\n        this.excludePlaylist({\n          error: {\n            message: 'Playlist no longer updating.',\n            reason: 'playlist-unchanged'\n          }\n        }); // useful for monitoring QoS\n\n        this.tech_.trigger('playliststuck');\n      }\n    });\n    this.mainPlaylistLoader_.on('renditiondisabled', () => {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-rendition-disabled'\n      });\n    });\n    this.mainPlaylistLoader_.on('renditionenabled', () => {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-rendition-enabled'\n      });\n    });\n  }\n  /**\n   * Given an updated media playlist (whether it was loaded for the first time, or\n   * refreshed for live playlists), update any relevant properties and state to reflect\n   * changes in the media that should be accounted for (e.g., cues and duration).\n   *\n   * @param {Object} updatedPlaylist the updated media playlist object\n   *\n   * @private\n   */\n\n  handleUpdatedMediaPlaylist(updatedPlaylist) {\n    if (this.useCueTags_) {\n      this.updateAdCues_(updatedPlaylist);\n    } // TODO: Create a new event on the PlaylistLoader that signals\n    // that the segments have changed in some way and use that to\n    // update the SegmentLoader instead of doing it twice here and\n    // on `mediachange`\n\n    this.mainSegmentLoader_.playlist(updatedPlaylist, this.requestOptions_);\n    this.updateDuration(!updatedPlaylist.endList); // If the player isn't paused, ensure that the segment loader is running,\n    // as it is possible that it was temporarily stopped while waiting for\n    // a playlist (e.g., in case the playlist errored and we re-requested it).\n\n    if (!this.tech_.paused()) {\n      this.mainSegmentLoader_.load();\n      if (this.audioSegmentLoader_) {\n        this.audioSegmentLoader_.load();\n      }\n    }\n  }\n  /**\n   * A helper function for triggerring presence usage events once per source\n   *\n   * @private\n   */\n\n  triggerPresenceUsage_(main, media) {\n    const mediaGroups = main.mediaGroups || {};\n    let defaultDemuxed = true;\n    const audioGroupKeys = Object.keys(mediaGroups.AUDIO);\n    for (const mediaGroup in mediaGroups.AUDIO) {\n      for (const label in mediaGroups.AUDIO[mediaGroup]) {\n        const properties = mediaGroups.AUDIO[mediaGroup][label];\n        if (!properties.uri) {\n          defaultDemuxed = false;\n        }\n      }\n    }\n    if (defaultDemuxed) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-demuxed'\n      });\n    }\n    if (Object.keys(mediaGroups.SUBTITLES).length) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-webvtt'\n      });\n    }\n    if (Vhs$1.Playlist.isAes(media)) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-aes'\n      });\n    }\n    if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-alternate-audio'\n      });\n    }\n    if (this.useCueTags_) {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-playlist-cue-tags'\n      });\n    }\n  }\n  shouldSwitchToMedia_(nextPlaylist) {\n    const currentPlaylist = this.mainPlaylistLoader_.media() || this.mainPlaylistLoader_.pendingMedia_;\n    const currentTime = this.tech_.currentTime();\n    const bufferLowWaterLine = this.bufferLowWaterLine();\n    const bufferHighWaterLine = this.bufferHighWaterLine();\n    const buffered = this.tech_.buffered();\n    return shouldSwitchToMedia({\n      buffered,\n      currentTime,\n      currentPlaylist,\n      nextPlaylist,\n      bufferLowWaterLine,\n      bufferHighWaterLine,\n      duration: this.duration(),\n      bufferBasedABR: this.bufferBasedABR,\n      log: this.logger_\n    });\n  }\n  /**\n   * Register event handlers on the segment loaders. A helper function\n   * for construction time.\n   *\n   * @private\n   */\n\n  setupSegmentLoaderListeners_() {\n    this.mainSegmentLoader_.on('bandwidthupdate', () => {\n      // Whether or not buffer based ABR or another ABR is used, on a bandwidth change it's\n      // useful to check to see if a rendition switch should be made.\n      this.checkABR_('bandwidthupdate');\n      this.tech_.trigger('bandwidthupdate');\n    });\n    this.mainSegmentLoader_.on('timeout', () => {\n      if (this.bufferBasedABR) {\n        // If a rendition change is needed, then it would've be done on `bandwidthupdate`.\n        // Here the only consideration is that for buffer based ABR there's no guarantee\n        // of an immediate switch (since the bandwidth is averaged with a timeout\n        // bandwidth value of 1), so force a load on the segment loader to keep it going.\n        this.mainSegmentLoader_.load();\n      }\n    }); // `progress` events are not reliable enough of a bandwidth measure to trigger buffer\n    // based ABR.\n\n    if (!this.bufferBasedABR) {\n      this.mainSegmentLoader_.on('progress', () => {\n        this.trigger('progress');\n      });\n    }\n    this.mainSegmentLoader_.on('error', () => {\n      const error = this.mainSegmentLoader_.error();\n      this.excludePlaylist({\n        playlistToExclude: error.playlist,\n        error\n      });\n    });\n    this.mainSegmentLoader_.on('appenderror', () => {\n      this.error = this.mainSegmentLoader_.error_;\n      this.trigger('error');\n    });\n    this.mainSegmentLoader_.on('syncinfoupdate', () => {\n      this.onSyncInfoUpdate_();\n    });\n    this.mainSegmentLoader_.on('timestampoffset', () => {\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-timestamp-offset'\n      });\n    });\n    this.audioSegmentLoader_.on('syncinfoupdate', () => {\n      this.onSyncInfoUpdate_();\n    });\n    this.audioSegmentLoader_.on('appenderror', () => {\n      this.error = this.audioSegmentLoader_.error_;\n      this.trigger('error');\n    });\n    this.mainSegmentLoader_.on('ended', () => {\n      this.logger_('main segment loader ended');\n      this.onEndOfStream();\n    });\n    this.mainSegmentLoader_.on('earlyabort', event => {\n      // never try to early abort with the new ABR algorithm\n      if (this.bufferBasedABR) {\n        return;\n      }\n      this.delegateLoaders_('all', ['abort']);\n      this.excludePlaylist({\n        error: {\n          message: 'Aborted early because there isn\\'t enough bandwidth to complete ' + 'the request without rebuffering.'\n        },\n        playlistExclusionDuration: ABORT_EARLY_EXCLUSION_SECONDS\n      });\n    });\n    const updateCodecs = () => {\n      if (!this.sourceUpdater_.hasCreatedSourceBuffers()) {\n        return this.tryToCreateSourceBuffers_();\n      }\n      const codecs = this.getCodecsOrExclude_(); // no codecs means that the playlist was excluded\n\n      if (!codecs) {\n        return;\n      }\n      this.sourceUpdater_.addOrChangeSourceBuffers(codecs);\n    };\n    this.mainSegmentLoader_.on('trackinfo', updateCodecs);\n    this.audioSegmentLoader_.on('trackinfo', updateCodecs);\n    this.mainSegmentLoader_.on('fmp4', () => {\n      if (!this.triggeredFmp4Usage) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'vhs-fmp4'\n        });\n        this.triggeredFmp4Usage = true;\n      }\n    });\n    this.audioSegmentLoader_.on('fmp4', () => {\n      if (!this.triggeredFmp4Usage) {\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'vhs-fmp4'\n        });\n        this.triggeredFmp4Usage = true;\n      }\n    });\n    this.audioSegmentLoader_.on('ended', () => {\n      this.logger_('audioSegmentLoader ended');\n      this.onEndOfStream();\n    });\n  }\n  mediaSecondsLoaded_() {\n    return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);\n  }\n  /**\n   * Call load on our SegmentLoaders\n   */\n\n  load() {\n    this.mainSegmentLoader_.load();\n    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n      this.audioSegmentLoader_.load();\n    }\n    if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n      this.subtitleSegmentLoader_.load();\n    }\n  }\n  /**\n   * Re-tune playback quality level for the current player\n   * conditions. This method will perform destructive actions like removing\n   * already buffered content in order to readjust the currently active\n   * playlist quickly. This is good for manual quality changes\n   *\n   * @private\n   */\n\n  fastQualityChange_(media = this.selectPlaylist()) {\n    if (media === this.mainPlaylistLoader_.media()) {\n      this.logger_('skipping fastQualityChange because new media is same as old');\n      return;\n    }\n    this.switchMedia_(media, 'fast-quality'); // Delete all buffered data to allow an immediate quality switch, then seek to give\n    // the browser a kick to remove any cached frames from the previous rendtion (.04 seconds\n    // ahead is roughly the minimum that will accomplish this across a variety of content\n    // in IE and Edge, but seeking in place is sufficient on all other browsers)\n    // Edge/IE bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14600375/\n    // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=651904\n\n    this.mainSegmentLoader_.resetEverything(() => {\n      // Since this is not a typical seek, we avoid the seekTo method which can cause segments\n      // from the previously enabled rendition to load before the new playlist has finished loading\n      if (videojs.browser.IE_VERSION || videojs.browser.IS_EDGE) {\n        this.tech_.setCurrentTime(this.tech_.currentTime() + 0.04);\n      } else {\n        this.tech_.setCurrentTime(this.tech_.currentTime());\n      }\n    }); // don't need to reset audio as it is reset when media changes\n  }\n  /**\n   * Begin playback.\n   */\n\n  play() {\n    if (this.setupFirstPlay()) {\n      return;\n    }\n    if (this.tech_.ended()) {\n      this.tech_.setCurrentTime(0);\n    }\n    if (this.hasPlayed_) {\n      this.load();\n    }\n    const seekable = this.tech_.seekable(); // if the viewer has paused and we fell out of the live window,\n    // seek forward to the live point\n\n    if (this.tech_.duration() === Infinity) {\n      if (this.tech_.currentTime() < seekable.start(0)) {\n        return this.tech_.setCurrentTime(seekable.end(seekable.length - 1));\n      }\n    }\n  }\n  /**\n   * Seek to the latest media position if this is a live video and the\n   * player and video are loaded and initialized.\n   */\n\n  setupFirstPlay() {\n    const media = this.mainPlaylistLoader_.media(); // Check that everything is ready to begin buffering for the first call to play\n    //  If 1) there is no active media\n    //     2) the player is paused\n    //     3) the first play has already been setup\n    // then exit early\n\n    if (!media || this.tech_.paused() || this.hasPlayed_) {\n      return false;\n    } // when the video is a live stream\n\n    if (!media.endList) {\n      const seekable = this.seekable();\n      if (!seekable.length) {\n        // without a seekable range, the player cannot seek to begin buffering at the live\n        // point\n        return false;\n      }\n      if (videojs.browser.IE_VERSION && this.tech_.readyState() === 0) {\n        // IE11 throws an InvalidStateError if you try to set currentTime while the\n        // readyState is 0, so it must be delayed until the tech fires loadedmetadata.\n        this.tech_.one('loadedmetadata', () => {\n          this.trigger('firstplay');\n          this.tech_.setCurrentTime(seekable.end(0));\n          this.hasPlayed_ = true;\n        });\n        return false;\n      } // trigger firstplay to inform the source handler to ignore the next seek event\n\n      this.trigger('firstplay'); // seek to the live point\n\n      this.tech_.setCurrentTime(seekable.end(0));\n    }\n    this.hasPlayed_ = true; // we can begin loading now that everything is ready\n\n    this.load();\n    return true;\n  }\n  /**\n   * handle the sourceopen event on the MediaSource\n   *\n   * @private\n   */\n\n  handleSourceOpen_() {\n    // Only attempt to create the source buffer if none already exist.\n    // handleSourceOpen is also called when we are \"re-opening\" a source buffer\n    // after `endOfStream` has been called (in response to a seek for instance)\n    this.tryToCreateSourceBuffers_(); // if autoplay is enabled, begin playback. This is duplicative of\n    // code in video.js but is required because play() must be invoked\n    // *after* the media source has opened.\n\n    if (this.tech_.autoplay()) {\n      const playPromise = this.tech_.play(); // Catch/silence error when a pause interrupts a play request\n      // on browsers which return a promise\n\n      if (typeof playPromise !== 'undefined' && typeof playPromise.then === 'function') {\n        playPromise.then(null, e => {});\n      }\n    }\n    this.trigger('sourceopen');\n  }\n  /**\n   * handle the sourceended event on the MediaSource\n   *\n   * @private\n   */\n\n  handleSourceEnded_() {\n    if (!this.inbandTextTracks_.metadataTrack_) {\n      return;\n    }\n    const cues = this.inbandTextTracks_.metadataTrack_.cues;\n    if (!cues || !cues.length) {\n      return;\n    }\n    const duration = this.duration();\n    cues[cues.length - 1].endTime = isNaN(duration) || Math.abs(duration) === Infinity ? Number.MAX_VALUE : duration;\n  }\n  /**\n   * handle the durationchange event on the MediaSource\n   *\n   * @private\n   */\n\n  handleDurationChange_() {\n    this.tech_.trigger('durationchange');\n  }\n  /**\n   * Calls endOfStream on the media source when all active stream types have called\n   * endOfStream\n   *\n   * @param {string} streamType\n   *        Stream type of the segment loader that called endOfStream\n   * @private\n   */\n\n  onEndOfStream() {\n    let isEndOfStream = this.mainSegmentLoader_.ended_;\n    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n      const mainMediaInfo = this.mainSegmentLoader_.getCurrentMediaInfo_(); // if the audio playlist loader exists, then alternate audio is active\n\n      if (!mainMediaInfo || mainMediaInfo.hasVideo) {\n        // if we do not know if the main segment loader contains video yet or if we\n        // definitively know the main segment loader contains video, then we need to wait\n        // for both main and audio segment loaders to call endOfStream\n        isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;\n      } else {\n        // otherwise just rely on the audio loader\n        isEndOfStream = this.audioSegmentLoader_.ended_;\n      }\n    }\n    if (!isEndOfStream) {\n      return;\n    }\n    this.stopABRTimer_();\n    this.sourceUpdater_.endOfStream();\n  }\n  /**\n   * Check if a playlist has stopped being updated\n   *\n   * @param {Object} playlist the media playlist object\n   * @return {boolean} whether the playlist has stopped being updated or not\n   */\n\n  stuckAtPlaylistEnd_(playlist) {\n    const seekable = this.seekable();\n    if (!seekable.length) {\n      // playlist doesn't have enough information to determine whether we are stuck\n      return false;\n    }\n    const expired = this.syncController_.getExpiredTime(playlist, this.duration());\n    if (expired === null) {\n      return false;\n    } // does not use the safe live end to calculate playlist end, since we\n    // don't want to say we are stuck while there is still content\n\n    const absolutePlaylistEnd = Vhs$1.Playlist.playlistEnd(playlist, expired);\n    const currentTime = this.tech_.currentTime();\n    const buffered = this.tech_.buffered();\n    if (!buffered.length) {\n      // return true if the playhead reached the absolute end of the playlist\n      return absolutePlaylistEnd - currentTime <= SAFE_TIME_DELTA;\n    }\n    const bufferedEnd = buffered.end(buffered.length - 1); // return true if there is too little buffer left and buffer has reached absolute\n    // end of playlist\n\n    return bufferedEnd - currentTime <= SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= SAFE_TIME_DELTA;\n  }\n  /**\n   * Exclude a playlist for a set amount of time, making it unavailable for selection by\n   * the rendition selection algorithm, then force a new playlist (rendition) selection.\n   *\n   * @param {Object=} playlistToExclude\n   *                  the playlist to exclude, defaults to the currently selected playlist\n   * @param {Object=} error\n   *                  an optional error\n   * @param {number=} playlistExclusionDuration\n   *                  an optional number of seconds to exclude the playlist\n   */\n\n  excludePlaylist({\n    playlistToExclude = this.mainPlaylistLoader_.media(),\n    error = {},\n    playlistExclusionDuration\n  }) {\n    // If the `error` was generated by the playlist loader, it will contain\n    // the playlist we were trying to load (but failed) and that should be\n    // excluded instead of the currently selected playlist which is likely\n    // out-of-date in this scenario\n    playlistToExclude = playlistToExclude || this.mainPlaylistLoader_.media();\n    playlistExclusionDuration = playlistExclusionDuration || error.playlistExclusionDuration || this.playlistExclusionDuration; // If there is no current playlist, then an error occurred while we were\n    // trying to load the main OR while we were disposing of the tech\n\n    if (!playlistToExclude) {\n      this.error = error;\n      if (this.mediaSource.readyState !== 'open') {\n        this.trigger('error');\n      } else {\n        this.sourceUpdater_.endOfStream('network');\n      }\n      return;\n    }\n    playlistToExclude.playlistErrors_++;\n    const playlists = this.mainPlaylistLoader_.main.playlists;\n    const enabledPlaylists = playlists.filter(isEnabled);\n    const isFinalRendition = enabledPlaylists.length === 1 && enabledPlaylists[0] === playlistToExclude; // Don't exclude the only playlist unless it was excluded\n    // forever\n\n    if (playlists.length === 1 && playlistExclusionDuration !== Infinity) {\n      videojs.log.warn(`Problem encountered with playlist ${playlistToExclude.id}. ` + 'Trying again since it is the only playlist.');\n      this.tech_.trigger('retryplaylist'); // if this is a final rendition, we should delay\n\n      return this.mainPlaylistLoader_.load(isFinalRendition);\n    }\n    if (isFinalRendition) {\n      // Since we're on the final non-excluded playlist, and we're about to exclude\n      // it, instead of erring the player or retrying this playlist, clear out the current\n      // exclusion list. This allows other playlists to be attempted in case any have been\n      // fixed.\n      let reincluded = false;\n      playlists.forEach(playlist => {\n        // skip current playlist which is about to be excluded\n        if (playlist === playlistToExclude) {\n          return;\n        }\n        const excludeUntil = playlist.excludeUntil; // a playlist cannot be reincluded if it wasn't excluded to begin with.\n\n        if (typeof excludeUntil !== 'undefined' && excludeUntil !== Infinity) {\n          reincluded = true;\n          delete playlist.excludeUntil;\n        }\n      });\n      if (reincluded) {\n        videojs.log.warn('Removing other playlists from the exclusion list because the last ' + 'rendition is about to be excluded.'); // Technically we are retrying a playlist, in that we are simply retrying a previous\n        // playlist. This is needed for users relying on the retryplaylist event to catch a\n        // case where the player might be stuck and looping through \"dead\" playlists.\n\n        this.tech_.trigger('retryplaylist');\n      }\n    } // Exclude this playlist\n\n    let excludeUntil;\n    if (playlistToExclude.playlistErrors_ > this.maxPlaylistRetries) {\n      excludeUntil = Infinity;\n    } else {\n      excludeUntil = Date.now() + playlistExclusionDuration * 1000;\n    }\n    playlistToExclude.excludeUntil = excludeUntil;\n    if (error.reason) {\n      playlistToExclude.lastExcludeReason_ = error.reason;\n    }\n    this.tech_.trigger('excludeplaylist');\n    this.tech_.trigger({\n      type: 'usage',\n      name: 'vhs-rendition-excluded'\n    }); // TODO: only load a new playlist if we're excluding the current playlist\n    // If this function was called with a playlist that's not the current active playlist\n    // (e.g., media().id !== playlistToExclude.id),\n    // then a new playlist should not be selected and loaded, as there's nothing wrong with the current playlist.\n\n    const nextPlaylist = this.selectPlaylist();\n    if (!nextPlaylist) {\n      this.error = 'Playback cannot continue. No available working or supported playlists.';\n      this.trigger('error');\n      return;\n    }\n    const logFn = error.internal ? this.logger_ : videojs.log.warn;\n    const errorMessage = error.message ? ' ' + error.message : '';\n    logFn(`${error.internal ? 'Internal problem' : 'Problem'} encountered with playlist ${playlistToExclude.id}.` + `${errorMessage} Switching to playlist ${nextPlaylist.id}.`); // if audio group changed reset audio loaders\n\n    if (nextPlaylist.attributes.AUDIO !== playlistToExclude.attributes.AUDIO) {\n      this.delegateLoaders_('audio', ['abort', 'pause']);\n    } // if subtitle group changed reset subtitle loaders\n\n    if (nextPlaylist.attributes.SUBTITLES !== playlistToExclude.attributes.SUBTITLES) {\n      this.delegateLoaders_('subtitle', ['abort', 'pause']);\n    }\n    this.delegateLoaders_('main', ['abort', 'pause']);\n    const delayDuration = nextPlaylist.targetDuration / 2 * 1000 || 5 * 1000;\n    const shouldDelay = typeof nextPlaylist.lastRequest === 'number' && Date.now() - nextPlaylist.lastRequest <= delayDuration; // delay if it's a final rendition or if the last refresh is sooner than half targetDuration\n\n    return this.switchMedia_(nextPlaylist, 'exclude', isFinalRendition || shouldDelay);\n  }\n  /**\n   * Pause all segment/playlist loaders\n   */\n\n  pauseLoading() {\n    this.delegateLoaders_('all', ['abort', 'pause']);\n    this.stopABRTimer_();\n  }\n  /**\n   * Call a set of functions in order on playlist loaders, segment loaders,\n   * or both types of loaders.\n   *\n   * @param {string} filter\n   *        Filter loaders that should call fnNames using a string. Can be:\n   *        * all - run on all loaders\n   *        * audio - run on all audio loaders\n   *        * subtitle - run on all subtitle loaders\n   *        * main - run on the main loaders\n   *\n   * @param {Array|string} fnNames\n   *        A string or array of function names to call.\n   */\n\n  delegateLoaders_(filter, fnNames) {\n    const loaders = [];\n    const dontFilterPlaylist = filter === 'all';\n    if (dontFilterPlaylist || filter === 'main') {\n      loaders.push(this.mainPlaylistLoader_);\n    }\n    const mediaTypes = [];\n    if (dontFilterPlaylist || filter === 'audio') {\n      mediaTypes.push('AUDIO');\n    }\n    if (dontFilterPlaylist || filter === 'subtitle') {\n      mediaTypes.push('CLOSED-CAPTIONS');\n      mediaTypes.push('SUBTITLES');\n    }\n    mediaTypes.forEach(mediaType => {\n      const loader = this.mediaTypes_[mediaType] && this.mediaTypes_[mediaType].activePlaylistLoader;\n      if (loader) {\n        loaders.push(loader);\n      }\n    });\n    ['main', 'audio', 'subtitle'].forEach(name => {\n      const loader = this[`${name}SegmentLoader_`];\n      if (loader && (filter === name || filter === 'all')) {\n        loaders.push(loader);\n      }\n    });\n    loaders.forEach(loader => fnNames.forEach(fnName => {\n      if (typeof loader[fnName] === 'function') {\n        loader[fnName]();\n      }\n    }));\n  }\n  /**\n   * set the current time on all segment loaders\n   *\n   * @param {TimeRange} currentTime the current time to set\n   * @return {TimeRange} the current time\n   */\n\n  setCurrentTime(currentTime) {\n    const buffered = findRange(this.tech_.buffered(), currentTime);\n    if (!(this.mainPlaylistLoader_ && this.mainPlaylistLoader_.media())) {\n      // return immediately if the metadata is not ready yet\n      return 0;\n    } // it's clearly an edge-case but don't thrown an error if asked to\n    // seek within an empty playlist\n\n    if (!this.mainPlaylistLoader_.media().segments) {\n      return 0;\n    } // if the seek location is already buffered, continue buffering as usual\n\n    if (buffered && buffered.length) {\n      return currentTime;\n    } // cancel outstanding requests so we begin buffering at the new\n    // location\n\n    this.mainSegmentLoader_.resetEverything();\n    this.mainSegmentLoader_.abort();\n    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n      this.audioSegmentLoader_.resetEverything();\n      this.audioSegmentLoader_.abort();\n    }\n    if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {\n      this.subtitleSegmentLoader_.resetEverything();\n      this.subtitleSegmentLoader_.abort();\n    } // start segment loader loading in case they are paused\n\n    this.load();\n  }\n  /**\n   * get the current duration\n   *\n   * @return {TimeRange} the duration\n   */\n\n  duration() {\n    if (!this.mainPlaylistLoader_) {\n      return 0;\n    }\n    const media = this.mainPlaylistLoader_.media();\n    if (!media) {\n      // no playlists loaded yet, so can't determine a duration\n      return 0;\n    } // Don't rely on the media source for duration in the case of a live playlist since\n    // setting the native MediaSource's duration to infinity ends up with consequences to\n    // seekable behavior. See https://github.com/w3c/media-source/issues/5 for details.\n    //\n    // This is resolved in the spec by https://github.com/w3c/media-source/pull/92,\n    // however, few browsers have support for setLiveSeekableRange()\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange\n    //\n    // Until a time when the duration of the media source can be set to infinity, and a\n    // seekable range specified across browsers, just return Infinity.\n\n    if (!media.endList) {\n      return Infinity;\n    } // Since this is a VOD video, it is safe to rely on the media source's duration (if\n    // available). If it's not available, fall back to a playlist-calculated estimate.\n\n    if (this.mediaSource) {\n      return this.mediaSource.duration;\n    }\n    return Vhs$1.Playlist.duration(media);\n  }\n  /**\n   * check the seekable range\n   *\n   * @return {TimeRange} the seekable range\n   */\n\n  seekable() {\n    return this.seekable_;\n  }\n  onSyncInfoUpdate_() {\n    let audioSeekable; // TODO check for creation of both source buffers before updating seekable\n    //\n    // A fix was made to this function where a check for\n    // this.sourceUpdater_.hasCreatedSourceBuffers\n    // was added to ensure that both source buffers were created before seekable was\n    // updated. However, it originally had a bug where it was checking for a true and\n    // returning early instead of checking for false. Setting it to check for false to\n    // return early though created other issues. A call to play() would check for seekable\n    // end without verifying that a seekable range was present. In addition, even checking\n    // for that didn't solve some issues, as handleFirstPlay is sometimes worked around\n    // due to a media update calling load on the segment loaders, skipping a seek to live,\n    // thereby starting live streams at the beginning of the stream rather than at the end.\n    //\n    // This conditional should be fixed to wait for the creation of two source buffers at\n    // the same time as the other sections of code are fixed to properly seek to live and\n    // not throw an error due to checking for a seekable end when no seekable range exists.\n    //\n    // For now, fall back to the older behavior, with the understanding that the seekable\n    // range may not be completely correct, leading to a suboptimal initial live point.\n\n    if (!this.mainPlaylistLoader_) {\n      return;\n    }\n    let media = this.mainPlaylistLoader_.media();\n    if (!media) {\n      return;\n    }\n    let expired = this.syncController_.getExpiredTime(media, this.duration());\n    if (expired === null) {\n      // not enough information to update seekable\n      return;\n    }\n    const main = this.mainPlaylistLoader_.main;\n    const mainSeekable = Vhs$1.Playlist.seekable(media, expired, Vhs$1.Playlist.liveEdgeDelay(main, media));\n    if (mainSeekable.length === 0) {\n      return;\n    }\n    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {\n      media = this.mediaTypes_.AUDIO.activePlaylistLoader.media();\n      expired = this.syncController_.getExpiredTime(media, this.duration());\n      if (expired === null) {\n        return;\n      }\n      audioSeekable = Vhs$1.Playlist.seekable(media, expired, Vhs$1.Playlist.liveEdgeDelay(main, media));\n      if (audioSeekable.length === 0) {\n        return;\n      }\n    }\n    let oldEnd;\n    let oldStart;\n    if (this.seekable_ && this.seekable_.length) {\n      oldEnd = this.seekable_.end(0);\n      oldStart = this.seekable_.start(0);\n    }\n    if (!audioSeekable) {\n      // seekable has been calculated based on buffering video data so it\n      // can be returned directly\n      this.seekable_ = mainSeekable;\n    } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {\n      // seekables are pretty far off, rely on main\n      this.seekable_ = mainSeekable;\n    } else {\n      this.seekable_ = createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);\n    } // seekable is the same as last time\n\n    if (this.seekable_ && this.seekable_.length) {\n      if (this.seekable_.end(0) === oldEnd && this.seekable_.start(0) === oldStart) {\n        return;\n      }\n    }\n    this.logger_(`seekable updated [${printableRange(this.seekable_)}]`);\n    this.tech_.trigger('seekablechanged');\n  }\n  /**\n   * Update the player duration\n   */\n\n  updateDuration(isLive) {\n    if (this.updateDuration_) {\n      this.mediaSource.removeEventListener('sourceopen', this.updateDuration_);\n      this.updateDuration_ = null;\n    }\n    if (this.mediaSource.readyState !== 'open') {\n      this.updateDuration_ = this.updateDuration.bind(this, isLive);\n      this.mediaSource.addEventListener('sourceopen', this.updateDuration_);\n      return;\n    }\n    if (isLive) {\n      const seekable = this.seekable();\n      if (!seekable.length) {\n        return;\n      } // Even in the case of a live playlist, the native MediaSource's duration should not\n      // be set to Infinity (even though this would be expected for a live playlist), since\n      // setting the native MediaSource's duration to infinity ends up with consequences to\n      // seekable behavior. See https://github.com/w3c/media-source/issues/5 for details.\n      //\n      // This is resolved in the spec by https://github.com/w3c/media-source/pull/92,\n      // however, few browsers have support for setLiveSeekableRange()\n      // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange\n      //\n      // Until a time when the duration of the media source can be set to infinity, and a\n      // seekable range specified across browsers, the duration should be greater than or\n      // equal to the last possible seekable value.\n      // MediaSource duration starts as NaN\n      // It is possible (and probable) that this case will never be reached for many\n      // sources, since the MediaSource reports duration as the highest value without\n      // accounting for timestamp offset. For example, if the timestamp offset is -100 and\n      // we buffered times 0 to 100 with real times of 100 to 200, even though current\n      // time will be between 0 and 100, the native media source may report the duration\n      // as 200. However, since we report duration separate from the media source (as\n      // Infinity), and as long as the native media source duration value is greater than\n      // our reported seekable range, seeks will work as expected. The large number as\n      // duration for live is actually a strategy used by some players to work around the\n      // issue of live seekable ranges cited above.\n\n      if (isNaN(this.mediaSource.duration) || this.mediaSource.duration < seekable.end(seekable.length - 1)) {\n        this.sourceUpdater_.setDuration(seekable.end(seekable.length - 1));\n      }\n      return;\n    }\n    const buffered = this.tech_.buffered();\n    let duration = Vhs$1.Playlist.duration(this.mainPlaylistLoader_.media());\n    if (buffered.length > 0) {\n      duration = Math.max(duration, buffered.end(buffered.length - 1));\n    }\n    if (this.mediaSource.duration !== duration) {\n      this.sourceUpdater_.setDuration(duration);\n    }\n  }\n  /**\n   * dispose of the PlaylistController and everything\n   * that it controls\n   */\n\n  dispose() {\n    this.trigger('dispose');\n    this.decrypter_.terminate();\n    this.mainPlaylistLoader_.dispose();\n    this.mainSegmentLoader_.dispose();\n    if (this.loadOnPlay_) {\n      this.tech_.off('play', this.loadOnPlay_);\n    }\n    ['AUDIO', 'SUBTITLES'].forEach(type => {\n      const groups = this.mediaTypes_[type].groups;\n      for (const id in groups) {\n        groups[id].forEach(group => {\n          if (group.playlistLoader) {\n            group.playlistLoader.dispose();\n          }\n        });\n      }\n    });\n    this.audioSegmentLoader_.dispose();\n    this.subtitleSegmentLoader_.dispose();\n    this.sourceUpdater_.dispose();\n    this.timelineChangeController_.dispose();\n    this.stopABRTimer_();\n    if (this.updateDuration_) {\n      this.mediaSource.removeEventListener('sourceopen', this.updateDuration_);\n    }\n    this.mediaSource.removeEventListener('durationchange', this.handleDurationChange_); // load the media source into the player\n\n    this.mediaSource.removeEventListener('sourceopen', this.handleSourceOpen_);\n    this.mediaSource.removeEventListener('sourceended', this.handleSourceEnded_);\n    this.off();\n  }\n  /**\n   * return the main playlist object if we have one\n   *\n   * @return {Object} the main playlist object that we parsed\n   */\n\n  main() {\n    return this.mainPlaylistLoader_.main;\n  }\n  /**\n   * return the currently selected playlist\n   *\n   * @return {Object} the currently selected playlist object that we parsed\n   */\n\n  media() {\n    // playlist loader will not return media if it has not been fully loaded\n    return this.mainPlaylistLoader_.media() || this.initialMedia_;\n  }\n  areMediaTypesKnown_() {\n    const usingAudioLoader = !!this.mediaTypes_.AUDIO.activePlaylistLoader;\n    const hasMainMediaInfo = !!this.mainSegmentLoader_.getCurrentMediaInfo_(); // if we are not using an audio loader, then we have audio media info\n    // otherwise check on the segment loader.\n\n    const hasAudioMediaInfo = !usingAudioLoader ? true : !!this.audioSegmentLoader_.getCurrentMediaInfo_(); // one or both loaders has not loaded sufficently to get codecs\n\n    if (!hasMainMediaInfo || !hasAudioMediaInfo) {\n      return false;\n    }\n    return true;\n  }\n  getCodecsOrExclude_() {\n    const media = {\n      main: this.mainSegmentLoader_.getCurrentMediaInfo_() || {},\n      audio: this.audioSegmentLoader_.getCurrentMediaInfo_() || {}\n    };\n    const playlist = this.mainSegmentLoader_.getPendingSegmentPlaylist() || this.media(); // set \"main\" media equal to video\n\n    media.video = media.main;\n    const playlistCodecs = codecsForPlaylist(this.main(), playlist);\n    const codecs = {};\n    const usingAudioLoader = !!this.mediaTypes_.AUDIO.activePlaylistLoader;\n    if (media.main.hasVideo) {\n      codecs.video = playlistCodecs.video || media.main.videoCodec || DEFAULT_VIDEO_CODEC;\n    }\n    if (media.main.isMuxed) {\n      codecs.video += `,${playlistCodecs.audio || media.main.audioCodec || DEFAULT_AUDIO_CODEC}`;\n    }\n    if (media.main.hasAudio && !media.main.isMuxed || media.audio.hasAudio || usingAudioLoader) {\n      codecs.audio = playlistCodecs.audio || media.main.audioCodec || media.audio.audioCodec || DEFAULT_AUDIO_CODEC; // set audio isFmp4 so we use the correct \"supports\" function below\n\n      media.audio.isFmp4 = media.main.hasAudio && !media.main.isMuxed ? media.main.isFmp4 : media.audio.isFmp4;\n    } // no codecs, no playback.\n\n    if (!codecs.audio && !codecs.video) {\n      this.excludePlaylist({\n        playlistToExclude: playlist,\n        error: {\n          message: 'Could not determine codecs for playlist.'\n        },\n        playlistExclusionDuration: Infinity\n      });\n      return;\n    } // fmp4 relies on browser support, while ts relies on muxer support\n\n    const supportFunction = (isFmp4, codec) => isFmp4 ? browserSupportsCodec(codec) : muxerSupportsCodec(codec);\n    const unsupportedCodecs = {};\n    let unsupportedAudio;\n    ['video', 'audio'].forEach(function (type) {\n      if (codecs.hasOwnProperty(type) && !supportFunction(media[type].isFmp4, codecs[type])) {\n        const supporter = media[type].isFmp4 ? 'browser' : 'muxer';\n        unsupportedCodecs[supporter] = unsupportedCodecs[supporter] || [];\n        unsupportedCodecs[supporter].push(codecs[type]);\n        if (type === 'audio') {\n          unsupportedAudio = supporter;\n        }\n      }\n    });\n    if (usingAudioLoader && unsupportedAudio && playlist.attributes.AUDIO) {\n      const audioGroup = playlist.attributes.AUDIO;\n      this.main().playlists.forEach(variant => {\n        const variantAudioGroup = variant.attributes && variant.attributes.AUDIO;\n        if (variantAudioGroup === audioGroup && variant !== playlist) {\n          variant.excludeUntil = Infinity;\n        }\n      });\n      this.logger_(`excluding audio group ${audioGroup} as ${unsupportedAudio} does not support codec(s): \"${codecs.audio}\"`);\n    } // if we have any unsupported codecs exclude this playlist.\n\n    if (Object.keys(unsupportedCodecs).length) {\n      const message = Object.keys(unsupportedCodecs).reduce((acc, supporter) => {\n        if (acc) {\n          acc += ', ';\n        }\n        acc += `${supporter} does not support codec(s): \"${unsupportedCodecs[supporter].join(',')}\"`;\n        return acc;\n      }, '') + '.';\n      this.excludePlaylist({\n        playlistToExclude: playlist,\n        error: {\n          internal: true,\n          message\n        },\n        playlistExclusionDuration: Infinity\n      });\n      return;\n    } // check if codec switching is happening\n\n    if (this.sourceUpdater_.hasCreatedSourceBuffers() && !this.sourceUpdater_.canChangeType()) {\n      const switchMessages = [];\n      ['video', 'audio'].forEach(type => {\n        const newCodec = (parseCodecs(this.sourceUpdater_.codecs[type] || '')[0] || {}).type;\n        const oldCodec = (parseCodecs(codecs[type] || '')[0] || {}).type;\n        if (newCodec && oldCodec && newCodec.toLowerCase() !== oldCodec.toLowerCase()) {\n          switchMessages.push(`\"${this.sourceUpdater_.codecs[type]}\" -> \"${codecs[type]}\"`);\n        }\n      });\n      if (switchMessages.length) {\n        this.excludePlaylist({\n          playlistToExclude: playlist,\n          error: {\n            message: `Codec switching not supported: ${switchMessages.join(', ')}.`,\n            internal: true\n          },\n          playlistExclusionDuration: Infinity\n        });\n        return;\n      }\n    } // TODO: when using the muxer shouldn't we just return\n    // the codecs that the muxer outputs?\n\n    return codecs;\n  }\n  /**\n   * Create source buffers and exlude any incompatible renditions.\n   *\n   * @private\n   */\n\n  tryToCreateSourceBuffers_() {\n    // media source is not ready yet or sourceBuffers are already\n    // created.\n    if (this.mediaSource.readyState !== 'open' || this.sourceUpdater_.hasCreatedSourceBuffers()) {\n      return;\n    }\n    if (!this.areMediaTypesKnown_()) {\n      return;\n    }\n    const codecs = this.getCodecsOrExclude_(); // no codecs means that the playlist was excluded\n\n    if (!codecs) {\n      return;\n    }\n    this.sourceUpdater_.createSourceBuffers(codecs);\n    const codecString = [codecs.video, codecs.audio].filter(Boolean).join(',');\n    this.excludeIncompatibleVariants_(codecString);\n  }\n  /**\n   * Excludes playlists with codecs that are unsupported by the muxer and browser.\n   */\n\n  excludeUnsupportedVariants_() {\n    const playlists = this.main().playlists;\n    const ids = []; // TODO: why don't we have a property to loop through all\n    // playlist? Why did we ever mix indexes and keys?\n\n    Object.keys(playlists).forEach(key => {\n      const variant = playlists[key]; // check if we already processed this playlist.\n\n      if (ids.indexOf(variant.id) !== -1) {\n        return;\n      }\n      ids.push(variant.id);\n      const codecs = codecsForPlaylist(this.main, variant);\n      const unsupported = [];\n      if (codecs.audio && !muxerSupportsCodec(codecs.audio) && !browserSupportsCodec(codecs.audio)) {\n        unsupported.push(`audio codec ${codecs.audio}`);\n      }\n      if (codecs.video && !muxerSupportsCodec(codecs.video) && !browserSupportsCodec(codecs.video)) {\n        unsupported.push(`video codec ${codecs.video}`);\n      }\n      if (codecs.text && codecs.text === 'stpp.ttml.im1t') {\n        unsupported.push(`text codec ${codecs.text}`);\n      }\n      if (unsupported.length) {\n        variant.excludeUntil = Infinity;\n        this.logger_(`excluding ${variant.id} for unsupported: ${unsupported.join(', ')}`);\n      }\n    });\n  }\n  /**\n   * Exclude playlists that are known to be codec or\n   * stream-incompatible with the SourceBuffer configuration. For\n   * instance, Media Source Extensions would cause the video element to\n   * stall waiting for video data if you switched from a variant with\n   * video and audio to an audio-only one.\n   *\n   * @param {Object} media a media playlist compatible with the current\n   * set of SourceBuffers. Variants in the current main playlist that\n   * do not appear to have compatible codec or stream configurations\n   * will be excluded from the default playlist selection algorithm\n   * indefinitely.\n   * @private\n   */\n\n  excludeIncompatibleVariants_(codecString) {\n    const ids = [];\n    const playlists = this.main().playlists;\n    const codecs = unwrapCodecList(parseCodecs(codecString));\n    const codecCount_ = codecCount(codecs);\n    const videoDetails = codecs.video && parseCodecs(codecs.video)[0] || null;\n    const audioDetails = codecs.audio && parseCodecs(codecs.audio)[0] || null;\n    Object.keys(playlists).forEach(key => {\n      const variant = playlists[key]; // check if we already processed this playlist.\n      // or it if it is already excluded forever.\n\n      if (ids.indexOf(variant.id) !== -1 || variant.excludeUntil === Infinity) {\n        return;\n      }\n      ids.push(variant.id);\n      const exclusionReasons = []; // get codecs from the playlist for this variant\n\n      const variantCodecs = codecsForPlaylist(this.mainPlaylistLoader_.main, variant);\n      const variantCodecCount = codecCount(variantCodecs); // if no codecs are listed, we cannot determine that this\n      // variant is incompatible. Wait for mux.js to probe\n\n      if (!variantCodecs.audio && !variantCodecs.video) {\n        return;\n      } // TODO: we can support this by removing the\n      // old media source and creating a new one, but it will take some work.\n      // The number of streams cannot change\n\n      if (variantCodecCount !== codecCount_) {\n        exclusionReasons.push(`codec count \"${variantCodecCount}\" !== \"${codecCount_}\"`);\n      } // only exclude playlists by codec change, if codecs cannot switch\n      // during playback.\n\n      if (!this.sourceUpdater_.canChangeType()) {\n        const variantVideoDetails = variantCodecs.video && parseCodecs(variantCodecs.video)[0] || null;\n        const variantAudioDetails = variantCodecs.audio && parseCodecs(variantCodecs.audio)[0] || null; // the video codec cannot change\n\n        if (variantVideoDetails && videoDetails && variantVideoDetails.type.toLowerCase() !== videoDetails.type.toLowerCase()) {\n          exclusionReasons.push(`video codec \"${variantVideoDetails.type}\" !== \"${videoDetails.type}\"`);\n        } // the audio codec cannot change\n\n        if (variantAudioDetails && audioDetails && variantAudioDetails.type.toLowerCase() !== audioDetails.type.toLowerCase()) {\n          exclusionReasons.push(`audio codec \"${variantAudioDetails.type}\" !== \"${audioDetails.type}\"`);\n        }\n      }\n      if (exclusionReasons.length) {\n        variant.excludeUntil = Infinity;\n        this.logger_(`excluding ${variant.id}: ${exclusionReasons.join(' && ')}`);\n      }\n    });\n  }\n  updateAdCues_(media) {\n    let offset = 0;\n    const seekable = this.seekable();\n    if (seekable.length) {\n      offset = seekable.start(0);\n    }\n    updateAdCues(media, this.cueTagsTrack_, offset);\n  }\n  /**\n   * Calculates the desired forward buffer length based on current time\n   *\n   * @return {number} Desired forward buffer length in seconds\n   */\n\n  goalBufferLength() {\n    const currentTime = this.tech_.currentTime();\n    const initial = Config.GOAL_BUFFER_LENGTH;\n    const rate = Config.GOAL_BUFFER_LENGTH_RATE;\n    const max = Math.max(initial, Config.MAX_GOAL_BUFFER_LENGTH);\n    return Math.min(initial + currentTime * rate, max);\n  }\n  /**\n   * Calculates the desired buffer low water line based on current time\n   *\n   * @return {number} Desired buffer low water line in seconds\n   */\n\n  bufferLowWaterLine() {\n    const currentTime = this.tech_.currentTime();\n    const initial = Config.BUFFER_LOW_WATER_LINE;\n    const rate = Config.BUFFER_LOW_WATER_LINE_RATE;\n    const max = Math.max(initial, Config.MAX_BUFFER_LOW_WATER_LINE);\n    const newMax = Math.max(initial, Config.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE);\n    return Math.min(initial + currentTime * rate, this.bufferBasedABR ? newMax : max);\n  }\n  bufferHighWaterLine() {\n    return Config.BUFFER_HIGH_WATER_LINE;\n  }\n}\n\n/**\n * Returns a function that acts as the Enable/disable playlist function.\n *\n * @param {PlaylistLoader} loader - The main playlist loader\n * @param {string} playlistID - id of the playlist\n * @param {Function} changePlaylistFn - A function to be called after a\n * playlist's enabled-state has been changed. Will NOT be called if a\n * playlist's enabled-state is unchanged\n * @param {boolean=} enable - Value to set the playlist enabled-state to\n * or if undefined returns the current enabled-state for the playlist\n * @return {Function} Function for setting/getting enabled\n */\n\nconst enableFunction = (loader, playlistID, changePlaylistFn) => enable => {\n  const playlist = loader.main.playlists[playlistID];\n  const incompatible = isIncompatible(playlist);\n  const currentlyEnabled = isEnabled(playlist);\n  if (typeof enable === 'undefined') {\n    return currentlyEnabled;\n  }\n  if (enable) {\n    delete playlist.disabled;\n  } else {\n    playlist.disabled = true;\n  }\n  if (enable !== currentlyEnabled && !incompatible) {\n    // Ensure the outside world knows about our changes\n    changePlaylistFn();\n    if (enable) {\n      loader.trigger('renditionenabled');\n    } else {\n      loader.trigger('renditiondisabled');\n    }\n  }\n  return enable;\n};\n/**\n * The representation object encapsulates the publicly visible information\n * in a media playlist along with a setter/getter-type function (enabled)\n * for changing the enabled-state of a particular playlist entry\n *\n * @class Representation\n */\n\nclass Representation {\n  constructor(vhsHandler, playlist, id) {\n    const {\n      playlistController_: pc\n    } = vhsHandler;\n    const qualityChangeFunction = pc.fastQualityChange_.bind(pc); // some playlist attributes are optional\n\n    if (playlist.attributes) {\n      const resolution = playlist.attributes.RESOLUTION;\n      this.width = resolution && resolution.width;\n      this.height = resolution && resolution.height;\n      this.bandwidth = playlist.attributes.BANDWIDTH;\n      this.frameRate = playlist.attributes['FRAME-RATE'];\n    }\n    this.codecs = codecsForPlaylist(pc.main(), playlist);\n    this.playlist = playlist; // The id is simply the ordinality of the media playlist\n    // within the main playlist\n\n    this.id = id; // Partially-apply the enableFunction to create a playlist-\n    // specific variant\n\n    this.enabled = enableFunction(vhsHandler.playlists, playlist.id, qualityChangeFunction);\n  }\n}\n/**\n * A mixin function that adds the `representations` api to an instance\n * of the VhsHandler class\n *\n * @param {VhsHandler} vhsHandler - An instance of VhsHandler to add the\n * representation API into\n */\n\nconst renditionSelectionMixin = function (vhsHandler) {\n  // Add a single API-specific function to the VhsHandler instance\n  vhsHandler.representations = () => {\n    const main = vhsHandler.playlistController_.main();\n    const playlists = isAudioOnly(main) ? vhsHandler.playlistController_.getAudioTrackPlaylists_() : main.playlists;\n    if (!playlists) {\n      return [];\n    }\n    return playlists.filter(media => !isIncompatible(media)).map((e, i) => new Representation(vhsHandler, e, e.id));\n  };\n};\n\n/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n\nconst timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n/**\n * @class PlaybackWatcher\n */\n\nclass PlaybackWatcher {\n  /**\n   * Represents an PlaybackWatcher object.\n   *\n   * @class\n   * @param {Object} options an object that includes the tech and settings\n   */\n  constructor(options) {\n    this.playlistController_ = options.playlistController;\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n    this.allowSeeksWithinUnsafeLiveWindow = options.allowSeeksWithinUnsafeLiveWindow;\n    this.liveRangeSafeTimeDelta = options.liveRangeSafeTimeDelta;\n    this.media = options.media;\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.checkCurrentTimeTimeout_ = null;\n    this.logger_ = logger('PlaybackWatcher');\n    this.logger_('initialize');\n    const playHandler = () => this.monitorCurrentTime_();\n    const canPlayHandler = () => this.monitorCurrentTime_();\n    const waitingHandler = () => this.techWaiting_();\n    const cancelTimerHandler = () => this.resetTimeUpdate_();\n    const pc = this.playlistController_;\n    const loaderTypes = ['main', 'subtitle', 'audio'];\n    const loaderChecks = {};\n    loaderTypes.forEach(type => {\n      loaderChecks[type] = {\n        reset: () => this.resetSegmentDownloads_(type),\n        updateend: () => this.checkSegmentDownloads_(type)\n      };\n      pc[`${type}SegmentLoader_`].on('appendsdone', loaderChecks[type].updateend); // If a rendition switch happens during a playback stall where the buffer\n      // isn't changing we want to reset. We cannot assume that the new rendition\n      // will also be stalled, until after new appends.\n\n      pc[`${type}SegmentLoader_`].on('playlistupdate', loaderChecks[type].reset); // Playback stalls should not be detected right after seeking.\n      // This prevents one segment playlists (single vtt or single segment content)\n      // from being detected as stalling. As the buffer will not change in those cases, since\n      // the buffer is the entire video duration.\n\n      this.tech_.on(['seeked', 'seeking'], loaderChecks[type].reset);\n    });\n    /**\n     * We check if a seek was into a gap through the following steps:\n     * 1. We get a seeking event and we do not get a seeked event. This means that\n     *    a seek was attempted but not completed.\n     * 2. We run `fixesBadSeeks_` on segment loader appends. This means that we already\n     *    removed everything from our buffer and appended a segment, and should be ready\n     *    to check for gaps.\n     */\n\n    const setSeekingHandlers = fn => {\n      ['main', 'audio'].forEach(type => {\n        pc[`${type}SegmentLoader_`][fn]('appended', this.seekingAppendCheck_);\n      });\n    };\n    this.seekingAppendCheck_ = () => {\n      if (this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        setSeekingHandlers('off');\n      }\n    };\n    this.clearSeekingAppendCheck_ = () => setSeekingHandlers('off');\n    this.watchForBadSeeking_ = () => {\n      this.clearSeekingAppendCheck_();\n      setSeekingHandlers('on');\n    };\n    this.tech_.on('seeked', this.clearSeekingAppendCheck_);\n    this.tech_.on('seeking', this.watchForBadSeeking_);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler);\n    /*\n      An edge case exists that results in gaps not being skipped when they exist at the beginning of a stream. This case\n      is surfaced in one of two ways:\n       1)  The `waiting` event is fired before the player has buffered content, making it impossible\n          to find or skip the gap. The `waiting` event is followed by a `play` event. On first play\n          we can check if playback is stalled due to a gap, and skip the gap if necessary.\n      2)  A source with a gap at the beginning of the stream is loaded programatically while the player\n          is in a playing state. To catch this case, it's important that our one-time play listener is setup\n          even if the player is in a playing state\n    */\n\n    this.tech_.one('play', playHandler); // Define the dispose function to clean up our events\n\n    this.dispose = () => {\n      this.clearSeekingAppendCheck_();\n      this.logger_('dispose');\n      this.tech_.off('waiting', waitingHandler);\n      this.tech_.off(timerCancelEvents, cancelTimerHandler);\n      this.tech_.off('canplay', canPlayHandler);\n      this.tech_.off('play', playHandler);\n      this.tech_.off('seeking', this.watchForBadSeeking_);\n      this.tech_.off('seeked', this.clearSeekingAppendCheck_);\n      loaderTypes.forEach(type => {\n        pc[`${type}SegmentLoader_`].off('appendsdone', loaderChecks[type].updateend);\n        pc[`${type}SegmentLoader_`].off('playlistupdate', loaderChecks[type].reset);\n        this.tech_.off(['seeked', 'seeking'], loaderChecks[type].reset);\n      });\n      if (this.checkCurrentTimeTimeout_) {\n        window$1.clearTimeout(this.checkCurrentTimeTimeout_);\n      }\n      this.resetTimeUpdate_();\n    };\n  }\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n  monitorCurrentTime_() {\n    this.checkCurrentTime_();\n    if (this.checkCurrentTimeTimeout_) {\n      window$1.clearTimeout(this.checkCurrentTimeTimeout_);\n    } // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n\n    this.checkCurrentTimeTimeout_ = window$1.setTimeout(this.monitorCurrentTime_.bind(this), 250);\n  }\n  /**\n   * Reset stalled download stats for a specific type of loader\n   *\n   * @param {string} type\n   *        The segment loader type to check.\n   *\n   * @listens SegmentLoader#playlistupdate\n   * @listens Tech#seeking\n   * @listens Tech#seeked\n   */\n\n  resetSegmentDownloads_(type) {\n    const loader = this.playlistController_[`${type}SegmentLoader_`];\n    if (this[`${type}StalledDownloads_`] > 0) {\n      this.logger_(`resetting possible stalled download count for ${type} loader`);\n    }\n    this[`${type}StalledDownloads_`] = 0;\n    this[`${type}Buffered_`] = loader.buffered_();\n  }\n  /**\n   * Checks on every segment `appendsdone` to see\n   * if segment appends are making progress. If they are not\n   * and we are still downloading bytes. We exclude the playlist.\n   *\n   * @param {string} type\n   *        The segment loader type to check.\n   *\n   * @listens SegmentLoader#appendsdone\n   */\n\n  checkSegmentDownloads_(type) {\n    const pc = this.playlistController_;\n    const loader = pc[`${type}SegmentLoader_`];\n    const buffered = loader.buffered_();\n    const isBufferedDifferent = isRangeDifferent(this[`${type}Buffered_`], buffered);\n    this[`${type}Buffered_`] = buffered; // if another watcher is going to fix the issue or\n    // the buffered value for this loader changed\n    // appends are working\n\n    if (isBufferedDifferent) {\n      this.resetSegmentDownloads_(type);\n      return;\n    }\n    this[`${type}StalledDownloads_`]++;\n    this.logger_(`found #${this[`${type}StalledDownloads_`]} ${type} appends that did not increase buffer (possible stalled download)`, {\n      playlistId: loader.playlist_ && loader.playlist_.id,\n      buffered: timeRangesToArray(buffered)\n    }); // after 10 possibly stalled appends with no reset, exclude\n\n    if (this[`${type}StalledDownloads_`] < 10) {\n      return;\n    }\n    this.logger_(`${type} loader stalled download exclusion`);\n    this.resetSegmentDownloads_(type);\n    this.tech_.trigger({\n      type: 'usage',\n      name: `vhs-${type}-download-exclusion`\n    });\n    if (type === 'subtitle') {\n      return;\n    } // TODO: should we exclude audio tracks rather than main tracks\n    // when type is audio?\n\n    pc.excludePlaylist({\n      error: {\n        message: `Excessive ${type} segment downloading detected.`\n      },\n      playlistExclusionDuration: Infinity\n    });\n  }\n  /**\n   * The purpose of this function is to emulate the \"waiting\" event on\n   * browsers that do not emit it when they are waiting for more\n   * data to continue playback\n   *\n   * @private\n   */\n\n  checkCurrentTime_() {\n    if (this.tech_.paused() || this.tech_.seeking()) {\n      return;\n    }\n    const currentTime = this.tech_.currentTime();\n    const buffered = this.tech_.buffered();\n    if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {\n      // If current time is at the end of the final buffered region, then any playback\n      // stall is most likely caused by buffering in a low bandwidth environment. The tech\n      // should fire a `waiting` event in this scenario, but due to browser and tech\n      // inconsistencies. Calling `techWaiting_` here allows us to simulate\n      // responding to a native `waiting` event when the tech fails to emit one.\n      return this.techWaiting_();\n    }\n    if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n      this.consecutiveUpdates++;\n      this.waiting_();\n    } else if (currentTime === this.lastRecordedTime) {\n      this.consecutiveUpdates++;\n    } else {\n      this.consecutiveUpdates = 0;\n      this.lastRecordedTime = currentTime;\n    }\n  }\n  /**\n   * Resets the 'timeupdate' mechanism designed to detect that we are stalled\n   *\n   * @private\n   */\n\n  resetTimeUpdate_() {\n    this.consecutiveUpdates = 0;\n  }\n  /**\n   * Fixes situations where there's a bad seek\n   *\n   * @return {boolean} whether an action was taken to fix the seek\n   * @private\n   */\n\n  fixesBadSeeks_() {\n    const seeking = this.tech_.seeking();\n    if (!seeking) {\n      return false;\n    } // TODO: It's possible that these seekable checks should be moved out of this function\n    // and into a function that runs on seekablechange. It's also possible that we only need\n    // afterSeekableWindow as the buffered check at the bottom is good enough to handle before\n    // seekable range.\n\n    const seekable = this.seekable();\n    const currentTime = this.tech_.currentTime();\n    const isAfterSeekableRange = this.afterSeekableWindow_(seekable, currentTime, this.media(), this.allowSeeksWithinUnsafeLiveWindow);\n    let seekTo;\n    if (isAfterSeekableRange) {\n      const seekableEnd = seekable.end(seekable.length - 1); // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n\n      seekTo = seekableEnd;\n    }\n    if (this.beforeSeekableWindow_(seekable, currentTime)) {\n      const seekableStart = seekable.start(0); // sync to the beginning of the live window\n      // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n\n      seekTo = seekableStart + (\n      // if the playlist is too short and the seekable range is an exact time (can\n      // happen in live with a 3 segment playlist), then don't use a time delta\n      seekableStart === seekable.end(0) ? 0 : SAFE_TIME_DELTA);\n    }\n    if (typeof seekTo !== 'undefined') {\n      this.logger_(`Trying to seek outside of seekable at time ${currentTime} with ` + `seekable range ${printableRange(seekable)}. Seeking to ` + `${seekTo}.`);\n      this.tech_.setCurrentTime(seekTo);\n      return true;\n    }\n    const sourceUpdater = this.playlistController_.sourceUpdater_;\n    const buffered = this.tech_.buffered();\n    const audioBuffered = sourceUpdater.audioBuffer ? sourceUpdater.audioBuffered() : null;\n    const videoBuffered = sourceUpdater.videoBuffer ? sourceUpdater.videoBuffered() : null;\n    const media = this.media(); // verify that at least two segment durations or one part duration have been\n    // appended before checking for a gap.\n\n    const minAppendedDuration = media.partTargetDuration ? media.partTargetDuration : (media.targetDuration - TIME_FUDGE_FACTOR) * 2; // verify that at least two segment durations have been\n    // appended before checking for a gap.\n\n    const bufferedToCheck = [audioBuffered, videoBuffered];\n    for (let i = 0; i < bufferedToCheck.length; i++) {\n      // skip null buffered\n      if (!bufferedToCheck[i]) {\n        continue;\n      }\n      const timeAhead = timeAheadOf(bufferedToCheck[i], currentTime); // if we are less than two video/audio segment durations or one part\n      // duration behind we haven't appended enough to call this a bad seek.\n\n      if (timeAhead < minAppendedDuration) {\n        return false;\n      }\n    }\n    const nextRange = findNextRange(buffered, currentTime); // we have appended enough content, but we don't have anything buffered\n    // to seek over the gap\n\n    if (nextRange.length === 0) {\n      return false;\n    }\n    seekTo = nextRange.start(0) + SAFE_TIME_DELTA;\n    this.logger_(`Buffered region starts (${nextRange.start(0)}) ` + ` just beyond seek point (${currentTime}). Seeking to ${seekTo}.`);\n    this.tech_.setCurrentTime(seekTo);\n    return true;\n  }\n  /**\n   * Handler for situations when we determine the player is waiting.\n   *\n   * @private\n   */\n\n  waiting_() {\n    if (this.techWaiting_()) {\n      return;\n    } // All tech waiting checks failed. Use last resort correction\n\n    const currentTime = this.tech_.currentTime();\n    const buffered = this.tech_.buffered();\n    const currentRange = findRange(buffered, currentTime); // Sometimes the player can stall for unknown reasons within a contiguous buffered\n    // region with no indication that anything is amiss (seen in Firefox). Seeking to\n    // currentTime is usually enough to kickstart the player. This checks that the player\n    // is currently within a buffered region before attempting a corrective seek.\n    // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n    // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n    // make sure there is ~3 seconds of forward buffer before taking any corrective action\n    // to avoid triggering an `unknownwaiting` event when the network is slow.\n\n    if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n      this.resetTimeUpdate_();\n      this.tech_.setCurrentTime(currentTime);\n      this.logger_(`Stopped at ${currentTime} while inside a buffered region ` + `[${currentRange.start(0)} -> ${currentRange.end(0)}]. Attempting to resume ` + 'playback by seeking to the current time.'); // unknown waiting corrections may be useful for monitoring QoS\n\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-unknown-waiting'\n      });\n      return;\n    }\n  }\n  /**\n   * Handler for situations when the tech fires a `waiting` event\n   *\n   * @return {boolean}\n   *         True if an action (or none) was needed to correct the waiting. False if no\n   *         checks passed\n   * @private\n   */\n\n  techWaiting_() {\n    const seekable = this.seekable();\n    const currentTime = this.tech_.currentTime();\n    if (this.tech_.seeking()) {\n      // Tech is seeking or already waiting on another action, no action needed\n      return true;\n    }\n    if (this.beforeSeekableWindow_(seekable, currentTime)) {\n      const livePoint = seekable.end(seekable.length - 1);\n      this.logger_(`Fell out of live window at time ${currentTime}. Seeking to ` + `live point (seekable end) ${livePoint}`);\n      this.resetTimeUpdate_();\n      this.tech_.setCurrentTime(livePoint); // live window resyncs may be useful for monitoring QoS\n\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-live-resync'\n      });\n      return true;\n    }\n    const sourceUpdater = this.tech_.vhs.playlistController_.sourceUpdater_;\n    const buffered = this.tech_.buffered();\n    const videoUnderflow = this.videoUnderflow_({\n      audioBuffered: sourceUpdater.audioBuffered(),\n      videoBuffered: sourceUpdater.videoBuffered(),\n      currentTime\n    });\n    if (videoUnderflow) {\n      // Even though the video underflowed and was stuck in a gap, the audio overplayed\n      // the gap, leading currentTime into a buffered range. Seeking to currentTime\n      // allows the video to catch up to the audio position without losing any audio\n      // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n      this.resetTimeUpdate_();\n      this.tech_.setCurrentTime(currentTime); // video underflow may be useful for monitoring QoS\n\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'vhs-video-underflow'\n      });\n      return true;\n    }\n    const nextRange = findNextRange(buffered, currentTime); // check for gap\n\n    if (nextRange.length > 0) {\n      this.logger_(`Stopped at ${currentTime} and seeking to ${nextRange.start(0)}`);\n      this.resetTimeUpdate_();\n      this.skipTheGap_(currentTime);\n      return true;\n    } // All checks failed. Returning false to indicate failure to correct waiting\n\n    return false;\n  }\n  afterSeekableWindow_(seekable, currentTime, playlist, allowSeeksWithinUnsafeLiveWindow = false) {\n    if (!seekable.length) {\n      // we can't make a solid case if there's no seekable, default to false\n      return false;\n    }\n    let allowedEnd = seekable.end(seekable.length - 1) + SAFE_TIME_DELTA;\n    const isLive = !playlist.endList;\n    if (isLive && allowSeeksWithinUnsafeLiveWindow) {\n      allowedEnd = seekable.end(seekable.length - 1) + playlist.targetDuration * 3;\n    }\n    if (currentTime > allowedEnd) {\n      return true;\n    }\n    return false;\n  }\n  beforeSeekableWindow_(seekable, currentTime) {\n    if (seekable.length &&\n    // can't fall before 0 and 0 seekable start identifies VOD stream\n    seekable.start(0) > 0 && currentTime < seekable.start(0) - this.liveRangeSafeTimeDelta) {\n      return true;\n    }\n    return false;\n  }\n  videoUnderflow_({\n    videoBuffered,\n    audioBuffered,\n    currentTime\n  }) {\n    // audio only content will not have video underflow :)\n    if (!videoBuffered) {\n      return;\n    }\n    let gap; // find a gap in demuxed content.\n\n    if (videoBuffered.length && audioBuffered.length) {\n      // in Chrome audio will continue to play for ~3s when we run out of video\n      // so we have to check that the video buffer did have some buffer in the\n      // past.\n      const lastVideoRange = findRange(videoBuffered, currentTime - 3);\n      const videoRange = findRange(videoBuffered, currentTime);\n      const audioRange = findRange(audioBuffered, currentTime);\n      if (audioRange.length && !videoRange.length && lastVideoRange.length) {\n        gap = {\n          start: lastVideoRange.end(0),\n          end: audioRange.end(0)\n        };\n      } // find a gap in muxed content.\n    } else {\n      const nextRange = findNextRange(videoBuffered, currentTime); // Even if there is no available next range, there is still a possibility we are\n      // stuck in a gap due to video underflow.\n\n      if (!nextRange.length) {\n        gap = this.gapFromVideoUnderflow_(videoBuffered, currentTime);\n      }\n    }\n    if (gap) {\n      this.logger_(`Encountered a gap in video from ${gap.start} to ${gap.end}. ` + `Seeking to current time ${currentTime}`);\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Timer callback. If playback still has not proceeded, then we seek\n   * to the start of the next buffered region.\n   *\n   * @private\n   */\n\n  skipTheGap_(scheduledCurrentTime) {\n    const buffered = this.tech_.buffered();\n    const currentTime = this.tech_.currentTime();\n    const nextRange = findNextRange(buffered, currentTime);\n    this.resetTimeUpdate_();\n    if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n      return;\n    }\n    this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0)); // only seek if we still have not played\n\n    this.tech_.setCurrentTime(nextRange.start(0) + TIME_FUDGE_FACTOR);\n    this.tech_.trigger({\n      type: 'usage',\n      name: 'vhs-gap-skip'\n    });\n  }\n  gapFromVideoUnderflow_(buffered, currentTime) {\n    // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n    // playing for ~3 seconds after the video gap starts. This is done to account for\n    // video buffer underflow/underrun (note that this is not done when there is audio\n    // buffer underflow/underrun -- in that case the video will stop as soon as it\n    // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n    // video stalls). The player's time will reflect the playthrough of audio, so the\n    // time will appear as if we are in a buffered region, even if we are stuck in a\n    // \"gap.\"\n    //\n    // Example:\n    // video buffer:   0 => 10.1, 10.2 => 20\n    // audio buffer:   0 => 20\n    // overall buffer: 0 => 10.1, 10.2 => 20\n    // current time: 13\n    //\n    // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n    // however, the audio continued playing until it reached ~3 seconds past the gap\n    // (13 seconds), at which point it stops as well. Since current time is past the\n    // gap, findNextRange will return no ranges.\n    //\n    // To check for this issue, we see if there is a gap that starts somewhere within\n    // a 3 second range (3 seconds +/- 1 second) back from our current time.\n    const gaps = findGaps(buffered);\n    for (let i = 0; i < gaps.length; i++) {\n      const start = gaps.start(i);\n      const end = gaps.end(i); // gap is starts no more than 4 seconds back\n\n      if (currentTime - start < 4 && currentTime - start > 2) {\n        return {\n          start,\n          end\n        };\n      }\n    }\n    return null;\n  }\n}\nconst defaultOptions = {\n  errorInterval: 30,\n  getSource(next) {\n    const tech = this.tech({\n      IWillNotUseThisInPlugins: true\n    });\n    const sourceObj = tech.currentSource_ || this.currentSource();\n    return next(sourceObj);\n  }\n};\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\n\nconst initPlugin = function (player, options) {\n  let lastCalled = 0;\n  let seekTo = 0;\n  const localOptions = merge(defaultOptions, options);\n  player.ready(() => {\n    player.trigger({\n      type: 'usage',\n      name: 'vhs-error-reload-initialized'\n    });\n  });\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n\n  const loadedMetadataHandler = function () {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n\n  const setSource = function (sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n    player.one('loadedmetadata', loadedMetadataHandler);\n    player.src(sourceObj);\n    player.trigger({\n      type: 'usage',\n      name: 'vhs-error-reload'\n    });\n    player.play();\n  };\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n\n  const errorHandler = function () {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({\n        type: 'usage',\n        name: 'vhs-error-reload-canceled'\n      });\n      return;\n    }\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      videojs.log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n    lastCalled = Date.now();\n    return localOptions.getSource.call(player, setSource);\n  };\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n\n  const cleanupEvents = function () {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n\n  const reinitPlugin = function (newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents); // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n\n  player.reloadSourceOnError = reinitPlugin;\n};\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\n\nconst reloadSourceOnError = function (options) {\n  initPlugin(this, options);\n};\nvar version$4 = \"3.0.2\";\nvar version$3 = \"6.3.0\";\nvar version$2 = \"1.0.1\";\nvar version$1 = \"6.0.0\";\nvar version = \"4.0.1\";\n\n/**\n * @file videojs-http-streaming.js\n *\n * The main file for the VHS project.\n * License: https://github.com/videojs/videojs-http-streaming/blob/main/LICENSE\n */\nconst Vhs = {\n  PlaylistLoader,\n  Playlist,\n  utils,\n  STANDARD_PLAYLIST_SELECTOR: lastBandwidthSelector,\n  INITIAL_PLAYLIST_SELECTOR: lowestBitrateCompatibleVariantSelector,\n  lastBandwidthSelector,\n  movingAverageBandwidthSelector,\n  comparePlaylistBandwidth,\n  comparePlaylistResolution,\n  xhr: xhrFactory()\n}; // Define getter/setters for config properties\n\nObject.keys(Config).forEach(prop => {\n  Object.defineProperty(Vhs, prop, {\n    get() {\n      videojs.log.warn(`using Vhs.${prop} is UNSAFE be sure you know what you are doing`);\n      return Config[prop];\n    },\n    set(value) {\n      videojs.log.warn(`using Vhs.${prop} is UNSAFE be sure you know what you are doing`);\n      if (typeof value !== 'number' || value < 0) {\n        videojs.log.warn(`value of Vhs.${prop} must be greater than or equal to 0`);\n        return;\n      }\n      Config[prop] = value;\n    }\n  });\n});\nconst LOCAL_STORAGE_KEY = 'videojs-vhs';\n/**\n * Updates the selectedIndex of the QualityLevelList when a mediachange happens in vhs.\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to update.\n * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.\n * @function handleVhsMediaChange\n */\n\nconst handleVhsMediaChange = function (qualityLevels, playlistLoader) {\n  const newPlaylist = playlistLoader.media();\n  let selectedIndex = -1;\n  for (let i = 0; i < qualityLevels.length; i++) {\n    if (qualityLevels[i].id === newPlaylist.id) {\n      selectedIndex = i;\n      break;\n    }\n  }\n  qualityLevels.selectedIndex_ = selectedIndex;\n  qualityLevels.trigger({\n    selectedIndex,\n    type: 'change'\n  });\n};\n/**\n * Adds quality levels to list once playlist metadata is available\n *\n * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.\n * @param {Object} vhs Vhs object to listen to for media events.\n * @function handleVhsLoadedMetadata\n */\n\nconst handleVhsLoadedMetadata = function (qualityLevels, vhs) {\n  vhs.representations().forEach(rep => {\n    qualityLevels.addQualityLevel(rep);\n  });\n  handleVhsMediaChange(qualityLevels, vhs.playlists);\n}; // VHS is a source handler, not a tech. Make sure attempts to use it\n// as one do not cause exceptions.\n\nVhs.canPlaySource = function () {\n  return videojs.log.warn('VHS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\nconst emeKeySystems = (keySystemOptions, mainPlaylist, audioPlaylist) => {\n  if (!keySystemOptions) {\n    return keySystemOptions;\n  }\n  let codecs = {};\n  if (mainPlaylist && mainPlaylist.attributes && mainPlaylist.attributes.CODECS) {\n    codecs = unwrapCodecList(parseCodecs(mainPlaylist.attributes.CODECS));\n  }\n  if (audioPlaylist && audioPlaylist.attributes && audioPlaylist.attributes.CODECS) {\n    codecs.audio = audioPlaylist.attributes.CODECS;\n  }\n  const videoContentType = getMimeForCodec(codecs.video);\n  const audioContentType = getMimeForCodec(codecs.audio); // upsert the content types based on the selected playlist\n\n  const keySystemContentTypes = {};\n  for (const keySystem in keySystemOptions) {\n    keySystemContentTypes[keySystem] = {};\n    if (audioContentType) {\n      keySystemContentTypes[keySystem].audioContentType = audioContentType;\n    }\n    if (videoContentType) {\n      keySystemContentTypes[keySystem].videoContentType = videoContentType;\n    } // Default to using the video playlist's PSSH even though they may be different, as\n    // videojs-contrib-eme will only accept one in the options.\n    //\n    // This shouldn't be an issue for most cases as early intialization will handle all\n    // unique PSSH values, and if they aren't, then encrypted events should have the\n    // specific information needed for the unique license.\n\n    if (mainPlaylist.contentProtection && mainPlaylist.contentProtection[keySystem] && mainPlaylist.contentProtection[keySystem].pssh) {\n      keySystemContentTypes[keySystem].pssh = mainPlaylist.contentProtection[keySystem].pssh;\n    } // videojs-contrib-eme accepts the option of specifying: 'com.some.cdm': 'url'\n    // so we need to prevent overwriting the URL entirely\n\n    if (typeof keySystemOptions[keySystem] === 'string') {\n      keySystemContentTypes[keySystem].url = keySystemOptions[keySystem];\n    }\n  }\n  return merge(keySystemOptions, keySystemContentTypes);\n};\n/**\n * @typedef {Object} KeySystems\n *\n * keySystems configuration for https://github.com/videojs/videojs-contrib-eme\n * Note: not all options are listed here.\n *\n * @property {Uint8Array} [pssh]\n *           Protection System Specific Header\n */\n\n/**\n * Goes through all the playlists and collects an array of KeySystems options objects\n * containing each playlist's keySystems and their pssh values, if available.\n *\n * @param {Object[]} playlists\n *        The playlists to look through\n * @param {string[]} keySystems\n *        The keySystems to collect pssh values for\n *\n * @return {KeySystems[]}\n *         An array of KeySystems objects containing available key systems and their\n *         pssh values\n */\n\nconst getAllPsshKeySystemsOptions = (playlists, keySystems) => {\n  return playlists.reduce((keySystemsArr, playlist) => {\n    if (!playlist.contentProtection) {\n      return keySystemsArr;\n    }\n    const keySystemsOptions = keySystems.reduce((keySystemsObj, keySystem) => {\n      const keySystemOptions = playlist.contentProtection[keySystem];\n      if (keySystemOptions && keySystemOptions.pssh) {\n        keySystemsObj[keySystem] = {\n          pssh: keySystemOptions.pssh\n        };\n      }\n      return keySystemsObj;\n    }, {});\n    if (Object.keys(keySystemsOptions).length) {\n      keySystemsArr.push(keySystemsOptions);\n    }\n    return keySystemsArr;\n  }, []);\n};\n/**\n * Returns a promise that waits for the\n * [eme plugin](https://github.com/videojs/videojs-contrib-eme) to create a key session.\n *\n * Works around https://bugs.chromium.org/p/chromium/issues/detail?id=895449 in non-IE11\n * browsers.\n *\n * As per the above ticket, this is particularly important for Chrome, where, if\n * unencrypted content is appended before encrypted content and the key session has not\n * been created, a MEDIA_ERR_DECODE will be thrown once the encrypted content is reached\n * during playback.\n *\n * @param {Object} player\n *        The player instance\n * @param {Object[]} sourceKeySystems\n *        The key systems options from the player source\n * @param {Object} [audioMedia]\n *        The active audio media playlist (optional)\n * @param {Object[]} mainPlaylists\n *        The playlists found on the main playlist object\n *\n * @return {Object}\n *         Promise that resolves when the key session has been created\n */\n\nconst waitForKeySessionCreation = ({\n  player,\n  sourceKeySystems,\n  audioMedia,\n  mainPlaylists\n}) => {\n  if (!player.eme.initializeMediaKeys) {\n    return Promise.resolve();\n  } // TODO should all audio PSSH values be initialized for DRM?\n  //\n  // All unique video rendition pssh values are initialized for DRM, but here only\n  // the initial audio playlist license is initialized. In theory, an encrypted\n  // event should be fired if the user switches to an alternative audio playlist\n  // where a license is required, but this case hasn't yet been tested. In addition, there\n  // may be many alternate audio playlists unlikely to be used (e.g., multiple different\n  // languages).\n\n  const playlists = audioMedia ? mainPlaylists.concat([audioMedia]) : mainPlaylists;\n  const keySystemsOptionsArr = getAllPsshKeySystemsOptions(playlists, Object.keys(sourceKeySystems));\n  const initializationFinishedPromises = [];\n  const keySessionCreatedPromises = []; // Since PSSH values are interpreted as initData, EME will dedupe any duplicates. The\n  // only place where it should not be deduped is for ms-prefixed APIs, but the early\n  // return for IE11 above, and the existence of modern EME APIs in addition to\n  // ms-prefixed APIs on Edge should prevent this from being a concern.\n  // initializeMediaKeys also won't use the webkit-prefixed APIs.\n\n  keySystemsOptionsArr.forEach(keySystemsOptions => {\n    keySessionCreatedPromises.push(new Promise((resolve, reject) => {\n      player.tech_.one('keysessioncreated', resolve);\n    }));\n    initializationFinishedPromises.push(new Promise((resolve, reject) => {\n      player.eme.initializeMediaKeys({\n        keySystems: keySystemsOptions\n      }, err => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve();\n      });\n    }));\n  }); // The reasons Promise.race is chosen over Promise.any:\n  //\n  // * Promise.any is only available in Safari 14+.\n  // * None of these promises are expected to reject. If they do reject, it might be\n  //   better here for the race to surface the rejection, rather than mask it by using\n  //   Promise.any.\n\n  return Promise.race([\n  // If a session was previously created, these will all finish resolving without\n  // creating a new session, otherwise it will take until the end of all license\n  // requests, which is why the key session check is used (to make setup much faster).\n  Promise.all(initializationFinishedPromises),\n  // Once a single session is created, the browser knows DRM will be used.\n  Promise.race(keySessionCreatedPromises)]);\n};\n/**\n * If the [eme](https://github.com/videojs/videojs-contrib-eme) plugin is available, and\n * there are keySystems on the source, sets up source options to prepare the source for\n * eme.\n *\n * @param {Object} player\n *        The player instance\n * @param {Object[]} sourceKeySystems\n *        The key systems options from the player source\n * @param {Object} media\n *        The active media playlist\n * @param {Object} [audioMedia]\n *        The active audio media playlist (optional)\n *\n * @return {boolean}\n *         Whether or not options were configured and EME is available\n */\n\nconst setupEmeOptions = ({\n  player,\n  sourceKeySystems,\n  media,\n  audioMedia\n}) => {\n  const sourceOptions = emeKeySystems(sourceKeySystems, media, audioMedia);\n  if (!sourceOptions) {\n    return false;\n  }\n  player.currentSource().keySystems = sourceOptions; // eme handles the rest of the setup, so if it is missing\n  // do nothing.\n\n  if (sourceOptions && !player.eme) {\n    videojs.log.warn('DRM encrypted source cannot be decrypted without a DRM plugin');\n    return false;\n  }\n  return true;\n};\nconst getVhsLocalStorage = () => {\n  if (!window$1.localStorage) {\n    return null;\n  }\n  const storedObject = window$1.localStorage.getItem(LOCAL_STORAGE_KEY);\n  if (!storedObject) {\n    return null;\n  }\n  try {\n    return JSON.parse(storedObject);\n  } catch (e) {\n    // someone may have tampered with the value\n    return null;\n  }\n};\nconst updateVhsLocalStorage = options => {\n  if (!window$1.localStorage) {\n    return false;\n  }\n  let objectToStore = getVhsLocalStorage();\n  objectToStore = objectToStore ? merge(objectToStore, options) : options;\n  try {\n    window$1.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(objectToStore));\n  } catch (e) {\n    // Throws if storage is full (e.g., always on iOS 5+ Safari private mode, where\n    // storage is set to 0).\n    // https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem#Exceptions\n    // No need to perform any operation.\n    return false;\n  }\n  return objectToStore;\n};\n/**\n * Parses VHS-supported media types from data URIs. See\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n * for information on data URIs.\n *\n * @param {string} dataUri\n *        The data URI\n *\n * @return {string|Object}\n *         The parsed object/string, or the original string if no supported media type\n *         was found\n */\n\nconst expandDataUri = dataUri => {\n  if (dataUri.toLowerCase().indexOf('data:application/vnd.videojs.vhs+json,') === 0) {\n    return JSON.parse(dataUri.substring(dataUri.indexOf(',') + 1));\n  } // no known case for this data URI, return the string as-is\n\n  return dataUri;\n};\n/**\n * Whether the browser has built-in HLS support.\n */\n\nVhs.supportsNativeHls = function () {\n  if (!document || !document.createElement) {\n    return false;\n  }\n  const video = document.createElement('video'); // native HLS is definitely not supported if HTML5 video isn't\n\n  if (!videojs.getTech('Html5').isSupported()) {\n    return false;\n  } // HLS manifests can go by many mime-types\n\n  const canPlay = [\n  // Apple santioned\n  'application/vnd.apple.mpegurl',\n  // Apple sanctioned for backwards compatibility\n  'audio/mpegurl',\n  // Very common\n  'audio/x-mpegurl',\n  // Very common\n  'application/x-mpegurl',\n  // Included for completeness\n  'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\n  return canPlay.some(function (canItPlay) {\n    return /maybe|probably/i.test(video.canPlayType(canItPlay));\n  });\n}();\nVhs.supportsNativeDash = function () {\n  if (!document || !document.createElement || !videojs.getTech('Html5').isSupported()) {\n    return false;\n  }\n  return /maybe|probably/i.test(document.createElement('video').canPlayType('application/dash+xml'));\n}();\nVhs.supportsTypeNatively = type => {\n  if (type === 'hls') {\n    return Vhs.supportsNativeHls;\n  }\n  if (type === 'dash') {\n    return Vhs.supportsNativeDash;\n  }\n  return false;\n};\n/**\n * VHS is a source handler, not a tech. Make sure attempts to use it\n * as one do not cause exceptions.\n */\n\nVhs.isSupported = function () {\n  return videojs.log.warn('VHS is no longer a tech. Please remove it from ' + 'your player\\'s techOrder.');\n};\nconst Component = videojs.getComponent('Component');\n/**\n * The Vhs Handler object, where we orchestrate all of the parts\n * of VHS to interact with video.js\n *\n * @class VhsHandler\n * @extends videojs.Component\n * @param {Object} source the soruce object\n * @param {Tech} tech the parent tech object\n * @param {Object} options optional and required options\n */\n\nclass VhsHandler extends Component {\n  constructor(source, tech, options) {\n    super(tech, options.vhs); // if a tech level `initialBandwidth` option was passed\n    // use that over the VHS level `bandwidth` option\n\n    if (typeof options.initialBandwidth === 'number') {\n      this.options_.bandwidth = options.initialBandwidth;\n    }\n    this.logger_ = logger('VhsHandler'); // we need access to the player in some cases,\n    // so, get it from Video.js via the `playerId`\n\n    if (tech.options_ && tech.options_.playerId) {\n      const _player = videojs.getPlayer(tech.options_.playerId);\n      this.player_ = _player;\n    }\n    this.tech_ = tech;\n    this.source_ = source;\n    this.stats = {};\n    this.ignoreNextSeekingEvent_ = false;\n    this.setOptions_();\n    if (this.options_.overrideNative && tech.overrideNativeAudioTracks && tech.overrideNativeVideoTracks) {\n      tech.overrideNativeAudioTracks(true);\n      tech.overrideNativeVideoTracks(true);\n    } else if (this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {\n      // overriding native VHS only works if audio tracks have been emulated\n      // error early if we're misconfigured\n      throw new Error('Overriding native VHS requires emulated tracks. ' + 'See https://git.io/vMpjB');\n    } // listen for fullscreenchange events for this player so that we\n    // can adjust our quality selection quickly\n\n    this.on(document, ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'], event => {\n      const fullscreenElement = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;\n      if (fullscreenElement && fullscreenElement.contains(this.tech_.el())) {\n        this.playlistController_.fastQualityChange_();\n      } else {\n        // When leaving fullscreen, since the in page pixel dimensions should be smaller\n        // than full screen, see if there should be a rendition switch down to preserve\n        // bandwidth.\n        this.playlistController_.checkABR_();\n      }\n    });\n    this.on(this.tech_, 'seeking', function () {\n      if (this.ignoreNextSeekingEvent_) {\n        this.ignoreNextSeekingEvent_ = false;\n        return;\n      }\n      this.setCurrentTime(this.tech_.currentTime());\n    });\n    this.on(this.tech_, 'error', function () {\n      // verify that the error was real and we are loaded\n      // enough to have pc loaded.\n      if (this.tech_.error() && this.playlistController_) {\n        this.playlistController_.pauseLoading();\n      }\n    });\n    this.on(this.tech_, 'play', this.play);\n  }\n  setOptions_() {\n    // defaults\n    this.options_.withCredentials = this.options_.withCredentials || false;\n    this.options_.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions === false ? false : true;\n    this.options_.useDevicePixelRatio = this.options_.useDevicePixelRatio || false;\n    this.options_.useBandwidthFromLocalStorage = typeof this.source_.useBandwidthFromLocalStorage !== 'undefined' ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || false;\n    this.options_.useNetworkInformationApi = this.options_.useNetworkInformationApi || false;\n    this.options_.useDtsForTimestampOffset = this.options_.useDtsForTimestampOffset || false;\n    this.options_.customTagParsers = this.options_.customTagParsers || [];\n    this.options_.customTagMappers = this.options_.customTagMappers || [];\n    this.options_.cacheEncryptionKeys = this.options_.cacheEncryptionKeys || false;\n    this.options_.llhls = this.options_.llhls === false ? false : true;\n    this.options_.bufferBasedABR = this.options_.bufferBasedABR || false;\n    if (typeof this.options_.playlistExclusionDuration !== 'number') {\n      this.options_.playlistExclusionDuration = 5 * 60;\n    }\n    if (typeof this.options_.bandwidth !== 'number') {\n      if (this.options_.useBandwidthFromLocalStorage) {\n        const storedObject = getVhsLocalStorage();\n        if (storedObject && storedObject.bandwidth) {\n          this.options_.bandwidth = storedObject.bandwidth;\n          this.tech_.trigger({\n            type: 'usage',\n            name: 'vhs-bandwidth-from-local-storage'\n          });\n        }\n        if (storedObject && storedObject.throughput) {\n          this.options_.throughput = storedObject.throughput;\n          this.tech_.trigger({\n            type: 'usage',\n            name: 'vhs-throughput-from-local-storage'\n          });\n        }\n      }\n    } // if bandwidth was not set by options or pulled from local storage, start playlist\n    // selection at a reasonable bandwidth\n\n    if (typeof this.options_.bandwidth !== 'number') {\n      this.options_.bandwidth = Config.INITIAL_BANDWIDTH;\n    } // If the bandwidth number is unchanged from the initial setting\n    // then this takes precedence over the enableLowInitialPlaylist option\n\n    this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === Config.INITIAL_BANDWIDTH; // grab options passed to player.src\n\n    ['withCredentials', 'useDevicePixelRatio', 'limitRenditionByPlayerDimensions', 'bandwidth', 'customTagParsers', 'customTagMappers', 'cacheEncryptionKeys', 'playlistSelector', 'initialPlaylistSelector', 'bufferBasedABR', 'liveRangeSafeTimeDelta', 'llhls', 'useNetworkInformationApi', 'useDtsForTimestampOffset', 'exactManifestTimings', 'leastPixelDiffSelector'].forEach(option => {\n      if (typeof this.source_[option] !== 'undefined') {\n        this.options_[option] = this.source_[option];\n      }\n    });\n    this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions;\n    this.useDevicePixelRatio = this.options_.useDevicePixelRatio;\n  }\n  /**\n   * called when player.src gets called, handle a new source\n   *\n   * @param {Object} src the source object to handle\n   */\n\n  src(src, type) {\n    // do nothing if the src is falsey\n    if (!src) {\n      return;\n    }\n    this.setOptions_(); // add main playlist controller options\n\n    this.options_.src = expandDataUri(this.source_.src);\n    this.options_.tech = this.tech_;\n    this.options_.externVhs = Vhs;\n    this.options_.sourceType = simpleTypeFromSourceType(type); // Whenever we seek internally, we should update the tech\n\n    this.options_.seekTo = time => {\n      this.tech_.setCurrentTime(time);\n    };\n    this.playlistController_ = new PlaylistController(this.options_);\n    const playbackWatcherOptions = merge({\n      liveRangeSafeTimeDelta: SAFE_TIME_DELTA\n    }, this.options_, {\n      seekable: () => this.seekable(),\n      media: () => this.playlistController_.media(),\n      playlistController: this.playlistController_\n    });\n    this.playbackWatcher_ = new PlaybackWatcher(playbackWatcherOptions);\n    this.playlistController_.on('error', () => {\n      const player = videojs.players[this.tech_.options_.playerId];\n      let error = this.playlistController_.error;\n      if (typeof error === 'object' && !error.code) {\n        error.code = 3;\n      } else if (typeof error === 'string') {\n        error = {\n          message: error,\n          code: 3\n        };\n      }\n      player.error(error);\n    });\n    const defaultSelector = this.options_.bufferBasedABR ? Vhs.movingAverageBandwidthSelector(0.55) : Vhs.STANDARD_PLAYLIST_SELECTOR; // `this` in selectPlaylist should be the VhsHandler for backwards\n    // compatibility with < v2\n\n    this.playlistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : defaultSelector.bind(this);\n    this.playlistController_.selectInitialPlaylist = Vhs.INITIAL_PLAYLIST_SELECTOR.bind(this); // re-expose some internal objects for backwards compatibility with < v2\n\n    this.playlists = this.playlistController_.mainPlaylistLoader_;\n    this.mediaSource = this.playlistController_.mediaSource; // Proxy assignment of some properties to the main playlist\n    // controller. Using a custom property for backwards compatibility\n    // with < v2\n\n    Object.defineProperties(this, {\n      selectPlaylist: {\n        get() {\n          return this.playlistController_.selectPlaylist;\n        },\n        set(selectPlaylist) {\n          this.playlistController_.selectPlaylist = selectPlaylist.bind(this);\n        }\n      },\n      throughput: {\n        get() {\n          return this.playlistController_.mainSegmentLoader_.throughput.rate;\n        },\n        set(throughput) {\n          this.playlistController_.mainSegmentLoader_.throughput.rate = throughput; // By setting `count` to 1 the throughput value becomes the starting value\n          // for the cumulative average\n\n          this.playlistController_.mainSegmentLoader_.throughput.count = 1;\n        }\n      },\n      bandwidth: {\n        get() {\n          let playerBandwidthEst = this.playlistController_.mainSegmentLoader_.bandwidth;\n          const networkInformation = window$1.navigator.connection || window$1.navigator.mozConnection || window$1.navigator.webkitConnection;\n          const tenMbpsAsBitsPerSecond = 10e6;\n          if (this.options_.useNetworkInformationApi && networkInformation) {\n            // downlink returns Mbps\n            // https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlink\n            const networkInfoBandwidthEstBitsPerSec = networkInformation.downlink * 1000 * 1000; // downlink maxes out at 10 Mbps. In the event that both networkInformationApi and the player\n            // estimate a bandwidth greater than 10 Mbps, use the larger of the two estimates to ensure that\n            // high quality streams are not filtered out.\n\n            if (networkInfoBandwidthEstBitsPerSec >= tenMbpsAsBitsPerSecond && playerBandwidthEst >= tenMbpsAsBitsPerSecond) {\n              playerBandwidthEst = Math.max(playerBandwidthEst, networkInfoBandwidthEstBitsPerSec);\n            } else {\n              playerBandwidthEst = networkInfoBandwidthEstBitsPerSec;\n            }\n          }\n          return playerBandwidthEst;\n        },\n        set(bandwidth) {\n          this.playlistController_.mainSegmentLoader_.bandwidth = bandwidth; // setting the bandwidth manually resets the throughput counter\n          // `count` is set to zero that current value of `rate` isn't included\n          // in the cumulative average\n\n          this.playlistController_.mainSegmentLoader_.throughput = {\n            rate: 0,\n            count: 0\n          };\n        }\n      },\n      /**\n       * `systemBandwidth` is a combination of two serial processes bit-rates. The first\n       * is the network bitrate provided by `bandwidth` and the second is the bitrate of\n       * the entire process after that - decryption, transmuxing, and appending - provided\n       * by `throughput`.\n       *\n       * Since the two process are serial, the overall system bandwidth is given by:\n       *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)\n       */\n      systemBandwidth: {\n        get() {\n          const invBandwidth = 1 / (this.bandwidth || 1);\n          let invThroughput;\n          if (this.throughput > 0) {\n            invThroughput = 1 / this.throughput;\n          } else {\n            invThroughput = 0;\n          }\n          const systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));\n          return systemBitrate;\n        },\n        set() {\n          videojs.log.error('The \"systemBandwidth\" property is read-only');\n        }\n      }\n    });\n    if (this.options_.bandwidth) {\n      this.bandwidth = this.options_.bandwidth;\n    }\n    if (this.options_.throughput) {\n      this.throughput = this.options_.throughput;\n    }\n    Object.defineProperties(this.stats, {\n      bandwidth: {\n        get: () => this.bandwidth || 0,\n        enumerable: true\n      },\n      mediaRequests: {\n        get: () => this.playlistController_.mediaRequests_() || 0,\n        enumerable: true\n      },\n      mediaRequestsAborted: {\n        get: () => this.playlistController_.mediaRequestsAborted_() || 0,\n        enumerable: true\n      },\n      mediaRequestsTimedout: {\n        get: () => this.playlistController_.mediaRequestsTimedout_() || 0,\n        enumerable: true\n      },\n      mediaRequestsErrored: {\n        get: () => this.playlistController_.mediaRequestsErrored_() || 0,\n        enumerable: true\n      },\n      mediaTransferDuration: {\n        get: () => this.playlistController_.mediaTransferDuration_() || 0,\n        enumerable: true\n      },\n      mediaBytesTransferred: {\n        get: () => this.playlistController_.mediaBytesTransferred_() || 0,\n        enumerable: true\n      },\n      mediaSecondsLoaded: {\n        get: () => this.playlistController_.mediaSecondsLoaded_() || 0,\n        enumerable: true\n      },\n      mediaAppends: {\n        get: () => this.playlistController_.mediaAppends_() || 0,\n        enumerable: true\n      },\n      mainAppendsToLoadedData: {\n        get: () => this.playlistController_.mainAppendsToLoadedData_() || 0,\n        enumerable: true\n      },\n      audioAppendsToLoadedData: {\n        get: () => this.playlistController_.audioAppendsToLoadedData_() || 0,\n        enumerable: true\n      },\n      appendsToLoadedData: {\n        get: () => this.playlistController_.appendsToLoadedData_() || 0,\n        enumerable: true\n      },\n      timeToLoadedData: {\n        get: () => this.playlistController_.timeToLoadedData_() || 0,\n        enumerable: true\n      },\n      buffered: {\n        get: () => timeRangesToArray(this.tech_.buffered()),\n        enumerable: true\n      },\n      currentTime: {\n        get: () => this.tech_.currentTime(),\n        enumerable: true\n      },\n      currentSource: {\n        get: () => this.tech_.currentSource_,\n        enumerable: true\n      },\n      currentTech: {\n        get: () => this.tech_.name_,\n        enumerable: true\n      },\n      duration: {\n        get: () => this.tech_.duration(),\n        enumerable: true\n      },\n      main: {\n        get: () => this.playlists.main,\n        enumerable: true\n      },\n      playerDimensions: {\n        get: () => this.tech_.currentDimensions(),\n        enumerable: true\n      },\n      seekable: {\n        get: () => timeRangesToArray(this.tech_.seekable()),\n        enumerable: true\n      },\n      timestamp: {\n        get: () => Date.now(),\n        enumerable: true\n      },\n      videoPlaybackQuality: {\n        get: () => this.tech_.getVideoPlaybackQuality(),\n        enumerable: true\n      }\n    });\n    this.tech_.one('canplay', this.playlistController_.setupFirstPlay.bind(this.playlistController_));\n    this.tech_.on('bandwidthupdate', () => {\n      if (this.options_.useBandwidthFromLocalStorage) {\n        updateVhsLocalStorage({\n          bandwidth: this.bandwidth,\n          throughput: Math.round(this.throughput)\n        });\n      }\n    });\n    this.playlistController_.on('selectedinitialmedia', () => {\n      // Add the manual rendition mix-in to VhsHandler\n      renditionSelectionMixin(this);\n    });\n    this.playlistController_.sourceUpdater_.on('createdsourcebuffers', () => {\n      this.setupEme_();\n    }); // the bandwidth of the primary segment loader is our best\n    // estimate of overall bandwidth\n\n    this.on(this.playlistController_, 'progress', function () {\n      this.tech_.trigger('progress');\n    }); // In the live case, we need to ignore the very first `seeking` event since\n    // that will be the result of the seek-to-live behavior\n\n    this.on(this.playlistController_, 'firstplay', function () {\n      this.ignoreNextSeekingEvent_ = true;\n    });\n    this.setupQualityLevels_(); // do nothing if the tech has been disposed already\n    // this can occur if someone sets the src in player.ready(), for instance\n\n    if (!this.tech_.el()) {\n      return;\n    }\n    this.mediaSourceUrl_ = window$1.URL.createObjectURL(this.playlistController_.mediaSource);\n    this.tech_.src(this.mediaSourceUrl_);\n  }\n  createKeySessions_() {\n    const audioPlaylistLoader = this.playlistController_.mediaTypes_.AUDIO.activePlaylistLoader;\n    this.logger_('waiting for EME key session creation');\n    waitForKeySessionCreation({\n      player: this.player_,\n      sourceKeySystems: this.source_.keySystems,\n      audioMedia: audioPlaylistLoader && audioPlaylistLoader.media(),\n      mainPlaylists: this.playlists.main.playlists\n    }).then(() => {\n      this.logger_('created EME key session');\n      this.playlistController_.sourceUpdater_.initializedEme();\n    }).catch(err => {\n      this.logger_('error while creating EME key session', err);\n      this.player_.error({\n        message: 'Failed to initialize media keys for EME',\n        code: 3\n      });\n    });\n  }\n  handleWaitingForKey_() {\n    // If waitingforkey is fired, it's possible that the data that's necessary to retrieve\n    // the key is in the manifest. While this should've happened on initial source load, it\n    // may happen again in live streams where the keys change, and the manifest info\n    // reflects the update.\n    //\n    // Because videojs-contrib-eme compares the PSSH data we send to that of PSSH data it's\n    // already requested keys for, we don't have to worry about this generating extraneous\n    // requests.\n    this.logger_('waitingforkey fired, attempting to create any new key sessions');\n    this.createKeySessions_();\n  }\n  /**\n   * If necessary and EME is available, sets up EME options and waits for key session\n   * creation.\n   *\n   * This function also updates the source updater so taht it can be used, as for some\n   * browsers, EME must be configured before content is appended (if appending unencrypted\n   * content before encrypted content).\n   */\n\n  setupEme_() {\n    const audioPlaylistLoader = this.playlistController_.mediaTypes_.AUDIO.activePlaylistLoader;\n    const didSetupEmeOptions = setupEmeOptions({\n      player: this.player_,\n      sourceKeySystems: this.source_.keySystems,\n      media: this.playlists.media(),\n      audioMedia: audioPlaylistLoader && audioPlaylistLoader.media()\n    });\n    this.player_.tech_.on('keystatuschange', e => {\n      if (e.status !== 'output-restricted') {\n        return;\n      }\n      const mainPlaylist = this.playlistController_.main();\n      if (!mainPlaylist || !mainPlaylist.playlists) {\n        return;\n      }\n      const excludedHDPlaylists = []; // Assume all HD streams are unplayable and exclude them from ABR selection\n\n      mainPlaylist.playlists.forEach(playlist => {\n        if (playlist && playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height >= 720) {\n          if (!playlist.excludeUntil || playlist.excludeUntil < Infinity) {\n            playlist.excludeUntil = Infinity;\n            excludedHDPlaylists.push(playlist);\n          }\n        }\n      });\n      if (excludedHDPlaylists.length) {\n        videojs.log.warn('DRM keystatus changed to \"output-restricted.\" Removing the following HD playlists ' + 'that will most likely fail to play and clearing the buffer. ' + 'This may be due to HDCP restrictions on the stream and the capabilities of the current device.', ...excludedHDPlaylists); // Clear the buffer before switching playlists, since it may already contain unplayable segments\n\n        this.playlistController_.fastQualityChange_();\n      }\n    });\n    this.handleWaitingForKey_ = this.handleWaitingForKey_.bind(this);\n    this.player_.tech_.on('waitingforkey', this.handleWaitingForKey_); // In IE11 this is too early to initialize media keys, and IE11 does not support\n    // promises.\n\n    if (videojs.browser.IE_VERSION === 11 || !didSetupEmeOptions) {\n      // If EME options were not set up, we've done all we could to initialize EME.\n      this.playlistController_.sourceUpdater_.initializedEme();\n      return;\n    }\n    this.createKeySessions_();\n  }\n  /**\n   * Initializes the quality levels and sets listeners to update them.\n   *\n   * @method setupQualityLevels_\n   * @private\n   */\n\n  setupQualityLevels_() {\n    const player = videojs.players[this.tech_.options_.playerId]; // if there isn't a player or there isn't a qualityLevels plugin\n    // or qualityLevels_ listeners have already been setup, do nothing.\n\n    if (!player || !player.qualityLevels || this.qualityLevels_) {\n      return;\n    }\n    this.qualityLevels_ = player.qualityLevels();\n    this.playlistController_.on('selectedinitialmedia', () => {\n      handleVhsLoadedMetadata(this.qualityLevels_, this);\n    });\n    this.playlists.on('mediachange', () => {\n      handleVhsMediaChange(this.qualityLevels_, this.playlists);\n    });\n  }\n  /**\n   * return the version\n   */\n\n  static version() {\n    return {\n      '@videojs/http-streaming': version$4,\n      'mux.js': version$3,\n      'mpd-parser': version$2,\n      'm3u8-parser': version$1,\n      'aes-decrypter': version\n    };\n  }\n  /**\n   * return the version\n   */\n\n  version() {\n    return this.constructor.version();\n  }\n  canChangeType() {\n    return SourceUpdater.canChangeType();\n  }\n  /**\n   * Begin playing the video.\n   */\n\n  play() {\n    this.playlistController_.play();\n  }\n  /**\n   * a wrapper around the function in PlaylistController\n   */\n\n  setCurrentTime(currentTime) {\n    this.playlistController_.setCurrentTime(currentTime);\n  }\n  /**\n   * a wrapper around the function in PlaylistController\n   */\n\n  duration() {\n    return this.playlistController_.duration();\n  }\n  /**\n   * a wrapper around the function in PlaylistController\n   */\n\n  seekable() {\n    return this.playlistController_.seekable();\n  }\n  /**\n   * Abort all outstanding work and cleanup.\n   */\n\n  dispose() {\n    if (this.playbackWatcher_) {\n      this.playbackWatcher_.dispose();\n    }\n    if (this.playlistController_) {\n      this.playlistController_.dispose();\n    }\n    if (this.qualityLevels_) {\n      this.qualityLevels_.dispose();\n    }\n    if (this.tech_ && this.tech_.vhs) {\n      delete this.tech_.vhs;\n    }\n    if (this.mediaSourceUrl_ && window$1.URL.revokeObjectURL) {\n      window$1.URL.revokeObjectURL(this.mediaSourceUrl_);\n      this.mediaSourceUrl_ = null;\n    }\n    if (this.tech_) {\n      this.tech_.off('waitingforkey', this.handleWaitingForKey_);\n    }\n    super.dispose();\n  }\n  convertToProgramTime(time, callback) {\n    return getProgramTime({\n      playlist: this.playlistController_.media(),\n      time,\n      callback\n    });\n  } // the player must be playing before calling this\n\n  seekToProgramTime(programTime, callback, pauseAfterSeek = true, retryCount = 2) {\n    return seekToProgramTime({\n      programTime,\n      playlist: this.playlistController_.media(),\n      retryCount,\n      pauseAfterSeek,\n      seekTo: this.options_.seekTo,\n      tech: this.options_.tech,\n      callback\n    });\n  }\n}\n/**\n * The Source Handler object, which informs video.js what additional\n * MIME types are supported and sets up playback. It is registered\n * automatically to the appropriate tech based on the capabilities of\n * the browser it is running in. It is not necessary to use or modify\n * this object in normal usage.\n */\n\nconst VhsSourceHandler = {\n  name: 'videojs-http-streaming',\n  VERSION: version$4,\n  canHandleSource(srcObj, options = {}) {\n    const localOptions = merge(videojs.options, options);\n    return VhsSourceHandler.canPlayType(srcObj.type, localOptions);\n  },\n  handleSource(source, tech, options = {}) {\n    const localOptions = merge(videojs.options, options);\n    tech.vhs = new VhsHandler(source, tech, localOptions);\n    tech.vhs.xhr = xhrFactory();\n    tech.vhs.src(source.src, source.type);\n    return tech.vhs;\n  },\n  canPlayType(type, options) {\n    const simpleType = simpleTypeFromSourceType(type);\n    if (!simpleType) {\n      return '';\n    }\n    const overrideNative = VhsSourceHandler.getOverrideNative(options);\n    const supportsTypeNatively = Vhs.supportsTypeNatively(simpleType);\n    const canUseMsePlayback = !supportsTypeNatively || overrideNative;\n    return canUseMsePlayback ? 'maybe' : '';\n  },\n  getOverrideNative(options = {}) {\n    const {\n      vhs = {}\n    } = options;\n    const defaultOverrideNative = !(videojs.browser.IS_ANY_SAFARI || videojs.browser.IS_IOS);\n    const {\n      overrideNative = defaultOverrideNative\n    } = vhs;\n    return overrideNative;\n  }\n};\n/**\n * Check to see if the native MediaSource object exists and supports\n * an MP4 container with both H.264 video and AAC-LC audio.\n *\n * @return {boolean} if  native media sources are supported\n */\n\nconst supportsNativeMediaSources = () => {\n  return browserSupportsCodec('avc1.4d400d,mp4a.40.2');\n}; // register source handlers with the appropriate techs\n\nif (supportsNativeMediaSources()) {\n  videojs.getTech('Html5').registerSourceHandler(VhsSourceHandler, 0);\n}\nvideojs.VhsHandler = VhsHandler;\nvideojs.VhsSourceHandler = VhsSourceHandler;\nvideojs.Vhs = Vhs;\nif (!videojs.use) {\n  videojs.registerComponent('Vhs', Vhs);\n}\nvideojs.options.vhs = videojs.options.vhs || {};\nif (!videojs.getPlugin || !videojs.getPlugin('reloadSourceOnError')) {\n  videojs.registerPlugin('reloadSourceOnError', reloadSourceOnError);\n}\n\nexport { videojs as default };\n"],"names":["version$6","hooks_","hooks","type","fn","concat","removeHook","index","indexOf","slice","splice","FullscreenApi","prefixed","apiMap","specApi","browserApi","i","length","history","log$1","createLogger$1","name","logByType","level","log","args","lvl","levels","lvlRegExp","RegExp","unshift","toUpperCase","push","info","test","Array","isArray","LogByTypeFactory","createLogger","subname","all","off","debug","warn","error","DEFAULT","hasOwnProperty","Error","filter","fname","historyItem","clear","disable","enable","toString","Object","prototype","keys","object","isObject","each","forEach","key","reduce","initial","accum","value","isPlain","call","constructor","merge$1","sources","result","source","defineLazyProperty","obj","getValue","setter","set","defineProperty","enumerable","writable","options","configurable","get","Obj","freeze","__proto__","merge","ANDROID_VERSION","IS_IPOD","IOS_VERSION","IS_ANDROID","IS_FIREFOX","IS_EDGE","IS_CHROMIUM","IS_CHROME","CHROMIUM_VERSION","CHROME_VERSION","IE_VERSION","IS_SAFARI","IS_WINDOWS","IS_IPAD","IS_IPHONE","TOUCH_ENABLED","Boolean","isReal","maxTouchPoints","UAD","userAgentData","platform","brands","find","b","brand","version","USER_AGENT","userAgent","match","major","parseFloat","minor","exec","IS_IOS","IS_ANY_SAFARI","browser","isNonBlankString","str","trim","isEl","nodeType","isInFrame","x","createQuerier","method","selector","context","ctx","createEl","tagName","properties","attributes","content","el","getOwnPropertyNames","propName","val","textContent","attrName","setAttribute","appendContent","text","innerText","prependTo","child","parent","firstChild","insertBefore","appendChild","hasClass","element","classToCheck","throwIfWhitespace","classList","contains","addClass","classesToAdd","add","prev","current","split","removeClass","classesToRemove","remove","toggleClass","classToToggle","predicate","undefined","className","toggle","setAttributes","attrValue","removeAttribute","getAttributes","tag","knownBooleans","attrs","attrVal","getAttribute","attribute","blockTextSelection","focus","unblockTextSelection","getBoundingClientRect","parentNode","rect","k","height","computedStyle","width","findPosition","offsetParent","left","top","offsetWidth","offsetHeight","fullscreenElement","offsetLeft","offsetTop","getPointerPosition","event","translated","y","item","nodeName","toLowerCase","transform","values","map","Number","position","boxTarget","target","box","boxW","boxH","offsetY","offsetX","changedTouches","pageX","pageY","Math","max","min","isTextNode","emptyEl","removeChild","normalizeContent","node","insertContent","isSingleLeftClick","button","buttons","$","$$","prop","computedStyleValue","e","getPropertyValue","Dom","videojs$1","_windowLoaded","autoSetup","vids","audios","divs","mediaEls","mediaEl","autoSetupTimeout","player","wait","vjs","setWindowLoaded","createStyleElement","style","setTextContent","styleSheet","cssText","DomData","WeakMap","_supportsPassive","_guid","newGUID","_cleanUpEvents","elem","has","data","handlers","removeEventListener","dispatcher","detachEvent","disabled","delete","_handleMultipleEvents","types","callback","fixEvent","fixed_","returnTrue","returnFalse","isPropagationStopped","isImmediatePropagationStopped","old","preventDefault","srcElement","relatedTarget","fromElement","toElement","returnValue","defaultPrevented","stopPropagation","cancelBubble","stopImmediatePropagation","clientX","doc","body","scrollLeft","clientLeft","clientY","scrollTop","clientTop","which","charCode","keyCode","supportsPassive","opts","passiveEvents","on","guid","hash","handlersCopy","m","n","addEventListener","passive","attachEvent","removeType","t","trigger","elemData","ownerDocument","bubbles","targetData","one","func","apply","this","arguments","any","Events","UPDATE_REFRESH_INTERVAL","bind_","uid","bound","bind","throttle","last","now","debounce","immediate","timeout","debounced","self","later","clearTimeout","setTimeout","cancel","Fn","EVENT_MAP","EventTarget$2","ael","allowedEvents_","queueTrigger","Map","oldTimeout","size","dispatchEvent","objName","name_","isEvented","eventBusEl_","every","isValidEventType","validateTarget","fnName","validateEventType","validateListener","listener","normalizeListenArgs","isTargetingSelf","shift","listen","EventedMixin","removeListenerOnDispose","removeRemoverOnTargetDispose","wrapper","largs","targetOrType","typeOrListener","evented","eventBusKey","assign","eventedCallbacks","el_","StatefulMixin","state","setState","stateUpdates","changes","from","to","stateful","defaultState","handleStateChanged","string","replace","w","toTitleCase$1","titleCaseEquals","str1","str2","Str","toTitleCase","Component$1","ready","play","player_","isDisposed_","parentComponent_","options_","id_","id","c","handleLanguagechange","children_","childIndex_","childNameIndex_","setTimeoutIds_","Set","setIntervalIds_","rafIds_","namedRafs_","clearingTimersOnDispose_","initChildren","reportTouchActivity","enableTouchActivity","dispose","readyQueue_","restoreEl","replaceChild","isDisposed","localize","tokens","defaultValue","code","language","languages","primaryCode","primaryLang","localizedString","ret","contentEl","contentEl_","children","getChildById","getChild","getDescendant","names","acc","currentChild","addChild","component","componentName","componentClassName","componentClass","ComponentClass","getComponent","refNode","childFound","compEl","parentOptions","handleAdd","playerOptions","newChild","workingChildren","Tech","some","wchild","isTech","buildCSSClass","sync","isReady_","triggerReady","readyQueue","show","hide","lockShowing","unlockShowing","num","skipListeners","dimension","dimensions","widthOrHeight","pxIndex","parseInt","currentDimension","computedWidthOrHeight","isNaN","rule","currentDimensions","currentWidth","currentHeight","blur","handleKeyDown","handleKeyPress","emitTapEvents","touchStart","firstTouch","couldBeTap","touches","xdiff","ydiff","sqrt","noTap","reportUserActivity","report","touchHolding","clearInterval","setInterval","touchEnd","timeoutId","clearTimersOnDispose_","interval","intervalId","requestAnimationFrame","requestNamedAnimationFrame","cancelNamedAnimationFrame","cancelAnimationFrame","idName","cancelName","static","ComponentToRegister","isComp","isPrototypeOf","reason","components_","Player","players","playerNames","pname","getRange","valueIndex","ranges","rangeIndex","maxIndex","rangeCheck","createTimeRangesObj","timeRangesObj","start","end","iterator","createTimeRanges$1","registerComponent","defaultImplementation","seconds","guide","s","floor","h","gm","gh","Infinity","implementation","setFormatTime","customImplementation","resetFormatTime","formatTime","Time","createTimeRanges","createTimeRange","bufferedPercent","buffered","duration","bufferedDuration","MediaError","message","defaultMessages","status","errorTypes","errNum","isPromise","then","silencePromise","trackToJson_","track","cues","cue","startTime","endTime","textTrackConverter","tech","trackEls","trackObjs","trackEl","json","src","textTracks","addedTrack","addRemoteTextTrack","addCue","MODAL_CLASS_NAME","ModalDialog","super","handleKeyDown_","close_","close","opened_","hasBeenOpened_","hasBeenFilled_","closeable","uncloseable","role","descEl_","description","tabIndex","label","previouslyActiveEl_","desc","open","fillAlways","fill","wasPlaying_","paused","pauseOnOpen","pause","hadControls_","controls","conditionalFocus_","opened","conditionalBlur_","temporary","closeable_","temp","controlText","fillWith","parentEl","nextSiblingEl","nextSibling","empty","closeButton","content_","activeEl","playerEl","focusableEls","focusableEls_","querySelector","focusIndex","shiftKey","allChildren","querySelectorAll","hasAttribute","TrackList","tracks","tracks_","addTrack","labelchange_","removeTrack","rtrack","l","getTrackById","change","addtrack","removetrack","labelchange","disableOthers$1","list","enabled","disableOthers","selected","TextTrackList","queueChange_","triggerSelectedlanguagechange","triggerSelectedlanguagechange_","kind","selectedlanguagechange_","TextTrackCueList","setCues_","length_","oldLength","cues_","defineProp","getCueById","VideoTrackKind","alternative","captions","main","sign","subtitles","commentary","AudioTrackKind","TextTrackKind","descriptions","chapters","metadata","TextTrackMode","hidden","showing","Track","trackProps","newLabel","parseUrl","url","props","a","href","details","protocol","host","getAbsoluteURL","getFileExtension","path","pathParts","pop","isCrossOrigin","winLoc","urlInfo","Url","parseCues","srcContent","parser","Parser","StringDecoder","errors","oncue","onparsingerror","onflush","parse","groupCollapsed","groupEnd","flush","loadTrack","uri","crossOrigin","cors","withCredentials","tech_","err","response","responseBody","loaded_","TextTrack","settings","srclang","mode","default_","default","activeCues_","preload_","preloadTextTracks","activeCues","changed","timeupdateHandler","rvf_","requestVideoFrameCallback","stopTracking","startTracking","defineProperties","newMode","ct","currentTime","active","cancelVideoFrameCallback","originalCue","VTTCue","originalCue_","removeCue","cuechange","AudioTrack","newEnabled","VideoTrack","newSelected","HTMLTrackElement","readyState","NONE","LOADED","load","LOADING","ERROR","NORMAL","audio","ListClass","changing_","enabledChange_","TrackClass","capitalName","video","selectedChange_","getterName","privateName","REMOTE","remoteText","remoteTextEl","trackElements","trackElements_","addTrackElement_","trackElement","getTrackElementByTrack_","trackElement_","removeTrackElement_","ALL","onDurationChange_","onDurationChange","trackProgress_","trackProgress","trackCurrentTime_","trackCurrentTime","stopTrackingCurrentTime_","stopTrackingCurrentTime","disposeSourceHandler_","disposeSourceHandler","queuedHanders_","hasStarted_","featuresProgressEvents","manualProgressOn","featuresTimeupdateEvents","manualTimeUpdatesOn","nativeCaptions","nativeTextTracks","featuresNativeTextTracks","emulateTextTracks","autoRemoteTextTracks_","initTrackListeners","nativeControlsForTouch","triggerSourceset","manualProgress","manualProgressOff","stopTrackingProgress","progressInterval","numBufferedPercent","bufferedPercent_","duration_","manualTimeUpdates","manualTimeUpdatesOff","currentTimeInterval","manuallyTriggered","clearTracks","removeRemoteTextTrack","cleanupAutoTextTracks","reset","setCrossOrigin","error_","played","setScrubbing","_isScrubbing","scrubbing","setCurrentTime","_seconds","trackListChanges","addWebVttScript_","script","onload","onerror","remoteTracks","remoteTextTracks","handleAddTrack","handleRemoveTrack","updateDisplay","textTracksChanges","addTextTrack","createTrackHelper","createRemoteTextTrack","manualCleanup","htmlTrackElement","remoteTextTrackEls","getVideoPlaybackQuality","requestPictureInPicture","Promise","reject","disablePictureInPicture","setDisablePictureInPicture","cb","setPoster","playsinline","setPlaysinline","overrideNativeAudioTracks","override","overrideNativeVideoTracks","canPlayType","_type","srcObj","techs_","canPlaySource","defaultTechOrder_","featuresVolumeControl","featuresMuteControl","featuresFullscreenResize","featuresPlaybackRate","featuresSourceset","featuresVideoFrameCallback","withSourceHandlers","_Tech","registerSourceHandler","handler","sourceHandlers","can","selectSourceHandler","canHandleSource","sh","originalFn","sourceHandler_","setSource","nativeSourceHandler","currentSource_","handleSource","registerTech","middlewares","middlewareInstances","TERMINATOR","next","setSourceHelper","mediate","middleware","arg","callMethod","middlewareValue","middlewareIterator","terminated","mws","mw","executeRight","allowedGetters","muted","seekable","volume","ended","allowedSetters","setMuted","setVolume","allowedMediators","lastRun","mwFactory","mwrest","mwf","mwi","getOrCreateFactory","_src","MimetypesKind","opus","ogv","mp4","mov","m4v","mkv","m4a","mp3","aac","caf","flac","oga","wav","m3u8","mpd","jpg","jpeg","gif","png","svg","webp","getMimetype","ext","filterSource","newsrc","srcobj","fixSource","mimetype","j","techOrder","techName","getTech","isSupported","loadTech_","ClickableComponent","handleMouseOver_","handleMouseOver","handleMouseOut_","handleMouseOut","handleClick_","handleClick","tabIndex_","createControlTextEl","controlTextEl_","controlText_","localizedText","nonIconControl","noUITitleAttributes","enabled_","clickHandler","PosterImage","update","update_","crossorigin","poster","setSrc","loading","alt","darkGray","lightGray","fontMap","monospace","sansSerif","serif","monospaceSansSerif","monospaceSerif","proportionalSansSerif","proportionalSerif","casual","smallcaps","constructColor","color","opacity","hex","tryUpdateStyle","updateDisplayHandler","toggleDisplay","preselectTrack","screenOrientation","orientation","changeOrientationEvent","modes","trackList","userPref","cache_","selectedLanguage","firstDesc","firstCaptions","preferredTrack","clearDisplay","processCues","allowMultipleShowingTracks","showingTracks","updateForTrack","descriptionsTrack","captionsSubtitlesTrack","updateDisplayState","overrides","textTrackSettings","getValues","cueDiv","displayState","textOpacity","backgroundColor","backgroundOpacity","windowColor","windowOpacity","edgeStyle","textShadow","fontPercent","fontSize","fontFamily","fontVariant","cueEl","isAudio","playerType","dir","Button","BigPlayButton","mouseused_","handleMouseDown","playPromise","playToggle","playFocus","PlayToggle","replay","handlePlay","handlePause","handleEnded","handleSeeked","TimeDisplay","updateContent","updateTextNode_","span","labelText_","textNode_","time","formattedTime_","oldNode","CurrentTimeDisplay","getCache","DurationDisplay","div","RemainingTimeDisplay","displayNegative","remainingTimeDisplay","remainingTime","updateShowing","SeekToLive","updateLiveEdgeStatus","liveTracker","updateLiveEdgeStatusHandler_","textEl_","atLiveEdge","seekToLiveEdge","clamp","number","Num","Slider","handleMouseDown_","handleMouseUp_","handleMouseUp","handleMouseMove_","handleMouseMove","bar","barName","vertical","playerEvent","progress","getProgress","progress_","sizeKey","toFixed","getPercent","calculateDistance","stepBack","stepForward","bool","vertical_","percentify","partEls_","loadedText","separator","percentageEl_","isLive","seekableEnd","bufferedEnd","percent","percent_","part","dataset","seekBarRect","seekBarPoint","tooltipRect","playerRect","seekBarPointPx","spaceLeftOfPoint","spaceRightOfPoint","right","pullTooltipBy","round","write","updateTime","liveWindow","secondsBehind","PlayProgressBar","timeTooltip","MouseTimeDisplay","SeekBar","setEventHandlers_","updateInterval","enableIntervalHandler_","enableInterval_","disableIntervalHandler_","disableInterval_","toggleVisibility_","getCurrentTime_","liveCurrentTime","currentTime_","userSeek_","nextSeekedFromUser","seekableStart","videoWasPlaying","mouseDown","newTime","distance","mouseTimeDisplay","handleAction","gotoFraction","STEP_SECONDS","ProgressControl","throttledHandleMouseSeek","handleMouseSeek","handleMouseUpHandler_","handleMouseDownHandler_","seekBar","playProgressBar","seekBarEl","removeListenersAddedOnMousedownAndTouchstart","PictureInPictureToggle","handlePictureInPictureChange","handlePictureInPictureEnabledChange","currentType","substring","audioPosterMode","audioOnlyMode","isInPictureInPicture","exitPictureInPicture","enableDocumentPictureInPicture","FullscreenToggle","handleFullscreenChange","fsApi_","fullscreenEnabled","isFullscreen","exitFullscreen","requestFullscreen","rangeBarRect","rangeBarPoint","volumeBarPointPx","updateVolume","MouseVolumeLevelDisplay","bottom","VolumeBar","updateLastVolume_","updateARIAAttributes","mouseVolumeLevelDisplay","volumeBarEl","volumeBarRect","volumeBarPoint","checkMuted","ariaValue","volumeAsPercentage_","volumeBeforeDrag","lastVolume_","VolumeControl","volumeBar","checkVolumeSupport","throttledHandleMouseMove","orientationClass","MuteToggle","checkMuteSupport","vol","lastVolume","volumeToSet","updateIcon_","updateControlText_","VolumePanel","inline","volumeControl","handleKeyPressHandler_","volumePanelState_","muteToggle","handleVolumeControlKeyUp","sliderActive_","sliderInactive_","validOptions","skipTime","getSkipForwardTime","includes","controlBar","skipButtons","forward","currentVideoTime","SkipBackward","getSkipBackwardTime","backward","Menu","menuButton_","menuButton","focusedChild_","boundHandleBlur_","handleBlur","boundHandleTapClick_","handleTapClick","addEventListenerForItem","removeEventListenerForItem","addItem","childComponent","contentElType","append","btn","buttonPressed_","unpressButton","childComponents","foundComponent","stepChild","MenuButton","buttonClass","handleMenuKeyUp_","handleMenuKeyUp","menu","handleMouseLeave","handleSubmenuKeyDown","createMenu","items","hideThreshold_","title","titleEl","titleComponent","createItems","buildWrapperCSSClass","menuButtonClass","pressButton","handleSubmenuKeyPress","TrackButton","updateHandler","MenuKeys","MenuItem","selectable","isSelected_","multiSelectable","TextTrackMenuItem","kinds","changeHandler","handleTracksChange","selectedLanguageChangeHandler","handleSelectedLanguageChange","onchange","initEvent","referenceTrack","shouldBeSelected","OffTextTrackMenuItem","join","allHidden","TextTrackButton","TrackMenuItem","label_","kinds_","kind_","ChaptersTrackMenuItem","ChaptersButton","selectCurrentItem_","track_","findChaptersTrack","setTrack","updateHandler_","remoteTextTrackEl","getMenuCaption","mi","DescriptionsButton","SubtitlesButton","CaptionSettingsMenuItem","CaptionsButton","SubsCapsMenuItem","parentSpan","SubsCapsButton","language_","AudioTrackMenuItem","audioTracks","featuresNativeAudioTracks","AudioTrackButton","PlaybackRateMenuItem","rate","playbackRate","PlaybackRateMenuButton","labelElId_","updateVisibility","updateLabel","handlePlaybackRateschange","labelEl_","rates","playbackRates","playbackRateSupported","Spacer","ControlBar","ErrorDisplay","LOCAL_STORAGE_KEY$1","COLOR_BLACK","COLOR_BLUE","COLOR_CYAN","COLOR_GREEN","COLOR_MAGENTA","COLOR_RED","COLOR_WHITE","COLOR_YELLOW","OPACITY_OPAQUE","OPACITY_SEMI","OPACITY_TRANS","selectConfigs","v","parseOptionValue","endDialog","setDefaults","persistTextTrackSettings","saveSettings","config","restoreSettings","createElSelect_","legendId","selectLabelledbyIds","o","optionId","createElFgColor_","createElBgColor_","createElWinColor_","createElColors_","innerHTML","createElFont_","createElControls_","defaultsDescription","selectedIndex","setValues","setSelectedOption","JSON","getItem","setItem","stringify","removeItem","ttDisplay","subsCapsBtn","subsCapsButton","ccBtn","captionsButton","RESIZE_OBSERVER_AVAILABLE","ResizeObserver","loadListener_","resizeObserver_","debouncedHandler_","resizeHandler","observe","contentWindow","unloadListener_","unobserve","disconnect","resizeObserver","defaults","trackingThreshold","liveTolerance","trackLiveHandler_","trackLive_","handlePlay_","handleFirstTimeupdate_","handleFirstTimeupdate","handleSeeked_","seekToLiveEdge_","reset_","handleDurationchange","toggleTracking","deltaTime","lastTime_","pastSeekEnd_","pastSeekEnd","isBehind","seekedBehindLive_","abs","timeupdateSeen_","behindLiveEdge_","liveui","isTracking","hasStarted","trackingInterval_","timeDiff","nextSeekedFromUser_","lastSeekEnd_","seekableEnds","sort","seekableStarts","behindLiveEdge","updateDom_","els","techEl","techAriaAttrs","techAriaAttr","sourcesetLoad","srcUrls","innerHTMLDescriptorPolyfill","cloneNode","dummy","docFrag","childNodes","getDescriptor","priority","descriptor","getOwnPropertyDescriptor","firstSourceWatch","resetSourceWatch_","innerDescriptor","getInnerHTMLDescriptor","appendWrapper","appendFn","retval","srcDescriptorPolyfill","setupSourceset","resetSourceset_","srcDescriptor","getSrcDescriptor","oldSetAttribute","oldLoad","currentSrc","Html5","crossoriginTracks","initNetworkState_","handleLateInit_","enableSourceset","setupSourcesetHandling_","isScrubbing_","hasChildNodes","nodes","nodesLength","removeNodes","proxyNativeTracks_","restoreMetadataTracksInIOSNativePlayer_","setControls","proxyWebkitFullscreen_","disposeMediaElement","metadataTracksPreFullscreenState","takeMetadataTrackSnapshot","storedMode","restoreTrackMode","storedTrack","overrideNative_","lowerCaseType","eventName","proxyNativeTracksForType_","elTracks","techTracks","listeners","currentTarget","removeOldTracks","removeTracks","found","playerElIngest","movingMediaElementInDOM","clone","techId","class","playerId","preload","settingsAttrs","attr","networkState","loadstartFired","setLoadstartFired","triggerLoadstart","eventsToTrigger","isScrubbing","fastSeek","checkProgress","NaN","endFn","beginFn","webkitPresentationMode","nativeIOSFullscreen","supportsFullScreen","webkitEnterFullScreen","enterFullScreen","HAVE_METADATA","exitFullScreen","webkitDisplayingFullscreen","webkitExitFullScreen","webkitKeys","resetMediaElement","videoPlaybackQuality","webkitDroppedFrameCount","webkitDecodedFrameCount","droppedVideoFrames","totalVideoFrames","creationTime","TEST_VID","canControlVolume","canControl","canMuteVolume","canControlPlaybackRate","canOverrideAttributes","noop","supportsNativeTextTracks","supportsNativeVideoTracks","videoTracks","supportsNativeAudioTracks","TECH_EVENTS_RETRIGGER","TECH_EVENTS_QUEUE","canplay","canplaythrough","playing","seeked","BREAKPOINT_ORDER","BREAKPOINT_CLASSES","charAt","DEFAULT_BREAKPOINTS","tiny","xsmall","small","medium","large","xlarge","huge","getTagSettings","closest","boundDocumentFullscreenChange_","documentFullscreenChange_","boundFullWindowOnEscKey_","fullWindowOnEscKey","boundUpdateStyleEl_","updateStyleEl_","boundApplyInitTime_","applyInitTime_","boundUpdateCurrentBreakpoint_","updateCurrentBreakpoint_","boundHandleTechClick_","handleTechClick_","boundHandleTechDoubleClick_","handleTechDoubleClick_","boundHandleTechTouchStart_","handleTechTouchStart_","boundHandleTechTouchMove_","handleTechTouchMove_","boundHandleTechTouchEnd_","handleTechTouchEnd_","boundHandleTechTap_","handleTechTap_","isFullscreen_","isPosterFromTech_","queuedCallbacks_","userActive_","debugEnabled_","audioOnlyMode_","audioPosterMode_","audioOnlyCache_","playerHeight","hiddenChildren","tagAttributes","languagesToLower","languages_","resetCache_","poster_","controls_","changingSrc_","playCallbacks_","playTerminatedQueue_","autoplay","plugins","scrubbing_","fullscreenchange","fluid_","playerOptionsCopy","middleware_","majorVersion","userActive","listenForUserActivity_","breakpoints","responsive","styleEl_","playerElIngest_","divEmbed","tabindex","defaultsStyleEl","head","fill_","fluid","aspectRatio","links","getElementsByTagName","linkEl","techGet_","techCall_","posterImage","privDimension","parsedVal","ratio","aspectRatio_","width_","height_","idClass","videoWidth","videoHeight","ratioParts","ratioMultiplier","unloadTech_","titleTechName","camelTechName","techName_","normalizeAutoplay","techOptions","loop","techCanOverridePoster","TechClass","handleTechReady_","textTracksJson_","eventObj","seeking","handleTechLoadStart_","handleTechSourceset_","handleTechWaiting_","handleTechEnded_","handleTechSeeking_","handleTechPlay_","handleTechPause_","handleTechDurationChange_","handleTechFullscreenChange_","handleTechFullscreenError_","handleTechEnterPictureInPicture_","handleTechLeavePictureInPicture_","handleTechError_","handleTechPosterChange_","handleTechTextData_","handleTechRateChange_","usingNativeControls","addTechControlsListeners_","safety","removeTechControlsListeners_","manualAutoplay_","resolveMuted","previouslyMuted","restoreMuted","mutedPromise","catch","promise","updateSourceCaches_","matchingSources","findMimetype","sourceElSources","sourceEls","matchingSourceEls","sourceObj","updateSourceCaches","playerSrc","currentSource","eventSrc","lastSource_","techSrc","techGet","request","lastPlaybackRate","queued","timeWhenWaiting","timeUpdateListener","handleTechCanPlay_","handleTechCanPlayThrough_","handleTechPlaying_","handleTechSeeked_","userActions","click","doubleClick","userWasActive","cancelable","toggleFullscreenClass_","targetPlayer","isFs","matches","fullscreen","msMatchesSelector","togglePictureInPictureClass_","initTime","inactivityTimeout","defaultPlaybackRate","media","reduceRight","resolve","play_","isSrcReady","isSafariOrIOS","waitToPlay_","resetProgressBar_","runPlayTerminatedQueue_","runPlayCallbacks_","queue","q","callbacks","percentAsDecimal","defaultMuted","isFS","oldValue","fullscreenOptions","offHandler","errorHandler","requestFullscreenHelper_","fsOptions","preferFullWindow","enterFullWindow","exitFullscreenHelper_","exitFullWindow","isFullWindow","docOrigOverflow","overflow","isPiP","isInPictureInPicture_","pipContainer","titleBar","requestWindow","initialAspectRatio","copyStyleSheets","pipWindow","document","pipVideo","replaceWith","window","hotkeys","isContentEditable","excludeElement","activeElement","handleHotkeys","fullscreenKey","keydownEvent","muteKey","playPauseKey","FSToggle","selectSource","techs","findFirstPassingTechSourcePair","outerArray","innerArray","tester","outerChoice","innerChoice","foundSourceAndTech","finder","sourceOrder","handleSrc_","isRetry","resetRetryOnError_","middlewareSource","src_","notSupportedMessage","setTech","retry","stopListeningForErrors","sourceTech","doReset_","resetControlBarUI_","resetPlaybackRate_","resetVolumeBar_","currentTimeDisplay","durationDisplay","progressControl","loadProgressBar","currentSources","techAutoplay","newPoster","usingNativeControls_","hookFunction","newErr","suppressNotSupportedError","triggerSuppressedError","errorDisplay","userActivity_","mouseInProgress","lastMoveX","lastMoveY","handleActivity","handleMouseUpAndMouseLeave","screenX","screenY","isAudio_","enableAudioOnlyUI_","playerChildren","controlBarHeight","disableAudioOnlyUI_","exitPromises","enablePosterModeUI_","disablePosterModeUI_","String","toJSON","createModal","modal","currentBreakpoint","candidateBreakpoint","breakpoints_","breakpoint_","removeCurrentBreakpoint_","currentBreakpointClass","responsive_","loadMedia","artist","artwork","tt","getMedia","baseOptions","tagOptions","dataSetup","childName","previousLogLevel_","newRates","navigator","html5","userLanguage","navigationUI","BASE_PLUGIN_NAME","PLUGIN_CACHE_KEY","pluginStorage","pluginExists","getPlugin","markPluginAsActive","triggerSetupEvent","before","createPluginFactory","PluginSubClass","plugin","instance","getEventHash","Plugin","VERSION","p","isBasic","basicPluginWrapper","createBasicPlugin","deprecateForMajor","oldName","newName","warned","deprecate","registerPlugin","usingPlugin","hasPlugin","normalizeId","videojs","getPlayer","TypeError","defaultView","PlayerComponent","hook","hookOnce","original","getPlayers","nId","getAllPlayers","comp","use","writeable","mergeOptions","deregisterPlugin","getPlugins","getPluginVersion","addLanguage","EventTarget","xhr","dom","QualityLevel","representation","bitrate","bandwidth","frameRate","QualityLevelList","levels_","selectedIndex_","addQualityLevel","qualityLevel","getQualityLevelById","removeQualityLevel","removed","addqualitylevel","removequalitylevel","version$5","qualityLevels","originalPluginFn","qualityLevelList","disposeHandler","initPlugin$1","resolveUrl","resolveManifestRedirect","req","responseURL","logger","TIME_FUDGE_FACTOR","SAFE_TIME_DELTA","filterRanges","timeRanges","results","findRange","findNextRange","printableRange","range","strArr","timeRangesToArray","timeRangesList","lastBufferedEnd","timeAheadOf","segmentDurationWithParts","playlist","segment","parts","preloadHints","partTargetDuration","getPartsAndSegments","segments","si","pi","segmentIndex","partIndex","getLastParts","lastSegment","getKnownPartCount","preloadSegment","partCount","count","hint","liveEdgeDelay","endList","suggestedPresentationDelay","hasParts","serverControl","partHoldBack","holdBack","targetDuration","intervalDuration","endSequence","expired","mediaSequence","precise","backwardDuration","forwardDuration","totalDuration","sumDurations","defaultDuration","durationList","startIndex","endIndex","durations","playlistEnd","useSafeLiveEnd","liveEdgePadding","lastSegmentEndTime","isExcluded","excludeUntil","Date","isIncompatible","isEnabled","excluded","isLowestEnabledRendition","playlists","currentBandwidth","BANDWIDTH","MAX_VALUE","playlistMatch","resolvedUri","someAudioVariant","AUDIO","mediaGroups","groupName","isAudioOnly","variant","CODECS","Playlist","getMediaInfoForTime","startingSegmentIndex","startingPartIndex","exactManifestTimings","partsAndSegments","partAndSegment","isDisabled","isAes","estimateSegmentRequestTime","segmentDuration","bytesReceived","createPlaylistID","groupID","group","forEachMediaGroup","mediaType","groupKey","labelKey","mediaProperties","setupMediaPlaylist","playlistErrors_","addPropertiesToMain","createGroupID","phonyUri","audioOnlyMain","groupId","setupMediaPlaylists","resolveMediaGroupUris","EventTarget$1","updateSegment","skipped","resolveSegmentUris","baseUri","getAllSegments","isPlaylistUnchanged","updateMain$1","newMedia","unchangedCheck","oldMedia","mergedPlaylist","skip","skippedSegments","offset","oldSegments","newSegments","currentMap","newIndex","oldSegment","newSegment","updateSegments","refreshDelay","lastPart","lastDuration","PlaylistLoader","vhs","logger_","vhs_","vhsOptions","customTagParsers","customTagMappers","llhls","handleMediaupdatetimeout_","parameters","canBlockReload","nextMSN","nextPart","_HLS_part","_HLS_msn","canSkipUntil","_HLS_skip","canSkipDateranges","parsedUri","searchParams","addLLHLSQueryDirectives","playlistRequestError","haveMetadata","playlistString","responseText","startingState","parseManifest_","manifestString","onwarn","oninfo","customParser","addParser","mapper","addTagMapper","manifest","parseManifest","playlistObject","lastRequest","pendingMedia_","media_","updateMediaUpdateTimeout_","stopRequest","mediaUpdateTimeout","finalRenditionTimeout","oldRequest","onreadystatechange","abort","shouldDelay","delay","mediaChange","mainPlaylistRef","started","setupInitialPlaylist","srcUri","mainForMedia","videojsXHR","callbackWrapper","reqResponse","responseType","responseTime","roundTripTime","requestTime","byteLength","headers","responseHeaders","timedout","aborted","statusCode","xhrFactory","XhrFunction","beforeRequest","Vhs","newOptions","originalAbort","segmentXhrHeaders","byterange","Range","byterangeEnd","byterangeStart","byterangeStr","textRange","formatHexString","formatAsciiString","fromCharCode","createTransferableMessage","transferable","bytes","buffer","byteOffset","initSegmentId","initSegment","segmentKeyId","hexDump","step","ascii","utils","tagDump","textRanges","getProgramTime","matchedSegment","segmentEnd","videoTimingInfo","transmuxedPresentationEnd","estimatedStart","transmuxedPresentationStart","findSegmentForPlayerTime","seekTime","programTimeObject","mediaSeconds","programTime","playerTime","dateTimeObject","transmuxerPrependedSeconds","offsetFromSegmentStart","getTime","playerTimeToProgramTime","programDateTime","toISOString","seekToProgramTime","retryCount","seekTo","pauseAfterSeek","verifyProgramDateTimeTags","lastSegmentStart","lastSegmentDuration","findSegmentForProgramTime","mediaOffset","comparisonTimeStamp","segmentDateTime","segmentTimeEpoch","getOffsetFromTimestamp","seekToTime","callbackOnCompleted","dashPlaylistUnchanged","sidx","aSegment","bSegment","aByterange","bByterange","dashGroupId","NAME","updateMain","oldMain","newMain","sidxMapping","noChanges","minimumUpdatePeriod","timelineStarts","sidxKey","playlistUpdate","removeOldMediaGroupLabels","compareSidxEntry","oldSidxMapping","newSidxMapping","currentSidxInfo","savedSidxInfo","sidxInfo","DashPlaylistLoader","srcUrlOrPlaylist","mainPlaylistLoader","mainPlaylistLoader_","isMain_","refreshXml_","refreshMedia_","loadedPlaylists_","srcUrl","sidxMapping_","childPlaylist_","requestErrored_","addSidxSegments_","mediaRequest_","fin","subarray","id3Offset","finished","endRequestAndCallback","_bytes","progressListener","newPart","beforeSend","overrideMimeType","total","loaded","containerRequest","container","internal","playlistExclusionDuration","minimumUpdatePeriodTimeout_","createMupOnMedia_","hasPendingRequest","sidxChanged","isFinalRendition","updateMinimumUpdatePeriodTimeout_","requestMain_","mainChanged","haveMain_","mainXml_","date","mainLoaded_","handleMain_","syncClientServerClock_","done","utcTiming","clientOffset_","serverTime","mainXml","clientOffset","previousManifest","manifestUri","parseMainXml","location","locations","mpl","mup","createMUPTimeout_","mediaGroupSidx","filterChangedSidxMappings","mediaID","mediaChanged","createMediaUpdateTimeout","Config","GOAL_BUFFER_LENGTH","MAX_GOAL_BUFFER_LENGTH","BACK_BUFFER_LENGTH","GOAL_BUFFER_LENGTH_RATE","INITIAL_BANDWIDTH","BANDWIDTH_VARIANCE","BUFFER_LOW_WATER_LINE","MAX_BUFFER_LOW_WATER_LINE","EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE","BUFFER_LOW_WATER_LINE_RATE","BUFFER_HIGH_WATER_LINE","browserWorkerPolyFill","workerObj","factory","objectUrl","URL","createObjectURL","Blob","blob","BlobBuilder","getBlob","worker","Worker","objURL","terminate","revokeObjectURL","getWorkerString","workerCode$1","commonjsGlobal","globalThis","g","Stream$8","init","pipe","destination","flushSource","partialFlush","endTimeline","dinf","esds","ftyp","mfhd","minf","moof","moov","mvex","mvhd","trak","tkhd","mdia","mdhd","hdlr","sdtp","stbl","stsd","traf","trex","trun$1","MAJOR_BRAND","MINOR_VERSION","AVC1_BRAND","VIDEO_HDLR","AUDIO_HDLR","HDLR_TYPES","VMHD","SMHD","DREF","STCO","STSC","STSZ","STTS","videoSample","audioSample","audioTrun","videoTrun","trunHeader","stream","MAX_UINT32$1","pow","numbers","getUint64","uint8","dv","DataView","getBigUint64","MAX_SAFE_INTEGER","getUint32","MAX_UINT32","avc1","avcC","btrt","dref","mdat","mp4a","pasp","smhd","stco","stsc","stsz","stts","styp","tfdt","tfhd","trun","vmhd","Uint8Array","charCodeAt","payload","setUint32","audioobjecttype","samplingfrequencyindex","channelcount","samplerate","sequenceNumber","trackFragments","boxes","flags","samples","dependsOn","isDependedOn","hasRedundancy","avc1Box","sps","pps","sequenceParameterSets","pictureParameterSets","profileIdc","profileCompatibility","levelIdc","sarRatio","hSpacing","vSpacing","samplesize","trackFragmentHeader","trackFragmentDecodeTime","trackFragmentRun","sampleDependencyTable","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","baseMediaDecodeTime","durationPresent","sizePresent","flagsPresent","compositionTimeOffset","bytesOffest","header","sample","isLeading","paddingValue","isNonSyncSample","degradationPriority","silence","secondsToVideoTs","secondsToAudioTs","videoTsToSeconds","audioTsToSeconds","audioTsToVideoTs","videoTsToAudioTs","metadataTsToSeconds","mp4Generator","fileType","movie","sampleForFrame","frame","dataOffset","pts","dts","keyFrame","frameUtils$1","groupNalsIntoFrames","nalUnits","currentNal","currentFrame","frames","nalCount","nalUnitType","groupFramesIntoGops","currentGop","gops","extendFirstKeyFrame","generateSampleTable","baseDataOffset","concatenateNalData","nalsByteLength","numberOfNals","view","generateSampleTableForFrame","concatenateNalDataForFrame","highPrefix","lowPrefix","zeroFill","ONE_SECOND_IN_TS$4","timestamp","sampleRate","timelineStartPts","keepOriginalTimestamps","clock$2","ONE_SECOND_IN_TS","coneOfSilence","metaTable","arr","clock$1","audioFrameUtils$1","prefixWithSilence","audioAppendStartTs","videoBaseMediaDecodeTime","baseMediaDecodeTimeTs","frameDuration","silentFrame","firstFrame","audioGapDuration","audioFillFrameCount","audioFillDuration","ceil","trimAdtsFramesByEarliestDts","adtsFrames","earliestAllowedDts","minSegmentDts","minSegmentPts","concatenateFrameData","array","sum","sumFrameByteLengths","ONE_SECOND_IN_TS$3","trackDecodeInfo$1","clearDtsInfo","maxSegmentDts","maxSegmentPts","calculateTrackBaseMediaDecodeTime","timelineStartInfo","collectDtsInfo","captionPacketParser","parseSei","payloadType","payloadSize","parseUserData","sei","parseCaptionPackets","userData","ccData","discardEmulationPreventionBytes","newLength","newData","emulationPreventionBytesPositions","sourceIndex","USER_DATA_REGISTERED_ITU_T_T35","Stream$7","cea708Parser","CaptionStream$2","parse708captions_","parse708captions","captionPackets_","ccStreams_","Cea608Stream","cc708Stream_","Cea708Stream","captionServices","cc","newCaptionPackets","escapedRBSP","latestDts_","ignoreNextEqualDts_","numSameDts_","flushCCStreams","flushType","flushStream","idx","presortIndex","packet","dispatchCea608Packet","dispatchCea708Packet","activeCea608Channel_","ccStream","setsTextOrXDSActive","setsChannel1Active","setsChannel2Active","CHARACTER_TRANSLATION_708","within708TextBlock","Cea708Window","windowNum","clearText","pendingNewLine","winAttr","penAttr","penLoc","penColor","visible","rowLock","columnLock","relativePositioning","anchorVertical","anchorHorizontal","anchorPoint","rowCount","virtualRowCount","columnCount","windowStyle","penStyle","getText","rows","rowIdx","newLine","beforeRowOverflow","isEmpty","addText","backspace","row","substr","Cea708Service","serviceNum","encoding","currentWindow","windows","createTextDecoder","startPts","win","setCurrentWindow","TextDecoder","textDecoder_","serviceProps","captionServiceEncodings","serviceName","serviceEncodings","current708Packet","services","new708Packet","add708Bytes","push708Packet","ptsVals","byte0","byte1","packet708","packetData","blockSize","seq","sizeCode","pushServiceBlock","service","initService","handleText","multiByteCharacter","extendedCommands","defineWindow","clearWindows","deleteWindows","displayWindows","hideWindows","toggleWindows","setWindowAttributes","setPenAttributes","setPenColor","setPenLocation","isExtended","getPts","byteIndex","flushDisplayed","char","charCodeArray","newCode","isMultiByte","extended","currentByte","nextByte","decode","firstByte","secondByte","fillOpacity","fillRed","fillGreen","fillBlue","borderType","borderRed","borderGreen","borderBlue","wordWrap","printDirection","scrollDirection","justify","effectSpeed","effectDirection","displayEffect","displayedText","winId","endPts","pushCaption","textTag","penSize","italics","underline","edgeType","fontStyle","fgOpacity","fgRed","fgGreen","fgBlue","bgOpacity","bgRed","bgGreen","bgBlue","edgeRed","edgeGreen","edgeBlue","column","CHARACTER_TRANSLATION","getCharFromCode","ROWS","createDisplayBuffer","BOTTOM_ROW","field","dataChannel","field_","dataChannel_","setConstants","swap","char0","char1","lastControlCode_","PADDING_","RESUME_CAPTION_LOADING_","mode_","END_OF_CAPTION_","clearFormatting","displayed_","nonDisplayed_","startPts_","ROLL_UP_2_ROWS_","rollUpRows_","setRollUp","ROLL_UP_3_ROWS_","ROLL_UP_4_ROWS_","CARRIAGE_RETURN_","shiftRowsUp_","BACKSPACE_","row_","ERASE_DISPLAYED_MEMORY_","ERASE_NON_DISPLAYED_MEMORY_","RESUME_DIRECT_CAPTIONING_","isSpecialCharacter","column_","isExtCharacter","isMidRowCode","addFormatting","isOffsetControlCode","isPAC","formatting_","isColorPAC","isNormalChar","topRow_","BASE_","EXT_","CONTROL_","OFFSET_","newBaseRow","format","reverse","popOn","baseRow","rollUp","paintOn","captionStream","CaptionStream","streamTypes","H264_STREAM_TYPE","ADTS_STREAM_TYPE","METADATA_STREAM_TYPE","Stream$6","TYPE_SHARED","handleRollover$1","reference","direction","TimestampRolloverStream$1","lastDTS","referenceDTS","type_","discontinuity","MetadataStream","timestampRolloverStream","TimestampRolloverStream","handleRollover","typedArray","fromIndex","currentIndex","typedArrayIndexOf","textEncodingDescriptionByte","percentEncode$1","parseUtf8","decodeURIComponent","parseIso88591$1","unescape","parseSyncSafeInteger$1","frameParsers","mimeTypeEndIndex","descriptionEndIndex","mimeType","pictureType","pictureData","owner","privateData","parseId3","parseId3Frames","frameSize","frameStart","tagSize","parseSyncSafeInteger","StreamTypes$3","id3","bufferSize","dispatchType","chunk","dataAlignmentIndicator","d","timeStamp","TransportPacketStream","TransportParseStream","ElementaryStream","metadataStream","Stream$4","CaptionStream$1","StreamTypes$2","MP2T_PACKET_LENGTH$1","bytesInBuffer","everything","parsePsi","parsePat","parsePmt","packetsWaitingForPmt","programMapTable","psi","payloadUnitStartIndicator","pat","section_number","last_section_number","pmtPid","pmt","tableEnd","streamType","pid","processPes_","STREAM_TYPES","h264","adts","segmentHadPmt","timedMetadata","forceFlush","packetFlushable","fragment","trackId","pes","ptsDtsFlags","startPrefix","packetLength","parsePes","codec","flushStreams_","m2ts$1","PAT_PID","MP2T_PACKET_LENGTH","AdtsStream$1","m2ts_1","ONE_SECOND_IN_TS$2","ADTS_SAMPLING_FREQUENCIES$1","handlePartialSegments","frameNum","skipWarn_","frameLength","protectionSkipBytes","oldBuffer","sampleCount","adtsFrameDuration","H264Stream$1","NalByteStream","PROFILES_WITH_OPTIONAL_SPS_DATA","Stream$2","ExpGolomb","workingData","workingBytesAvailable","workingWord","workingBitsAvailable","bitsAvailable","loadWord","workingBytes","availableBytes","skipBits","skipBytes","readBits","bits","valu","skipLeadingZeros","leadingZeroCount","skipUnsignedExpGolomb","skipExpGolomb","readUnsignedExpGolomb","clz","readExpGolomb","readBoolean","readUnsignedByte","syncPoint","swapBuffer","len","currentPts","currentDts","readSequenceParameterSet","skipScalingList","nalByteStream","nalUnitTypeCode","expGolombDecoder","lastScale","nextScale","chromaFormatIdc","picOrderCntType","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","AacStream$1","H264Stream","ADTS_SAMPLING_FREQUENCIES","parseId3TagSize","returnSize","getId3Offset","isLikelyAacData","parseAdtsSize","lowThree","middle","parseType","parseSampleRate","parseAacTimestamp","percentEncode","aacUtils","setTimestamp","bytesLeft","tempLength","VideoSegmentStream","AudioSegmentStream","Transmuxer","CoalesceStream","Stream","frameUtils","audioFrameUtils","trackDecodeInfo","m2ts","clock","AdtsStream","AacStream","ONE_SECOND_IN_TS$1","AUDIO_PROPERTIES","VIDEO_PROPERTIES","retriggerForStream","addPipelineLogRetriggers","transmuxer","pipeline","arrayEquals","generateSegmentTimingInfo","startDts","endDts","prependedContentDuration","firstSequenceNumber","setEarliestDts","earliestDts","setVideoBaseMediaDecodeTime","setAudioAppendStart","videoClockCyclesOfSilencePrefixed","gopsToAlignWith","minPTS","gopCache_","nalUnit","gopForFusion","firstGop","lastGop","resetStream_","getGopForFusion_","alignedGops","alignGopsAtEnd","alignGopsAtEnd_","alignGopsAtStart_","gop","dtsDistance","nearestGopObj","currentGopObj","nearestDistance","alignIndex","gopIndex","align","alignEndIndex","matchFound","trimIndex","alignGopsWith","newGopsToAlignWith","numberOfTracks","remux","remuxTracks","pendingTracks","videoTrack","pendingBoxes","pendingCaptions","pendingMetadata","pendingBytes","emittedTracks","output","audioTrack","caption","captionStreams","cueTime","setRemux","hasFlushed","transmuxPipeline_","setupAacPipeline","aacStream","audioTimestampRolloverStream","timedMetadataTimestampRolloverStream","adtsStream","coalesceStream","headOfPipeline","audioSegmentStream","getLogTrigger_","hasAudio","hasVideo","setupTsPipeline","packetStream","parseStream","elementaryStream","h264Stream","videoSegmentStream","id3Frame","setBaseMediaDecodeTime","isAac","resetCaptions","getTracks","getTimescaleFromMediaHeader","bin","parseType_1","toUnsigned$2","parseType$2","findBox$2","subresults","toUnsigned$1","getUint64$2","parseTfdt$2","parseSampleFlags","parseTrun$2","dataOffsetPresent","firstSampleFlagsPresent","sampleDurationPresent","sampleSizePresent","sampleFlagsPresent","sampleCompositionTimeOffsetPresent","getInt32","parseTfhd$2","baseDataOffsetPresent","sampleDescriptionIndexPresent","defaultSampleDurationPresent","defaultSampleSizePresent","defaultSampleFlagsPresent","durationIsEmpty","defaultBaseIsMoof","sampleDescriptionIndex","defaultSampleDuration","defaultSampleSize","defaultSampleFlags","baseDataOffsetIsMoof","findBox$1","parseTfdt$1","parseTrun$1","parseTfhd$1","window$2","mapToSample","approximateOffset","parseCaptionNals","videoTrackId","trafs","mdats","captionNals","mdatTrafPairs","matchingTraf","pair","headerInfo","truns","allSamples","BigInt","parseSamples","avcStream","seiNal","lastMatchedSample","avcView","logs","seiNals","matchingSample","findSeiNals","captionParser","segmentCache","timescale","parsedCaptions","parsingPartial","isInitialized","isPartial","isNewInit","videoTrackIds","timescales","parsedData","cachedSegment","trackNals","parseEmbeddedCaptions","pushNals","nals","nal","clearParsedCaptions","resetCaptionStream","clearAllCaptions","uint8ToCString","curChar","retString","getUint64$1","isValidEmsgBox","emsg","hasScheme","scheme_id_uri","isValidV0Box","isDefined","presentation_time_delta","isValidV1Box","presentation_time","emsg$1","parseEmsgBox","boxData","event_duration","emsgBox","message_data","scaleTime","presentationTime","timeDelta","toUnsigned","toHexString","findBox","parseType$1","parseTfhd","parseTrun","parseTfdt","window$1","lowestTime","baseTime","scale","isFinite","traks","tkhdVersion","getUint8","sampleDescriptions","codecConfig","codecBox","probe$2","StreamTypes$1","parsePid","parsePayloadUnitStartIndicator","parseAdaptionField","parseNalUnitType","probe$1","pusi","payloadOffset","parsePesType","parsePesTime","videoPacketContainsKeyFrame","frameBuffer","frameI","frameSyncPoint","foundKeyFrame","StreamTypes","probe","ts","SYNC_BYTE","parseAudioPes_","pesType","parsed","endLoop","table","parseVideoPes_","firstKeyFrame","console","inspectTs_","parsePsi_","tsInspector","baseTimestamp","audioCount","audioTimescale","inspectAac_","segmentInfo","audioBaseTimestamp","dtsTime","ptsTime","videoBaseTimestamp","adjustTimestamp_","MessageHandlers","initArray","postMessage","action","gopInfo","timingInfo","videoSegmentTimingInfo","presentation","audioSegmentTimingInfo","trackInfo","audioTimingInfo","wireTransmuxerEvents","pushMp4Captions","trackIds","probeMp4StartTime","probeMp4Tracks","probeTs","baseStartTime","tsStartTime","timeInfo","videoStart","audioStart","clearAllMp4Captions","clearParsedMp4Captions","setTimestampOffset","timestampOffset","appendStart","onmessage","messageHandlers","TransmuxWorker","processTransmux","audioAppendStart","onData","onTrackInfo","onAudioTimingInfo","onVideoTimingInfo","onVideoSegmentTimingInfo","onAudioSegmentTimingInfo","onId3","onCaptions","onDone","onEndedTimeline","onTransmuxerLog","isEndOfTimeline","transmuxedData","waitForEndedTimelineEvent","currentTransmux","videoFrameDtsTime","videoFramePtsTime","handleData_","handleGopInfo_","handleDone_","dequeue","ArrayBuffer","transmuxQueue","processAction","enqueueAction","transmux","segmentTransmuxer","term","workerCallback","endAction","listenForEndEvent","isArrayBuffer","transfers","REQUEST_ERRORS","abortAll","activeXhrs","handleErrors","handleKeyResponse","objects","finishProcessingFn","errorObj","Uint32Array","parseInitSegment","handleSegmentResponse","newBytes","stringToArrayBuffer","lastReachedChar","stats","getRequestStats","encryptedBytes","transmuxAndNotify","trackInfoFn","timingInfoFn","videoSegmentTimingInfoFn","audioSegmentTimingInfoFn","id3Fn","captionsFn","endedTimelineFn","dataFn","doneFn","fmp4Tracks","isMuxed","audioStartFn","audioEndFn","videoStartFn","videoEndFn","probeResult","id3Frames","handleSegmentBytes","bytesAsUint8Array","isFmp4","audioCodec","videoCodec","finishLoading","decrypt","decryptionWorker","decryptionHandler","decrypted","keyBytes","encrypted","iv","waitForCompletion","didError","segmentFinish","requestId","decryptedBytes","decryptSegment","endOfAllRequests","parseError","handleProgress","progressFn","progressEvent","getProgressStats","firstBytesReceivedAt","mediaSegmentRequest","xhrOptions","abortFn","keyXhr","mapKeyXhr","initSegmentOptions","initSegmentRequestCallback","handleInitSegmentResponse","initSegmentXhr","segmentRequestOptions","segmentXhr","loadendState","activeXhr","calledAbortFn","handleLoadEnd","logFn$1","isMaat","mediaAttributes","unwrapCodecList","codecList","codecs","codecCount","codecObj","codecsForPlaylist","codecInfo","getCodecs","audioGroup","defaultCodecs","logFn","representationToString","safeGetComputedStyle","property","stableSort","sortFn","newArray","cmp","comparePlaylistBandwidth","leftBandwidth","rightBandwidth","simpleSelector","playerBandwidth","playerWidth","limitRenditionByPlayerDimensions","playlistController","getAudioTrackPlaylists_","audioOnly","sortedPlaylistReps","RESOLUTION","rep","enabledPlaylistReps","bandwidthPlaylistReps","highestRemainingBandwidthRep","bandwidthBestRep","chosenRep","haveResolution","resolutionBestRepList","resolutionBestRep","resolutionPlusOneList","resolutionPlusOneSmallest","resolutionPlusOneRep","leastPixelDiffRep","leastPixelDiffSelector","leastPixelDiffList","pixelDiff","lastBandwidthSelector","pixelRatio","useDevicePixelRatio","systemBandwidth","playlistController_","addMetadata","inbandTextTracks","metadataArray","videoDuration","Cue","metadataTrack","metadataTrack_","deprecateOldCue","cuesArray","cuesGroupedByStartTime","timeSlot","sortedStartTimes","cueGroup","nextTime","removeCuesFromTrack","finite","MIN_SEGMENT_DURATION_TO_SAVE_STATS","segmentInfoString","startOfSegment","mediaIndex","timeline","segmentLen","selection","isSyncRequest","independent","hasPartIndex","zeroBasedPartCount","timingInfoPropertyForMedia","shouldWaitForTimelineChange","timelineChangeController","currentTimeline","segmentTimeline","loaderType","audioDisabled","lastMainTimelineChange","lastTimelineChange","pendingAudioTimelineChange","pendingTimelineChange","segmentTooLong","maxDuration","getTroublesomeSegmentDurationMessage","sourceType","timingInfos","typeTimingInfo","mediaDuration","isSegmentWayTooLong","isSegmentSlightlyTooLong","segmentTooLongMessage","severity","SegmentLoader","mediaSource","throughput","roundTrip","resetStats_","hasPlayed_","hasPlayed","seekable_","seeking_","mediaSource_","loaderType_","currentMediaInfo_","startingMediaInfo_","segmentMetadataTrack_","segmentMetadataTrack","goalBufferLength_","goalBufferLength","sourceType_","sourceUpdater_","sourceUpdater","inbandTextTracks_","state_","timelineChangeController_","shouldSaveSegmentTimingInfo_","useDtsForTimestampOffset_","useDtsForTimestampOffset","captionServices_","checkBufferTimeout_","currentTimeline_","pendingSegment_","xhrOptions_","pendingSegments_","audioDisabled_","isPendingTimestampOffset_","gopBuffer_","timeMapping_","safeAppend_","appendInitSegment_","playlistOfLastInitSegment_","callQueue_","loadQueue_","metadataQueue_","waitingOnRemove_","quotaExceededErrorRetryTimeout_","activeInitSegmentId_","initSegments_","cacheEncryptionKeys_","cacheEncryptionKeys","keyCache_","decrypter_","decrypter","syncController_","syncController","syncPoint_","transmuxer_","createTransmuxer_","triggerSyncInfoUpdate_","isEndOfStream_","ended_","fetchAtBuffer_","newState","hasEnoughInfoToAppend_","processCallQueue_","hasEnoughInfoToLoad_","processLoadQueue_","mediaBytesTransferred","mediaRequests","mediaRequestsAborted","mediaRequestsTimedout","mediaRequestsErrored","mediaTransferDuration","mediaSecondsLoaded","mediaAppends","abort_","setAudio","removeAudio","monitorBuffer_","abortRequests","clearPendingTimelineChange","checkForAbort_","endOfStream","buffered_","getMediaInfo_","videoBuffered","audioBuffered","initSegmentForMap","storedMap","segmentKey","storedKey","couldBeginLoading_","playlist_","init_","resetEverything","newPlaylist","oldPlaylist","syncInfo","setDateTimeMappingForStart","oldId","resyncLoader","resetLoader","mediaSequenceDiff","saveExpiredSegmentInfo","force","removesRemaining","removeFinished","mapping","updatedBuffer","removeGopBuffer","removeVideo","monitorBufferTick_","fillBuffer_","updating","chooseNextRequest_","loadSegment_","appendedLastSegment","appendedLastPart","bufferedTime","preloaded","haveEnoughBuffer","getSyncPoint","targetTime","timelineSegments","getSyncSegmentCandidate","nextSegment","lastSegmentLastPart","generateSegmentInfo_","forceTimestampOffset","random","overrideCheck","timestampOffsetForSegment_","audioBufferedEnd","audioTimestampOffset","currentTimePts","gopsSafeToAlignWith","videoTimestampOffset","timestampOffsetForSegment","earlyAbortWhenNeeded_","measuredBandwidth","requestTimeRemaining","timeUntilRebuffer$1","timeUntilRebuffer","switchCandidate","compatiblePlaylists","enabledPlaylists","rebufferingEstimates","numRequests","rebufferingImpact","noRebufferingPlaylists","estimate","minRebufferMaxBandwidthSelector","timeSavedBySwitching","minimumTimeSaving","handleAbort_","handleProgress_","simpleSegment","handleTrackInfo_","checkForIllegalMediaSwitch","akeys","bkeys","shallowEqual","handleTimingInfo_","timeType","timingInfoProperty","handleCaptions_","captionData","hasAppendedData_","captionTracks","captionTrack","trackName","instreamId","def","captionService","createCaptionsTrackIfNotExists","captionArray","addCaptionData","handleId3_","inBandMetadataTrackDispatchType","createMetadataTrackIfNotExists","processMetadataQueue_","callQueue","fun","loadQueue","getCurrentMediaInfo_","getPendingSegmentPlaylist","setTimeMapping_","updateMediaSecondsLoaded_","useVideoTimingInfo","firstVideoFrameTimeForData","trueSegmentStart_","currentStart","currentVideoTimestampOffset","updateAppendInitSegmentStatus","updateSourceBufferTimestampOffset_","updateTimingInfoEnd_","saveSegmentTimingInfo","shouldSaveTimelineMapping","appendData_","changedTimestampOffset","getInitSegmentAndUpdateState_","handleQuotaExceededError_","audioBufferStart","audioBufferEnd","videoBufferStart","videoBufferEnd","appendToSourceBuffer_","timeToRemoveUntil","MIN_BACK_BUFFER","handleAppendError_","segmentObj","tempBuffer","concatSegments","appendBuffer","handleSegmentTimingInfo_","segmentTimingInfo","transmuxedDecodeStart","transmuxedDecodeEnd","trimBackBuffer_","updateTransmuxerAndRequestSegment_","shouldUpdateTransmuxerTimestampOffset_","createSimplifiedSegmentObj_","isEndOfStream","isWalkingForward","isDiscontinuity","segmentRequestFinished_","removeToTime","trimTime","maxTrimTime","safeBackBufferTrimTime","previousSegment","saveTransferStats_","saveBandwidthRelatedStats_","handleTimeout_","updateGopBuffer","waitForAppendsToComplete_","timelineMapping","mappingForTimeline","waitForVideo","waitForAudio","waitingOnAppends","checkAppendsDone_","videoQueueCallback","audioQueueCallback","handleAppendsDone_","illegalMediaSwitchError","startingMedia","illegalMediaSwitch","didChange","getSegmentStartTimeForTimestampOffsetCalculation_","prioritizedTimingInfo","segmentDurationMessage","recordThroughput_","addSegmentMetadataCue_","badSegmentGuess","badPartGuess","segmentProcessingTime","segmentProcessingThroughput","custom","dateTimeString","resolution","bufferTypes","sourceBuffer","queuePending","shiftQueue","queueIndex","queueEntry","nextQueueIndexOfType","cleanupBuffer","titleType","inSourceBuffers","sourceBuffers","actions","onError","mime","addSourceBuffer","removeSourceBuffer","changeType","pushQueue","onUpdateend","SourceUpdater","sourceopenListener_","audioTimestampOffset_","videoTimestampOffset_","delayedAudioAppendQueue_","videoAppendQueued_","onVideoUpdateEnd_","onAudioUpdateEnd_","onVideoError_","videoError_","onAudioError_","audioError_","createdSourceBuffers_","initializedEme_","triggeredReady_","initializedEme","hasCreatedSourceBuffers","hasInitializedAnyEme","createSourceBuffers","addOrChangeSourceBuffers","canRemoveSourceBuffer","canChangeType","processedAppend_","videoBuffer","que","audioBuffer","bufferA","bufferB","arity","extents","bufferIntersection","setDuration","uint8ToUtf8","uintArray","escape","VTT_LINE_TERMINATORS","NoVttJsError","VTTSegmentLoader","subtitlesTrack_","featuresNativeTextTracks_","loadVttJs","combinedByteLength","combinedSegment","timestampOffsetForTimeline","checkTimestampOffset","skipEmptySegments_","stopForError","requested","parseVTTCues_","updateTimeMapping_","timelines","duplicates","occurrences","dupe","removeDuplicateCuesFromTrack","decoder","decodeBytesToString","timestampmap","MPEGTS","LOCAL","ontimestampmap","mapData","segmentData","mappingObj","diff","firstStart","lastStart","findAdCue","mediaTime","adStartTime","adEndTime","syncPointStrategies","run","timelineToDatetimeMappings","lastDistance","datetimeMapping","z","discontinuityStarts","discontinuitySequence","discontinuitySync","discontinuities","SyncController","syncPoints","runStrategies_","selectSyncPoint_","getExpiredTime","strategy","bestSyncPoint","bestDistance","bestStrategy","newDistance","lastRemovedSegment","firstSegment","playlistTimestamp","didCalculateSegmentTimeMapping","calculateSegmentTimeMapping_","saveDiscontinuitySyncInfo_","dateTime","accuracy","mediaIndexDiff","TimelineChangeController","pendingTimelineChanges_","lastTimelineChanges_","workerCode","_proto","_length","_i","aesTables","AES","tmp","tables","encTable","decTable","sbox","sboxInv","xInv","th","x2","x4","x8","tEnc","tDec","precompute","_tables","keyLen","rcon","encKey","decKey","_key","encrypted0","encrypted1","encrypted2","encrypted3","out","a2","b2","c2","nInnerRounds","kIndex","table0","table1","table2","table3","AsyncStream","jobs","timeout_","processJob_","job","ntoh","word","Decrypter","initVector","STEP","encrypted32","Int32Array","asyncStream_","decryptChunk_","padded","decipher","decrypted32","init0","init1","init2","init3","wordIx","Uint16Array","isView","audioTrackKind_","characteristics","stopLoaders","segmentLoader","activePlaylistLoader","startLoaders","playlistLoader","segmentLoaders","mediaTypes","excludePlaylist","activeTrack","activeGroup","defaultTrack","onTrackChanged","SUBTITLES","setupListeners","requestOptions","initialize","groups","variantLabel","isMainPlaylist","forced","autoselect","newProps","groupMatch","setupMediaGroups","audioSegmentLoader","mainSegmentLoader","variants","groupKeys","groupPropertyList","onGroupChanged","getActiveGroup","previousActiveLoader","lastGroup","lastGroup_","lastTrack_","onGroupChanging","lastTrack","pc","selectPlaylist","fastQualityChange_","activeTrack_","onAudioTrackChanged","Vhs$1","loaderStats","sumLoaderStat","stat","audioSegmentLoader_","mainSegmentLoader_","PlaylistController","externVhs","useCueTags","enableLowInitialPlaylist","bufferBasedABR","maxPlaylistRetries","useCueTags_","cueTagsTrack_","requestOptions_","pauseLoading","mediaTypes_","createMediaTypes","handleDurationChange_","handleSourceOpen_","handleSourceEnded_","segmentLoaderSettings","setupMainPlaylistLoaderListeners_","subtitleSegmentLoader_","onLoad","setupSegmentLoaderListeners_","startABRTimer_","stopABRTimer_","triggeredFmp4Usage","loadOnPlay_","timeToLoadedData__","mainAppendsToLoadedData__","audioAppendsToLoadedData__","timeToLoadedDataStart","mainAppendsToLoadedData_","audioAppendsToLoadedData_","appendsToLoadedData_","timeToLoadedData_","checkABR_","nextPlaylist","shouldSwitchToMedia_","switchMedia_","cause","newId","abrTimer_","defaultPlaylists","defaultGroup","requestTimeout","triggerPresenceUsage_","setupFirstPlay","updatedPlaylist","selectedMedia","excludeUnsupportedVariants_","selectInitialPlaylist","initialMedia_","handleUpdatedMediaPlaylist","playlistToExclude","lastExcludeReason_","stuckAtPlaylistEnd_","updateAdCues_","updateDuration","defaultDemuxed","audioGroupKeys","mediaGroup","currentPlaylist","bufferLowWaterLine","bufferHighWaterLine","sharedLogLine","isBuffered","forwardBuffer","maxBufferLowWaterLine","nextBandwidth","currBandwidth","logLine","shouldSwitchToMedia","onSyncInfoUpdate_","onEndOfStream","delegateLoaders_","updateCodecs","tryToCreateSourceBuffers_","getCodecsOrExclude_","mediaSecondsLoaded_","mainMediaInfo","absolutePlaylistEnd","reincluded","errorMessage","delayDuration","fnNames","loaders","dontFilterPlaylist","loader","audioSeekable","mainSeekable","oldEnd","oldStart","updateDuration_","areMediaTypesKnown_","usingAudioLoader","hasMainMediaInfo","hasAudioMediaInfo","playlistCodecs","unsupportedCodecs","unsupportedAudio","supporter","switchMessages","newCodec","oldCodec","codecString","excludeIncompatibleVariants_","ids","unsupported","codecCount_","videoDetails","audioDetails","exclusionReasons","variantCodecs","variantCodecCount","variantVideoDetails","variantAudioDetails","cueOut","adOffset","adTotal","cueOutCont","updateAdCues","newMax","Representation","vhsHandler","qualityChangeFunction","playlistID","changePlaylistFn","incompatible","currentlyEnabled","timerCancelEvents","PlaybackWatcher","allowSeeksWithinUnsafeLiveWindow","liveRangeSafeTimeDelta","consecutiveUpdates","lastRecordedTime","checkCurrentTimeTimeout_","playHandler","monitorCurrentTime_","canPlayHandler","waitingHandler","techWaiting_","cancelTimerHandler","resetTimeUpdate_","loaderTypes","loaderChecks","resetSegmentDownloads_","updateend","checkSegmentDownloads_","setSeekingHandlers","seekingAppendCheck_","fixesBadSeeks_","clearSeekingAppendCheck_","watchForBadSeeking_","checkCurrentTime_","isBufferedDifferent","isRangeDifferent","playlistId","waiting_","afterSeekableWindow_","beforeSeekableWindow_","minAppendedDuration","bufferedToCheck","nextRange","currentRange","livePoint","videoUnderflow_","skipTheGap_","allowedEnd","gap","lastVideoRange","videoRange","audioRange","gapFromVideoUnderflow_","scheduledCurrentTime","gaps","findGaps","defaultOptions","errorInterval","getSource","IWillNotUseThisInPlugins","initPlugin","lastCalled","localOptions","loadedMetadataHandler","cleanupEvents","reloadSourceOnError","version$4","STANDARD_PLAYLIST_SELECTOR","INITIAL_PLAYLIST_SELECTOR","movingAverageBandwidthSelector","decay","average","lastSystemBandwidth","comparePlaylistResolution","leftWidth","rightWidth","LOCAL_STORAGE_KEY","handleVhsMediaChange","waitForKeySessionCreation","sourceKeySystems","audioMedia","mainPlaylists","eme","initializeMediaKeys","keySystemsOptionsArr","keySystems","keySystemsArr","contentProtection","keySystemsOptions","keySystemsObj","keySystem","keySystemOptions","pssh","getAllPsshKeySystemsOptions","initializationFinishedPromises","keySessionCreatedPromises","race","setupEmeOptions","sourceOptions","mainPlaylist","audioPlaylist","videoContentType","audioContentType","keySystemContentTypes","emeKeySystems","getVhsLocalStorage","storedObject","supportsNativeHls","canItPlay","supportsNativeDash","supportsTypeNatively","Component","VhsHandler","initialBandwidth","_player","source_","ignoreNextSeekingEvent_","setOptions_","overrideNative","featuresNativeVideoTracks","useBandwidthFromLocalStorage","useNetworkInformationApi","option","dataUri","playbackWatcherOptions","playbackWatcher_","defaultSelector","playerBandwidthEst","networkInformation","connection","mozConnection","webkitConnection","tenMbpsAsBitsPerSecond","networkInfoBandwidthEstBitsPerSec","downlink","invBandwidth","invThroughput","mediaRequests_","mediaRequestsAborted_","mediaRequestsTimedout_","mediaRequestsErrored_","mediaTransferDuration_","mediaBytesTransferred_","mediaAppends_","mainAppendsToLoadedData","audioAppendsToLoadedData","appendsToLoadedData","timeToLoadedData","currentTech","playerDimensions","objectToStore","updateVhsLocalStorage","representations","setupEme_","setupQualityLevels_","mediaSourceUrl_","createKeySessions_","audioPlaylistLoader","handleWaitingForKey_","didSetupEmeOptions","excludedHDPlaylists","qualityLevels_","handleVhsLoadedMetadata","convertToProgramTime","VhsSourceHandler","simpleType","getOverrideNative","defaultOverrideNative"],"sourceRoot":""}