{"version":3,"file":"component---src-pages-news-video-uploader-js-949c02f77ffa889fd98f.js","mappings":"sLAGe,SAASA,IACtB,MAAM,EAACC,EAAO,EAACC,IAAaC,EAAAA,EAAAA,UAAS,OAC/B,EAACC,EAAK,EAACC,IAAWF,EAAAA,EAAAA,UAAS,MAC3BG,GAAWC,EAAAA,EAAAA,QAAO,MAClBC,GAAcD,EAAAA,EAAAA,QAAO,MAoC3B,OARAE,EAAAA,EAAAA,YAAU,KACHH,EAASI,OAEd,GAGC,CAACT,EAAQK,IAGVK,EAAAA,cAAA,OAAKC,UAAU,OACbD,EAAAA,cAAA,UAAQC,UAAU,cAChBD,EAAAA,cAAA,UAAQE,QArCUC,UAEtB,MAAMC,QAAoBC,UAAUC,aAAaC,gBAAgB,CAC/DC,MAAO,CACLC,MAAO,KACPC,OAAQ,KACRC,UAAW,IAEbC,OAAO,IAGTrB,EAAUa,GACVP,EAAYE,QAAU,IAAIc,IAAJ,CAAcT,EAAa,CAAEU,KAAM,UACzDjB,EAAYE,QAAQgB,gBAAgB,GAwBE,SAClCf,EAAAA,cAAA,UAAQE,QAtBKc,KACjBnB,EAAYE,QAAQkB,eAAc,KAChCvB,EAAQG,EAAYE,QAAQmB,UAAU,GACtC,GAmB+B,QAC7BlB,EAAAA,cAAA,UAAQE,QAjBKiB,MACjBC,EAAAA,EAAAA,oBAAmB3B,EAAK,GAgBS,QAC5BA,GACCO,EAAAA,cAAA,SACEqB,IAAKC,IAAIC,gBAAgB9B,GACzB+B,UAAQ,EACRC,UAAQ,EACRC,IAAK/B,EACLgC,MAAO,CAAElB,MAAO,QAASmB,OAAQ,UAM7C,C","sources":["webpack://blabzio/./src/pages/news/VideoUploader.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport RecordRTC, { invokeSaveAsDialog } from 'recordrtc';\n\nexport default function VideoUploader() {\n  const [stream, setStream] = useState(null);\n  const [blob, setBlob] = useState(null);\n  const refVideo = useRef(null);\n  const recorderRef = useRef(null);\n\n  const handleRecording = async () => {\n    // const cameraStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n    const mediaStream = await navigator.mediaDevices.getDisplayMedia({\n      video: {\n        width: 1920,\n        height: 1080,\n        frameRate: 30,\n      },\n      audio: false,\n    });\n\n    setStream(mediaStream);\n    recorderRef.current = new RecordRTC(mediaStream, { type: 'video' });\n    recorderRef.current.startRecording();\n  };\n\n  const handleStop = () => {\n    recorderRef.current.stopRecording(() => {\n      setBlob(recorderRef.current.getBlob());\n    });\n  };\n\n  const handleSave = () => {\n    invokeSaveAsDialog(blob);\n  };\n\n  useEffect(() => {\n    if (!refVideo.current) {\n      return;\n    }\n\n    // refVideo.current.srcObject = stream;\n  }, [stream, refVideo]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={handleRecording}>start</button>\n        <button onClick={handleStop}>stop</button>\n        <button onClick={handleSave}>save</button>\n        {blob && (\n          <video\n            src={URL.createObjectURL(blob)}\n            controls\n            autoPlay\n            ref={refVideo}\n            style={{ width: '700px', margin: '1em' }}\n          />\n        )}\n      </header>\n    </div>\n  );\n}\n"],"names":["VideoUploader","stream","setStream","useState","blob","setBlob","refVideo","useRef","recorderRef","useEffect","current","React","className","onClick","async","mediaStream","navigator","mediaDevices","getDisplayMedia","video","width","height","frameRate","audio","RecordRTC","type","startRecording","handleStop","stopRecording","getBlob","handleSave","invokeSaveAsDialog","src","URL","createObjectURL","controls","autoPlay","ref","style","margin"],"sourceRoot":""}