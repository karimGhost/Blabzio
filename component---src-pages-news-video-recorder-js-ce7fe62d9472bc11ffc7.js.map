{"version":3,"file":"component---src-pages-news-video-recorder-js-ce7fe62d9472bc11ffc7.js","mappings":"uIAqJA,UAnJsBA,KAClB,MAAMC,EAAW,cAEf,EAACC,EAAW,EAACC,IAAiBC,EAAAA,EAAAA,WAAS,GACvCC,GAAgBC,EAAAA,EAAAA,QAAO,MACvBC,GAAgBD,EAAAA,EAAAA,QAAO,OACvB,EAACE,EAAgB,EAACC,IAAsBL,EAAAA,EAAAA,UAAS,aACjD,EAACM,EAAO,EAACC,IAAaP,EAAAA,EAAAA,UAAS,OAC/B,EAACQ,EAAY,EAACC,IAAkBT,EAAAA,EAAAA,UAAS,KACzC,EAACU,EAAc,EAACC,IAAoBX,EAAAA,EAAAA,UAAS,OAE7C,EAACY,EAAc,EAACC,IAAoBb,EAAAA,EAAAA,UAAS,UAsD/Cc,EAAAA,EAAAA,YAAU,KACFhB,GAAcK,EAAcY,SAAWT,IACvCH,EAAcY,QAAQC,UAAYV,EACtC,GACD,CAACR,EAAYQ,IA4BhB,OACIW,EAAAA,cAAA,WACJA,EAAAA,cAAA,UAAI,kBACJA,EAAAA,cAAA,YACIA,EAAAA,cAAA,OAAKC,UAAU,kBACTpB,EAIE,KAHJmB,EAAAA,cAAA,UAAQE,QArEQC,UAEpB,GADAT,EAAiB,MACb,kBAAmBU,OACnB,IACI,MAAMC,EAAmB,CACrBC,OAAO,EACPC,OAAO,GAELC,EAAmB,CAAEF,OAAO,GAE5BG,QAAoBC,UAAUC,aAAaC,aAC7CJ,GAEEK,QAAoBH,UAAUC,aAAaC,aAC7CP,GAEJvB,GAAc,GAEd,MAAMgC,EAAiB,IAAIC,YAAY,GAADC,QAAAC,EAAAA,EAAAA,GAC/BJ,EAAYK,mBAAgBD,EAAAA,EAAAA,GAC5BR,EAAYU,oBAEnB7B,EAAUwB,EACd,CAAE,MAAOM,GACLC,MAAMD,EAAIE,QACd,MAEAD,MAAM,0DACV,EAyC0CE,KAAK,UAAS,cAO/C1C,GAAcK,EAC3Bc,EAAAA,cAAA,OAAKwB,MAAO,CAACC,SAAS,YAAexB,UAAU,gBACpB,cAApBd,GAAoCa,EAAAA,cAAA,QAAMwB,MAAO,CAACE,MAAM,QAAS,IAAC1B,EAAAA,cAAA,UAAIA,EAAAA,cAAA,MAAIwB,MAAO,CAACE,MAAM,MAAOD,SAAS,WAAWE,OAAO,MAAO1B,UAAU,cAAcd,KAIhKa,EAAAA,cAAA,SAAQC,UAAU,cAAc2B,IAAK1C,EAAe2C,UAAQ,EAACC,aAAW,IAIvEjD,GAAkC,aAApBM,EACPa,EAAAA,cAAA,UAAQwB,MAAO,CAACG,OAAO,KAAMF,SAAS,WAAYM,OAAO,IAAKL,MAAM,MAAOM,aAAa,MAAMC,MAAM,SAASC,OAAO,SAAUC,WAAW,cAAcC,OAAO,mBAAoBlC,QAlDvKC,UACnBf,EAAmB,aACnB,MAAMiD,EAAQ,IAAIC,cAAcjD,EAAQ,CAAET,aAC1CI,EAAcc,QAAUuC,EACxBrD,EAAcc,QAAQyC,QACtB,IAAIC,EAAmB,GACvBxD,EAAcc,QAAQ2C,gBAAmBC,SACX,IAAfA,EAAMC,MACO,IAApBD,EAAMC,KAAKC,MACfJ,EAAiBK,KAAKH,EAAMC,KAAK,EAErCnD,EAAegD,EAAiB,EAuCmLjB,KAAK,UAC7MvB,EAAAA,cAAA,KAAGwB,MAAO,CAAES,MAAM,SAAUC,OAAO,SAASY,QAAQ,MAAMX,WAAW,QAAQH,aAAa,QAAQ,YAEjG,KACiB,cAApB7C,EACDa,EAAAA,cAAA,UAAQwB,MAAO,CAACG,OAAO,KAAMF,SAAS,WAAYM,OAAO,IAAKL,MAAM,MAAOM,aAAa,MAAMC,MAAM,SAASC,OAAO,SAAUC,WAAW,cAAcC,OAAO,iBAAkBlC,QAzCtK6C,KAClBjE,GAAc,GACdM,EAAmB,YACnBJ,EAAcc,QAAQkD,OACtBhE,EAAcc,QAAQmD,OAAS,KAC3B,MAAMC,EAAY,IAAIC,KAAK5D,EAAa,CAAEgC,KAAM3C,IAC1CwE,EAAWC,IAAIC,gBAAgBJ,GACrCxD,EAAiB0D,GACjB5D,EAAe,GAAG,CACrB,EAgC+M+B,KAAK,UACzMvB,EAAAA,cAAA,KAAGwB,MAAO,CAAES,MAAM,SAAUC,OAAO,SAASY,QAAQ,MAAMX,WAAW,QAAQH,aAAa,QAAQ,wBAElG,KACM,aAApB7C,GAAmCa,EAAAA,cAAA,UAAQwB,MAAO,CAACC,SAAS,WAAWE,OAAO,KAAM4B,IAAI,IAAKC,MAAM,KAAMjC,KAAK,SAASrB,QArHpGC,UACjB,MAAMsD,EAA8B,UAAlB9D,EAA4B,OAAS,QACvDC,EAAiB6D,GAEjB,IACI,MAMMC,SANkBhD,UAAUC,aAAaC,aAAa,CACxDL,MAAO,CACHoD,WAAYF,MAIYvC,iBAAiB,GAC3C0C,EAAsBvE,EAAO8B,iBAC7BL,EAAiB,IAAIC,YAAY,CAAC2C,GAAa1C,QAAAC,EAAAA,EAAAA,GAAK2C,KAC1DtE,EAAUwB,EACd,CAAE,MAAOM,GACLyC,QAAQC,MAAM,0BAA2B1C,EAC7C,IAoG4I,gBAE5I,MAEevC,GAAcY,EACzBO,EAAAA,cAAA,OAAKC,UAAU,gBACXD,EAAAA,cAAA,SAAOC,UAAU,kBAAkB8D,IAAKtE,EAAeuE,UAAQ,EAACnC,UAAQ,IACxE7B,EAAAA,cAAA,KAAGiE,UAAQ,EAACC,KAAMzE,GAAe,uBAIjC,MAEN,C","sources":["webpack://blabzio/./src/pages/news/VideoRecorder.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nconst VideoRecorder = () => {\n    const mimeType = \"video/webm\";\n    \nconst [permission, setPermission] = useState(false);\nconst mediaRecorder = useRef(null);\nconst liveVideoFeed = useRef(null);\nconst [recordingStatus, setRecordingStatus] = useState(\"inactive\");\nconst [stream, setStream] = useState(null);\nconst [videoChunks, setVideoChunks] = useState([]);\nconst [recordedVideo, setRecordedVideo] = useState(null);\n  \nconst [currentCamera, setCurrentCamera] = useState('front');\n\nconst switchCamera = async () => {\n    const newCamera = currentCamera === 'front' ? 'back' : 'front';\n    setCurrentCamera(newCamera);\n\n    try {\n        const newStream = await navigator.mediaDevices.getUserMedia({\n            video: {\n                facingMode: newCamera,\n            },\n        });\n        // Update the video track of the existing combinedStream\n        const newVideoTrack = newStream.getVideoTracks()[0];\n        const existingAudioTracks = stream.getAudioTracks();\n        const combinedStream = new MediaStream([newVideoTrack, ...existingAudioTracks]);\n        setStream(combinedStream);\n    } catch (err) {\n        console.error('Error switching camera:', err);\n    }\n};\n\n    \nconst getCameraPermission = async () => {\n        setRecordedVideo(null);\n        if (\"MediaRecorder\" in window) {\n            try {\n                const videoConstraints = {\n                    audio: false,\n                    video: true,\n                };\n                const audioConstraints = { audio: true };\n                // create audio and video streams separately\n                const audioStream = await navigator.mediaDevices.getUserMedia(\n                    audioConstraints\n                );\n                const videoStream = await navigator.mediaDevices.getUserMedia(\n                    videoConstraints\n                );\n                setPermission(true);\n                // combine both audio and video streams\n                const combinedStream = new MediaStream([\n                    ...videoStream.getVideoTracks(),\n                    ...audioStream.getAudioTracks(),\n                ]);\n                setStream(combinedStream);\n            } catch (err) {\n                alert(err.message);\n            }\n        } else {\n            alert(\"The MediaRecorder API is not supported in your browser.\");\n        }\n    };\n\n    useEffect(() => {\n        if (permission && liveVideoFeed.current && stream) {\n            liveVideoFeed.current.srcObject = stream;\n        }\n    }, [permission, stream]);\n\nconst startRecording = async () => {\n    setRecordingStatus(\"recording\");\n    const media = new MediaRecorder(stream, { mimeType });\n    mediaRecorder.current = media;\n    mediaRecorder.current.start();\n    let localVideoChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n        if (typeof event.data === \"undefined\") return;\n        if (event.data.size === 0) return;\n        localVideoChunks.push(event.data);\n    };\n    setVideoChunks(localVideoChunks);\n};\n\nconst stopRecording = () => {\n    setPermission(false);\n    setRecordingStatus(\"inactive\");\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n        const videoBlob = new Blob(videoChunks, { type: mimeType });\n        const videoUrl = URL.createObjectURL(videoBlob);\n        setRecordedVideo(videoUrl);\n        setVideoChunks([]);\n    };\n};\n    \n    return (\n        <div>\n    <h2>Audio Recorder</h2>\n    <main>\n        <div className=\"video-controls\">\n            {!permission ? (\n            <button onClick={getCameraPermission} type=\"button\">\n                Get video\n            </button>\n            ) : null}\n            \n        </div>\n\n                {permission && liveVideoFeed ? (\n    <div style={{position:'relative' }}  className=\"video-player\">\n        {  recordingStatus === 'recording' &&  <span style={{color:'red'}} > <ul><li style={{color:'red', position:'absolute',zIndex:'20'}} className='recordmode'>{recordingStatus}</li></ul></span>}\n\n    \n    \n    <video  className='live-player' ref={liveVideoFeed} autoPlay playsInline>\n    \n    \n    </video>\n    {permission && recordingStatus === \"inactive\" ? (\n            <button style={{zIndex:'20', position:'absolute', bottom:'0', color:'red' ,borderRadius:'50%',width:'1.5rem',height:'1.5rem', background:'transparent',border:'2px solid green'}} onClick={startRecording} type=\"button\">\n               <i style={{ width:'1.2rem', height:'1.2rem',padding:'4px',background:'green',borderRadius:'50%'}}> start </i>\n            </button>\n            ) : null}\n            {recordingStatus === \"recording\" ? (\n            <button style={{zIndex:'20', position:'absolute', bottom:'0', color:'red' ,borderRadius:'50%',width:'1.5rem',height:'1.5rem', background:'transparent',border:'2px solid red'}} onClick={stopRecording} type=\"button\">\n                <i style={{ width:'1.2rem', height:'1.2rem',padding:'4px',background:'green',borderRadius:'50%'}}>    Stop Recording </i>\n            </button>\n            ) : null}\n{ recordingStatus === \"inactive\"  && <button style={{position:'absolute',zIndex:'20', top:'0', right:'0'}} type='button' onClick={switchCamera}> switchcam </button> }\n    </div>\n) : null}\n                    \n                { !permission && recordedVideo ? (\n        <div className=\"video-player\">\n            <video className='recorded-player' src={recordedVideo} controls autoPlay></video>\n            <a download href={recordedVideo}>\n                Download Recording\n            </a>\n        </div>\n        ) : null}\n    </main>\n</div>\n\n    );\n};\nexport default VideoRecorder;\n"],"names":["VideoRecorder","mimeType","permission","setPermission","useState","mediaRecorder","useRef","liveVideoFeed","recordingStatus","setRecordingStatus","stream","setStream","videoChunks","setVideoChunks","recordedVideo","setRecordedVideo","currentCamera","setCurrentCamera","useEffect","current","srcObject","React","className","onClick","async","window","videoConstraints","audio","video","audioConstraints","audioStream","navigator","mediaDevices","getUserMedia","videoStream","combinedStream","MediaStream","concat","_toConsumableArray","getVideoTracks","getAudioTracks","err","alert","message","type","style","position","color","zIndex","ref","autoPlay","playsInline","bottom","borderRadius","width","height","background","border","media","MediaRecorder","start","localVideoChunks","ondataavailable","event","data","size","push","padding","stopRecording","stop","onstop","videoBlob","Blob","videoUrl","URL","createObjectURL","top","right","newCamera","newVideoTrack","facingMode","existingAudioTracks","console","error","src","controls","download","href"],"sourceRoot":""}