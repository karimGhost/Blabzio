{"version":3,"file":"component---src-pages-news-video-recorder-js-1194f3cb588e754f2741.js","mappings":"uIAwHA,UAtHsBA,KAClB,MAAMC,EAAW,cAEf,EAACC,EAAW,EAACC,IAAiBC,EAAAA,EAAAA,WAAS,GACvCC,GAAgBC,EAAAA,EAAAA,QAAO,MACvBC,GAAgBD,EAAAA,EAAAA,QAAO,OACvB,EAACE,EAAgB,EAACC,IAAsBL,EAAAA,EAAAA,UAAS,aACjD,EAACM,EAAO,EAACC,IAAaP,EAAAA,EAAAA,UAAS,OAC/B,EAACQ,EAAY,EAACC,IAAkBT,EAAAA,EAAAA,UAAS,KACzC,EAACU,EAAc,EAACC,IAAoBX,EAAAA,EAAAA,UAAS,OAkC/CY,EAAAA,EAAAA,YAAU,KACFd,GAAcK,EAAcU,SAAWP,IACvCH,EAAcU,QAAQC,UAAYR,EACtC,GACD,CAACR,EAAYQ,IA4BhB,OACIS,EAAAA,cAAA,WACJA,EAAAA,cAAA,UAAI,kBACJA,EAAAA,cAAA,YACIA,EAAAA,cAAA,OAAKC,UAAU,kBACTlB,EAIE,KAHJiB,EAAAA,cAAA,UAAQE,QArEQC,UAEpB,GADAP,EAAiB,MACb,kBAAmBQ,OACnB,IACI,MAAMC,EAAmB,CACrBC,OAAO,EACPC,OAAO,GAELC,EAAmB,CAAEF,OAAO,GAE5BG,QAAoBC,UAAUC,aAAaC,aAC7CJ,GAEEK,QAAoBH,UAAUC,aAAaC,aAC7CP,GAEJrB,GAAc,GAEd,MAAM8B,EAAiB,IAAIC,YAAY,GAADC,QAAAC,EAAAA,EAAAA,GAC/BJ,EAAYK,mBAAgBD,EAAAA,EAAAA,GAC5BR,EAAYU,oBAEnB3B,EAAUsB,EACd,CAAE,MAAOM,GACLC,MAAMD,EAAIE,QACd,MAEAD,MAAM,0DACV,EAyC0CE,KAAK,UAAS,aAInDxC,GAAkC,aAApBM,EACfW,EAAAA,cAAA,UAAQE,QArCGC,UACnBb,EAAmB,aACnB,MAAMkC,EAAQ,IAAIC,cAAclC,EAAQ,CAAET,aAC1CI,EAAcY,QAAU0B,EACxBtC,EAAcY,QAAQ4B,QACtB,IAAIC,EAAmB,GACvBzC,EAAcY,QAAQ8B,gBAAmBC,SACX,IAAfA,EAAMC,MACO,IAApBD,EAAMC,KAAKC,MACfJ,EAAiBK,KAAKH,EAAMC,KAAK,EAErCpC,EAAeiC,EAAiB,EA0BSJ,KAAK,UAAS,mBAG3C,KACiB,cAApBlC,EACDW,EAAAA,cAAA,UAAQE,QA5BE+B,KAClBjD,GAAc,GACdM,EAAmB,YACnBJ,EAAcY,QAAQoC,OACtBhD,EAAcY,QAAQqC,OAAS,KAC3B,MAAMC,EAAY,IAAIC,KAAK5C,EAAa,CAAE8B,KAAMzC,IAC1CwD,EAAWC,IAAIC,gBAAgBJ,GACrCxC,EAAiB0C,GACjB5C,EAAe,GAAG,CACrB,EAmBuC6B,KAAK,UAAS,kBAG1C,MAGCxC,GAAcK,EAC3BY,EAAAA,cAAA,OAAKC,UAAU,gBACY,cAApBZ,GAAoCW,EAAAA,cAAA,QAAMyC,MAAO,CAACC,MAAM,QAAS,IAAC1C,EAAAA,cAAA,UAAIA,EAAAA,cAAA,MAAIyC,MAAO,CAACC,MAAM,OAAQzC,UAAU,cAAcZ,KAC3HW,EAAAA,cAAA,SAAO2C,IAAKvD,EAAewD,UAAQ,EAACC,aAAW,KAEnD,MAGe9D,GAAcY,EACzBK,EAAAA,cAAA,OAAKC,UAAU,gBACXD,EAAAA,cAAA,SAAO8C,IAAKnD,EAAeoD,UAAQ,EAACH,UAAQ,IAC5C5C,EAAAA,cAAA,KAAGgD,UAAQ,EAACC,KAAMtD,GAAe,uBAIjC,MAEN,C","sources":["webpack://blabzio/./src/pages/news/VideoRecorder.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nconst VideoRecorder = () => {\n    const mimeType = \"video/webm\";\n    \nconst [permission, setPermission] = useState(false);\nconst mediaRecorder = useRef(null);\nconst liveVideoFeed = useRef(null);\nconst [recordingStatus, setRecordingStatus] = useState(\"inactive\");\nconst [stream, setStream] = useState(null);\nconst [videoChunks, setVideoChunks] = useState([]);\nconst [recordedVideo, setRecordedVideo] = useState(null);\n  \n\nconst getCameraPermission = async () => {\n        setRecordedVideo(null);\n        if (\"MediaRecorder\" in window) {\n            try {\n                const videoConstraints = {\n                    audio: false,\n                    video: true,\n                };\n                const audioConstraints = { audio: true };\n                // create audio and video streams separately\n                const audioStream = await navigator.mediaDevices.getUserMedia(\n                    audioConstraints\n                );\n                const videoStream = await navigator.mediaDevices.getUserMedia(\n                    videoConstraints\n                );\n                setPermission(true);\n                // combine both audio and video streams\n                const combinedStream = new MediaStream([\n                    ...videoStream.getVideoTracks(),\n                    ...audioStream.getAudioTracks(),\n                ]);\n                setStream(combinedStream);\n            } catch (err) {\n                alert(err.message);\n            }\n        } else {\n            alert(\"The MediaRecorder API is not supported in your browser.\");\n        }\n    };\n\n    useEffect(() => {\n        if (permission && liveVideoFeed.current && stream) {\n            liveVideoFeed.current.srcObject = stream;\n        }\n    }, [permission, stream]);\n\nconst startRecording = async () => {\n    setRecordingStatus(\"recording\");\n    const media = new MediaRecorder(stream, { mimeType });\n    mediaRecorder.current = media;\n    mediaRecorder.current.start();\n    let localVideoChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n        if (typeof event.data === \"undefined\") return;\n        if (event.data.size === 0) return;\n        localVideoChunks.push(event.data);\n    };\n    setVideoChunks(localVideoChunks);\n};\n\nconst stopRecording = () => {\n    setPermission(false);\n    setRecordingStatus(\"inactive\");\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n        const videoBlob = new Blob(videoChunks, { type: mimeType });\n        const videoUrl = URL.createObjectURL(videoBlob);\n        setRecordedVideo(videoUrl);\n        setVideoChunks([]);\n    };\n};\n    \n    return (\n        <div>\n    <h2>Audio Recorder</h2>\n    <main>\n        <div className=\"video-controls\">\n            {!permission ? (\n            <button onClick={getCameraPermission} type=\"button\">\n                Get video\n            </button>\n            ) : null}\n            {permission && recordingStatus === \"inactive\" ? (\n            <button onClick={startRecording} type=\"button\">\n                Start Recording\n            </button>\n            ) : null}\n            {recordingStatus === \"recording\" ? (\n            <button onClick={stopRecording} type=\"button\">\n                Stop Recording\n            </button>\n            ) : null}\n        </div>\n\n                {permission && liveVideoFeed ? (\n    <div className=\"video-player\">\n        {  recordingStatus === 'recording' &&  <span style={{color:'red'}} > <ul><li style={{color:'red'}} className='recordmode'>{recordingStatus}</li></ul></span>}\n        <video ref={liveVideoFeed} autoPlay playsInline></video>\n    </div>\n) : null}\n\n                    \n                { !permission && recordedVideo ? (\n        <div className=\"video-player\">\n            <video src={recordedVideo} controls autoPlay></video>\n            <a download href={recordedVideo}>\n                Download Recording\n            </a>\n        </div>\n        ) : null}\n    </main>\n</div>\n\n    );\n};\nexport default VideoRecorder;\n"],"names":["VideoRecorder","mimeType","permission","setPermission","useState","mediaRecorder","useRef","liveVideoFeed","recordingStatus","setRecordingStatus","stream","setStream","videoChunks","setVideoChunks","recordedVideo","setRecordedVideo","useEffect","current","srcObject","React","className","onClick","async","window","videoConstraints","audio","video","audioConstraints","audioStream","navigator","mediaDevices","getUserMedia","videoStream","combinedStream","MediaStream","concat","_toConsumableArray","getVideoTracks","getAudioTracks","err","alert","message","type","media","MediaRecorder","start","localVideoChunks","ondataavailable","event","data","size","push","stopRecording","stop","onstop","videoBlob","Blob","videoUrl","URL","createObjectURL","style","color","ref","autoPlay","playsInline","src","controls","download","href"],"sourceRoot":""}