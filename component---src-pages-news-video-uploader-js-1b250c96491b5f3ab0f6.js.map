{"version":3,"file":"component---src-pages-news-video-uploader-js-1b250c96491b5f3ab0f6.js","mappings":"uIAyCA,UAxCsBA,KAClB,MAAM,EAACC,EAAW,EAACC,IAAiBC,EAAAA,EAAAA,WAAS,IACvC,EAACC,EAAO,EAACC,IAAaF,EAAAA,EAAAA,UAAS,MAkBrC,OACIG,EAAAA,cAAA,WACIA,EAAAA,cAAA,UAAI,kBACJA,EAAAA,cAAA,YACIA,EAAAA,cAAA,OAAKC,UAAU,kBACTN,EAIC,KAHCK,EAAAA,cAAA,UAAQE,QAtBIC,UAC5B,GAAI,kBAAmBC,OACnB,IACI,MAAMC,QAAmBC,UAAUC,aAAaC,aAAa,CACzDC,OAAO,EACPC,OAAO,IAEXd,GAAc,GACdG,EAAUM,EACd,CAAE,MAAOM,GACLC,MAAMD,EAAIE,QACd,MAEAD,MAAM,0DACV,EAQ0DE,KAAK,UAAS,kBAI3DnB,EACGK,EAAAA,cAAA,UAAQc,KAAK,UAAS,UAGvB,OAGT,C,4CCwFd,UA5HuBC,IACnB,MAAMC,EAAW,cAEf,EAACC,EAAgB,EAACC,IAAsBrB,EAAAA,EAAAA,UAAS,aACjD,EAACsB,EAAY,EAACC,IAAkBvB,EAAAA,EAAAA,UAAS,IAEzCwB,EAAaN,EAAMM,WACnBC,EAAgBP,EAAMO,cAEtBxB,EAASiB,EAAMjB,OAEfyB,GADcR,EAAMhB,UACJgB,EAAMQ,eACtB5B,EAAcoB,EAAMpB,WACnBC,EAAgBmB,EAAMnB,cACvB4B,EAAgBT,EAAMS,cACtBC,EAAmBV,EAAMU,iBAEzBC,EAAiBX,EAAMW,eAazBC,EAAAA,EAAAA,YAAU,KACFhC,GAAc4B,EAAcK,SAAW9B,IACvCyB,EAAcK,QAAQC,UAAY/B,EACtC,GACD,CAACH,EAAYG,IAuChB,OACIE,EAAAA,cAAA,WAEJA,EAAAA,cAAA,YACIA,EAAAA,cAAA,OAAKC,UAAU,mBASNN,GAAc4B,EAC3BvB,EAAAA,cAAA,OAAK8B,MAAO,CAACC,SAAS,YAAe9B,UAAU,gBACpB,cAApBgB,GAAoCjB,EAAAA,cAAA,QAAM8B,MAAO,CAACE,MAAM,QAAS,IAAChC,EAAAA,cAAA,UAAIA,EAAAA,cAAA,MAAI8B,MAAO,CAACE,MAAM,MAAOD,SAAS,WAAWE,OAAO,MAAOhC,UAAU,cAAcgB,KAIhKjB,EAAAA,cAAA,SAAQC,UAAU,yBAAyBiC,IAAKX,EAAeY,UAAQ,EAACC,aAAW,IAIlFzC,GAAkC,aAApBsB,EACRjB,EAAAA,cAAA,UAAQ8B,MAAO,CAAEG,OAAQ,KAAMF,SAAU,WAAYM,OAAQ,OAAQC,KAAM,MAAOC,UAAW,mBAAoBC,WAAY,cAAeC,OAAQ,kBAAmBC,aAAc,MAAOC,MAAO,OAAQC,OAAQ,QAAU1C,QAlDjNC,UACnBe,EAAmB,aACnB,MAAM2B,EAAQ,IAAIC,cAAchD,EAAQ,CAAEkB,aAC1CU,EAAcE,QAAUiB,EACxBnB,EAAcE,QAAQmB,QACtB,IAAIC,EAAmB,GACvBtB,EAAcE,QAAQqB,gBAAmBC,SACX,IAAfA,EAAMC,MACO,IAApBD,EAAMC,KAAKC,MACfJ,EAAiBK,KAAKH,EAAMC,KAAK,EAErC/B,EAAe4B,EAAiB,EAuC6NlC,KAAK,UAC3Pd,EAAAA,cAAA,KAAG8B,MAAO,CAAEwB,QAAS,QAASX,MAAO,OAAQC,OAAQ,OAAQW,QAAS,MAAOf,WAAY,QAASE,aAAc,MAAOc,OAAQ,aAAc,MAExI,KACiB,cAApBvC,EACFjB,EAAAA,cAAA,UAAQ8B,MAAO,CAAEG,OAAQ,KAAMF,SAAU,WAAYM,OAAQ,OAAQC,KAAM,MAAOC,UAAW,mBAAoBC,WAAY,cAAeC,OAAQ,gBAAiBC,aAAc,MAAOC,MAAO,OAAQC,OAAQ,QAAU1C,QAzChNuD,KAClB7D,GAAc,GACdsB,EAAmB,YACnBQ,EAAcE,QAAQ8B,OACtBhC,EAAcE,QAAQ+B,OAAS,KAC3B,MAAMC,EAAY,IAAIC,KAAK1C,EAAa,CAAEL,KAAME,IAC1C8C,EAAWC,IAAIC,gBAAgBJ,GACrCnC,EAAiBqC,GACjB1C,EAAe,GAAG,CACrB,EAgCyPN,KAAK,UACxPd,EAAAA,cAAA,KAAG8B,MAAO,CAAEwB,QAAS,QAASX,MAAO,OAAQC,OAAQ,OAAQW,QAAS,MAAOf,WAAY,QAASE,aAAc,MAAOc,OAAQ,aAAc,MAGxI,KACM,aAApBvC,GAAmCjB,EAAAA,cAAA,UAAQ8B,MAAO,CAACC,SAAS,WAAWE,OAAO,KAAMgC,IAAI,IAAKC,MAAM,KAAMpD,KAAK,SAASZ,QAvEpGC,UACbL,GACFA,EAAOqE,YAAYC,SAASC,GAAUA,EAAMX,SAI9CpC,EADqC,SAAfD,EAAwB,cAAgB,cAGxDiD,qBAAqB,GA+DiH,gBAE5I,MAEe3E,GAAc6B,EACzBxB,EAAAA,cAAA,OAAKC,UAAU,gBACXD,EAAAA,cAAA,SAAOC,UAAU,kBAAkBsE,IAAK/C,EAAegD,UAAQ,EAACrC,UAAQ,IACxEnC,EAAAA,cAAA,KAAGyE,UAAQ,EAACC,KAAMlD,GAAe,uBAIjC,MAEN,C,gEC7FN,UAzBsBmD,KAClB,IAAI,EAACC,EAAa,EAACC,IAAmBhF,EAAAA,EAAAA,UAAS,SAS/C,OACIG,EAAAA,cAAA,OAAKC,UAAU,gBACXD,EAAAA,cAAA,UAAI,YACJA,EAAAA,cAAA,OAAKC,UAAU,eACXD,EAAAA,cAAA,UAAQE,SAZQY,EAYoB,QAXrC,KACH+D,EAAgB/D,EAAK,IAU6B,iBAKlDd,EAAAA,cAAA,WACsB,UAAjB4E,EAA2B5E,EAAAA,cAAC8E,EAAAA,QAAa,MAAM9E,EAAAA,cAACN,EAAAA,QAAa,QAlB9CoB,KAoBlB,C","sources":["webpack://blabzio/./src/pages/news/AudioRecorder.js","webpack://blabzio/./src/pages/news/VideoRecorder.js","webpack://blabzio/./src/pages/news/VideoUploader.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nconst AudioRecorder = () => {\n    const [permission, setPermission] = useState(false);\n    const [stream, setStream] = useState(null);\n\n    const getMicrophonePermission = async () => {\n        if (\"MediaRecorder\" in window) {\n            try {\n                const streamData = await navigator.mediaDevices.getUserMedia({\n                    audio: true,\n                    video: false,\n                });\n                setPermission(true);\n                setStream(streamData);\n            } catch (err) {\n                alert(err.message);\n            }\n        } else {\n            alert(\"The MediaRecorder API is not supported in your browser.\");\n        }\n    };\n    return (\n        <div>\n            <h2>Audio Recorder</h2>\n            <main>\n                <div className=\"audio-controls\">\n                    {!permission ? (\n                        <button onClick={getMicrophonePermission} type=\"button\">\n                            Get Microphone\n                        </button>\n                    ): null}\n                    {permission ? (\n                        <button type=\"button\">\n                            Record\n                        </button>\n                    ): null}\n                </div>\n            </main>\n        </div>\n    );\n};\nexport default AudioRecorder;\n","import React, { useEffect, useState, useRef } from \"react\";\n\nconst VideoRecorder = (props) => {\n    const mimeType = \"video/webm\";\n    \nconst [recordingStatus, setRecordingStatus] = useState(\"inactive\");\nconst [videoChunks, setVideoChunks] = useState([]);\n  \nconst facingMode = props.facingMode;\nconst setFacingMode = props.setFacingMode;\n\nconst stream = props.stream;\nconst  setStream  = props.setStream;\nconst liveVideoFeed = props.liveVideoFeed;\nconst permission  = props.permission;\nconst  setPermission = props.setPermission;\nconst recordedVideo = props.recordedVideo ;\nconst setRecordedVideo = props.setRecordedVideo;\n\nconst mediaRecorder =  props.mediaRecorder ;\n\n\n\n\n\n\n\n\n\n  \n\n\n    useEffect(() => {\n        if (permission && liveVideoFeed.current && stream) {\n            liveVideoFeed.current.srcObject = stream;\n        }\n    }, [permission, stream]);\n    \nconst switchCamera = async () => {\n    if (stream) {\n      stream.getTracks().forEach((track) => track.stop());\n    }\n\n    const newFacingMode = facingMode === \"user\" ? \"environment\" : \"user\";\n    setFacingMode(newFacingMode);\n\n    await getCameraPermission();\n  };\n\nconst startRecording = async () => {\n    setRecordingStatus(\"recording\");\n    const media = new MediaRecorder(stream, { mimeType });\n    mediaRecorder.current = media;\n    mediaRecorder.current.start();\n    let localVideoChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n        if (typeof event.data === \"undefined\") return;\n        if (event.data.size === 0) return;\n        localVideoChunks.push(event.data);\n    };\n    setVideoChunks(localVideoChunks);\n};\n\nconst stopRecording = () => {\n    setPermission(false);\n    setRecordingStatus(\"inactive\");\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n        const videoBlob = new Blob(videoChunks, { type: mimeType });\n        const videoUrl = URL.createObjectURL(videoBlob);\n        setRecordedVideo(videoUrl);\n        setVideoChunks([]);\n    };\n};\n    \n    return (\n        <div>\n   \n    <main>\n        <div className=\"video-controls\">\n            { /*!permission ? (\n            <button onClick={getCameraPermission} type=\"button\">\n               open camera\n            </button>\n            ) : null */}\n            \n        </div>\n\n                {permission && liveVideoFeed ? (\n    <div style={{position:'relative' }}  className=\"video-player\">\n        {  recordingStatus === 'recording' &&  <span style={{color:'red'}} > <ul><li style={{color:'red', position:'absolute',zIndex:'20'}} className='recordmode'>{recordingStatus}</li></ul></span>}\n\n    \n    \n    <video  className='live-player w-100 m-50' ref={liveVideoFeed} autoPlay playsInline>\n    \n    \n    </video>\n    {permission && recordingStatus === \"inactive\" ? (\n           <button style={{ zIndex: '20', position: 'absolute', bottom: '40px', left: '50%', transform: 'translateX(-50%)', background: 'transparent', border: '2px solid green', borderRadius: '50%', width: '3rem', height: '3rem' }} onClick={startRecording} type=\"button\">\n           <i style={{ display: 'block', width: '5rem', height: '5rem', padding: '4px', background: 'green', borderRadius: '50%', margin: '1px auto' }}>s</i>\n       </button>\n            ) : null}\n            {recordingStatus === \"recording\" ? (\n           <button style={{ zIndex: '20', position: 'absolute', bottom: '40px', left: '50%', transform: 'translateX(-50%)', background: 'transparent', border: '2px solid red', borderRadius: '50%', width: '3rem', height: '3rem' }} onClick={stopRecording} type=\"button\">\n           <i style={{ display: 'block', width: '5rem', height: '5rem', padding: '4px', background: 'green', borderRadius: '50%', margin: '1px auto' }}>p</i>\n       </button>\n       \n            ) : null}\n{ recordingStatus === \"inactive\"  && <button style={{position:'absolute',zIndex:'20', top:'0', right:'0'}} type='button' onClick={switchCamera}> switchcam </button> }\n    </div>\n) : null}\n                    \n                { !permission && recordedVideo ? (\n        <div className=\"video-player\">\n            <video className='recorded-player' src={recordedVideo} controls autoPlay></video>\n            <a download href={recordedVideo}>\n                Download Recording\n            </a>\n        </div>\n        ) : null}\n    </main>\n</div>\n\n    );\n};\nexport default VideoRecorder;\n","import React, { useState, useRef } from \"react\";\nimport VideoRecorder from \"./VideoRecorder\";\nimport AudioRecorder from \"./AudioRecorder\";\n\nconst VideoUploader = () => {\n    let [recordOption, setRecordOption] = useState(\"video\");\n    const toggleRecordOption = (type) => {\n        return () => {\n            setRecordOption(type);\n        };\n    };\n\n\n    \n    return (\n        <div className='vrecorderbod'>\n            <h1>The wall</h1>\n            <div className=\"button-flex\">\n                <button onClick={toggleRecordOption(\"video\")}>\n                  Record Video\n                </button>\n                \n            </div>\n            <div>\n                {recordOption === \"video\" ? <VideoRecorder /> : <AudioRecorder />}\n            </div>\n        </div>\n    );\n};\nexport default VideoUploader;\n"],"names":["AudioRecorder","permission","setPermission","useState","stream","setStream","React","className","onClick","async","window","streamData","navigator","mediaDevices","getUserMedia","audio","video","err","alert","message","type","props","mimeType","recordingStatus","setRecordingStatus","videoChunks","setVideoChunks","facingMode","setFacingMode","liveVideoFeed","recordedVideo","setRecordedVideo","mediaRecorder","useEffect","current","srcObject","style","position","color","zIndex","ref","autoPlay","playsInline","bottom","left","transform","background","border","borderRadius","width","height","media","MediaRecorder","start","localVideoChunks","ondataavailable","event","data","size","push","display","padding","margin","stopRecording","stop","onstop","videoBlob","Blob","videoUrl","URL","createObjectURL","top","right","getTracks","forEach","track","getCameraPermission","src","controls","download","href","VideoUploader","recordOption","setRecordOption","VideoRecorder"],"sourceRoot":""}