{"version":3,"file":"component---src-pages-news-video-uploader-js-3c91169f50d4cb60a4e8.js","mappings":"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","sources":["webpack://blabzio/./src/pages/news/AudioRecorder.js","webpack://blabzio/./src/pages/news/VideoRecorder.js","webpack://blabzio/./src/pages/news/VideoUploader.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nconst AudioRecorder = () => {\n    const [permission, setPermission] = useState(false);\n    const [stream, setStream] = useState(null);\n\n    const getMicrophonePermission = async () => {\n        if (\"MediaRecorder\" in window) {\n            try {\n                const streamData = await navigator.mediaDevices.getUserMedia({\n                    audio: true,\n                    video: false,\n                });\n                setPermission(true);\n                setStream(streamData);\n            } catch (err) {\n                alert(err.message);\n            }\n        } else {\n            alert(\"The MediaRecorder API is not supported in your browser.\");\n        }\n    };\n    return (\n        <div>\n            <h2>Audio Recorder</h2>\n            <main>\n                <div className=\"audio-controls\">\n                    {!permission ? (\n                        <button onClick={getMicrophonePermission} type=\"button\">\n                            Get Microphone\n                        </button>\n                    ): null}\n                    {permission ? (\n                        <button type=\"button\">\n                            Record\n                        </button>\n                    ): null}\n                </div>\n            </main>\n        </div>\n    );\n};\nexport default AudioRecorder;\n","import React, { useEffect, useState, useRef } from \"react\";\n\nconst VideoRecorder = () => {\n    const mimeType = \"video/webm\";\n    \nconst [permission, setPermission] = useState(false);\nconst mediaRecorder = useRef(null);\nconst liveVideoFeed = useRef(null);\nconst [recordingStatus, setRecordingStatus] = useState(\"inactive\");\nconst [stream, setStream] = useState(null);\nconst [videoChunks, setVideoChunks] = useState([]);\nconst [recordedVideo, setRecordedVideo] = useState(null);\n  \n\nconst getCameraPermission = async () => {\n        setRecordedVideo(null);\n        if (\"MediaRecorder\" in window) {\n            try {\n                const videoConstraints = {\n                    audio: false,\n                    video: true,\n                };\n                const audioConstraints = { audio: true };\n                // create audio and video streams separately\n                const audioStream = await navigator.mediaDevices.getUserMedia(\n                    audioConstraints\n                );\n                const videoStream = await navigator.mediaDevices.getUserMedia(\n                    videoConstraints\n                );\n                setPermission(true);\n                // combine both audio and video streams\n                const combinedStream = new MediaStream([\n                    ...videoStream.getVideoTracks(),\n                    ...audioStream.getAudioTracks(),\n                ]);\n                setStream(combinedStream);\n            } catch (err) {\n                alert(err.message);\n            }\n        } else {\n            alert(\"The MediaRecorder API is not supported in your browser.\");\n        }\n    };\n\n    useEffect(() => {\n        if (permission && liveVideoFeed.current && stream) {\n            liveVideoFeed.current.srcObject = stream;\n        }\n    }, [permission, stream]);\n\nconst startRecording = async () => {\n    setRecordingStatus(\"recording\");\n    const media = new MediaRecorder(stream, { mimeType });\n    mediaRecorder.current = media;\n    mediaRecorder.current.start();\n    let localVideoChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n        if (typeof event.data === \"undefined\") return;\n        if (event.data.size === 0) return;\n        localVideoChunks.push(event.data);\n    };\n    setVideoChunks(localVideoChunks);\n};\n\nconst stopRecording = () => {\n    setPermission(false);\n    setRecordingStatus(\"inactive\");\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n        const videoBlob = new Blob(videoChunks, { type: mimeType });\n        const videoUrl = URL.createObjectURL(videoBlob);\n        setRecordedVideo(videoUrl);\n        setVideoChunks([]);\n    };\n};\n    \n    return (\n        <div>\n    <h2>Audio Recorder</h2>\n    <main>\n        <div className=\"video-controls\">\n            {!permission ? (\n            <button onClick={getCameraPermission} type=\"button\">\n                Get video\n            </button>\n            ) : null}\n            {permission && recordingStatus === \"inactive\" ? (\n            <button onClick={startRecording} type=\"button\">\n                Start Recording\n            </button>\n            ) : null}\n            {recordingStatus === \"recording\" ? (\n            <button onClick={stopRecording} type=\"button\">\n                Stop Recording\n            </button>\n            ) : null}\n        </div>\n\n                {permission && liveVideoFeed ? (\n    <div className=\"video-player\">\n        {  recordingStatus === 'recording' &&  <span style={{color:'red'}} > <ul><li style={{color:'red'}} className='recordmode'>{recordingStatus}</li></ul></span>}\n        <video ref={liveVideoFeed} autoPlay playsInline></video>\n    </div>\n) : null}\n\n                    \n                { !permission && recordedVideo ? (\n        <div className=\"video-player\">\n            <video src={recordedVideo} controls autoPlay></video>\n            <a download href={recordedVideo}>\n                Download Recording\n            </a>\n        </div>\n        ) : null}\n    </main>\n</div>\n\n    );\n};\nexport default VideoRecorder;\n","import React, { useState, useRef } from \"react\";\nimport VideoRecorder from \"./VideoRecorder\";\nimport AudioRecorder from \"./AudioRecorder\";\n\nconst VideoUploader = () => {\n    let [recordOption, setRecordOption] = useState(\"video\");\n    const toggleRecordOption = (type) => {\n        return () => {\n            setRecordOption(type);\n        };\n    };\n\n\n    \n    return (\n        <div className='vrecorderbod'>\n            <h1>React Media Recorder</h1>\n            <div className=\"button-flex\">\n                <button onClick={toggleRecordOption(\"video\")}>\n                  Record Video\n                </button>\n                <button onClick={toggleRecordOption(\"audio\")}>\n                  Record Audio\n                </button>\n            </div>\n            <div>\n                {recordOption === \"video\" ? <VideoRecorder /> : <AudioRecorder />}\n            </div>\n        </div>\n    );\n};\nexport default VideoUploader;\n"],"names":["AudioRecorder","permission","setPermission","useState","stream","setStream","React","className","onClick","async","window","streamData","navigator","mediaDevices","getUserMedia","audio","video","err","alert","message","type","VideoRecorder","mimeType","mediaRecorder","useRef","liveVideoFeed","recordingStatus","setRecordingStatus","videoChunks","setVideoChunks","recordedVideo","setRecordedVideo","useEffect","current","srcObject","videoConstraints","audioConstraints","audioStream","videoStream","combinedStream","MediaStream","concat","_toConsumableArray","getVideoTracks","getAudioTracks","media","MediaRecorder","start","localVideoChunks","ondataavailable","event","data","size","push","stopRecording","stop","onstop","videoBlob","Blob","videoUrl","URL","createObjectURL","style","color","ref","autoPlay","playsInline","src","controls","download","href","VideoUploader","recordOption","setRecordOption","toggleRecordOption"],"sourceRoot":""}