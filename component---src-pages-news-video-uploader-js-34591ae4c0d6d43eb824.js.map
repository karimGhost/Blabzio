{"version":3,"file":"component---src-pages-news-video-uploader-js-34591ae4c0d6d43eb824.js","mappings":"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","sources":["webpack://blabzio/./src/pages/news/AudioRecorder.js","webpack://blabzio/./src/pages/news/VideoRecorder.js","webpack://blabzio/./src/pages/news/VideoUploader.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nconst AudioRecorder = () => {\n    const [permission, setPermission] = useState(false);\n    const [stream, setStream] = useState(null);\n\n    const getMicrophonePermission = async () => {\n        if (\"MediaRecorder\" in window) {\n            try {\n                const streamData = await navigator.mediaDevices.getUserMedia({\n                    audio: true,\n                    video: false,\n                });\n                setPermission(true);\n                setStream(streamData);\n            } catch (err) {\n                alert(err.message);\n            }\n        } else {\n            alert(\"The MediaRecorder API is not supported in your browser.\");\n        }\n    };\n    return (\n        <div>\n            <h2>Audio Recorder</h2>\n            <main>\n                <div className=\"audio-controls\">\n                    {!permission ? (\n                        <button onClick={getMicrophonePermission} type=\"button\">\n                            Get Microphone\n                        </button>\n                    ): null}\n                    {permission ? (\n                        <button type=\"button\">\n                            Record\n                        </button>\n                    ): null}\n                </div>\n            </main>\n        </div>\n    );\n};\nexport default AudioRecorder;\n","import React, { useEffect, useState, useRef } from \"react\";\n\nconst VideoRecorder = () => {\n    const mimeType = \"video/webm\";\n    \nconst [permission, setPermission] = useState(false);\nconst mediaRecorder = useRef(null);\nconst liveVideoFeed = useRef(null);\nconst [recordingStatus, setRecordingStatus] = useState(\"inactive\");\nconst [stream, setStream] = useState(null);\nconst [videoChunks, setVideoChunks] = useState([]);\nconst [recordedVideo, setRecordedVideo] = useState(null);\n  \n\nconst [facingMode, setFacingMode] = useState(\"user\"); // \"user\" for front camera, \"environment\" for back camera\n\n  \n\n    \nconst getCameraPermission = async () => {\n  setRecordedVideo(null);\n  if (\"MediaRecorder\" in window) {\n    try {\n      const videoConstraints = {\n        audio: false,\n        video: {\n          facingMode: facingMode, // Use the current facingMode state here\n        },\n      };\n      const audioConstraints = { audio: true };\n      // create audio and video streams separately\n      const audioStream = await navigator.mediaDevices.getUserMedia(\n        audioConstraints\n      );\n      const videoStream = await navigator.mediaDevices.getUserMedia(\n        videoConstraints\n      );\n      setPermission(true);\n      // combine both audio and video streams\n      const combinedStream = new MediaStream([\n        ...videoStream.getVideoTracks(),\n        ...audioStream.getAudioTracks(),\n      ]);\n      setStream(combinedStream);\n    } catch (err) {\n      alert(err.message);\n    }\n  } else {\n    alert(\"The MediaRecorder API is not supported in your browser.\");\n  }\n};\n\n\n    useEffect(() => {\n        if (permission && liveVideoFeed.current && stream) {\n            liveVideoFeed.current.srcObject = stream;\n        }\n    }, [permission, stream]);\n    \nconst switchCamera = async () => {\n    if (stream) {\n      stream.getTracks().forEach((track) => track.stop());\n    }\n\n    const newFacingMode = facingMode === \"user\" ? \"environment\" : \"user\";\n    setFacingMode(newFacingMode);\n\n    await getCameraPermission();\n  };\n\nconst startRecording = async () => {\n    setRecordingStatus(\"recording\");\n    const media = new MediaRecorder(stream, { mimeType });\n    mediaRecorder.current = media;\n    mediaRecorder.current.start();\n    let localVideoChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n        if (typeof event.data === \"undefined\") return;\n        if (event.data.size === 0) return;\n        localVideoChunks.push(event.data);\n    };\n    setVideoChunks(localVideoChunks);\n};\n\nconst stopRecording = () => {\n    setPermission(false);\n    setRecordingStatus(\"inactive\");\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n        const videoBlob = new Blob(videoChunks, { type: mimeType });\n        const videoUrl = URL.createObjectURL(videoBlob);\n        setRecordedVideo(videoUrl);\n        setVideoChunks([]);\n    };\n};\n    \n    return (\n        <div>\n   <h2>The WALL</h2>\n    <main>\n        <div className=\"video-controls\">\n            {!permission ? (\n            <button onClick={getCameraPermission} type=\"button\">\n               open camera\n            </button>\n            ) : null}\n            \n        </div>\n\n                {permission && liveVideoFeed ? (\n    <div style={{position:'relative' }}  className=\"video-player\">\n        {  recordingStatus === 'recording' &&  <span style={{color:'red'}} > <ul><li style={{color:'red', position:'absolute',zIndex:'20'}} className='recordmode'>{recordingStatus}</li></ul></span>}\n\n    \n    \n    <video  className='live-player' ref={liveVideoFeed} autoPlay playsInline>\n    \n    \n    </video>\n    {permission && recordingStatus === \"inactive\" ? (\n            <button style={{zIndex:'20', position:'absolute', bottom:'0', color:'red' ,borderRadius:'50%',width:'2.5rem',height:'2.5rem', background:'transparent',border:'2px solid green',marginLeft:'auto',marginRight:'auto'}} onClick={startRecording} type=\"button\">\n               <i style={{marginLeft:'auto',marginRight:'auto', width:'2rem', height:'2rem',padding:'4px',background:'green',borderRadius:'50%'}}>s</i>\n            </button>\n            ) : null}\n            {recordingStatus === \"recording\" ? (\n            <button style={{zIndex:'20', position:'absolute', bottom:'0', color:'red' ,borderRadius:'50%',width:'2rem',height:'2rem', background:'transparent',border:'2px solid red',marginLeft:'auto',marginRight:'auto'}} onClick={stopRecording} type=\"button\">\n                <i style={{marginLeft:'auto',marginRight:'auto', width:'1.8rem', height:'1.8rem',padding:'4px',background:'green',borderRadius:'50%'}}>p</i>\n            </button>\n            ) : null}\n{ recordingStatus === \"inactive\"  && <button style={{position:'absolute',zIndex:'20', top:'0', right:'0'}} type='button' onClick={switchCamera}> switchcam </button> }\n    </div>\n) : null}\n                    \n                { !permission && recordedVideo ? (\n        <div className=\"video-player\">\n            <video className='recorded-player' src={recordedVideo} controls autoPlay></video>\n            <a download href={recordedVideo}>\n                Download Recording\n            </a>\n        </div>\n        ) : null}\n    </main>\n</div>\n\n    );\n};\nexport default VideoRecorder;\n","import React, { useState, useRef } from \"react\";\nimport VideoRecorder from \"./VideoRecorder\";\nimport AudioRecorder from \"./AudioRecorder\";\n\nconst VideoUploader = () => {\n    let [recordOption, setRecordOption] = useState(\"video\");\n    const toggleRecordOption = (type) => {\n        return () => {\n            setRecordOption(type);\n        };\n    };\n\n\n    \n    return (\n        <div className='vrecorderbod'>\n            <h1>The wall</h1>\n            <div className=\"button-flex\">\n                <button onClick={toggleRecordOption(\"video\")}>\n                  Record Video\n                </button>\n                \n            </div>\n            <div>\n                {recordOption === \"video\" ? <VideoRecorder /> : <AudioRecorder />}\n            </div>\n        </div>\n    );\n};\nexport default VideoUploader;\n"],"names":["AudioRecorder","permission","setPermission","useState","stream","setStream","React","className","onClick","async","window","streamData","navigator","mediaDevices","getUserMedia","audio","video","err","alert","message","type","VideoRecorder","mimeType","mediaRecorder","useRef","liveVideoFeed","recordingStatus","setRecordingStatus","videoChunks","setVideoChunks","recordedVideo","setRecordedVideo","facingMode","setFacingMode","getCameraPermission","videoConstraints","audioConstraints","audioStream","videoStream","combinedStream","MediaStream","concat","_toConsumableArray","getVideoTracks","getAudioTracks","useEffect","current","srcObject","style","position","color","zIndex","ref","autoPlay","playsInline","bottom","borderRadius","width","height","background","border","marginLeft","marginRight","media","MediaRecorder","start","localVideoChunks","ondataavailable","event","data","size","push","padding","stopRecording","stop","onstop","videoBlob","Blob","videoUrl","URL","createObjectURL","top","right","getTracks","forEach","track","src","controls","download","href","VideoUploader","recordOption","setRecordOption"],"sourceRoot":""}