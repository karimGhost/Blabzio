{"version":3,"file":"component---src-pages-news-video-uploader-js-062763546d3cd0eb218c.js","mappings":"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","sources":["webpack://blabzio/./src/Accounts/useAuth.js","webpack://blabzio/./src/pages/news/VideoUploader.js","webpack://blabzio/./node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport 'firebase/auth';\n\nimport 'firebase/database';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/database';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\n\nconst firebaseConfig2 = {\n\n  apiKey: \"AIzaSyAM5p7O6YuAvCxfDCbR48Duz019qkoVp0Y\",\n\n  authDomain: \"itsmynodezena.firebaseapp.com\",\n\n  databaseURL: \"https://itsmynodezena-default-rtdb.firebaseio.com\",\n\n  projectId: \"itsmynodezena\",\n\n  storageBucket: \"itsmynodezena.appspot.com\",\n\n  messagingSenderId: \"299392955521\",\n\n  appId: \"1:299392955521:web:ef5671ad2702d441304980\"\n\n};\n\nexport function useAuth() {\n\n\n  firebase.initializeApp(firebaseConfig2, 'app05');\n  const app05 = firebase.app('app05');\nconst apps = app05;\n\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState();\n\n  useEffect(() => {\n    const unsubscribe = app05.auth().onAuthStateChanged((firebaseUser) => {\n      if (firebaseUser) {\n        setUser(firebaseUser);\n        setLoading(true);\n      } else {\n        setUser(null);\n        setLoading(false);\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n\n\n  function signInWithEmailAndPassword(email, password) {\n    return app05.auth().signInWithEmailAndPassword(email, password);\n  }\n\n  function signOut() {\n   setUser(\"\")\n    return app05.auth().signOut();\n    \n  }\n\n  return { apps, user,setUser, app05, loading, signInWithEmailAndPassword, signOut };\n}","import React, { useState, useEffect, useRef } from 'react';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/database';\nimport { nanoid } from 'nanoid';\nimport videojs from 'video.js';\nimport RecordRTC from 'recordrtc';\nimport { useAuth } from '../../Accounts/useAuth';\nimport { Button } from 'primereact/button';\n\nconst firebaseConfig212121 = {\n  apiKey: \"AIzaSyChFGTB5YEugUKho-YqcWVZtKJG3PIrtt0\",\n\n  authDomain: \"thewall-10a4a.firebaseapp.com\",\n\n  databaseURL: \"https://thewall-10a4a-default-rtdb.firebaseio.com\",\n\n  projectId: \"thewall-10a4a\",\n\n  storageBucket: \"thewall-10a4a.appspot.com\",\n\n  messagingSenderId: \"221023885061\",\n\n  appId: \"1:221023885061:web:bc550d03edd2fbf60e496c\",\n\n  measurementId: \"G-7V80059NF7\"\n};\n\nfunction VideoUploader() {\n  firebase.initializeApp(firebaseConfig212121, 'app212121');\n  const hhh = firebase.app('app212121').database();\n  const { user } = useAuth();\n\n  const [isRecording, setIsRecording] = useState(false);\n  const [videoUrl, setVideoUrl] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n\n  const recorderRef = useRef(null);\n  const videoRef = useRef(null);\n\n  useEffect(() => {\n    // Fetch comments from Firebase RTDB\n    const commentsRef = hhh.ref('comments');\n    commentsRef.on('value', (snapshot) => {\n      const data = snapshot.val();\n      if (data) {\n        const commentsArray = Object.keys(data).map((key) => ({\n          id: key,\n          ...data[key],\n        }));\n        setComments(commentsArray);\n      }\n    });\n\n    // Cleanup the Firebase listener on unmount\n    return () => commentsRef.off('value');\n  }, [user, hhh]);\n\n  useEffect(() => {\n    // Initialize video.js player on videoRef\n    const player = videojs(videoRef.current, {}, () => {\n      // Player is ready\n    });\n\n    // Cleanup video.js player on unmount\n    return () => {\n      if (player) {\n        player.dispose();\n      }\n    };\n  }, []);\n\n  const handleRecord = async () => {\n    if (isRecording) {\n      // Stop recording\n      recorderRef.current.stopRecording(() => {\n        const blob = recorderRef.current.getBlob();\n        const url = URL.createObjectURL(blob);\n        setVideoUrl(url);\n      });\n      setIsRecording(false);\n    } else {\n      // Start recording\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true,\n      });\n      const recorder = new RecordRTC(stream, {\n        type: 'video',\n        mimeType: 'video/webm',\n      });\n      recorderRef.current = recorder;\n      recorder.startRecording();\n\n      // Continuously update the video element's srcObject while recording is in progress\n      const mediaStream = new MediaStream();\n      mediaStream.addTrack(stream.getVideoTracks()[0]);\n      mediaStream.addTrack(stream.getAudioTracks()[0]);\n      videoRef.current.srcObject = mediaStream;\n\n      setIsRecording(true);\n    }\n  };\n\n  const handlePublish = () => {\n    // Save the recorded video and its metadata to Firebase RTDB\n    const videoId = nanoid(); // Generate a unique ID for the video\n    const userId = user?.uid; // Get the user's ID from Firebase Auth\n\n    // Save the video data to Firebase RTDB\n    const videosRef = hhh.ref('videos');\n    videosRef.child(videoId).set({\n      videoUrl,\n      userId,\n      likes: 0,\n      dislikes: 0,\n      comments: [],\n    });\n\n    // Reset the video recorder state\n    setIsRecording(false);\n    setVideoUrl(null);\n  };\n\n  const handleAddComment = () => {\n    if (!user) {\n      return;\n    }\n\n    if (newComment.trim() !== '') {\n      const commentId = nanoid(); // Generate a unique ID for the comment\n      const userId = user.uid; // Get the user's ID from Firebase Auth\n      const commentData = {\n        text: newComment,\n        userId,\n        likes: 0,\n        dislikes: 0,\n        replies: [],\n      };\n      const commentsRef = hhh.ref('comments');\n      commentsRef.child(commentId).set(commentData);\n      setNewComment('');\n    }\n  };\n\n  const handleLikeComment = (commentId) => {\n    const updatedComments = comments.map((comment) => {\n      if (comment.id === commentId) {\n        return { ...comment, likes: comment.likes + 1 };\n      }\n      return comment;\n    });\n    setComments(updatedComments);\n    // Update the likes in the Firebase RTDB as well\n    const commentsRef = hhh.ref('comments');\n    commentsRef.child(commentId).update({ likes: firebase.database.ServerValue.increment(1) });\n  };\n\n  const handleDislikeComment = (commentId) => {\n    const updatedComments = comments.map((comment) => {\n      if (comment.id === commentId) {\n        return { ...comment, dislikes: comment.dislikes + 1 };\n      }\n      return comment;\n    });\n    setComments(updatedComments);\n    // Update the dislikes in the Firebase RTDB as well\n    const commentsRef = hhh.ref('comments');\n    commentsRef.child(commentId).update({ dislikes: firebase.database.ServerValue.increment(1) });\n  };\n\n  // Rest of the comment, replies, and replies handling logic\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"mb-4\">Video Recorder</h1>\n      <div className=\"mb-4\">\n        <video\n          ref={videoRef}\n          className=\"video-js vjs-default-skin\"\n          style={{ width: '100%', marginBottom: '10px' }}\n          controls\n        >\n          <source src={videoUrl} type=\"video/webm\" />\n        </video>\n        <div>\n          <Button variant=\"danger\" className=\"mr-2\" onClick={handleRecord}>\n            {isRecording ? 'Stop Recording' : 'Start Recording'}\n          </Button>\n          {videoUrl && (\n            <Button variant=\"success\" onClick={handlePublish}>\n              Publish Video\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Placeholder for comments, likes, and replies UI */}\n      <div className=\"comments-section\">\n        {/* Display the comments */}\n        {comments.map((comment) => (\n          <div key={comment.id} className=\"comment\">\n            <p>{comment.text}</p>\n            <div className=\"comment-actions\">\n              <Button variant=\"outline-primary\" onClick={() => handleLikeComment(comment.id)}>\n                Like ({comment.likes})\n              </Button>\n              <Button variant=\"outline-danger\" onClick={() => handleDislikeComment(comment.id)}>\n                Dislike ({comment.dislikes})\n              </Button>\n            </div>\n\n            {/* Display the replies */}\n            {comment.replies && comment.replies.length > 0 && (\n              <div className=\"replies\">\n                {comment.replies.map((reply) => (\n                  <div key={reply.id} className=\"reply\">\n                    <p>{reply.text}</p>\n                    {/* Add like/dislike functionality for replies if needed */}\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {/* Add reply functionality */}\n            <div className=\"add-reply\">\n              <input\n                type=\"text\"\n                placeholder=\"Add a reply...\"\n                value={newReply}\n                onChange={(e) => setNewReply(e.target.value)}\n              />\n              <Button variant=\"outline-primary\" onClick={() => handleAddReply(comment.id, newReply)}>\n                Add Reply\n              </Button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default VideoUploader;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["firebaseConfig2","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","useAuth","firebase","initializeApp","app05","app","apps","user","setUser","useState","loading","setLoading","useEffect","unsubscribe","auth","onAuthStateChanged","firebaseUser","signInWithEmailAndPassword","email","password","signOut","firebaseConfig212121","measurementId","hhh","database","isRecording","setIsRecording","videoUrl","setVideoUrl","comments","setComments","newComment","setNewComment","recorderRef","useRef","videoRef","commentsRef","ref","on","snapshot","data","val","commentsArray","Object","keys","map","key","id","off","player","videojs","current","dispose","React","className","style","width","marginBottom","controls","src","type","Button","variant","onClick","async","stopRecording","blob","getBlob","url","URL","createObjectURL","stream","navigator","mediaDevices","getUserMedia","audio","video","recorder","RecordRTC","mimeType","startRecording","mediaStream","MediaStream","addTrack","getVideoTracks","getAudioTracks","srcObject","handlePublish","videoId","nanoid","userId","uid","child","set","likes","dislikes","comment","text","commentId","updatedComments","update","ServerValue","increment","handleLikeComment","handleDislikeComment","replies","length","reply","placeholder","value","newReply","onChange","e","setNewReply","target","handleAddReply","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}