{"version":3,"file":"component---src-pages-news-video-recorder-js-e3fdcfb94f3cb23b39c7.js","mappings":"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","sources":["webpack://blabzio/./src/pages/news/VideoRecorder.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nconst VideoRecorder = () => {\n    const mimeType = \"video/webm\";\n    \nconst [permission, setPermission] = useState(false);\nconst mediaRecorder = useRef(null);\nconst liveVideoFeed = useRef(null);\nconst [recordingStatus, setRecordingStatus] = useState(\"inactive\");\nconst [stream, setStream] = useState(null);\nconst [videoChunks, setVideoChunks] = useState([]);\nconst [recordedVideo, setRecordedVideo] = useState(null);\n  \n\nconst [facingMode, setFacingMode] = useState(\"user\"); // \"user\" for front camera, \"environment\" for back camera\n\n  \n\n    \nconst getCameraPermission = async () => {\n  setRecordedVideo(null);\n  if (\"MediaRecorder\" in window) {\n    try {\n      const videoConstraints = {\n        audio: true,\n        video: {\n          facingMode: facingMode, // Use the current facingMode state here\n        },\n      };\n      const audioConstraints = { audio: true };\n      // create audio and video streams separately\n      const audioStream = await navigator.mediaDevices.getUserMedia(\n        audioConstraints\n      );\n      const videoStream = await navigator.mediaDevices.getUserMedia(\n        videoConstraints\n      );\n      setPermission(true);\n      // combine both audio and video streams\n      const combinedStream = new MediaStream([\n        ...videoStream.getVideoTracks()\n       /* ...audioStream.getAudioTracks(),*/\n      ]);\n      setStream(combinedStream);\n    } catch (err) {\n      alert(err.message);\n    }\n  } else {\n    alert(\"The MediaRecorder API is not supported in your browser.\");\n  }\n};\n\n\n    useEffect(() => {\n        if (permission && liveVideoFeed.current && stream) {\n            liveVideoFeed.current.srcObject = stream;\n        }\n    }, [permission, stream]);\n    \nconst switchCamera = async () => {\n    if (stream) {\n      stream.getTracks().forEach((track) => track.stop());\n    }\n\n    const newFacingMode = facingMode === \"user\" ? \"environment\" : \"user\";\n    setFacingMode(newFacingMode);\n\n    await getCameraPermission();\n  };\n\nconst startRecording = async () => {\n    setRecordingStatus(\"recording\");\n    const media = new MediaRecorder(stream, { mimeType });\n    mediaRecorder.current = media;\n    mediaRecorder.current.start();\n    let localVideoChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n        if (typeof event.data === \"undefined\") return;\n        if (event.data.size === 0) return;\n        localVideoChunks.push(event.data);\n    };\n    setVideoChunks(localVideoChunks);\n};\n\nconst stopRecording = () => {\n    setPermission(false);\n    setRecordingStatus(\"inactive\");\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n        const videoBlob = new Blob(videoChunks, { type: mimeType });\n        const videoUrl = URL.createObjectURL(videoBlob);\n        setRecordedVideo(videoUrl);\n        setVideoChunks([]);\n    };\n};\n    \n    return (\n        <div>\n   \n    <main>\n        <div className=\"video-controls\">\n            {!permission ? (\n            <button onClick={getCameraPermission} type=\"button\">\n               open camera\n            </button>\n            ) : null}\n            \n        </div>\n\n                {permission && liveVideoFeed ? (\n    <div style={{position:'relative' }}  className=\"video-player\">\n        {  recordingStatus === 'recording' &&  <span style={{color:'red'}} > <ul><li style={{color:'red', position:'absolute',zIndex:'20'}} className='recordmode'>{recordingStatus}</li></ul></span>}\n\n    \n    \n    <video  className='live-player' ref={liveVideoFeed} autoPlay playsInline>\n    \n    \n    </video>\n    {permission && recordingStatus === \"inactive\" ? (\n            <button style={{zIndex:'20', position:'absolute', bottom:'0', color:'red' ,borderRadius:'50%',width:'4.5rem',height:'4.5rem', background:'transparent',border:'2px solid green',marginLeft:'20%',marginRight:'20%'}} onClick={startRecording} type=\"button\">\n               <i style={{marginLeft:'20%',marginRight:'20%', width:'4rem', height:'4rem',padding:'4px',background:'green',borderRadius:'50%'}}>s</i>\n            </button>\n            ) : null}\n            {recordingStatus === \"recording\" ? (\n            <button style={{zIndex:'20', position:'absolute', bottom:'0', color:'red' ,borderRadius:'50%',width:'4rem',height:'4rem', background:'transparent',border:'2px solid red',marginLeft:'20%',marginRight:'20%'}} onClick={stopRecording} type=\"button\">\n                <i style={{marginLeft:'20%',marginRight:'20%', width:'3.8rem', height:'3.8rem',padding:'4px',background:'green',borderRadius:'50%'}}>p</i>\n            </button>\n            ) : null}\n{ recordingStatus === \"inactive\"  && <button style={{position:'absolute',zIndex:'20', top:'0', right:'0'}} type='button' onClick={switchCamera}> switchcam </button> }\n    </div>\n) : null}\n                    \n                { !permission && recordedVideo ? (\n        <div className=\"video-player\">\n            <video className='recorded-player' src={recordedVideo} controls autoPlay></video>\n            <a download href={recordedVideo}>\n                Download Recording\n            </a>\n        </div>\n        ) : null}\n    </main>\n</div>\n\n    );\n};\nexport default VideoRecorder;\n"],"names":["VideoRecorder","mimeType","permission","setPermission","useState","mediaRecorder","useRef","liveVideoFeed","recordingStatus","setRecordingStatus","stream","setStream","videoChunks","setVideoChunks","recordedVideo","setRecordedVideo","facingMode","setFacingMode","getCameraPermission","async","window","videoConstraints","audio","video","audioConstraints","videoStream","navigator","mediaDevices","getUserMedia","combinedStream","MediaStream","_toConsumableArray","getVideoTracks","err","alert","message","useEffect","current","srcObject","React","className","onClick","type","style","position","color","zIndex","ref","autoPlay","playsInline","bottom","borderRadius","width","height","background","border","marginLeft","marginRight","media","MediaRecorder","start","localVideoChunks","ondataavailable","event","data","size","push","padding","stopRecording","stop","onstop","videoBlob","Blob","videoUrl","URL","createObjectURL","top","right","getTracks","forEach","track","src","controls","download","href"],"sourceRoot":""}