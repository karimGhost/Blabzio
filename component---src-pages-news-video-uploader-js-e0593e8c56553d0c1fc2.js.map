{"version":3,"file":"component---src-pages-news-video-uploader-js-e0593e8c56553d0c1fc2.js","mappings":"gJA6DA,UA1DA,WACE,MAAM,EAACA,EAAU,EAACC,IAAgBC,EAAAA,EAAAA,WAAS,IACrC,EAACC,EAAY,EAACC,IAAkBF,EAAAA,EAAAA,UAAS,OACzC,EAACG,EAAa,EAACC,IAAmBJ,EAAAA,EAAAA,UAAS,MAgCjD,OACEK,EAAAA,cAAA,WACEA,EAAAA,cAAA,UAAI,iCACHP,EACCO,EAAAA,cAAA,SAAG,gBAEHA,EAAAA,cAAA,UAAQC,QApCSC,UACrB,IACE,MAAMC,QAAeC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAMC,OAAO,IAC/EX,EAAeM,GAEf,MAAMM,EAAW,IAAIC,IAAJ,CAAcP,EAAQ,CAAEQ,KAAM,UAC/CF,EAASG,iBACTlB,GAAa,GAGbmB,YAAW,KACTJ,EAASK,eAAc,KACrBpB,GAAa,GACbK,EAAgBU,EAASM,WACzBZ,EAAOa,YAAYC,SAAQC,GAASA,EAAMC,QAAO,GACjD,GACD,IACL,CAAE,MAAOC,GACPC,QAAQD,MAAM,4BAA6BA,EAC7C,IAiBqC,mBAGlCxB,GACCI,EAAAA,cAAA,SAAOsB,IAAKC,IAAIC,gBAAgB5B,GAAc6B,UAAQ,EAACC,OAAK,IAG7D5B,GACCE,EAAAA,cAAA,WACEA,EAAAA,cAAA,UAAQC,QAvBS0B,KACvB,GAAI7B,EAAc,CAChB,MAAM8B,EAAeC,SAASC,eAAe,kBAC7CF,EAAaN,IAAMC,IAAIC,gBAAgB1B,GACvC8B,EAAaG,MACf,IAkByC,uBACnC/B,EAAAA,cAAA,SAAOgC,GAAG,iBAAiBC,UAAQ,KAK7C,C","sources":["webpack://blabzio/./src/pages/news/VideoUploader.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport RecordRTC from \"recordrtc\";\n\nfunction VideoUploader() {\n  const [recording, setRecording] = useState(false);\n  const [mediaStream, setMediaStream] = useState(null);\n  const [recordedBlob, setRecordedBlob] = useState(null);\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n      setMediaStream(stream);\n\n      const recorder = new RecordRTC(stream, { type: \"video\" });\n      recorder.startRecording();\n      setRecording(true);\n\n      // Stop recording after 10 seconds (adjust as needed)\n      setTimeout(() => {\n        recorder.stopRecording(() => {\n          setRecording(false);\n          setRecordedBlob(recorder.getBlob());\n          stream.getTracks().forEach(track => track.stop());\n        });\n      }, 40000);\n    } catch (error) {\n      console.error(\"Error starting recording:\", error);\n    }\n  };\n\n  const playRecordedBlob = () => {\n    if (recordedBlob) {\n      const videoElement = document.getElementById(\"recorded-video\");\n      videoElement.src = URL.createObjectURL(recordedBlob);\n      videoElement.play();\n    }\n  };\n\n  return (\n    <div>\n      <h2>Video Recorder with RecordRTC</h2>\n      {recording ? (\n        <p>Recording...</p>\n      ) : (\n        <button onClick={startRecording}>Start Recording</button>\n      )}\n\n      {mediaStream && (\n        <video src={URL.createObjectURL(mediaStream)} autoPlay muted />\n      )}\n\n      {recordedBlob && (\n        <div>\n          <button onClick={playRecordedBlob}>Play Recorded Video</button>\n          <video id=\"recorded-video\" controls />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default VideoUploader;\n"],"names":["recording","setRecording","useState","mediaStream","setMediaStream","recordedBlob","setRecordedBlob","React","onClick","async","stream","navigator","mediaDevices","getUserMedia","audio","video","recorder","RecordRTC","type","startRecording","setTimeout","stopRecording","getBlob","getTracks","forEach","track","stop","error","console","src","URL","createObjectURL","autoPlay","muted","playRecordedBlob","videoElement","document","getElementById","play","id","controls"],"sourceRoot":""}