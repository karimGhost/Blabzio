{"version":3,"file":"component---src-pages-news-video-uploader-js-7232fe547c66c07f16f6.js","mappings":"uIAyCA,UAxCsBA,KAClB,MAAM,EAACC,EAAW,EAACC,IAAiBC,EAAAA,EAAAA,WAAS,IACvC,EAACC,EAAO,EAACC,IAAaF,EAAAA,EAAAA,UAAS,MAkBrC,OACIG,EAAAA,cAAA,WACIA,EAAAA,cAAA,UAAI,kBACJA,EAAAA,cAAA,YACIA,EAAAA,cAAA,OAAKC,UAAU,kBACTN,EAIC,KAHCK,EAAAA,cAAA,UAAQE,QAtBIC,UAC5B,GAAI,kBAAmBC,OACnB,IACI,MAAMC,QAAmBC,UAAUC,aAAaC,aAAa,CACzDC,OAAO,EACPC,OAAO,IAEXd,GAAc,GACdG,EAAUM,EACd,CAAE,MAAOM,GACLC,MAAMD,EAAIE,QACd,MAEAD,MAAM,0DACV,EAQ0DE,KAAK,UAAS,kBAI3DnB,EACGK,EAAAA,cAAA,UAAQc,KAAK,UAAS,UAGvB,OAGT,C,sDC6Ed,UAjHsBC,KAClB,MAAMC,EAAW,cAEf,EAACrB,EAAW,EAACC,IAAiBC,EAAAA,EAAAA,WAAS,GACvCoB,GAAgBC,EAAAA,EAAAA,QAAO,MACvBC,GAAgBD,EAAAA,EAAAA,QAAO,OACvB,EAACE,EAAgB,EAACC,IAAsBxB,EAAAA,EAAAA,UAAS,aACjD,EAACC,EAAO,EAACC,IAAaF,EAAAA,EAAAA,UAAS,OAC/B,EAACyB,EAAY,EAACC,IAAkB1B,EAAAA,EAAAA,UAAS,KACzC,EAAC2B,EAAc,EAACC,IAAoB5B,EAAAA,EAAAA,UAAS,MA8D/C,OACIG,EAAAA,cAAA,WACJA,EAAAA,cAAA,UAAI,kBACJA,EAAAA,cAAA,YACIA,EAAAA,cAAA,OAAKC,UAAU,kBACTN,EAIE,KAHJK,EAAAA,cAAA,UAAQE,QAjEQC,UAExB,GADAsB,EAAiB,MACb,kBAAmBrB,OACnB,IACI,MAAMsB,EAAmB,CACrBjB,OAAO,EACPC,OAAO,GAELiB,EAAmB,CAAElB,OAAO,GAE5BmB,QAAoBtB,UAAUC,aAAaC,aAC7CmB,GAEEE,QAAoBvB,UAAUC,aAAaC,aAC7CkB,GAEJ9B,GAAc,GAEd,MAAMkC,EAAiB,IAAIC,YAAY,GAADC,QAAAC,EAAAA,EAAAA,GAC/BJ,EAAYK,mBAAgBD,EAAAA,EAAAA,GAC5BL,EAAYO,oBAEnBpC,EAAU+B,GAEVX,EAAciB,QAAQC,UAAYP,CACtC,CAAE,MAAOnB,GACLC,MAAMD,EAAIE,QACd,MAEAD,MAAM,0DACV,EAmC8CE,KAAK,UAAS,aAInDnB,GAAkC,aAApByB,EACfpB,EAAAA,cAAA,UAAQE,QArCGC,UACnBkB,EAAmB,aACnB,MAAMiB,EAAQ,IAAIC,cAAczC,EAAQ,CAAEkB,aAC1CC,EAAcmB,QAAUE,EACxBrB,EAAcmB,QAAQI,QACtB,IAAIC,EAAmB,GACvBxB,EAAcmB,QAAQM,gBAAmBC,SACX,IAAfA,EAAMC,MACO,IAApBD,EAAMC,KAAKC,MACfJ,EAAiBK,KAAKH,EAAMC,KAAK,EAErCrB,EAAekB,EAAiB,EA0BS3B,KAAK,UAAS,mBAG3C,KACiB,cAApBM,EACDpB,EAAAA,cAAA,UAAQE,QA5BE6C,KAClBnD,GAAc,GACdyB,EAAmB,YACnBJ,EAAcmB,QAAQY,OACtB/B,EAAcmB,QAAQa,OAAS,KAC3B,MAAMC,EAAY,IAAIC,KAAK7B,EAAa,CAAER,KAAME,IAC1CoC,EAAWC,IAAIC,gBAAgBJ,GACrCzB,EAAiB2B,GACjB7B,EAAe,GAAG,CACrB,EAmBuCT,KAAK,UAAS,kBAG1C,MAGCnB,GAAcwB,EAC3BnB,EAAAA,cAAA,OAAKC,UAAU,gBACXD,EAAAA,cAAA,SAAOuD,IAAKpC,EAAeqC,UAAQ,EAACC,aAAW,KAEnD,MAGe9D,GAAc6B,EACzBxB,EAAAA,cAAA,OAAKC,UAAU,gBACXD,EAAAA,cAAA,SAAO0D,IAAKlC,IACZxB,EAAAA,cAAA,KAAG2D,UAAQ,EAACC,KAAMpC,GAAe,uBAIjC,MAEN,C,4DCnFN,UAAeT,EAAa,O","sources":["webpack://blabzio/./src/pages/news/AudioRecorder.js","webpack://blabzio/./src/pages/news/VideoRecorder.js","webpack://blabzio/./src/pages/news/VideoUploader.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nconst AudioRecorder = () => {\n    const [permission, setPermission] = useState(false);\n    const [stream, setStream] = useState(null);\n\n    const getMicrophonePermission = async () => {\n        if (\"MediaRecorder\" in window) {\n            try {\n                const streamData = await navigator.mediaDevices.getUserMedia({\n                    audio: true,\n                    video: false,\n                });\n                setPermission(true);\n                setStream(streamData);\n            } catch (err) {\n                alert(err.message);\n            }\n        } else {\n            alert(\"The MediaRecorder API is not supported in your browser.\");\n        }\n    };\n    return (\n        <div>\n            <h2>Audio Recorder</h2>\n            <main>\n                <div className=\"audio-controls\">\n                    {!permission ? (\n                        <button onClick={getMicrophonePermission} type=\"button\">\n                            Get Microphone\n                        </button>\n                    ): null}\n                    {permission ? (\n                        <button type=\"button\">\n                            Record\n                        </button>\n                    ): null}\n                </div>\n            </main>\n        </div>\n    );\n};\nexport default AudioRecorder;\n","import React, { useState, useRef } from \"react\";\n\nconst VideoRecorder = () => {\n    const mimeType = \"video/webm\";\n    \nconst [permission, setPermission] = useState(false);\nconst mediaRecorder = useRef(null);\nconst liveVideoFeed = useRef(null);\nconst [recordingStatus, setRecordingStatus] = useState(\"inactive\");\nconst [stream, setStream] = useState(null);\nconst [videoChunks, setVideoChunks] = useState([]);\nconst [recordedVideo, setRecordedVideo] = useState(null);\n  \n\nconst getCameraPermission = async () => {\n    setRecordedVideo(null);\n    if (\"MediaRecorder\" in window) {\n        try {\n            const videoConstraints = {\n                audio: false,\n                video: true,\n            };\n            const audioConstraints = { audio: true };\n            // create audio and video streams separately\n            const audioStream = await navigator.mediaDevices.getUserMedia(\n                audioConstraints\n            );\n            const videoStream = await navigator.mediaDevices.getUserMedia(\n                videoConstraints\n            );\n            setPermission(true);\n            //combine both audio and video streams\n            const combinedStream = new MediaStream([\n                ...videoStream.getVideoTracks(),\n                ...audioStream.getAudioTracks(),\n            ]);\n            setStream(combinedStream);\n            //set videostream to live feed player\n            liveVideoFeed.current.srcObject = combinedStream;\n        } catch (err) {\n            alert(err.message);\n        }\n    } else {\n        alert(\"The MediaRecorder API is not supported in your browser.\");\n    }\n};\n\nconst startRecording = async () => {\n    setRecordingStatus(\"recording\");\n    const media = new MediaRecorder(stream, { mimeType });\n    mediaRecorder.current = media;\n    mediaRecorder.current.start();\n    let localVideoChunks = [];\n    mediaRecorder.current.ondataavailable = (event) => {\n        if (typeof event.data === \"undefined\") return;\n        if (event.data.size === 0) return;\n        localVideoChunks.push(event.data);\n    };\n    setVideoChunks(localVideoChunks);\n};\n\nconst stopRecording = () => {\n    setPermission(false);\n    setRecordingStatus(\"inactive\");\n    mediaRecorder.current.stop();\n    mediaRecorder.current.onstop = () => {\n        const videoBlob = new Blob(videoChunks, { type: mimeType });\n        const videoUrl = URL.createObjectURL(videoBlob);\n        setRecordedVideo(videoUrl);\n        setVideoChunks([]);\n    };\n};\n    \n    return (\n        <div>\n    <h2>Audio Recorder</h2>\n    <main>\n        <div className=\"video-controls\">\n            {!permission ? (\n            <button onClick={getCameraPermission} type=\"button\">\n                Get video\n            </button>\n            ) : null}\n            {permission && recordingStatus === \"inactive\" ? (\n            <button onClick={startRecording} type=\"button\">\n                Start Recording\n            </button>\n            ) : null}\n            {recordingStatus === \"recording\" ? (\n            <button onClick={stopRecording} type=\"button\">\n                Stop Recording\n            </button>\n            ) : null}\n        </div>\n\n                {permission && liveVideoFeed ? (\n    <div className=\"video-player\">\n        <video ref={liveVideoFeed} autoPlay playsInline></video>\n    </div>\n) : null}\n\n                    \n                { !permission && recordedVideo ? (\n        <div className=\"video-player\">\n            <video src={recordedVideo} ></video>\n            <a download href={recordedVideo}>\n                Download Recording\n            </a>\n        </div>\n        ) : null}\n    </main>\n</div>\n\n    );\n};\nexport default VideoRecorder;\n","import React, { useState, useRef } from \"react\";\nimport VideoRecorder from \"./VideoRecorder\";\nimport AudioRecorder from \"./AudioRecorder\";\n\nconst VideoUploader = () => {\n    let [recordOption, setRecordOption] = useState(\"video\");\n    const toggleRecordOption = (type) => {\n        return () => {\n            setRecordOption(type);\n        };\n    };\n    return (\n        <div>\n            <h1>React Media Recorder</h1>\n            <div className=\"button-flex\">\n                <button onClick={toggleRecordOption(\"video\")}>\n                  Record Video\n                </button>\n                <button onClick={toggleRecordOption(\"audio\")}>\n                  Record Audio\n                </button>\n            </div>\n            <div>\n                {recordOption === \"video\" ? <VideoRecorder /> : <AudioRecorder />}\n            </div>\n        </div>\n    );\n};\nexport default VideoRecorder;\n"],"names":["AudioRecorder","permission","setPermission","useState","stream","setStream","React","className","onClick","async","window","streamData","navigator","mediaDevices","getUserMedia","audio","video","err","alert","message","type","VideoRecorder","mimeType","mediaRecorder","useRef","liveVideoFeed","recordingStatus","setRecordingStatus","videoChunks","setVideoChunks","recordedVideo","setRecordedVideo","videoConstraints","audioConstraints","audioStream","videoStream","combinedStream","MediaStream","concat","_toConsumableArray","getVideoTracks","getAudioTracks","current","srcObject","media","MediaRecorder","start","localVideoChunks","ondataavailable","event","data","size","push","stopRecording","stop","onstop","videoBlob","Blob","videoUrl","URL","createObjectURL","ref","autoPlay","playsInline","src","download","href"],"sourceRoot":""}